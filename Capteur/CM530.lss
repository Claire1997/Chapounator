
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flashtext    00000000  08003134  08003134  00008018  2**0
                  CONTENTS
  2 .text         00002d60  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000018  20000000  08005e94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000204  20000018  08005eac  00008018  2**2
                  ALLOC
  5 ._usrstack    00000100  2000021c  080060b0  00008018  2**0
                  ALLOC
  6 .comment      00000070  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000080c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000860a  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000189a  00000000  00000000  00010892  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000016ab  00000000  00000000  0001212c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001cfc  00000000  00000000  000137d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003004  00000000  00000000  000154d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005108  00000000  00000000  000184d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000068  00000000  00000000  0001d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	andcs	r0, r1, r0
 8003004:	08005b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp, ip, lr}
 8003008:	08003a69 	stmdaeq	r0, {r0, r3, r5, r6, r9, fp, ip, sp}
 800300c:	08003a6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, fp, ip, sp}
 8003010:	08003a6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, fp, ip, sp}
 8003014:	08003a6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r9, fp, ip, sp}
 8003018:	08003a71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp, ip, sp}
	...
 800302c:	08003a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, ip, sp}
 8003030:	08003a73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, fp, ip, sp}
 8003034:	00000000 	andeq	r0, r0, r0
 8003038:	08003a77 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r9, fp, ip, sp}
 800303c:	08003a79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, fp, ip, sp}
 8003040:	08003a7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, fp, ip, sp}
 8003044:	08003a7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r9, fp, ip, sp}
 8003048:	08003a81 	stmdaeq	r0, {r0, r7, r9, fp, ip, sp}
 800304c:	08003a83 	stmdaeq	r0, {r0, r1, r7, r9, fp, ip, sp}
 8003050:	08003a85 	stmdaeq	r0, {r0, r2, r7, r9, fp, ip, sp}
 8003054:	08003a87 	stmdaeq	r0, {r0, r1, r2, r7, r9, fp, ip, sp}
 8003058:	08003a89 	stmdaeq	r0, {r0, r3, r7, r9, fp, ip, sp}
 800305c:	08003a8b 	stmdaeq	r0, {r0, r1, r3, r7, r9, fp, ip, sp}
 8003060:	08003a8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, fp, ip, sp}
 8003064:	08003a8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, fp, ip, sp}
 8003068:	08003a91 	stmdaeq	r0, {r0, r4, r7, r9, fp, ip, sp}
	...
 8003088:	08003aa1 	stmdaeq	r0, {r0, r5, r7, r9, fp, ip, sp}
 800308c:	08003aa3 	stmdaeq	r0, {r0, r1, r5, r7, r9, fp, ip, sp}
 8003090:	08003aa5 	stmdaeq	r0, {r0, r2, r5, r7, r9, fp, ip, sp}
 8003094:	08003aa7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r9, fp, ip, sp}
 8003098:	08003aa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, ip, sp}
 800309c:	08003aab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, fp, ip, sp}
 80030a0:	08003aad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, fp, ip, sp}
 80030a4:	08003aaf 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, fp, ip, sp}
 80030a8:	08003ab1 	stmdaeq	r0, {r0, r4, r5, r7, r9, fp, ip, sp}
 80030ac:	08003ab3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r9, fp, ip, sp}
 80030b0:	08003ab5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, fp, ip, sp}
 80030b4:	08003ab9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, fp, ip, sp}
 80030b8:	08003abb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r9, fp, ip, sp}
 80030bc:	08003abd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, fp, ip, sp}
 80030c0:	08003abf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r9, fp, ip, sp}
 80030c4:	08003ac1 	stmdaeq	r0, {r0, r6, r7, r9, fp, ip, sp}
 80030c8:	08003ac3 	stmdaeq	r0, {r0, r1, r6, r7, r9, fp, ip, sp}
 80030cc:	08003ac5 	stmdaeq	r0, {r0, r2, r6, r7, r9, fp, ip, sp}
 80030d0:	08003ac7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r9, fp, ip, sp}
 80030d4:	08003ac9 	stmdaeq	r0, {r0, r3, r6, r7, r9, fp, ip, sp}
 80030d8:	08003acd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, ip, sp}
 80030dc:	08003acf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r9, fp, ip, sp}
 80030e0:	08003ad1 	stmdaeq	r0, {r0, r4, r6, r7, r9, fp, ip, sp}
 80030e4:	08003ad3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r9, fp, ip, sp}
 80030e8:	08003ad5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp, ip, sp}
 80030ec:	08003ad7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r9, fp, ip, sp}
 80030f0:	08003ad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, ip, sp}
 80030f4:	08003adb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r9, fp, ip, sp}
 80030f8:	08003add 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp, ip, sp}
 80030fc:	08003adf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, fp, ip, sp}
 8003100:	08003ae1 	stmdaeq	r0, {r0, r5, r6, r7, r9, fp, ip, sp}
 8003104:	08003ae3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, fp, ip, sp}
 8003108:	08003ae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, ip, sp}
 800310c:	08003ae7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r9, fp, ip, sp}
 8003110:	08003ae9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, fp, ip, sp}
 8003114:	08003aeb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r9, fp, ip, sp}
 8003118:	08003aed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, fp, ip, sp}
 800311c:	08003aef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, fp, ip, sp}
 8003120:	08003af1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, fp, ip, sp}
 8003124:	08003af3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, fp, ip, sp}
 8003128:	08003af5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, fp, ip, sp}
 800312c:	08003af7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r9, fp, ip, sp}
 8003130:	0000f85f 	andeq	pc, r0, pc, asr r8	; <UNPREDICTABLE>

Disassembly of section .text:

08003134 <centerInfraRed>:
}

// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
 8003134:	b510      	push	{r4, lr}
 8003136:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
 8003138:	211b      	movs	r1, #27
 800313a:	f000 fe79 	bl	8003e30 <dxl_read_byte>
 800313e:	7020      	strb	r0, [r4, #0]
  //    {
  //      TxDString("\nproblem, code=");
  //      TxDWord16(result);
  //      TxDString("!!!\n");
  //   }
}
 8003140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
   int result =  dxl_get_result();
 8003144:	f000 be28 	b.w	8003d98 <dxl_get_result>

08003148 <centerLuminosity>:
}

// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
 8003148:	b510      	push	{r4, lr}
 800314a:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
 800314c:	211e      	movs	r1, #30
 800314e:	f000 fe6f 	bl	8003e30 <dxl_read_byte>
 8003152:	7020      	strb	r0, [r4, #0]
  //    {
  //      TxDString("\nproblem, code=");
  //      TxDWord16(result);
  //      TxDString("!!!\n");
  //    }
}
 8003154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
   int result =  dxl_get_result();
 8003158:	f000 be1e 	b.w	8003d98 <dxl_get_result>

0800315c <RCC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RCC_Configuration(void)
{
 800315c:	b510      	push	{r4, lr}
  ErrorStatus HSEStartUpStatus;
  /* RCC system reset(for debug purpose) */
  RCC_DeInit();
 800315e:	f001 fc15 	bl	800498c <RCC_DeInit>

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
 8003162:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003166:	f001 fc2f 	bl	80049c8 <RCC_HSEConfig>

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 800316a:	f001 fd7d 	bl	8004c68 <RCC_WaitForHSEStartUp>

  if(HSEStartUpStatus == SUCCESS)
 800316e:	2801      	cmp	r0, #1

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003170:	4604      	mov	r4, r0

  if(HSEStartUpStatus == SUCCESS)
 8003172:	d00d      	beq.n	8003190 <RCC_Configuration+0x34>
    }

  /* Enable peripheral clocks --------------------------------------------------*/

  /* Enable USART1 and GPIOB clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);
 8003174:	f244 0008 	movw	r0, #16392	; 0x4008
 8003178:	2101      	movs	r1, #1
 800317a:	f001 fd1f 	bl	8004bbc <RCC_APB2PeriphClockCmd>

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);
 800317e:	4817      	ldr	r0, [pc, #92]	; (80031dc <RCC_Configuration+0x80>)
 8003180:	2101      	movs	r1, #1
 8003182:	f001 fd27 	bl	8004bd4 <RCC_APB1PeriphClockCmd>

  PWR_BackupAccessCmd(ENABLE);
}
 8003186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);

  PWR_BackupAccessCmd(ENABLE);
 800318a:	2001      	movs	r0, #1
 800318c:	f001 bba7 	b.w	80048de <PWR_BackupAccessCmd>
  HSEStartUpStatus = RCC_WaitForHSEStartUp();

  if(HSEStartUpStatus == SUCCESS)
    {
      /* Enable Prefetch Buffer */
      FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8003190:	2010      	movs	r0, #16
 8003192:	f000 feb9 	bl	8003f08 <FLASH_PrefetchBufferCmd>

      /* Flash 2 wait state */
      FLASH_SetLatency(FLASH_Latency_2);
 8003196:	2002      	movs	r0, #2
 8003198:	f000 fe9e 	bl	8003ed8 <FLASH_SetLatency>

      /* HCLK = SYSCLK */
      RCC_HCLKConfig(RCC_SYSCLK_Div1);
 800319c:	2000      	movs	r0, #0
 800319e:	f001 fc61 	bl	8004a64 <RCC_HCLKConfig>

      /* PCLK2 = HCLK */
      RCC_PCLK2Config(RCC_HCLK_Div1);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f001 fc72 	bl	8004a8c <RCC_PCLK2Config>

      /* PCLK1 = HCLK/2 */
      RCC_PCLK1Config(RCC_HCLK_Div2);
 80031a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80031ac:	f001 fc64 	bl	8004a78 <RCC_PCLK1Config>

      /* PLLCLK = 8MHz * 9 = 72 MHz */
      RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 80031b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80031b4:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80031b8:	f001 fc32 	bl	8004a20 <RCC_PLLConfig>

      /* Enable PLL */
      RCC_PLLCmd(ENABLE);
 80031bc:	4620      	mov	r0, r4
 80031be:	f001 fc39 	bl	8004a34 <RCC_PLLCmd>

      /* Wait till PLL is ready */
      while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	2039      	movs	r0, #57	; 0x39
 80031c4:	f001 fd3c 	bl	8004c40 <RCC_GetFlagStatus>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d0fa      	beq.n	80031c2 <RCC_Configuration+0x66>
	{
	}

      /* Select PLL as system clock source */
      RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80031cc:	2002      	movs	r0, #2
 80031ce:	f001 fc37 	bl	8004a40 <RCC_SYSCLKConfig>

      /* Wait till PLL is used as system clock source */
      while(RCC_GetSYSCLKSource() != 0x08)
 80031d2:	f001 fc3f 	bl	8004a54 <RCC_GetSYSCLKSource>
 80031d6:	2808      	cmp	r0, #8
 80031d8:	d1fb      	bne.n	80031d2 <RCC_Configuration+0x76>
 80031da:	e7cb      	b.n	8003174 <RCC_Configuration+0x18>
 80031dc:	00040001 	andeq	r0, r4, r1

080031e0 <NVIC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NVIC_Configuration(void)
{
 80031e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef  VECT_TAB_RAM
  // Set the Vector Table base location at 0x20000000
  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
  // Set the Vector Table base location at 0x08003000
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 80031e2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80031e6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80031ea:	f001 fab9 	bl	8004760 <NVIC_SetVectorTable>
#endif

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80031ee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80031f2:	f001 fa0f 	bl	8004614 <NVIC_PriorityGroupConfig>

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031f6:	2500      	movs	r5, #0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031f8:	2401      	movs	r4, #1

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031fa:	2325      	movs	r3, #37	; 0x25
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80031fc:	a801      	add	r0, sp, #4

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031fe:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003202:	f88d 5005 	strb.w	r5, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003206:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800320a:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 800320e:	f001 fa0b 	bl	8004628 <NVIC_Init>

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 8003212:	231c      	movs	r3, #28
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 8003214:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 8003216:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800321a:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800321e:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003222:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8003226:	f001 f9ff 	bl	8004628 <NVIC_Init>
}
 800322a:	b003      	add	sp, #12
 800322c:	bd30      	pop	{r4, r5, pc}

0800322e <GPIO_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
 800322e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003230:	4c1e      	ldr	r4, [pc, #120]	; (80032ac <GPIO_Configuration+0x7e>)
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 8003232:	a801      	add	r0, sp, #4
 8003234:	f001 f93b 	bl	80044ae <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003238:	2604      	movs	r6, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 800323a:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800323c:	2703      	movs	r7, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800323e:	2510      	movs	r5, #16
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003240:	4620      	mov	r0, r4
 8003242:	a901      	add	r1, sp, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8003244:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003248:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800324c:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003250:	f001 f8df 	bl	8004412 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 8003254:	f44f 6308 	mov.w	r3, #2176	; 0x880
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003258:	4620      	mov	r0, r4
 800325a:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 800325e:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003262:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003266:	f001 f8d4 	bl	8004412 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 800326a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800326e:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003272:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003274:	2318      	movs	r3, #24
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003276:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800327a:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800327e:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003282:	f001 f8c6 	bl	8004412 <GPIO_Init>

  GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 8003286:	4630      	mov	r0, r6
 8003288:	2101      	movs	r1, #1
 800328a:	f001 f951 	bl	8004530 <GPIO_PinRemapConfig>
  GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 800328e:	4808      	ldr	r0, [pc, #32]	; (80032b0 <GPIO_Configuration+0x82>)
 8003290:	2101      	movs	r1, #1
 8003292:	f001 f94d 	bl	8004530 <GPIO_PinRemapConfig>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 8003296:	4620      	mov	r0, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f001 f924 	bl	80044e6 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 800329e:	4620      	mov	r0, r4
 80032a0:	2120      	movs	r1, #32
 80032a2:	f001 f91e 	bl	80044e2 <GPIO_SetBits>
}
 80032a6:	b003      	add	sp, #12
 80032a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40010c00 	andmi	r0, r1, r0, lsl #24
 80032b0:	00300400 	eorseq	r0, r0, r0, lsl #8

080032b4 <DisableUSART1>:
    }
}

void DisableUSART1(void)
{
  USART_Cmd(USART1, DISABLE);
 80032b4:	4801      	ldr	r0, [pc, #4]	; (80032bc <DisableUSART1+0x8>)
 80032b6:	2100      	movs	r1, #0
 80032b8:	f002 bb1d 	b.w	80058f6 <USART_Cmd>
 80032bc:	40013800 	andmi	r3, r1, r0, lsl #16

080032c0 <ClearBuffer256>:
}

void ClearBuffer256(void)
{
  gbRxBufferReadPointer = gbRxBufferWritePointer = 0;
 80032c0:	4b02      	ldr	r3, [pc, #8]	; (80032cc <ClearBuffer256+0xc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	705a      	strb	r2, [r3, #1]
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000018 	andcs	r0, r0, r8, lsl r0

080032d0 <CheckNewArrive>:
}

byte CheckNewArrive(void)
{
  if(gbRxBufferReadPointer != gbRxBufferWritePointer)
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <CheckNewArrive+0x10>)
 80032d2:	7858      	ldrb	r0, [r3, #1]
 80032d4:	781b      	ldrb	r3, [r3, #0]
    return 1;
  else
    return 0;
}
 80032d6:	1ac0      	subs	r0, r0, r3
 80032d8:	bf18      	it	ne
 80032da:	2001      	movne	r0, #1
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000018 	andcs	r0, r0, r8, lsl r0

080032e4 <TxDByte_DXL>:

void TxDByte_DXL(byte bTxdData)
{
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4604      	mov	r4, r0
  GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80032e8:	2120      	movs	r1, #32
 80032ea:	480d      	ldr	r0, [pc, #52]	; (8003320 <TxDByte_DXL+0x3c>)
 80032ec:	f001 f8fb 	bl	80044e6 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable
 80032f0:	480b      	ldr	r0, [pc, #44]	; (8003320 <TxDByte_DXL+0x3c>)
 80032f2:	2110      	movs	r1, #16
 80032f4:	f001 f8f5 	bl	80044e2 <GPIO_SetBits>

  USART_SendData(USART1,bTxdData);
 80032f8:	480a      	ldr	r0, [pc, #40]	; (8003324 <TxDByte_DXL+0x40>)
 80032fa:	4621      	mov	r1, r4
 80032fc:	f002 fb62 	bl	80059c4 <USART_SendData>
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 8003300:	4808      	ldr	r0, [pc, #32]	; (8003324 <TxDByte_DXL+0x40>)
 8003302:	2140      	movs	r1, #64	; 0x40
 8003304:	f002 fbb9 	bl	8005a7a <USART_GetFlagStatus>
 8003308:	2800      	cmp	r0, #0
 800330a:	d0f9      	beq.n	8003300 <TxDByte_DXL+0x1c>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 800330c:	4804      	ldr	r0, [pc, #16]	; (8003320 <TxDByte_DXL+0x3c>)
 800330e:	2110      	movs	r1, #16
 8003310:	f001 f8e9 	bl	80044e6 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}
 8003314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USART_SendData(USART1,bTxdData);
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 8003318:	4801      	ldr	r0, [pc, #4]	; (8003320 <TxDByte_DXL+0x3c>)
 800331a:	2120      	movs	r1, #32
 800331c:	f001 b8e1 	b.w	80044e2 <GPIO_SetBits>
 8003320:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003324:	40013800 	andmi	r3, r1, r0, lsl #16

08003328 <RxDByte_DXL>:
{
  byte bTemp;

  while(1)
    {
      if(gbRxBufferReadPointer != gbRxBufferWritePointer) break;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <RxDByte_DXL+0x1c>)
 800332a:	7859      	ldrb	r1, [r3, #1]
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	4291      	cmp	r1, r2
 8003330:	d0fa      	beq.n	8003328 <RxDByte_DXL>
    }

  bTemp = gbpRxInterruptBuffer[gbRxBufferReadPointer];
 8003332:	785a      	ldrb	r2, [r3, #1]
 8003334:	441a      	add	r2, r3
 8003336:	7890      	ldrb	r0, [r2, #2]
  gbRxBufferReadPointer++;
 8003338:	785a      	ldrb	r2, [r3, #1]
 800333a:	3201      	adds	r2, #1
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	705a      	strb	r2, [r3, #1]

  return bTemp;
}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000018 	andcs	r0, r0, r8, lsl r0

08003348 <TxDByte_PC>:
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
  USART_SendData(USART3,bTxdData);
 8003348:	4601      	mov	r1, r0
    bTmp += 7;
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 800334a:	b508      	push	{r3, lr}
  USART_SendData(USART3,bTxdData);
 800334c:	4804      	ldr	r0, [pc, #16]	; (8003360 <TxDByte_PC+0x18>)
 800334e:	f002 fb39 	bl	80059c4 <USART_SendData>
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
 8003352:	4803      	ldr	r0, [pc, #12]	; (8003360 <TxDByte_PC+0x18>)
 8003354:	2140      	movs	r1, #64	; 0x40
 8003356:	f002 fb90 	bl	8005a7a <USART_GetFlagStatus>
 800335a:	2800      	cmp	r0, #0
 800335c:	d0f9      	beq.n	8003352 <TxDByte_PC+0xa>
}
 800335e:	bd08      	pop	{r3, pc}
 8003360:	40004800 	andmi	r4, r0, r0, lsl #16

08003364 <TxDString>:
  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
}

void TxDString(byte *bData)
{
 8003364:	b510      	push	{r4, lr}
 8003366:	1e44      	subs	r4, r0, #1
  while (*bData)
 8003368:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800336c:	b110      	cbz	r0, 8003374 <TxDString+0x10>
    TxDByte_PC(*bData++);
 800336e:	f7ff ffeb 	bl	8003348 <TxDByte_PC>
 8003372:	e7f9      	b.n	8003368 <TxDString+0x4>
}
 8003374:	bd10      	pop	{r4, pc}

08003376 <infiniteTurn>:
/////////////// AX 12 ////////////////
//////////////////////////////////////

// infinite turn mode activation, see technical docu
// parameter: ID of motor
void infiniteTurn(unsigned char id) {
 8003376:	b510      	push	{r4, lr}
 8003378:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 800337a:	2106      	movs	r1, #6
 800337c:	2200      	movs	r2, #0
 800337e:	f000 fd95 	bl	8003eac <dxl_write_word>
  int result =  dxl_get_result();
 8003382:	f000 fd09 	bl	8003d98 <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
 8003386:	4620      	mov	r0, r4
 8003388:	2108      	movs	r1, #8
 800338a:	2200      	movs	r2, #0
 800338c:	f000 fd8e 	bl	8003eac <dxl_write_word>
  result =  dxl_get_result();
 8003390:	f000 fd02 	bl	8003d98 <dxl_get_result>
  TxDString("\nCM5 infinite rotation mode set\n");
}
 8003394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void infiniteTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 infinite rotation mode set\n");
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <infiniteTurn+0x2a>)
 800339a:	f7ff bfe3 	b.w	8003364 <TxDString>
 800339e:	bf00      	nop
 80033a0:	08005c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, lr}

080033a4 <normalTurn>:
}


// infinite turn mode desactivation, see technical docu
// parameter: ID of motor
void normalTurn(unsigned char id) {
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 80033a8:	2106      	movs	r1, #6
 80033aa:	2200      	movs	r2, #0
 80033ac:	f000 fd7e 	bl	8003eac <dxl_write_word>
  int result =  dxl_get_result();
 80033b0:	f000 fcf2 	bl	8003d98 <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
 80033b4:	4620      	mov	r0, r4
 80033b6:	2108      	movs	r1, #8
 80033b8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80033bc:	f000 fd76 	bl	8003eac <dxl_write_word>
  result =  dxl_get_result();
 80033c0:	f000 fcea 	bl	8003d98 <dxl_get_result>
  TxDString("\nCM5 normal rotation mode set\n");
}
 80033c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void normalTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 normal rotation mode set\n");
 80033c8:	4801      	ldr	r0, [pc, #4]	; (80033d0 <normalTurn+0x2c>)
 80033ca:	f7ff bfcb 	b.w	8003364 <TxDString>
 80033ce:	bf00      	nop
 80033d0:	08005c65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, ip, lr}

080033d4 <PrintCommStatus>:


// Print communication result
void PrintCommStatus(int CommStatus)
{
  switch(CommStatus)
 80033d4:	3802      	subs	r0, #2
 80033d6:	2805      	cmp	r0, #5
 80033d8:	d810      	bhi.n	80033fc <PrintCommStatus+0x28>
 80033da:	e8df f000 	tbb	[pc, r0]
 80033de:	09050703 	stmdbeq	r5, {r0, r1, r8, r9, sl}
 80033e2:	48070d0b 	stmdami	r7, {r0, r1, r3, r8, sl, fp}
    {
    case COMM_TXFAIL:
      TxDString("COMM_TXFAIL: Failed transmit instruction packet!\n");
 80033e6:	e00a      	b.n	80033fe <PrintCommStatus+0x2a>
      break;

    case COMM_TXERROR:
      TxDString("COMM_TXERROR: Incorrect instruction packet!\n");
 80033e8:	4807      	ldr	r0, [pc, #28]	; (8003408 <PrintCommStatus+0x34>)
 80033ea:	e008      	b.n	80033fe <PrintCommStatus+0x2a>
      break;

    case COMM_RXFAIL:
      TxDString("COMM_RXFAIL: Failed get status packet from device!\n");
 80033ec:	4807      	ldr	r0, [pc, #28]	; (800340c <PrintCommStatus+0x38>)
 80033ee:	e006      	b.n	80033fe <PrintCommStatus+0x2a>
      break;

    case COMM_RXWAITING:
      TxDString("COMM_RXWAITING: Now recieving status packet!\n");
 80033f0:	4807      	ldr	r0, [pc, #28]	; (8003410 <PrintCommStatus+0x3c>)
 80033f2:	e004      	b.n	80033fe <PrintCommStatus+0x2a>
      break;

    case COMM_RXTIMEOUT:
      TxDString("COMM_RXTIMEOUT: There is no status packet!\n");
 80033f4:	4807      	ldr	r0, [pc, #28]	; (8003414 <PrintCommStatus+0x40>)
 80033f6:	e002      	b.n	80033fe <PrintCommStatus+0x2a>
      break;

    case COMM_RXCORRUPT:
      TxDString("COMM_RXCORRUPT: Incorrect status packet!\n");
 80033f8:	4807      	ldr	r0, [pc, #28]	; (8003418 <PrintCommStatus+0x44>)
 80033fa:	e000      	b.n	80033fe <PrintCommStatus+0x2a>
      break;

    default:
      TxDString("This is unknown error code!\n");
 80033fc:	4807      	ldr	r0, [pc, #28]	; (800341c <PrintCommStatus+0x48>)
 80033fe:	f7ff bfb1 	b.w	8003364 <TxDString>
 8003402:	bf00      	nop
 8003404:	08005c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, lr}
 8003408:	08005cb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, fp, ip, lr}
 800340c:	08005ce3 	stmdaeq	r0, {r0, r1, r5, r6, r7, sl, fp, ip, lr}
 8003410:	08005d17 	stmdaeq	r0, {r0, r1, r2, r4, r8, sl, fp, ip, lr}
 8003414:	08005d45 	stmdaeq	r0, {r0, r2, r6, r8, sl, fp, ip, lr}
 8003418:	08005d71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, ip, lr}
 800341c:	08005d9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, sl, fp, ip, lr}

08003420 <PrintErrorCode>:
    }
}

// Print error bit of status packet
void PrintErrorCode()
{
 8003420:	b508      	push	{r3, lr}
  if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 8003422:	2001      	movs	r0, #1
 8003424:	f000 fcd6 	bl	8003dd4 <dxl_get_rxpacket_error>
 8003428:	2801      	cmp	r0, #1
 800342a:	d102      	bne.n	8003432 <PrintErrorCode+0x12>
    TxDString("Input voltage error!\n");
 800342c:	481a      	ldr	r0, [pc, #104]	; (8003498 <PrintErrorCode+0x78>)
 800342e:	f7ff ff99 	bl	8003364 <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
 8003432:	2002      	movs	r0, #2
 8003434:	f000 fcce 	bl	8003dd4 <dxl_get_rxpacket_error>
 8003438:	2801      	cmp	r0, #1
 800343a:	d102      	bne.n	8003442 <PrintErrorCode+0x22>
    TxDString("Angle limit error!\n");
 800343c:	4817      	ldr	r0, [pc, #92]	; (800349c <PrintErrorCode+0x7c>)
 800343e:	f7ff ff91 	bl	8003364 <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
 8003442:	2004      	movs	r0, #4
 8003444:	f000 fcc6 	bl	8003dd4 <dxl_get_rxpacket_error>
 8003448:	2801      	cmp	r0, #1
 800344a:	d102      	bne.n	8003452 <PrintErrorCode+0x32>
    TxDString("Overheat error!\n");
 800344c:	4814      	ldr	r0, [pc, #80]	; (80034a0 <PrintErrorCode+0x80>)
 800344e:	f7ff ff89 	bl	8003364 <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
 8003452:	2008      	movs	r0, #8
 8003454:	f000 fcbe 	bl	8003dd4 <dxl_get_rxpacket_error>
 8003458:	2801      	cmp	r0, #1
 800345a:	d102      	bne.n	8003462 <PrintErrorCode+0x42>
    TxDString("Out of range error!\n");
 800345c:	4811      	ldr	r0, [pc, #68]	; (80034a4 <PrintErrorCode+0x84>)
 800345e:	f7ff ff81 	bl	8003364 <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
 8003462:	2010      	movs	r0, #16
 8003464:	f000 fcb6 	bl	8003dd4 <dxl_get_rxpacket_error>
 8003468:	2801      	cmp	r0, #1
 800346a:	d102      	bne.n	8003472 <PrintErrorCode+0x52>
    TxDString("Checksum error!\n");
 800346c:	480e      	ldr	r0, [pc, #56]	; (80034a8 <PrintErrorCode+0x88>)
 800346e:	f7ff ff79 	bl	8003364 <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
 8003472:	2020      	movs	r0, #32
 8003474:	f000 fcae 	bl	8003dd4 <dxl_get_rxpacket_error>
 8003478:	2801      	cmp	r0, #1
 800347a:	d102      	bne.n	8003482 <PrintErrorCode+0x62>
    TxDString("Overload error!\n");
 800347c:	480b      	ldr	r0, [pc, #44]	; (80034ac <PrintErrorCode+0x8c>)
 800347e:	f7ff ff71 	bl	8003364 <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
 8003482:	2040      	movs	r0, #64	; 0x40
 8003484:	f000 fca6 	bl	8003dd4 <dxl_get_rxpacket_error>
 8003488:	2801      	cmp	r0, #1
 800348a:	d104      	bne.n	8003496 <PrintErrorCode+0x76>
    TxDString("Instruction code error!\n");
}
 800348c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    TxDString("Overload error!\n");

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
 8003490:	4807      	ldr	r0, [pc, #28]	; (80034b0 <PrintErrorCode+0x90>)
 8003492:	f7ff bf67 	b.w	8003364 <TxDString>
 8003496:	bd08      	pop	{r3, pc}
 8003498:	08005db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, lr}
 800349c:	08005dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
 80034a0:	08005de2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, fp, ip, lr}
 80034a4:	08005df3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 80034a8:	08005e08 	stmdaeq	r0, {r3, r9, sl, fp, ip, lr}
 80034ac:	08005e19 	stmdaeq	r0, {r0, r3, r4, r9, sl, fp, ip, lr}
 80034b0:	08005e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, ip, lr}

080034b4 <TxDByte16>:
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
}

void TxDByte16(byte bSentData)
{
 80034b4:	b510      	push	{r4, lr}
 80034b6:	4604      	mov	r4, r0
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 80034b8:	0903      	lsrs	r3, r0, #4
 80034ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
  if (bTmp > '9')
 80034be:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 80034c0:	bf88      	it	hi
 80034c2:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 80034c6:	f004 040f 	and.w	r4, r4, #15
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034ca:	f7ff ff3d 	bl	8003348 <TxDByte_PC>
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 80034ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
  if (bTmp > '9')
 80034d2:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 80034d4:	bf88      	it	hi
 80034d6:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
  TxDByte_PC(bTmp);
}
 80034da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bTmp += 7;
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034de:	f7ff bf33 	b.w	8003348 <TxDByte_PC>

080034e2 <TxDWord16>:
  while (*bData)
    TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
 80034e2:	b510      	push	{r4, lr}
 80034e4:	4604      	mov	r4, r0
  TxDByte16((wSentData >> 8) & 0xff);
 80034e6:	0a00      	lsrs	r0, r0, #8
 80034e8:	f7ff ffe4 	bl	80034b4 <TxDByte16>
  TxDByte16(wSentData & 0xff);
 80034ec:	b2e0      	uxtb	r0, r4
}
 80034ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void TxDWord16(word wSentData)
{
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
 80034f2:	f7ff bfdf 	b.w	80034b4 <TxDByte16>

080034f6 <setSpeed>:
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
  int order;
  if(speed >= 0)
 80034f6:	1e0a      	subs	r2, r1, #0
// set rotation speed of a single motor, only works in infinite turn mode!
// speed is an integer between -1023 and 1023
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
 80034f8:	b510      	push	{r4, lr}
  int order;
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
 80034fa:	bfb8      	it	lt
 80034fc:	f5c2 6280 	rsblt	r2, r2, #1024	; 0x400
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
 8003500:	2120      	movs	r1, #32
 8003502:	f000 fcd3 	bl	8003eac <dxl_write_word>
  int result =  dxl_get_result();
 8003506:	f000 fc47 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 800350a:	2801      	cmp	r0, #1
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
  int result =  dxl_get_result();
 800350c:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800350e:	d00a      	beq.n	8003526 <setSpeed+0x30>
    {
      TxDString("problem, code=");
 8003510:	4805      	ldr	r0, [pc, #20]	; (8003528 <setSpeed+0x32>)
 8003512:	f7ff ff27 	bl	8003364 <TxDString>
      TxDWord16(result);
 8003516:	b2a0      	uxth	r0, r4
 8003518:	f7ff ffe3 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 800351c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("problem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <setSpeed+0x36>)
 8003522:	f7ff bf1f 	b.w	8003364 <TxDString>
 8003526:	bd10      	pop	{r4, pc}
 8003528:	08005e5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, fp, ip, lr}
 800352c:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

08003530 <setAngle>:

// move motor to a given angle, only works when nOt in infinite turn mode
// parameter motor: ID of motor
// parameter: angle is an integer between -1023 and 1023
// no angle should be between 300 and 360 degrees
void setAngle(unsigned char id, int angle, int speed) {
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	460c      	mov	r4, r1
 8003534:	4605      	mov	r5, r0
  setSpeed(id, speed);
 8003536:	4611      	mov	r1, r2
 8003538:	f7ff ffdd 	bl	80034f6 <setSpeed>
  int angle_norm;

  if (angle >=0)
 800353c:	2c00      	cmp	r4, #0
    angle_norm = angle;

  else
    angle_norm = 1024 + angle;
 800353e:	bfb8      	it	lt
 8003540:	f504 6480 	addlt.w	r4, r4, #1024	; 0x400

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
 8003544:	4622      	mov	r2, r4
 8003546:	4628      	mov	r0, r5
 8003548:	211e      	movs	r1, #30
 800354a:	f000 fcaf 	bl	8003eac <dxl_write_word>
  int result =  dxl_get_result();
 800354e:	f000 fc23 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003552:	2801      	cmp	r0, #1

  else
    angle_norm = 1024 + angle;

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
  int result =  dxl_get_result();
 8003554:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003556:	d00a      	beq.n	800356e <setAngle+0x3e>
    {
      TxDString("\nproblem, code==");
 8003558:	4805      	ldr	r0, [pc, #20]	; (8003570 <setAngle+0x40>)
 800355a:	f7ff ff03 	bl	8003364 <TxDString>
      TxDWord16(result);
 800355e:	b2a0      	uxth	r0, r4
 8003560:	f7ff ffbf 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <setAngle+0x44>)
 800356a:	f7ff befb 	b.w	8003364 <TxDString>
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	08005e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, lr}
 8003574:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

08003578 <lightOn>:
}


// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
 8003578:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
 800357a:	2119      	movs	r1, #25
 800357c:	2201      	movs	r2, #1
 800357e:	f000 fc6b 	bl	8003e58 <dxl_write_byte>
  int result =  dxl_get_result();
 8003582:	f000 fc09 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003586:	2801      	cmp	r0, #1

// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
  int result =  dxl_get_result();
 8003588:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800358a:	d00a      	beq.n	80035a2 <lightOn+0x2a>
    {
      TxDString("\nproblem, code==");
 800358c:	4805      	ldr	r0, [pc, #20]	; (80035a4 <lightOn+0x2c>)
 800358e:	f7ff fee9 	bl	8003364 <TxDString>
      TxDWord16(result);
 8003592:	b2a0      	uxth	r0, r4
 8003594:	f7ff ffa5 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <lightOn+0x30>)
 800359e:	f7ff bee1 	b.w	8003364 <TxDString>
 80035a2:	bd10      	pop	{r4, pc}
 80035a4:	08005e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, lr}
 80035a8:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

080035ac <lightOff>:
    }
}

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
 80035ac:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
 80035ae:	2119      	movs	r1, #25
 80035b0:	2200      	movs	r2, #0
 80035b2:	f000 fc51 	bl	8003e58 <dxl_write_byte>
  int result =  dxl_get_result();
 80035b6:	f000 fbef 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80035ba:	2801      	cmp	r0, #1

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
  int result =  dxl_get_result();
 80035bc:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80035be:	d00a      	beq.n	80035d6 <lightOff+0x2a>
    {
      TxDString("\nproblem, code==");
 80035c0:	4805      	ldr	r0, [pc, #20]	; (80035d8 <lightOff+0x2c>)
 80035c2:	f7ff fecf 	bl	8003364 <TxDString>
      TxDWord16(result);
 80035c6:	b2a0      	uxth	r0, r4
 80035c8:	f7ff ff8b 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 80035cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <lightOff+0x30>)
 80035d2:	f7ff bec7 	b.w	8003364 <TxDString>
 80035d6:	bd10      	pop	{r4, pc}
 80035d8:	08005e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, lr}
 80035dc:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

080035e0 <getSpeed>:

// returns the current motor's speed
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
 80035e0:	b510      	push	{r4, lr}
 80035e2:	460c      	mov	r4, r1
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
 80035e4:	2120      	movs	r1, #32
 80035e6:	f000 fc49 	bl	8003e7c <dxl_read_word>
 80035ea:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 80035ec:	f000 fbd4 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80035f0:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
  int result =  dxl_get_result();
 80035f2:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80035f4:	d00a      	beq.n	800360c <getSpeed+0x2c>
    {
      TxDString("\nproblem, code=");
 80035f6:	4806      	ldr	r0, [pc, #24]	; (8003610 <getSpeed+0x30>)
 80035f8:	f7ff feb4 	bl	8003364 <TxDString>
      TxDWord16(result);
 80035fc:	b2a0      	uxth	r0, r4
 80035fe:	f7ff ff70 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 8003606:	4803      	ldr	r0, [pc, #12]	; (8003614 <getSpeed+0x34>)
 8003608:	f7ff beac 	b.w	8003364 <TxDString>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 8003614:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

08003618 <getAngle>:

// returns the current motor's angle,  infinite turn must be disabled to use this function
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
 8003618:	b510      	push	{r4, lr}
 800361a:	460c      	mov	r4, r1
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
 800361c:	2124      	movs	r1, #36	; 0x24
 800361e:	f000 fc2d 	bl	8003e7c <dxl_read_word>
 8003622:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 8003624:	f000 fbb8 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003628:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
  int result =  dxl_get_result();
 800362a:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800362c:	d00a      	beq.n	8003644 <getAngle+0x2c>
    {
      TxDString("\nproblem, code=");
 800362e:	4806      	ldr	r0, [pc, #24]	; (8003648 <getAngle+0x30>)
 8003630:	f7ff fe98 	bl	8003364 <TxDString>
      TxDWord16(result);
 8003634:	b2a0      	uxth	r0, r4
 8003636:	f7ff ff54 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 800363e:	4803      	ldr	r0, [pc, #12]	; (800364c <getAngle+0x34>)
 8003640:	f7ff be90 	b.w	8003364 <TxDString>
 8003644:	bd10      	pop	{r4, pc}
 8003646:	bf00      	nop
 8003648:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 800364c:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

08003650 <checkObstacle>:
/////////////////////////////////////////////////////

// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
 8003650:	b510      	push	{r4, lr}
 8003652:	460c      	mov	r4, r1
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
 8003654:	2120      	movs	r1, #32
 8003656:	f000 fbeb 	bl	8003e30 <dxl_read_byte>
 800365a:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 800365c:	f000 fb9c 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003660:	2801      	cmp	r0, #1
// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
  int result =  dxl_get_result();
 8003662:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003664:	d00a      	beq.n	800367c <checkObstacle+0x2c>
    {
      TxDString("\nproblem, code=");
 8003666:	4806      	ldr	r0, [pc, #24]	; (8003680 <checkObstacle+0x30>)
 8003668:	f7ff fe7c 	bl	8003364 <TxDString>
      TxDWord16(result);
 800366c:	b2a0      	uxth	r0, r4
 800366e:	f7ff ff38 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }

}
 8003672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 8003676:	4803      	ldr	r0, [pc, #12]	; (8003684 <checkObstacle+0x34>)
 8003678:	f7ff be74 	b.w	8003364 <TxDString>
 800367c:	bd10      	pop	{r4, pc}
 800367e:	bf00      	nop
 8003680:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 8003684:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

08003688 <checkLuminosity>:


// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
 8003688:	b510      	push	{r4, lr}
 800368a:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
 800368c:	2121      	movs	r1, #33	; 0x21
 800368e:	f000 fbcf 	bl	8003e30 <dxl_read_byte>
 8003692:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003694:	f000 fb80 	bl	8003d98 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003698:	2801      	cmp	r0, #1
// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
   int result =  dxl_get_result();
 800369a:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 800369c:	d00a      	beq.n	80036b4 <checkLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <checkLuminosity+0x30>)
 80036a0:	f7ff fe60 	bl	8003364 <TxDString>
       TxDWord16(result);
 80036a4:	b2a0      	uxth	r0, r4
 80036a6:	f7ff ff1c 	bl	80034e2 <TxDWord16>
       TxDString("!!!\n");
     }

}
 80036aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80036ae:	4803      	ldr	r0, [pc, #12]	; (80036bc <checkLuminosity+0x34>)
 80036b0:	f7ff be58 	b.w	8003364 <TxDString>
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	bf00      	nop
 80036b8:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 80036bc:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

080036c0 <leftInfraRed>:

}
// returns the left infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void leftInfraRed(unsigned char sensor, unsigned char* info) {
 80036c0:	b510      	push	{r4, lr}
 80036c2:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LeftIRSensorData) ;
 80036c4:	211a      	movs	r1, #26
 80036c6:	f000 fbb3 	bl	8003e30 <dxl_read_byte>
 80036ca:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 80036cc:	f000 fb64 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80036d0:	2801      	cmp	r0, #1
// returns the left infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void leftInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LeftIRSensorData) ;
  int result =  dxl_get_result();
 80036d2:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80036d4:	d00a      	beq.n	80036ec <leftInfraRed+0x2c>
    {
      TxDString("\nproblem, code=");
 80036d6:	4806      	ldr	r0, [pc, #24]	; (80036f0 <leftInfraRed+0x30>)
 80036d8:	f7ff fe44 	bl	8003364 <TxDString>
      TxDWord16(result);
 80036dc:	b2a0      	uxth	r0, r4
 80036de:	f7ff ff00 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 80036e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80036e6:	4803      	ldr	r0, [pc, #12]	; (80036f4 <leftInfraRed+0x34>)
 80036e8:	f7ff be3c 	b.w	8003364 <TxDString>
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	bf00      	nop
 80036f0:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 80036f4:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

080036f8 <rightInfraRed>:
}

// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
 80036f8:	b510      	push	{r4, lr}
 80036fa:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
 80036fc:	211c      	movs	r1, #28
 80036fe:	f000 fb97 	bl	8003e30 <dxl_read_byte>
 8003702:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003704:	f000 fb48 	bl	8003d98 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003708:	2801      	cmp	r0, #1
// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
   int result =  dxl_get_result();
 800370a:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 800370c:	d00a      	beq.n	8003724 <rightInfraRed+0x2c>
     {
       TxDString("\nproblem, code=");
 800370e:	4806      	ldr	r0, [pc, #24]	; (8003728 <rightInfraRed+0x30>)
 8003710:	f7ff fe28 	bl	8003364 <TxDString>
       TxDWord16(result);
 8003714:	b2a0      	uxth	r0, r4
 8003716:	f7ff fee4 	bl	80034e2 <TxDWord16>
       TxDString("!!!\n");
     }
}
 800371a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800371e:	4803      	ldr	r0, [pc, #12]	; (800372c <rightInfraRed+0x34>)
 8003720:	f7ff be20 	b.w	8003364 <TxDString>
 8003724:	bd10      	pop	{r4, pc}
 8003726:	bf00      	nop
 8003728:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 800372c:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

08003730 <leftLuminosity>:


// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
 8003730:	b510      	push	{r4, lr}
 8003732:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
 8003734:	211d      	movs	r1, #29
 8003736:	f000 fb7b 	bl	8003e30 <dxl_read_byte>
 800373a:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 800373c:	f000 fb2c 	bl	8003d98 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003740:	2801      	cmp	r0, #1
// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
   int result =  dxl_get_result();
 8003742:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003744:	d00a      	beq.n	800375c <leftLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 8003746:	4806      	ldr	r0, [pc, #24]	; (8003760 <leftLuminosity+0x30>)
 8003748:	f7ff fe0c 	bl	8003364 <TxDString>
       TxDWord16(result);
 800374c:	b2a0      	uxth	r0, r4
 800374e:	f7ff fec8 	bl	80034e2 <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003756:	4803      	ldr	r0, [pc, #12]	; (8003764 <leftLuminosity+0x34>)
 8003758:	f7ff be04 	b.w	8003364 <TxDString>
 800375c:	bd10      	pop	{r4, pc}
 800375e:	bf00      	nop
 8003760:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 8003764:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

08003768 <rightLuminosity>:
}

// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
 8003768:	b510      	push	{r4, lr}
 800376a:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
 800376c:	211f      	movs	r1, #31
 800376e:	f000 fb5f 	bl	8003e30 <dxl_read_byte>
 8003772:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 8003774:	f000 fb10 	bl	8003d98 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003778:	2801      	cmp	r0, #1
// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
  int result =  dxl_get_result();
 800377a:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800377c:	d00a      	beq.n	8003794 <rightLuminosity+0x2c>
    {
      TxDString("\nproblem, code=");
 800377e:	4806      	ldr	r0, [pc, #24]	; (8003798 <rightLuminosity+0x30>)
 8003780:	f7ff fdf0 	bl	8003364 <TxDString>
      TxDWord16(result);
 8003784:	b2a0      	uxth	r0, r4
 8003786:	f7ff feac 	bl	80034e2 <TxDWord16>
      TxDString("!!!\n");
    }
}
 800378a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 800378e:	4803      	ldr	r0, [pc, #12]	; (800379c <rightLuminosity+0x34>)
 8003790:	f7ff bde8 	b.w	8003364 <TxDString>
 8003794:	bd10      	pop	{r4, pc}
 8003796:	bf00      	nop
 8003798:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 800379c:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

080037a0 <dataSound>:
}


// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
 80037a0:	b510      	push	{r4, lr}
 80037a2:	460c      	mov	r4, r1
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
 80037a4:	2123      	movs	r1, #35	; 0x23
 80037a6:	f000 fb69 	bl	8003e7c <dxl_read_word>
 80037aa:	6020      	str	r0, [r4, #0]
   int result =  dxl_get_result();
 80037ac:	f000 faf4 	bl	8003d98 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80037b0:	2801      	cmp	r0, #1

// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
   int result =  dxl_get_result();
 80037b2:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80037b4:	d00a      	beq.n	80037cc <dataSound+0x2c>
     {
       TxDString("\nproblem, code=");
 80037b6:	4806      	ldr	r0, [pc, #24]	; (80037d0 <dataSound+0x30>)
 80037b8:	f7ff fdd4 	bl	8003364 <TxDString>
       TxDWord16(result);
 80037bc:	b2a0      	uxth	r0, r4
 80037be:	f7ff fe90 	bl	80034e2 <TxDWord16>
       TxDString("!!!\n");
     }
}
 80037c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80037c6:	4803      	ldr	r0, [pc, #12]	; (80037d4 <dataSound+0x34>)
 80037c8:	f7ff bdcc 	b.w	8003364 <TxDString>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	bf00      	nop
 80037d0:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 80037d4:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

080037d8 <noteBuzz>:
     }
}


//helper function
void noteBuzz(unsigned char sensor, int note) {
 80037d8:	b510      	push	{r4, lr}
 80037da:	460a      	mov	r2, r1
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
 80037dc:	2128      	movs	r1, #40	; 0x28
 80037de:	f000 fb3b 	bl	8003e58 <dxl_write_byte>
   int result =  dxl_get_result();
 80037e2:	f000 fad9 	bl	8003d98 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80037e6:	2801      	cmp	r0, #1


//helper function
void noteBuzz(unsigned char sensor, int note) {
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
   int result =  dxl_get_result();
 80037e8:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80037ea:	d00a      	beq.n	8003802 <noteBuzz+0x2a>
     {
       TxDString("\nproblem, code=");
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <noteBuzz+0x2c>)
 80037ee:	f7ff fdb9 	bl	8003364 <TxDString>
       TxDWord16(result);
 80037f2:	b2a0      	uxth	r0, r4
 80037f4:	f7ff fe75 	bl	80034e2 <TxDWord16>
       TxDString("!!!\n");
     }
}
 80037f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <noteBuzz+0x30>)
 80037fe:	f7ff bdb1 	b.w	8003364 <TxDString>
 8003802:	bd10      	pop	{r4, pc}
 8003804:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 8003808:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}

0800380c <timeBuzz>:
     }
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4605      	mov	r5, r0
 8003810:	460c      	mov	r4, r1
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
  {
    dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerTime, time) ;
 8003812:	4628      	mov	r0, r5
 8003814:	2129      	movs	r1, #41	; 0x29
 8003816:	4622      	mov	r2, r4
 8003818:	f000 fb1e 	bl	8003e58 <dxl_write_byte>
    result =  dxl_get_result();
 800381c:	f000 fabc 	bl	8003d98 <dxl_get_result>
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
 8003820:	2801      	cmp	r0, #1
 8003822:	d1f6      	bne.n	8003812 <timeBuzz+0x6>
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
    }
}
 8003824:	bd38      	pop	{r3, r4, r5, pc}

08003826 <Timer_Configuration>:
  USART_SendData(USART3,bTxdData);
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}

void Timer_Configuration(void)
{
 8003826:	b510      	push	{r4, lr}
 8003828:	b088      	sub	sp, #32
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_OCInitTypeDef  TIM_OCInitStructure;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800382a:	a801      	add	r0, sp, #4
 800382c:	f001 fc4f 	bl	80050ce <TIM_TimeBaseStructInit>
  TIM_OCStructInit(&TIM_OCInitStructure);
 8003830:	a804      	add	r0, sp, #16
 8003832:	f001 fc55 	bl	80050e0 <TIM_OCStructInit>

  TIM_DeInit(TIM2);
 8003836:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800383a:	f001 fac1 	bl	8004dc0 <TIM_DeInit>

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 800383e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003842:	2400      	movs	r4, #0
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003844:	a901      	add	r1, sp, #4
 8003846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_OCStructInit(&TIM_OCInitStructure);

  TIM_DeInit(TIM2);

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 800384a:	f8ad 3008 	strh.w	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800384e:	f8ad 4004 	strh.w	r4, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8003852:	f8ad 400a 	strh.w	r4, [sp, #10]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003856:	f8ad 4006 	strh.w	r4, [sp, #6]

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800385a:	f001 fb15 	bl	8004e88 <TIM_TimeBaseInit>

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);
 800385e:	2201      	movs	r2, #1
 8003860:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003864:	f240 21d2 	movw	r1, #722	; 0x2d2
 8003868:	f001 fcd6 	bl	8005218 <TIM_PrescalerConfig>

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <Timer_Configuration+0x8a>)

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 800386e:	a904      	add	r1, sp, #16

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 8003870:	881b      	ldrh	r3, [r3, #0]

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003872:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 8003876:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 800387a:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
 800387e:	f8ad 4012 	strh.w	r4, [sp, #18]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8003882:	f8ad 4018 	strh.w	r4, [sp, #24]
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003886:	f001 fb1d 	bl	8004ec4 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);
 800388a:	4621      	mov	r1, r4
 800388c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003890:	f001 fd47 	bl	8005322 <TIM_OC1PreloadConfig>

  /* TIM IT enable */
  TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 8003894:	2201      	movs	r2, #1
 8003896:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800389a:	2102      	movs	r1, #2
 800389c:	f001 fc55 	bl	800514a <TIM_ITConfig>

  /* TIM2 enable counter */
  TIM_Cmd(TIM2, ENABLE);
 80038a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038a4:	2101      	movs	r1, #1
 80038a6:	f001 fc36 	bl	8005116 <TIM_Cmd>
}
 80038aa:	b008      	add	sp, #32
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	bf00      	nop
 80038b0:	20000000 	andcs	r0, r0, r0

080038b4 <TimerInterrupt_1ms>:

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 80038b4:	b510      	push	{r4, lr}
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 80038b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038ba:	2102      	movs	r1, #2
 80038bc:	f001 ff5d 	bl	800577a <TIM_GetITStatus>
 80038c0:	b1e8      	cbz	r0, 80038fe <TimerInterrupt_1ms+0x4a>
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 80038c2:	2102      	movs	r1, #2
 80038c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038c8:	f001 ff62 	bl	8005790 <TIM_ClearITPendingBit>

      capture = TIM_GetCapture1(TIM2);
 80038cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038d0:	f001 ff36 	bl	8005740 <TIM_GetCapture1>
 80038d4:	4c0a      	ldr	r4, [pc, #40]	; (8003900 <TimerInterrupt_1ms+0x4c>)
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <TimerInterrupt_1ms+0x50>)
{
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);

      capture = TIM_GetCapture1(TIM2);
 80038d8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 80038dc:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038e6:	4419      	add	r1, r3
 80038e8:	b289      	uxth	r1, r1
 80038ea:	f001 fe56 	bl	800559a <TIM_SetCompare1>

      if(gw1msCounter > 0)
 80038ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038f2:	b123      	cbz	r3, 80038fe <TimerInterrupt_1ms+0x4a>
	gw1msCounter--;
 80038f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038f8:	3b01      	subs	r3, #1
 80038fa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 80038fe:	bd10      	pop	{r4, pc}
 8003900:	20000018 	andcs	r0, r0, r8, lsl r0
 8003904:	20000000 	andcs	r0, r0, r0

08003908 <RxD0Interrupt>:
    }
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 8003908:	b538      	push	{r3, r4, r5, lr}
  if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 800390a:	4809      	ldr	r0, [pc, #36]	; (8003930 <RxD0Interrupt+0x28>)
 800390c:	f240 5125 	movw	r1, #1317	; 0x525
 8003910:	f002 f8bd 	bl	8005a8e <USART_GetITStatus>
 8003914:	b158      	cbz	r0, 800392e <RxD0Interrupt+0x26>
    gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
 8003916:	4d07      	ldr	r5, [pc, #28]	; (8003934 <RxD0Interrupt+0x2c>)
 8003918:	4805      	ldr	r0, [pc, #20]	; (8003930 <RxD0Interrupt+0x28>)
 800391a:	782b      	ldrb	r3, [r5, #0]
 800391c:	b2dc      	uxtb	r4, r3
 800391e:	1c63      	adds	r3, r4, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	702b      	strb	r3, [r5, #0]
 8003924:	f002 f852 	bl	80059cc <USART_ReceiveData>
 8003928:	442c      	add	r4, r5
 800392a:	b2c0      	uxtb	r0, r0
 800392c:	70a0      	strb	r0, [r4, #2]
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	40013800 	andmi	r3, r1, r0, lsl #16
 8003934:	20000018 	andcs	r0, r0, r8, lsl r0

08003938 <SysTick_Configuration>:
}

void SysTick_Configuration(void)
{
 8003938:	b508      	push	{r3, lr}
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);
 800393a:	f242 3028 	movw	r0, #9000	; 0x2328
 800393e:	f001 f9cf 	bl	8004ce0 <SysTick_SetReload>

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
}
 8003942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
 8003946:	2001      	movs	r0, #1
 8003948:	f001 b9e4 	b.w	8004d14 <SysTick_ITConfig>

0800394c <__ISR_DELAY>:
}

void __ISR_DELAY(void)
{
  if (gwTimingDelay != 0x00)
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <__ISR_DELAY+0x14>)
 800394e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003952:	b122      	cbz	r2, 800395e <__ISR_DELAY+0x12>
    gwTimingDelay--;
 8003954:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003958:	3a01      	subs	r2, #1
 800395a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800395e:	4770      	bx	lr
 8003960:	20000018 	andcs	r0, r0, r8, lsl r0

08003964 <mDelay>:
}

void mDelay(u32 nTime)
{
 8003964:	b510      	push	{r4, lr}
 8003966:	4604      	mov	r4, r0
  /* Enable the SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Enable);
 8003968:	2001      	movs	r0, #1
 800396a:	f001 f9bf 	bl	8004cec <SysTick_CounterCmd>

  gwTimingDelay = nTime;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <mDelay+0x2c>)
 8003970:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c

  while(gwTimingDelay != 0);
 8003974:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8003978:	2c00      	cmp	r4, #0
 800397a:	d1fb      	bne.n	8003974 <mDelay+0x10>

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
 800397c:	f06f 0001 	mvn.w	r0, #1
 8003980:	f001 f9b4 	bl	8004cec <SysTick_CounterCmd>
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 8003984:	4620      	mov	r0, r4
}
 8003986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(gwTimingDelay != 0);

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 800398a:	f001 b9af 	b.w	8004cec <SysTick_CounterCmd>
 800398e:	bf00      	nop
 8003990:	20000018 	andcs	r0, r0, r8, lsl r0

08003994 <buzzWithDelay>:
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	460c      	mov	r4, r1
 8003998:	4605      	mov	r5, r0
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 800399a:	21fe      	movs	r1, #254	; 0xfe
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 800399c:	4616      	mov	r6, r2
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 800399e:	f7ff ff35 	bl	800380c <timeBuzz>
  noteBuzz(sensor, note);
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f7ff ff17 	bl	80037d8 <noteBuzz>

  for (k=0; k<time; k++) {
 80039aa:	2400      	movs	r4, #0
 80039ac:	42b4      	cmp	r4, r6
 80039ae:	da04      	bge.n	80039ba <buzzWithDelay+0x26>
       mDelay(1) ;
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7ff ffd7 	bl	8003964 <mDelay>
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
  noteBuzz(sensor, note);

  for (k=0; k<time; k++) {
 80039b6:	3401      	adds	r4, #1
 80039b8:	e7f8      	b.n	80039ac <buzzWithDelay+0x18>
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 80039ba:	4628      	mov	r0, r5
  return ;

}
 80039bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  for (k=0; k<time; k++) {
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 80039c0:	2100      	movs	r1, #0
 80039c2:	f7ff bf23 	b.w	800380c <timeBuzz>

080039c6 <USART_Configuration>:
{
  USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 80039c6:	b530      	push	{r4, r5, lr}
 80039c8:	460d      	mov	r5, r1
 80039ca:	4604      	mov	r4, r0
 80039cc:	b085      	sub	sp, #20

  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);
 80039ce:	4668      	mov	r0, sp
 80039d0:	f001 ff70 	bl	80058b4 <USART_StructInit>


  USART_InitStructure.USART_BaudRate = baudrate;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80039da:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No ;
 80039de:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80039e2:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80039e6:	230c      	movs	r3, #12
  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);


  USART_InitStructure.USART_BaudRate = baudrate;
 80039e8:	9500      	str	r5, [sp, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No ;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80039ea:	f8ad 300a 	strh.w	r3, [sp, #10]


  if( PORT == USART_DXL )
 80039ee:	b98c      	cbnz	r4, 8003a14 <USART_Configuration+0x4e>
    {
      USART_DeInit(USART1);
 80039f0:	4811      	ldr	r0, [pc, #68]	; (8003a38 <USART_Configuration+0x72>)
 80039f2:	f001 fed1 	bl	8005798 <USART_DeInit>
      mDelay(10);
 80039f6:	200a      	movs	r0, #10
 80039f8:	f7ff ffb4 	bl	8003964 <mDelay>
      /* Configure the USART1 */
      USART_Init(USART1, &USART_InitStructure);
 80039fc:	480e      	ldr	r0, [pc, #56]	; (8003a38 <USART_Configuration+0x72>)
 80039fe:	4669      	mov	r1, sp
 8003a00:	f001 ff14 	bl	800582c <USART_Init>

      /* Enable USART1 Receive and Transmit interrupts */
      USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <USART_Configuration+0x72>)
 8003a06:	f240 5125 	movw	r1, #1317	; 0x525
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f001 ff7f 	bl	800590e <USART_ITConfig>
      //USART_ITConfig(USART1, USART_IT_TC, ENABLE);

      /* Enable the USART1 */
      USART_Cmd(USART1, ENABLE);
 8003a10:	4809      	ldr	r0, [pc, #36]	; (8003a38 <USART_Configuration+0x72>)
 8003a12:	e00c      	b.n	8003a2e <USART_Configuration+0x68>
    }

  else if( PORT == USART_PC )
 8003a14:	2c02      	cmp	r4, #2
 8003a16:	d10d      	bne.n	8003a34 <USART_Configuration+0x6e>
    {
      USART_DeInit(USART3);
 8003a18:	4808      	ldr	r0, [pc, #32]	; (8003a3c <USART_Configuration+0x76>)
 8003a1a:	f001 febd 	bl	8005798 <USART_DeInit>
      mDelay(10);
 8003a1e:	200a      	movs	r0, #10
 8003a20:	f7ff ffa0 	bl	8003964 <mDelay>
      /* Configure the USART3 */
      USART_Init(USART3, &USART_InitStructure);
 8003a24:	4805      	ldr	r0, [pc, #20]	; (8003a3c <USART_Configuration+0x76>)
 8003a26:	4669      	mov	r1, sp
 8003a28:	f001 ff00 	bl	800582c <USART_Init>
      /* Enable USART3 Receive and Transmit interrupts */
      //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
      //USART_ITConfig(USART3, USART_IT_TC, ENABLE);

      /* Enable the USART3 */
      USART_Cmd(USART3, ENABLE);
 8003a2c:	4803      	ldr	r0, [pc, #12]	; (8003a3c <USART_Configuration+0x76>)
 8003a2e:	2101      	movs	r1, #1
 8003a30:	f001 ff61 	bl	80058f6 <USART_Cmd>
    }
}
 8003a34:	b005      	add	sp, #20
 8003a36:	bd30      	pop	{r4, r5, pc}
 8003a38:	40013800 	andmi	r3, r1, r0, lsl #16
 8003a3c:	40004800 	andmi	r4, r0, r0, lsl #16

08003a40 <USART1_Configuration>:
  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}

void USART1_Configuration(u32 baudrate)
{
 8003a40:	4601      	mov	r1, r0
  USART_Configuration(USART_DXL, baudrate);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f7ff bfbf 	b.w	80039c6 <USART_Configuration>

08003a48 <StartDiscount>:
  SysTick_CounterCmd(SysTick_Counter_Clear);
}

void StartDiscount(s32 StartTime)
{
  gw1msCounter = StartTime;
 8003a48:	4b01      	ldr	r3, [pc, #4]	; (8003a50 <StartDiscount+0x8>)
 8003a4a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
 8003a4e:	4770      	bx	lr
 8003a50:	20000018 	andcs	r0, r0, r8, lsl r0

08003a54 <CheckTimeOut>:
u8 CheckTimeOut(void)
{
  // Check timeout
  // Return: 0 is false, 1 is true(timeout occurred)

  if(gw1msCounter == 0)
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <CheckTimeOut+0x10>)
 8003a56:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    return 1;
  else
    return 0;
}
 8003a5a:	fab0 f080 	clz	r0, r0
 8003a5e:	0940      	lsrs	r0, r0, #5
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000018 	andcs	r0, r0, r8, lsl r0

08003a68 <NMIException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
 8003a68:	4770      	bx	lr

08003a6a <HardFaultException>:
void HardFaultException(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003a6a:	e7fe      	b.n	8003a6a <HardFaultException>

08003a6c <MemManageException>:
void MemManageException(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003a6c:	e7fe      	b.n	8003a6c <MemManageException>

08003a6e <BusFaultException>:
void BusFaultException(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003a6e:	e7fe      	b.n	8003a6e <BusFaultException>

08003a70 <UsageFaultException>:
void UsageFaultException(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003a70:	e7fe      	b.n	8003a70 <UsageFaultException>

08003a72 <DebugMonitor>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
 8003a72:	4770      	bx	lr

08003a74 <SVCHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
 8003a74:	4770      	bx	lr

08003a76 <PendSVC>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
 8003a76:	4770      	bx	lr

08003a78 <SysTickHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
	__ISR_DELAY();
 8003a78:	f7ff bf68 	b.w	800394c <__ISR_DELAY>

08003a7c <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 8003a7c:	4770      	bx	lr

08003a7e <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 8003a7e:	4770      	bx	lr

08003a80 <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 8003a80:	4770      	bx	lr

08003a82 <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 8003a82:	4770      	bx	lr

08003a84 <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 8003a84:	4770      	bx	lr

08003a86 <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 8003a86:	4770      	bx	lr

08003a88 <EXTI0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8003a88:	4770      	bx	lr

08003a8a <EXTI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
 8003a8a:	4770      	bx	lr

08003a8c <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 8003a8c:	4770      	bx	lr

08003a8e <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 8003a8e:	4770      	bx	lr

08003a90 <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8003a90:	4770      	bx	lr

08003a92 <DMA1_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8003a92:	4770      	bx	lr

08003a94 <DMA1_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 8003a94:	4770      	bx	lr

08003a96 <DMA1_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 8003a96:	4770      	bx	lr

08003a98 <DMA1_Channel4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 8003a98:	4770      	bx	lr

08003a9a <DMA1_Channel5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 8003a9a:	4770      	bx	lr

08003a9c <DMA1_Channel6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 8003a9c:	4770      	bx	lr

08003a9e <DMA1_Channel7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 8003a9e:	4770      	bx	lr

08003aa0 <ADC1_2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8003aa0:	4770      	bx	lr

08003aa2 <USB_HP_CAN_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 8003aa2:	4770      	bx	lr

08003aa4 <USB_LP_CAN_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003aa4:	4770      	bx	lr

08003aa6 <CAN_RX1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 8003aa6:	4770      	bx	lr

08003aa8 <CAN_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 8003aa8:	4770      	bx	lr

08003aaa <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 8003aaa:	4770      	bx	lr

08003aac <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 8003aac:	4770      	bx	lr

08003aae <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8003aae:	4770      	bx	lr

08003ab0 <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 8003ab0:	4770      	bx	lr

08003ab2 <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8003ab2:	4770      	bx	lr

08003ab4 <TIM2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
	TimerInterrupt_1ms();
 8003ab4:	f7ff befe 	b.w	80038b4 <TimerInterrupt_1ms>

08003ab8 <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 8003ab8:	4770      	bx	lr

08003aba <TIM4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
 8003aba:	4770      	bx	lr

08003abc <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8003abc:	4770      	bx	lr

08003abe <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8003abe:	4770      	bx	lr

08003ac0 <I2C2_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 8003ac0:	4770      	bx	lr

08003ac2 <I2C2_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 8003ac2:	4770      	bx	lr

08003ac4 <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8003ac4:	4770      	bx	lr

08003ac6 <SPI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
 8003ac6:	4770      	bx	lr

08003ac8 <USART1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
	RxD0Interrupt();
 8003ac8:	f7ff bf1e 	b.w	8003908 <RxD0Interrupt>

08003acc <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8003acc:	4770      	bx	lr

08003ace <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8003ace:	4770      	bx	lr

08003ad0 <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8003ad0:	4770      	bx	lr

08003ad2 <RTCAlarm_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8003ad2:	4770      	bx	lr

08003ad4 <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8003ad4:	4770      	bx	lr

08003ad6 <TIM8_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
 8003ad6:	4770      	bx	lr

08003ad8 <TIM8_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
 8003ad8:	4770      	bx	lr

08003ada <TIM8_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
 8003ada:	4770      	bx	lr

08003adc <TIM8_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
 8003adc:	4770      	bx	lr

08003ade <ADC3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
 8003ade:	4770      	bx	lr

08003ae0 <FSMC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
 8003ae0:	4770      	bx	lr

08003ae2 <SDIO_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
 8003ae2:	4770      	bx	lr

08003ae4 <TIM5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
 8003ae4:	4770      	bx	lr

08003ae6 <SPI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
 8003ae6:	4770      	bx	lr

08003ae8 <UART4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
 8003ae8:	4770      	bx	lr

08003aea <UART5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
 8003aea:	4770      	bx	lr

08003aec <TIM6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
 8003aec:	4770      	bx	lr

08003aee <TIM7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
 8003aee:	4770      	bx	lr

08003af0 <DMA2_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
 8003af0:	4770      	bx	lr

08003af2 <DMA2_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
 8003af2:	4770      	bx	lr

08003af4 <DMA2_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
 8003af4:	4770      	bx	lr

08003af6 <DMA2_Channel4_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
 8003af6:	4770      	bx	lr

08003af8 <dxl_hal_open>:
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 8003af8:	b508      	push	{r3, lr}
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003afa:	4608      	mov	r0, r1
 8003afc:	f7ff ffa0 	bl	8003a40 <USART1_Configuration>
	return 1;
}
 8003b00:	2001      	movs	r0, #1
 8003b02:	bd08      	pop	{r3, pc}

08003b04 <dxl_hal_close>:
void dxl_hal_close()
{
	// Closing device

	/* Disable the USART1 */
	DisableUSART1();
 8003b04:	f7ff bbd6 	b.w	80032b4 <DisableUSART1>

08003b08 <dxl_hal_clear>:

void dxl_hal_clear(void)
{
	// Clear communication buffer

	ClearBuffer256();
 8003b08:	f7ff bbda 	b.w	80032c0 <ClearBuffer256>

08003b0c <dxl_hal_tx>:
}

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460c      	mov	r4, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
 8003b12:	2300      	movs	r3, #0
 8003b14:	1c5d      	adds	r5, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	da04      	bge.n	8003b26 <dxl_hal_tx+0x1a>
		TxDByte_DXL(pPacket[i]);
 8003b1c:	5cf0      	ldrb	r0, [r6, r3]
 8003b1e:	f7ff fbe1 	bl	80032e4 <TxDByte_DXL>
 8003b22:	462b      	mov	r3, r5
 8003b24:	e7f6      	b.n	8003b14 <dxl_hal_tx+0x8>

	return numPacket;
}
 8003b26:	4620      	mov	r0, r4
 8003b28:	bd70      	pop	{r4, r5, r6, pc}

08003b2a <dxl_hal_rx>:

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
 8003b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2c:	4607      	mov	r7, r0
 8003b2e:	460e      	mov	r6, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 8003b30:	2400      	movs	r4, #0
 8003b32:	b2e5      	uxtb	r5, r4
 8003b34:	42b5      	cmp	r5, r6
 8003b36:	da07      	bge.n	8003b48 <dxl_hal_rx+0x1e>
	{
		if (CheckNewArrive())
 8003b38:	f7ff fbca 	bl	80032d0 <CheckNewArrive>
 8003b3c:	3401      	adds	r4, #1
 8003b3e:	b120      	cbz	r0, 8003b4a <dxl_hal_rx+0x20>
			pPacket[i] =  RxDByte_DXL();
 8003b40:	f7ff fbf2 	bl	8003328 <RxDByte_DXL>
 8003b44:	5578      	strb	r0, [r7, r5]
 8003b46:	e7f4      	b.n	8003b32 <dxl_hal_rx+0x8>
 8003b48:	4635      	mov	r5, r6
		else
			return i;
	}
	return numPacket;
}
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b4e <dxl_hal_set_timeout>:
{
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 8003b4e:	2364      	movs	r3, #100	; 0x64
 8003b50:	4358      	muls	r0, r3
 8003b52:	f7ff bf79 	b.w	8003a48 <StartDiscount>

08003b56 <dxl_hal_timeout>:
int dxl_hal_timeout(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	return CheckTimeOut();
 8003b56:	f7ff bf7d 	b.w	8003a54 <CheckTimeOut>
	...

08003b5c <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003b5c:	b508      	push	{r3, lr}
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <dxl_initialize+0x20>)


int dxl_initialize( int devIndex, int baudnum )
{
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
 8003b60:	3101      	adds	r1, #1
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003b62:	fb93 f1f1 	sdiv	r1, r3, r1
 8003b66:	f7ff ffc7 	bl	8003af8 <dxl_hal_open>
 8003b6a:	b128      	cbz	r0, 8003b78 <dxl_initialize+0x1c>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <dxl_initialize+0x24>)
 8003b6e:	2001      	movs	r0, #1
 8003b70:	6018      	str	r0, [r3, #0]
	giBusUsing = 0;
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <dxl_initialize+0x28>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]



	return 1;
}
 8003b78:	bd08      	pop	{r3, pc}
 8003b7a:	bf00      	nop
 8003b7c:	001e8480 	andseq	r8, lr, r0, lsl #9
 8003b80:	20000014 	andcs	r0, r0, r4, lsl r0
 8003b84:	20000130 	andcs	r0, r0, r0, lsr r1

08003b88 <dxl_terminate>:

void dxl_terminate()
{
	dxl_hal_close();
 8003b88:	f7ff bfbc 	b.w	8003b04 <dxl_hal_close>

08003b8c <dxl_tx_packet>:
}

void dxl_tx_packet()
{
 8003b8c:	b570      	push	{r4, r5, r6, lr}
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003b8e:	4c24      	ldr	r4, [pc, #144]	; (8003c20 <dxl_tx_packet+0x94>)
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d043      	beq.n	8003c1e <dxl_tx_packet+0x92>
	


	giBusUsing = 1;

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003b96:	79e2      	ldrb	r2, [r4, #7]
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003b98:	2301      	movs	r3, #1

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003b9a:	2a98      	cmp	r2, #152	; 0x98
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003b9c:	6023      	str	r3, [r4, #0]

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003b9e:	d905      	bls.n	8003bac <dxl_tx_packet+0x20>
	{
		gbCommStatus = COMM_TXERROR;
 8003ba0:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <dxl_tx_packet+0x98>)
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	601a      	str	r2, [r3, #0]
		giBusUsing = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	6023      	str	r3, [r4, #0]
		return;
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
	}

	if( gbInstructionPacket[INSTRUCTION] != INST_PING
 8003bac:	7a23      	ldrb	r3, [r4, #8]
 8003bae:	1e59      	subs	r1, r3, #1
 8003bb0:	2905      	cmp	r1, #5
 8003bb2:	d901      	bls.n	8003bb8 <dxl_tx_packet+0x2c>
		&& gbInstructionPacket[INSTRUCTION] != INST_READ
		&& gbInstructionPacket[INSTRUCTION] != INST_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
 8003bb4:	2b83      	cmp	r3, #131	; 0x83
 8003bb6:	d1f3      	bne.n	8003ba0 <dxl_tx_packet+0x14>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003bb8:	23ff      	movs	r3, #255	; 0xff
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003bba:	2000      	movs	r0, #0
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003bbc:	7123      	strb	r3, [r4, #4]
	gbInstructionPacket[1] = 0xff;
 8003bbe:	7163      	strb	r3, [r4, #5]

void dxl_tx_packet()
{
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	b2c1      	uxtb	r1, r0
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003bc4:	428a      	cmp	r2, r1
 8003bc6:	f100 0001 	add.w	r0, r0, #1
 8003bca:	db04      	blt.n	8003bd6 <dxl_tx_packet+0x4a>
		checksum += gbInstructionPacket[i+2];
 8003bcc:	4421      	add	r1, r4
 8003bce:	7989      	ldrb	r1, [r1, #6]
 8003bd0:	440b      	add	r3, r1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e7f5      	b.n	8003bc2 <dxl_tx_packet+0x36>
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003bd6:	43db      	mvns	r3, r3
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003bd8:	4d12      	ldr	r5, [pc, #72]	; (8003c24 <dxl_tx_packet+0x98>)
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003bda:	4422      	add	r2, r4
 8003bdc:	71d3      	strb	r3, [r2, #7]
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	3b06      	subs	r3, #6
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d801      	bhi.n	8003bea <dxl_tx_packet+0x5e>
	{




		dxl_hal_clear();
 8003be6:	f7ff ff8f 	bl	8003b08 <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8003bea:	79e4      	ldrb	r4, [r4, #7]
 8003bec:	4e0c      	ldr	r6, [pc, #48]	; (8003c20 <dxl_tx_packet+0x94>)
 8003bee:	3404      	adds	r4, #4
 8003bf0:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8003bf2:	1d30      	adds	r0, r6, #4
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	f7ff ff89 	bl	8003b0c <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
 8003bfa:	b2c0      	uxtb	r0, r0
 8003bfc:	4284      	cmp	r4, r0
 8003bfe:	d004      	beq.n	8003c0a <dxl_tx_packet+0x7e>
	{

		gbCommStatus = COMM_TXFAIL;
 8003c00:	2302      	movs	r3, #2
 8003c02:	602b      	str	r3, [r5, #0]
		giBusUsing = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	6033      	str	r3, [r6, #0]
 8003c08:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
 8003c0a:	7a33      	ldrb	r3, [r6, #8]
 8003c0c:	2b02      	cmp	r3, #2
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003c0e:	bf0a      	itet	eq
 8003c10:	7ab0      	ldrbeq	r0, [r6, #10]
	else
		dxl_hal_set_timeout( 6 );
 8003c12:	2006      	movne	r0, #6
		giBusUsing = 0;
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003c14:	3006      	addeq	r0, #6
	else
		dxl_hal_set_timeout( 6 );
 8003c16:	f7ff ff9a 	bl	8003b4e <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	602b      	str	r3, [r5, #0]
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
 8003c20:	20000130 	andcs	r0, r0, r0, lsr r1
 8003c24:	20000014 	andcs	r0, r0, r4, lsl r0

08003c28 <dxl_rx_packet>:
}

void dxl_rx_packet()
{
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8003c2a:	4c51      	ldr	r4, [pc, #324]	; (8003d70 <dxl_rx_packet+0x148>)
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 809c 	beq.w	8003d6c <dxl_rx_packet+0x144>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
 8003c34:	79a3      	ldrb	r3, [r4, #6]
 8003c36:	4e4f      	ldr	r6, [pc, #316]	; (8003d74 <dxl_rx_packet+0x14c>)
 8003c38:	2bfe      	cmp	r3, #254	; 0xfe
 8003c3a:	d101      	bne.n	8003c40 <dxl_rx_packet+0x18>
	{
		gbCommStatus = COMM_RXSUCCESS;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e033      	b.n	8003ca8 <dxl_rx_packet+0x80>
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
 8003c40:	6833      	ldr	r3, [r6, #0]
 8003c42:	b923      	cbnz	r3, 8003c4e <dxl_rx_packet+0x26>
	{
		gbRxGetLength = 0;
 8003c44:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
		gbRxPacketLength = 6;
 8003c48:	2306      	movs	r3, #6
 8003c4a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	}

	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003c4e:	4d48      	ldr	r5, [pc, #288]	; (8003d70 <dxl_rx_packet+0x148>)
 8003c50:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8003c54:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 8003c58:	f105 07a6 	add.w	r7, r5, #166	; 0xa6
 8003c5c:	18f8      	adds	r0, r7, r3
 8003c5e:	1ac9      	subs	r1, r1, r3
 8003c60:	f7ff ff63 	bl	8003b2a <dxl_hal_rx>
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003c64:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8003c68:	4418      	add	r0, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003c6a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003c6e:	b2c0      	uxtb	r0, r0
	if( gbRxGetLength < gbRxPacketLength )
 8003c70:	4283      	cmp	r3, r0
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003c72:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if( gbRxGetLength < gbRxPacketLength )
 8003c76:	d91b      	bls.n	8003cb0 <dxl_rx_packet+0x88>
	{
		if( dxl_hal_timeout() == 1 )
 8003c78:	f7ff ff6d 	bl	8003b56 <dxl_hal_timeout>
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d117      	bne.n	8003cb0 <dxl_rx_packet+0x88>
		{


			if(gbRxGetLength == 0)
 8003c80:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 8003c84:	b97b      	cbnz	r3, 8003ca6 <dxl_rx_packet+0x7e>
				gbCommStatus = COMM_RXTIMEOUT;
 8003c86:	2306      	movs	r3, #6
 8003c88:	e00e      	b.n	8003ca8 <dxl_rx_packet+0x80>
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
 8003c8a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	}

	if( gbRxGetLength < gbRxPacketLength )
 8003c8e:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8003c92:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8003c96:	4d36      	ldr	r5, [pc, #216]	; (8003d70 <dxl_rx_packet+0x148>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d84d      	bhi.n	8003d38 <dxl_rx_packet+0x110>
		return;
	}


	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
 8003c9c:	79aa      	ldrb	r2, [r5, #6]
 8003c9e:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d032      	beq.n	8003d0c <dxl_rx_packet+0xe4>


			if(gbRxGetLength == 0)
				gbCommStatus = COMM_RXTIMEOUT;
			else
				gbCommStatus = COMM_RXCORRUPT;
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	6033      	str	r3, [r6, #0]
			giBusUsing = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	6023      	str	r3, [r4, #0]
			return;
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003cb0:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003cb4:	2200      	movs	r2, #0
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003cb6:	1e48      	subs	r0, r1, #1
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003cb8:	f1a1 0e02 	sub.w	lr, r1, #2
 8003cbc:	b2d3      	uxtb	r3, r2
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003cbe:	4283      	cmp	r3, r0
 8003cc0:	da09      	bge.n	8003cd6 <dxl_rx_packet+0xae>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 8003cc2:	18e5      	adds	r5, r4, r3
 8003cc4:	f895 c0a6 	ldrb.w	ip, [r5, #166]	; 0xa6
 8003cc8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003ccc:	d107      	bne.n	8003cde <dxl_rx_packet+0xb6>
 8003cce:	f895 50a7 	ldrb.w	r5, [r5, #167]	; 0xa7
 8003cd2:	2dff      	cmp	r5, #255	; 0xff
 8003cd4:	d103      	bne.n	8003cde <dxl_rx_packet+0xb6>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0d9      	beq.n	8003c8e <dxl_rx_packet+0x66>
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e008      	b.n	8003cf0 <dxl_rx_packet+0xc8>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003cde:	4573      	cmp	r3, lr
 8003ce0:	d104      	bne.n	8003cec <dxl_rx_packet+0xc4>
 8003ce2:	1825      	adds	r5, r4, r0
 8003ce4:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 8003ce8:	2dff      	cmp	r5, #255	; 0xff
 8003cea:	d0f4      	beq.n	8003cd6 <dxl_rx_packet+0xae>
 8003cec:	3201      	adds	r2, #1
 8003cee:	e7e5      	b.n	8003cbc <dxl_rx_packet+0x94>
 8003cf0:	b2c2      	uxtb	r2, r0
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8003cf2:	1acd      	subs	r5, r1, r3
 8003cf4:	42aa      	cmp	r2, r5
 8003cf6:	f100 0001 	add.w	r0, r0, #1
 8003cfa:	dac6      	bge.n	8003c8a <dxl_rx_packet+0x62>
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8003cfc:	18e5      	adds	r5, r4, r3
 8003cfe:	4415      	add	r5, r2
 8003d00:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 8003d04:	4422      	add	r2, r4
 8003d06:	f882 50a6 	strb.w	r5, [r2, #166]	; 0xa6
 8003d0a:	e7f1      	b.n	8003cf0 <dxl_rx_packet+0xc8>
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003d0c:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
 8003d10:	3304      	adds	r3, #4
 8003d12:	b2db      	uxtb	r3, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003d14:	4299      	cmp	r1, r3
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003d16:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	if( gbRxGetLength < gbRxPacketLength )
 8003d1a:	d210      	bcs.n	8003d3e <dxl_rx_packet+0x116>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003d1c:	1878      	adds	r0, r7, r1
 8003d1e:	1a59      	subs	r1, r3, r1
 8003d20:	f7ff ff03 	bl	8003b2a <dxl_hal_rx>
		gbRxGetLength += nRead;
 8003d24:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 8003d28:	4418      	add	r0, r3
		if( gbRxGetLength < gbRxPacketLength )
 8003d2a:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003d2e:	b2c0      	uxtb	r0, r0
		if( gbRxGetLength < gbRxPacketLength )
 8003d30:	4283      	cmp	r3, r0
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003d32:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
		if( gbRxGetLength < gbRxPacketLength )
 8003d36:	d902      	bls.n	8003d3e <dxl_rx_packet+0x116>
		gbRxGetLength -= i;		
	}

	if( gbRxGetLength < gbRxPacketLength )
	{
		gbCommStatus = COMM_RXWAITING;
 8003d38:	2305      	movs	r3, #5
 8003d3a:	6033      	str	r3, [r6, #0]
 8003d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 8003d3e:	2000      	movs	r0, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8003d46:	b2c1      	uxtb	r1, r0
 8003d48:	428a      	cmp	r2, r1
 8003d4a:	f100 0001 	add.w	r0, r0, #1
 8003d4e:	db05      	blt.n	8003d5c <dxl_rx_packet+0x134>
		checksum += gbStatusPacket[i+2];
 8003d50:	4421      	add	r1, r4
 8003d52:	f891 10a8 	ldrb.w	r1, [r1, #168]	; 0xa8
 8003d56:	440b      	add	r3, r1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e7f4      	b.n	8003d46 <dxl_rx_packet+0x11e>
	checksum = ~checksum;
 8003d5c:	43db      	mvns	r3, r3

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
 8003d5e:	4422      	add	r2, r4
 8003d60:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d19d      	bne.n	8003ca6 <dxl_rx_packet+0x7e>
 8003d6a:	e767      	b.n	8003c3c <dxl_rx_packet+0x14>
 8003d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000130 	andcs	r0, r0, r0, lsr r1
 8003d74:	20000014 	andcs	r0, r0, r4, lsl r0

08003d78 <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
 8003d78:	b510      	push	{r4, lr}

	dxl_tx_packet();
 8003d7a:	f7ff ff07 	bl	8003b8c <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <dxl_txrx_packet+0x1c>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	461c      	mov	r4, r3
 8003d84:	b922      	cbnz	r2, 8003d90 <dxl_txrx_packet+0x18>
		return;	

	do{

		dxl_rx_packet();
 8003d86:	f7ff ff4f 	bl	8003c28 <dxl_rx_packet>

	}while( gbCommStatus == COMM_RXWAITING );	
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d0fa      	beq.n	8003d86 <dxl_txrx_packet+0xe>
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	bf00      	nop
 8003d94:	20000014 	andcs	r0, r0, r4, lsl r0

08003d98 <dxl_get_result>:
}

int dxl_get_result()
{
	return gbCommStatus;
}
 8003d98:	4b01      	ldr	r3, [pc, #4]	; (8003da0 <dxl_get_result+0x8>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000014 	andcs	r0, r0, r4, lsl r0

08003da4 <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
 8003da4:	4b01      	ldr	r3, [pc, #4]	; (8003dac <dxl_set_txpacket_id+0x8>)
 8003da6:	7198      	strb	r0, [r3, #6]
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000130 	andcs	r0, r0, r0, lsr r1

08003db0 <dxl_set_txpacket_instruction>:
}

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
 8003db0:	4b01      	ldr	r3, [pc, #4]	; (8003db8 <dxl_set_txpacket_instruction+0x8>)
 8003db2:	7218      	strb	r0, [r3, #8]
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000130 	andcs	r0, r0, r0, lsr r1

08003dbc <dxl_set_txpacket_parameter>:
}

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
 8003dbc:	4b01      	ldr	r3, [pc, #4]	; (8003dc4 <dxl_set_txpacket_parameter+0x8>)
 8003dbe:	4418      	add	r0, r3
 8003dc0:	7241      	strb	r1, [r0, #9]
 8003dc2:	4770      	bx	lr
 8003dc4:	20000130 	andcs	r0, r0, r0, lsr r1

08003dc8 <dxl_set_txpacket_length>:
}

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
 8003dc8:	4b01      	ldr	r3, [pc, #4]	; (8003dd0 <dxl_set_txpacket_length+0x8>)
 8003dca:	71d8      	strb	r0, [r3, #7]
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000130 	andcs	r0, r0, r0, lsr r1

08003dd4 <dxl_get_rxpacket_error>:
}

int dxl_get_rxpacket_error( int errbit )
{
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <dxl_get_rxpacket_error+0x10>)
 8003dd6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003dda:	4218      	tst	r0, r3
		return 1;

	return 0;
}
 8003ddc:	bf14      	ite	ne
 8003dde:	2001      	movne	r0, #1
 8003de0:	2000      	moveq	r0, #0
 8003de2:	4770      	bx	lr
 8003de4:	20000130 	andcs	r0, r0, r0, lsr r1

08003de8 <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
	return (int)gbStatusPacket[LENGTH];
}
 8003de8:	4b01      	ldr	r3, [pc, #4]	; (8003df0 <dxl_get_rxpacket_length+0x8>)
 8003dea:	f893 00a9 	ldrb.w	r0, [r3, #169]	; 0xa9
 8003dee:	4770      	bx	lr
 8003df0:	20000130 	andcs	r0, r0, r0, lsr r1

08003df4 <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
	return (int)gbStatusPacket[PARAMETER+index];
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <dxl_get_rxpacket_parameter+0xc>)
 8003df6:	4418      	add	r0, r3
}
 8003df8:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000130 	andcs	r0, r0, r0, lsr r1

08003e04 <dxl_makeword>:
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8003e04:	eb00 2001 	add.w	r0, r0, r1, lsl #8
	return (int)word;
}
 8003e08:	b280      	uxth	r0, r0
 8003e0a:	4770      	bx	lr

08003e0c <dxl_get_lowbyte>:
{
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
 8003e0c:	b2c0      	uxtb	r0, r0
 8003e0e:	4770      	bx	lr

08003e10 <dxl_get_highbyte>:
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
	return (int)temp;
}
 8003e10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003e14:	4770      	bx	lr

08003e16 <dxl_ping>:

void dxl_ping( int id )
{
	while(giBusUsing);
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <dxl_ping+0x16>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	d1fd      	bne.n	8003e1a <dxl_ping+0x4>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_PING;
 8003e1e:	2201      	movs	r2, #1
 8003e20:	721a      	strb	r2, [r3, #8]
	gbInstructionPacket[LENGTH] = 2;
 8003e22:	2202      	movs	r2, #2

void dxl_ping( int id )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e24:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_PING;
	gbInstructionPacket[LENGTH] = 2;
 8003e26:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
 8003e28:	f7ff bfa6 	b.w	8003d78 <dxl_txrx_packet>
 8003e2c:	20000130 	andcs	r0, r0, r0, lsr r1

08003e30 <dxl_read_byte>:
}

int dxl_read_byte( int id, int address )
{
 8003e30:	b510      	push	{r4, lr}
	while(giBusUsing);
 8003e32:	4c08      	ldr	r4, [pc, #32]	; (8003e54 <dxl_read_byte+0x24>)
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1fd      	bne.n	8003e36 <dxl_read_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 8003e42:	2304      	movs	r3, #4

int dxl_read_byte( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e44:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003e46:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
 8003e48:	71e3      	strb	r3, [r4, #7]
	
	dxl_txrx_packet();
 8003e4a:	f7ff ff95 	bl	8003d78 <dxl_txrx_packet>

	return (int)gbStatusPacket[PARAMETER];
}
 8003e4e:	f894 00ab 	ldrb.w	r0, [r4, #171]	; 0xab
 8003e52:	bd10      	pop	{r4, pc}
 8003e54:	20000130 	andcs	r0, r0, r0, lsr r1

08003e58 <dxl_write_byte>:

void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <dxl_write_byte+0x20>)

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8003e5a:	b510      	push	{r4, lr}
	while(giBusUsing);
 8003e5c:	681c      	ldr	r4, [r3, #0]
 8003e5e:	2c00      	cmp	r4, #0
 8003e60:	d1fd      	bne.n	8003e5e <dxl_write_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e62:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
 8003e64:	729a      	strb	r2, [r3, #10]
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003e66:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8003e68:	2204      	movs	r2, #4
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003e6a:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003e6c:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8003e6e:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 8003e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();
 8003e74:	f7ff bf80 	b.w	8003d78 <dxl_txrx_packet>
 8003e78:	20000130 	andcs	r0, r0, r0, lsr r1

08003e7c <dxl_read_word>:
}

int dxl_read_word( int id, int address )
{
 8003e7c:	b510      	push	{r4, lr}
	while(giBusUsing);
 8003e7e:	4c0a      	ldr	r4, [pc, #40]	; (8003ea8 <dxl_read_word+0x2c>)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1fd      	bne.n	8003e82 <dxl_read_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8003e86:	2302      	movs	r3, #2
 8003e88:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
 8003e8a:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 8003e8c:	2304      	movs	r3, #4

int dxl_read_word( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e8e:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
	gbInstructionPacket[LENGTH] = 4;
 8003e90:	71e3      	strb	r3, [r4, #7]
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003e92:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[LENGTH] = 4;
	



	dxl_txrx_packet();
 8003e94:	f7ff ff70 	bl	8003d78 <dxl_txrx_packet>

int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
 8003e98:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
	word = word << 8;
	word = word + lowbyte;
 8003e9c:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 8003ea0:	eb03 2000 	add.w	r0, r3, r0, lsl #8


	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
 8003ea4:	b280      	uxth	r0, r0
 8003ea6:	bd10      	pop	{r4, pc}
 8003ea8:	20000130 	andcs	r0, r0, r0, lsr r1

08003eac <dxl_write_word>:

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <dxl_write_word+0x28>)

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8003eae:	b510      	push	{r4, lr}
	while(giBusUsing);
 8003eb0:	681c      	ldr	r4, [r3, #0]
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	d1fd      	bne.n	8003eb2 <dxl_write_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
 8003eb6:	729a      	strb	r2, [r3, #10]
int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
 8003eb8:	f3c2 2207 	ubfx	r2, r2, #8, #8

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003ebc:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
 8003ebe:	72da      	strb	r2, [r3, #11]
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003ec0:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 8003ec2:	2205      	movs	r2, #5
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003ec4:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003ec6:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 8003ec8:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 8003eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
	
	dxl_txrx_packet();
 8003ece:	f7ff bf53 	b.w	8003d78 <dxl_txrx_packet>
 8003ed2:	bf00      	nop
 8003ed4:	20000130 	andcs	r0, r0, r0, lsr r1

08003ed8 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <FLASH_SetLatency+0x14>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003ee0:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_Latency;
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4310      	orrs	r0, r2
 8003ee6:	6018      	str	r0, [r3, #0]
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40022000 	andmi	r2, r2, r0

08003ef0 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <FLASH_HalfCycleAccessCmd+0x14>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	f022 0208 	bic.w	r2, r2, #8
 8003ef8:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4310      	orrs	r0, r2
 8003efe:	6018      	str	r0, [r3, #0]
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40022000 	andmi	r2, r2, r0

08003f08 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <FLASH_PrefetchBufferCmd+0x14>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	f022 0210 	bic.w	r2, r2, #16
 8003f10:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4310      	orrs	r0, r2
 8003f16:	6018      	str	r0, [r3, #0]
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40022000 	andmi	r2, r2, r0

08003f20 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <FLASH_Unlock+0x10>)
 8003f22:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <FLASH_Unlock+0x14>)
 8003f24:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8003f26:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40022000 	andmi	r2, r2, r0
 8003f34:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08003f38 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8003f38:	4a02      	ldr	r2, [pc, #8]	; (8003f44 <FLASH_Lock+0xc>)
 8003f3a:	6913      	ldr	r3, [r2, #16]
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	6113      	str	r3, [r2, #16]
 8003f42:	4770      	bx	lr
 8003f44:	40022000 	andmi	r2, r2, r0

08003f48 <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 8003f48:	4b01      	ldr	r3, [pc, #4]	; (8003f50 <FLASH_GetUserOptionByte+0x8>)
 8003f4a:	69d8      	ldr	r0, [r3, #28]
}
 8003f4c:	0880      	lsrs	r0, r0, #2
 8003f4e:	4770      	bx	lr
 8003f50:	40022000 	andmi	r2, r2, r0

08003f54 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8003f54:	4b01      	ldr	r3, [pc, #4]	; (8003f5c <FLASH_GetWriteProtectionOptionByte+0x8>)
 8003f56:	6a18      	ldr	r0, [r3, #32]
}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40022000 	andmi	r2, r2, r0

08003f60 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <FLASH_GetReadOutProtectionStatus+0xc>)
 8003f62:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8003f64:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40022000 	andmi	r2, r2, r0

08003f70 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 8003f70:	4b02      	ldr	r3, [pc, #8]	; (8003f7c <FLASH_GetPrefetchBufferStatus+0xc>)
 8003f72:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8003f74:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40022000 	andmi	r2, r2, r0

08003f80 <FLASH_ITConfig>:
*                       - FLASH_IT_EOP: FLASH end of operation Interrupt
* Output         : None
* Return         : None 
*******************************************************************************/
void FLASH_ITConfig(u16 FLASH_IT, FunctionalState NewState)
{
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8003f82:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8003f84:	b109      	cbz	r1, 8003f8a <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8003f86:	4310      	orrs	r0, r2
 8003f88:	e001      	b.n	8003f8e <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 8003f8a:	ea22 0000 	bic.w	r0, r2, r0
 8003f8e:	6118      	str	r0, [r3, #16]
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40022000 	andmi	r2, r2, r0

08003f98 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8003f98:	2801      	cmp	r0, #1
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <FLASH_GetFlagStatus+0x1c>)
 8003f9c:	d103      	bne.n	8003fa6 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 8003f9e:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8003fa0:	f000 0001 	and.w	r0, r0, #1
 8003fa4:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4218      	tst	r0, r3
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8003faa:	bf14      	ite	ne
 8003fac:	2001      	movne	r0, #1
 8003fae:	2000      	moveq	r0, #0
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40022000 	andmi	r2, r2, r0

08003fb8 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8003fb8:	4b01      	ldr	r3, [pc, #4]	; (8003fc0 <FLASH_ClearFlag+0x8>)
 8003fba:	60d8      	str	r0, [r3, #12]
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40022000 	andmi	r2, r2, r0

08003fc4 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <FLASH_GetStatus+0x24>)
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	07d1      	lsls	r1, r2, #31
 8003fca:	d409      	bmi.n	8003fe0 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	0752      	lsls	r2, r2, #29
 8003fd0:	d408      	bmi.n	8003fe4 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8003fd8:	bf14      	ite	ne
 8003fda:	2003      	movne	r0, #3
 8003fdc:	2004      	moveq	r0, #4
 8003fde:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 8003fe4:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8003fe6:	4770      	bx	lr
 8003fe8:	40022000 	andmi	r2, r2, r0

08003fec <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8003fec:	b513      	push	{r0, r1, r4, lr}
 8003fee:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 8003ff0:	f7ff ffe8 	bl	8003fc4 <FLASH_GetStatus>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8003ff4:	2801      	cmp	r0, #1
 8003ff6:	d10f      	bne.n	8004018 <FLASH_WaitForLastOperation+0x2c>
 8003ff8:	b164      	cbz	r4, 8004014 <FLASH_WaitForLastOperation+0x28>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9301      	str	r3, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 8003ffe:	23ff      	movs	r3, #255	; 0xff
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	9b01      	ldr	r3, [sp, #4]
 8004004:	b113      	cbz	r3, 800400c <FLASH_WaitForLastOperation+0x20>
 8004006:	9b01      	ldr	r3, [sp, #4]
 8004008:	3b01      	subs	r3, #1
 800400a:	e7f9      	b.n	8004000 <FLASH_WaitForLastOperation+0x14>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 800400c:	f7ff ffda 	bl	8003fc4 <FLASH_GetStatus>
    Timeout--;
 8004010:	3c01      	subs	r4, #1
 8004012:	e7ef      	b.n	8003ff4 <FLASH_WaitForLastOperation+0x8>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8004014:	2005      	movs	r0, #5
 8004016:	e002      	b.n	800401e <FLASH_WaitForLastOperation+0x32>
 8004018:	2c00      	cmp	r4, #0
 800401a:	bf08      	it	eq
 800401c:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 800401e:	b002      	add	sp, #8
 8004020:	bd10      	pop	{r4, pc}

08004022 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8004022:	b538      	push	{r3, r4, r5, lr}
 8004024:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004026:	f640 70ff 	movw	r0, #4095	; 0xfff
 800402a:	f7ff ffdf 	bl	8003fec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800402e:	2804      	cmp	r0, #4
 8004030:	d114      	bne.n	800405c <FLASH_ErasePage+0x3a>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004032:	4c0b      	ldr	r4, [pc, #44]	; (8004060 <FLASH_ErasePage+0x3e>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004034:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004038:	6923      	ldr	r3, [r4, #16]
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8004040:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004048:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800404a:	f7ff ffcf 	bl	8003fec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800404e:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8004050:	bf1f      	itttt	ne
 8004052:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8004056:	6922      	ldrne	r2, [r4, #16]
 8004058:	4013      	andne	r3, r2
 800405a:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 800405c:	bd38      	pop	{r3, r4, r5, pc}
 800405e:	bf00      	nop
 8004060:	40022000 	andmi	r2, r2, r0

08004064 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8004064:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004066:	f640 70ff 	movw	r0, #4095	; 0xfff
 800406a:	f7ff ffbf 	bl	8003fec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800406e:	2804      	cmp	r0, #4
 8004070:	d113      	bne.n	800409a <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8004072:	4c0a      	ldr	r4, [pc, #40]	; (800409c <FLASH_EraseAllPages+0x38>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004074:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004086:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004088:	f7ff ffb0 	bl	8003fec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800408c:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 800408e:	bf1f      	itttt	ne
 8004090:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 8004094:	6922      	ldrne	r2, [r4, #16]
 8004096:	4013      	andne	r3, r2
 8004098:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 800409a:	bd10      	pop	{r4, pc}
 800409c:	40022000 	andmi	r2, r2, r0

080040a0 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 80040a0:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80040a2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80040a6:	f7ff ffa1 	bl	8003fec <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80040aa:	2804      	cmp	r0, #4
 80040ac:	d129      	bne.n	8004102 <FLASH_EraseOptionBytes+0x62>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80040ae:	4c15      	ldr	r4, [pc, #84]	; (8004104 <FLASH_EraseOptionBytes+0x64>)
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <FLASH_EraseOptionBytes+0x68>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80040b2:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80040b6:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80040b8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80040bc:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	f043 0320 	orr.w	r3, r3, #32
 80040c4:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80040c6:	6923      	ldr	r3, [r4, #16]
 80040c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040cc:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80040ce:	f7ff ff8d 	bl	8003fec <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 80040d2:	2804      	cmp	r0, #4
 80040d4:	d10e      	bne.n	80040f4 <FLASH_EraseOptionBytes+0x54>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80040d6:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80040da:	6922      	ldr	r2, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80040dc:	200f      	movs	r0, #15
    status = FLASH_WaitForLastOperation(EraseTimeout);
    
    if(status == FLASH_COMPLETE)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80040de:	4013      	ands	r3, r2
 80040e0:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80040e2:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80040e4:	22a5      	movs	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80040e6:	f043 0310 	orr.w	r3, r3, #16
 80040ea:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <FLASH_EraseOptionBytes+0x6c>)
 80040ee:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80040f0:	f7ff ff7c 	bl	8003fec <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 80040f4:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80040f6:	bf1f      	itttt	ne
 80040f8:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80040fc:	6922      	ldrne	r2, [r4, #16]
 80040fe:	4013      	andne	r3, r2
 8004100:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8004102:	bd10      	pop	{r4, pc}
 8004104:	40022000 	andmi	r2, r2, r0
 8004108:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 800410c:	1ffff800 	svcne	0x00fff800

08004110 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004114:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8004116:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004118:	f7ff ff68 	bl	8003fec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800411c:	2804      	cmp	r0, #4
 800411e:	d117      	bne.n	8004150 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004120:	4c0c      	ldr	r4, [pc, #48]	; (8004154 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004122:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 800412c:	b2ab      	uxth	r3, r5
 800412e:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004130:	f7ff ff5c 	bl	8003fec <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8004134:	2804      	cmp	r0, #4
 8004136:	d104      	bne.n	8004142 <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8004138:	0c2d      	lsrs	r5, r5, #16
 800413a:	8075      	strh	r5, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800413c:	200f      	movs	r0, #15
 800413e:	f7ff ff55 	bl	8003fec <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8004142:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8004144:	bf1f      	itttt	ne
 8004146:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 800414a:	6922      	ldrne	r2, [r4, #16]
 800414c:	4013      	andne	r3, r2
 800414e:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	bf00      	nop
 8004154:	40022000 	andmi	r2, r2, r0

08004158 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800415c:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 800415e:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004160:	f7ff ff44 	bl	8003fec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004164:	2804      	cmp	r0, #4
 8004166:	d10f      	bne.n	8004188 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004168:	4c08      	ldr	r4, [pc, #32]	; (800418c <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800416a:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8004174:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004176:	f7ff ff39 	bl	8003fec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800417a:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 800417c:	bf1f      	itttt	ne
 800417e:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8004182:	6922      	ldrne	r2, [r4, #16]
 8004184:	4013      	andne	r3, r2
 8004186:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8004188:	bd70      	pop	{r4, r5, r6, pc}
 800418a:	bf00      	nop
 800418c:	40022000 	andmi	r2, r2, r0

08004190 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004194:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8004196:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004198:	f7ff ff28 	bl	8003fec <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800419c:	2804      	cmp	r0, #4
 800419e:	d115      	bne.n	80041cc <FLASH_ProgramOptionByteData+0x3c>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80041a0:	4c0b      	ldr	r4, [pc, #44]	; (80041d0 <FLASH_ProgramOptionByteData+0x40>)
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <FLASH_ProgramOptionByteData+0x44>)
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
 80041a4:	b2ad      	uxth	r5, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80041a6:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80041a8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80041ac:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80041ae:	6923      	ldr	r3, [r4, #16]
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80041b0:	200f      	movs	r0, #15
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80041b2:	f043 0310 	orr.w	r3, r3, #16
 80041b6:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 80041b8:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80041ba:	f7ff ff17 	bl	8003fec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80041be:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80041c0:	bf1f      	itttt	ne
 80041c2:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80041c6:	6922      	ldrne	r2, [r4, #16]
 80041c8:	4013      	andne	r3, r2
 80041ca:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
 80041ce:	bf00      	nop
 80041d0:	40022000 	andmi	r2, r2, r0
 80041d4:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

080041d8 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 80041d8:	b510      	push	{r4, lr}
 80041da:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80041dc:	200f      	movs	r0, #15
 80041de:	f7ff ff05 	bl	8003fec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80041e2:	2804      	cmp	r0, #4
 80041e4:	d141      	bne.n	800426a <FLASH_EnableWriteProtection+0x92>
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 80041e6:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <FLASH_EnableWriteProtection+0x94>)
 80041ea:	4a21      	ldr	r2, [pc, #132]	; (8004270 <FLASH_EnableWriteProtection+0x98>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 80041ec:	b2e1      	uxtb	r1, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80041ee:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80041f0:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80041f4:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 80041f6:	691a      	ldr	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 80041f8:	29ff      	cmp	r1, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 80041fa:	f042 0210 	orr.w	r2, r2, #16
 80041fe:	611a      	str	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 8004200:	d104      	bne.n	800420c <FLASH_EnableWriteProtection+0x34>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 8004202:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004206:	2bff      	cmp	r3, #255	; 0xff
 8004208:	d108      	bne.n	800421c <FLASH_EnableWriteProtection+0x44>
 800420a:	e00f      	b.n	800422c <FLASH_EnableWriteProtection+0x54>
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <FLASH_EnableWriteProtection+0x9c>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800420e:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8004210:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004212:	f7ff feeb 	bl	8003fec <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004216:	2804      	cmp	r0, #4
 8004218:	d11f      	bne.n	800425a <FLASH_EnableWriteProtection+0x82>
 800421a:	e7f2      	b.n	8004202 <FLASH_EnableWriteProtection+0x2a>
    {
      OB->WRP1 = WRP1_Data;
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <FLASH_EnableWriteProtection+0x9c>)
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 800421e:	b29b      	uxth	r3, r3
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8004220:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004222:	200f      	movs	r0, #15
 8004224:	f7ff fee2 	bl	8003fec <FLASH_WaitForLastOperation>
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8004228:	2804      	cmp	r0, #4
 800422a:	d116      	bne.n	800425a <FLASH_EnableWriteProtection+0x82>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 800422c:	f3c4 4307 	ubfx	r3, r4, #16, #8
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8004230:	2bff      	cmp	r3, #255	; 0xff
 8004232:	d007      	beq.n	8004244 <FLASH_EnableWriteProtection+0x6c>
    {
      OB->WRP2 = WRP2_Data;
 8004234:	4a0f      	ldr	r2, [pc, #60]	; (8004274 <FLASH_EnableWriteProtection+0x9c>)
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8004236:	b29b      	uxth	r3, r3
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8004238:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800423a:	200f      	movs	r0, #15
 800423c:	f7ff fed6 	bl	8003fec <FLASH_WaitForLastOperation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8004240:	2804      	cmp	r0, #4
 8004242:	d10a      	bne.n	800425a <FLASH_EnableWriteProtection+0x82>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 8004244:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8004246:	2cff      	cmp	r4, #255	; 0xff
 8004248:	d101      	bne.n	800424e <FLASH_EnableWriteProtection+0x76>
 800424a:	2004      	movs	r0, #4
 800424c:	e007      	b.n	800425e <FLASH_EnableWriteProtection+0x86>
    {
      OB->WRP3 = WRP3_Data;
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <FLASH_EnableWriteProtection+0x9c>)
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 8004250:	b2a4      	uxth	r4, r4
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8004252:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004254:	200f      	movs	r0, #15
 8004256:	f7ff fec9 	bl	8003fec <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 800425a:	2801      	cmp	r0, #1
 800425c:	d005      	beq.n	800426a <FLASH_EnableWriteProtection+0x92>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800425e:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8004262:	4a02      	ldr	r2, [pc, #8]	; (800426c <FLASH_EnableWriteProtection+0x94>)
 8004264:	6911      	ldr	r1, [r2, #16]
 8004266:	400b      	ands	r3, r1
 8004268:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 800426a:	bd10      	pop	{r4, pc}
 800426c:	40022000 	andmi	r2, r2, r0
 8004270:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004274:	1ffff800 	svcne	0x00fff800

08004278 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 800427c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004280:	f7ff feb4 	bl	8003fec <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8004284:	2804      	cmp	r0, #4
 8004286:	d136      	bne.n	80042f6 <FLASH_ReadOutProtection+0x7e>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004288:	4c1b      	ldr	r4, [pc, #108]	; (80042f8 <FLASH_ReadOutProtection+0x80>)
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <FLASH_ReadOutProtection+0x84>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800428c:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004290:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8004292:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004296:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	f043 0320 	orr.w	r3, r3, #32
 800429e:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a6:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80042a8:	f7ff fea0 	bl	8003fec <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 80042ac:	2804      	cmp	r0, #4
 80042ae:	d11b      	bne.n	80042e8 <FLASH_ReadOutProtection+0x70>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80042b0:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	6123      	str	r3, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	f043 0310 	orr.w	r3, r3, #16
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <FLASH_ReadOutProtection+0x88>)

      if(NewState != DISABLE)
 80042c4:	b10d      	cbz	r5, 80042ca <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 80042c6:	2200      	movs	r2, #0
 80042c8:	e000      	b.n	80042cc <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80042ca:	22a5      	movs	r2, #165	; 0xa5
 80042cc:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80042ce:	f640 70ff 	movw	r0, #4095	; 0xfff
 80042d2:	f7ff fe8b 	bl	8003fec <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 80042d6:	2801      	cmp	r0, #1
 80042d8:	d00d      	beq.n	80042f6 <FLASH_ReadOutProtection+0x7e>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80042da:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80042de:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <FLASH_ReadOutProtection+0x80>)
 80042e0:	6911      	ldr	r1, [r2, #16]
 80042e2:	400b      	ands	r3, r1
 80042e4:	6113      	str	r3, [r2, #16]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 80042e8:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 80042ea:	bf1f      	itttt	ne
 80042ec:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 80042f0:	6922      	ldrne	r2, [r4, #16]
 80042f2:	4013      	andne	r3, r2
 80042f4:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	40022000 	andmi	r2, r2, r0
 80042fc:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004300:	1ffff800 	svcne	0x00fff800

08004304 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8004306:	4d11      	ldr	r5, [pc, #68]	; (800434c <FLASH_UserOptionByteConfig+0x48>)
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <FLASH_UserOptionByteConfig+0x4c>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800430a:	4606      	mov	r6, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800430c:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 800430e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004312:	60ab      	str	r3, [r5, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004314:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004316:	460f      	mov	r7, r1
 8004318:	4614      	mov	r4, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800431a:	f7ff fe67 	bl	8003fec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800431e:	2804      	cmp	r0, #4
 8004320:	d113      	bne.n	800434a <FLASH_UserOptionByteConfig+0x46>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8004322:	692b      	ldr	r3, [r5, #16]
 8004324:	f044 00f8 	orr.w	r0, r4, #248	; 0xf8
 8004328:	f043 0310 	orr.w	r3, r3, #16
 800432c:	612b      	str	r3, [r5, #16]
 800432e:	4338      	orrs	r0, r7
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8004330:	4b08      	ldr	r3, [pc, #32]	; (8004354 <FLASH_UserOptionByteConfig+0x50>)
 8004332:	4330      	orrs	r0, r6
 8004334:	8058      	strh	r0, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004336:	200f      	movs	r0, #15
 8004338:	f7ff fe58 	bl	8003fec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800433c:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800433e:	bf1f      	itttt	ne
 8004340:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8004344:	692a      	ldrne	r2, [r5, #16]
 8004346:	4013      	andne	r3, r2
 8004348:	612b      	strne	r3, [r5, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434c:	40022000 	andmi	r2, r2, r0
 8004350:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004354:	1ffff800 	svcne	0x00fff800

08004358 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004358:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <GPIO_DeInit+0x9c>)
 800435c:	4298      	cmp	r0, r3
 800435e:	d02f      	beq.n	80043c0 <GPIO_DeInit+0x68>
 8004360:	d811      	bhi.n	8004386 <GPIO_DeInit+0x2e>
 8004362:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004366:	4298      	cmp	r0, r3
 8004368:	d01e      	beq.n	80043a8 <GPIO_DeInit+0x50>
 800436a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800436e:	4298      	cmp	r0, r3
 8004370:	d020      	beq.n	80043b4 <GPIO_DeInit+0x5c>
 8004372:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004376:	4298      	cmp	r0, r3
 8004378:	d13a      	bne.n	80043f0 <GPIO_DeInit+0x98>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800437a:	2004      	movs	r0, #4
 800437c:	2101      	movs	r1, #1
 800437e:	f000 fc35 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8004382:	2004      	movs	r0, #4
 8004384:	e02f      	b.n	80043e6 <GPIO_DeInit+0x8e>
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <GPIO_DeInit+0xa0>)
 8004388:	4298      	cmp	r0, r3
 800438a:	d01f      	beq.n	80043cc <GPIO_DeInit+0x74>
 800438c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004390:	4298      	cmp	r0, r3
 8004392:	d021      	beq.n	80043d8 <GPIO_DeInit+0x80>
 8004394:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004398:	4298      	cmp	r0, r3
 800439a:	d129      	bne.n	80043f0 <GPIO_DeInit+0x98>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 800439c:	2040      	movs	r0, #64	; 0x40
 800439e:	2101      	movs	r1, #1
 80043a0:	f000 fc24 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80043a4:	2040      	movs	r0, #64	; 0x40
 80043a6:	e01e      	b.n	80043e6 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80043a8:	2008      	movs	r0, #8
 80043aa:	2101      	movs	r1, #1
 80043ac:	f000 fc1e 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80043b0:	2008      	movs	r0, #8
 80043b2:	e018      	b.n	80043e6 <GPIO_DeInit+0x8e>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80043b4:	2010      	movs	r0, #16
 80043b6:	2101      	movs	r1, #1
 80043b8:	f000 fc18 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80043bc:	2010      	movs	r0, #16
 80043be:	e012      	b.n	80043e6 <GPIO_DeInit+0x8e>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80043c0:	2020      	movs	r0, #32
 80043c2:	2101      	movs	r1, #1
 80043c4:	f000 fc12 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80043c8:	2020      	movs	r0, #32
 80043ca:	e00c      	b.n	80043e6 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80043cc:	2080      	movs	r0, #128	; 0x80
 80043ce:	2101      	movs	r1, #1
 80043d0:	f000 fc0c 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80043d4:	2080      	movs	r0, #128	; 0x80
 80043d6:	e006      	b.n	80043e6 <GPIO_DeInit+0x8e>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80043d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80043dc:	2101      	movs	r1, #1
 80043de:	f000 fc05 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80043e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80043e6:	2100      	movs	r1, #0
      break;                       

    default:
      break;
  }
}
 80043e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80043ec:	f000 bbfe 	b.w	8004bec <RCC_APB2PeriphResetCmd>
 80043f0:	bd08      	pop	{r3, pc}
 80043f2:	bf00      	nop
 80043f4:	40011400 	andmi	r1, r1, r0, lsl #8
 80043f8:	40011c00 	andmi	r1, r1, r0, lsl #24

080043fc <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 80043fc:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80043fe:	2001      	movs	r0, #1
 8004400:	4601      	mov	r1, r0
 8004402:	f000 fbf3 	bl	8004bec <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8004406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800440a:	2001      	movs	r0, #1
 800440c:	2100      	movs	r1, #0
 800440e:	f000 bbed 	b.w	8004bec <RCC_APB2PeriphResetCmd>

08004412 <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8004412:	78ca      	ldrb	r2, [r1, #3]
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004414:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8004416:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8004418:	bf48      	it	mi
 800441a:	788c      	ldrbmi	r4, [r1, #2]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 800441c:	880d      	ldrh	r5, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 800441e:	f002 030f 	and.w	r3, r2, #15
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8004422:	bf48      	it	mi
 8004424:	4323      	orrmi	r3, r4
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8004426:	f015 0fff 	tst.w	r5, #255	; 0xff
 800442a:	d01d      	beq.n	8004468 <GPIO_Init+0x56>
  {
    tmpreg = GPIOx->CRL;
 800442c:	6801      	ldr	r1, [r0, #0]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800442e:	2400      	movs	r4, #0
    {
      pos = ((u32)0x01) << pinpos;
 8004430:	2601      	movs	r6, #1
 8004432:	40a6      	lsls	r6, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004434:	ea06 0705 	and.w	r7, r6, r5

      if (currentpin == pos)
 8004438:	42b7      	cmp	r7, r6
 800443a:	d111      	bne.n	8004460 <GPIO_Init+0x4e>
      {
        pos = pinpos << 2;
 800443c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8004440:	260f      	movs	r6, #15
 8004442:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 8004446:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800444a:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800444c:	fa03 f60e 	lsl.w	r6, r3, lr
 8004450:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004454:	d101      	bne.n	800445a <GPIO_Init+0x48>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8004456:	6147      	str	r7, [r0, #20]
 8004458:	e002      	b.n	8004460 <GPIO_Init+0x4e>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800445a:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 800445c:	bf08      	it	eq
 800445e:	6107      	streq	r7, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004460:	3401      	adds	r4, #1
 8004462:	2c08      	cmp	r4, #8
 8004464:	d1e4      	bne.n	8004430 <GPIO_Init+0x1e>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8004466:	6001      	str	r1, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004468:	2dff      	cmp	r5, #255	; 0xff
 800446a:	d91f      	bls.n	80044ac <GPIO_Init+0x9a>
  {
    tmpreg = GPIOx->CRH;
 800446c:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800446e:	2400      	movs	r4, #0
 8004470:	f104 0708 	add.w	r7, r4, #8
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8004474:	2601      	movs	r6, #1
 8004476:	40be      	lsls	r6, r7
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8004478:	ea06 0705 	and.w	r7, r6, r5
      if (currentpin == pos)
 800447c:	42b7      	cmp	r7, r6
 800447e:	d111      	bne.n	80044a4 <GPIO_Init+0x92>
      {
        pos = pinpos << 2;
 8004480:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8004484:	260f      	movs	r6, #15
 8004486:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 800448a:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800448e:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004490:	fa03 f60e 	lsl.w	r6, r3, lr
 8004494:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004498:	d101      	bne.n	800449e <GPIO_Init+0x8c>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 800449a:	6147      	str	r7, [r0, #20]
 800449c:	e002      	b.n	80044a4 <GPIO_Init+0x92>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800449e:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 80044a0:	bf08      	it	eq
 80044a2:	6107      	streq	r7, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80044a4:	3401      	adds	r4, #1
 80044a6:	2c08      	cmp	r4, #8
 80044a8:	d1e2      	bne.n	8004470 <GPIO_Init+0x5e>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80044aa:	6041      	str	r1, [r0, #4]
 80044ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044ae <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80044ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b2:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80044b4:	2302      	movs	r3, #2
 80044b6:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80044b8:	2304      	movs	r3, #4
 80044ba:	70c3      	strb	r3, [r0, #3]
 80044bc:	4770      	bx	lr

080044be <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 80044be:	6883      	ldr	r3, [r0, #8]
 80044c0:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 80044c2:	bf14      	ite	ne
 80044c4:	2001      	movne	r0, #1
 80044c6:	2000      	moveq	r0, #0
 80044c8:	4770      	bx	lr

080044ca <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 80044ca:	6880      	ldr	r0, [r0, #8]
}
 80044cc:	b280      	uxth	r0, r0
 80044ce:	4770      	bx	lr

080044d0 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 80044d0:	68c3      	ldr	r3, [r0, #12]
 80044d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 80044d4:	bf14      	ite	ne
 80044d6:	2001      	movne	r0, #1
 80044d8:	2000      	moveq	r0, #0
 80044da:	4770      	bx	lr

080044dc <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 80044dc:	68c0      	ldr	r0, [r0, #12]
}
 80044de:	b280      	uxth	r0, r0
 80044e0:	4770      	bx	lr

080044e2 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80044e2:	6101      	str	r1, [r0, #16]
 80044e4:	4770      	bx	lr

080044e6 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80044e6:	6141      	str	r1, [r0, #20]
 80044e8:	4770      	bx	lr

080044ea <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80044ea:	b10a      	cbz	r2, 80044f0 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ec:	6101      	str	r1, [r0, #16]
 80044ee:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80044f0:	6141      	str	r1, [r0, #20]
 80044f2:	4770      	bx	lr

080044f4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80044f4:	60c1      	str	r1, [r0, #12]
 80044f6:	4770      	bx	lr

080044f8 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80044f8:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80044fc:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80044fe:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004500:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004502:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004504:	6983      	ldr	r3, [r0, #24]
 8004506:	4770      	bx	lr

08004508 <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8004508:	4a05      	ldr	r2, [pc, #20]	; (8004520 <GPIO_EventOutputConfig+0x18>)
 800450a:	6813      	ldr	r3, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 800450c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	0c1b      	lsrs	r3, r3, #16
 8004514:	4319      	orrs	r1, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8004516:	ea41 1000 	orr.w	r0, r1, r0, lsl #4

  AFIO->EVCR = tmpreg;
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	andmi	r0, r1, r0

08004524 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8004524:	4b01      	ldr	r3, [pc, #4]	; (800452c <GPIO_EventOutputCmd+0x8>)
 8004526:	6018      	str	r0, [r3, #0]
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	4220001c 	eormi	r0, r0, #28

08004530 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8004530:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8004532:	4c13      	ldr	r4, [pc, #76]	; (8004580 <GPIO_PinRemapConfig+0x50>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8004534:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8004538:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 800453c:	6863      	ldr	r3, [r4, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 800453e:	b282      	uxth	r2, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8004540:	d106      	bne.n	8004550 <GPIO_PinRemapConfig+0x20>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8004542:	6865      	ldr	r5, [r4, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8004544:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8004548:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 800454c:	6065      	str	r5, [r4, #4]
 800454e:	e00e      	b.n	800456e <GPIO_PinRemapConfig+0x3e>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8004550:	02c4      	lsls	r4, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004552:	bf55      	itete	pl
 8004554:	0d44      	lsrpl	r4, r0, #21
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 8004556:	2403      	movmi	r4, #3
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004558:	0124      	lslpl	r4, r4, #4
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800455a:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 800455e:	bf4c      	ite	mi
 8004560:	40ac      	lslmi	r4, r5
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004562:	fa02 f404 	lslpl.w	r4, r2, r4
 8004566:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800456a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 800456e:	b119      	cbz	r1, 8004578 <GPIO_PinRemapConfig+0x48>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004570:	0d40      	lsrs	r0, r0, #21
 8004572:	0100      	lsls	r0, r0, #4
 8004574:	4082      	lsls	r2, r0
 8004576:	4313      	orrs	r3, r2
  }

  AFIO->MAPR = tmpreg;
 8004578:	4a01      	ldr	r2, [pc, #4]	; (8004580 <GPIO_PinRemapConfig+0x50>)
 800457a:	6053      	str	r3, [r2, #4]
 800457c:	bd30      	pop	{r4, r5, pc}
 800457e:	bf00      	nop
 8004580:	40010000 	andmi	r0, r1, r0

08004584 <GPIO_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8004584:	f001 0303 	and.w	r3, r1, #3
 8004588:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800458c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004590:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8004594:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8004596:	009b      	lsls	r3, r3, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8004598:	688c      	ldr	r4, [r1, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 800459a:	220f      	movs	r2, #15
 800459c:	409a      	lsls	r2, r3

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800459e:	ea24 0202 	bic.w	r2, r4, r2
 80045a2:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 80045a4:	688a      	ldr	r2, [r1, #8]
 80045a6:	4098      	lsls	r0, r3
 80045a8:	4302      	orrs	r2, r0
 80045aa:	608a      	str	r2, [r1, #8]
 80045ac:	bd10      	pop	{r4, pc}
 80045ae:	bf00      	nop

080045b0 <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <NVIC_DeInit+0x30>)
  NVIC->ICER[1] = 0x0FFFFFFF;
 80045b2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80045b6:	f04f 31ff 	mov.w	r1, #4294967295
 80045ba:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICER[1] = 0x0FFFFFFF;
 80045be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ICPR[0] = 0xFFFFFFFF;
 80045c2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ICPR[1] = 0x0FFFFFFF;
 80045c6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  
  for(index = 0; index < 0x0F; index++)
 80045ca:	2200      	movs	r2, #0
  {
     NVIC->IPR[index] = 0x00000000;
 80045cc:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80045d0:	3201      	adds	r2, #1
  {
     NVIC->IPR[index] = 0x00000000;
 80045d2:	2000      	movs	r0, #0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80045d4:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 80045d6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80045da:	d1f7      	bne.n	80045cc <NVIC_DeInit+0x1c>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e100 	and	lr, r0, r0, lsl #2

080045e4 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <NVIC_SCBDeInit+0x28>)
 80045e6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 80045ea:	4909      	ldr	r1, [pc, #36]	; (8004610 <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 80045ec:	605a      	str	r2, [r3, #4]
  SCB->VTOR = 0x00000000;
 80045ee:	2200      	movs	r2, #0
 80045f0:	609a      	str	r2, [r3, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 80045f2:	60d9      	str	r1, [r3, #12]
  SCB->SCR = 0x00000000;
 80045f4:	611a      	str	r2, [r3, #16]
  SCB->CCR = 0x00000000;
 80045f6:	615a      	str	r2, [r3, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 80045f8:	619a      	str	r2, [r3, #24]
 80045fa:	61da      	str	r2, [r3, #28]
 80045fc:	621a      	str	r2, [r3, #32]
  }
  SCB->SHCSR = 0x00000000;
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24
  SCB->CFSR = 0xFFFFFFFF;
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
  SCB->HFSR = 0xFFFFFFFF;
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c
  SCB->DFSR = 0xFFFFFFFF;
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	and	lr, r0, r0, lsl #26
 8004610:	05fa0000 	ldrbeq	r0, [sl, #0]!

08004614 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004614:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <NVIC_PriorityGroupConfig+0x10>)
 800461a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800461e:	60d8      	str	r0, [r3, #12]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000ed00 	and	lr, r0, r0, lsl #26

08004628 <NVIC_Init>:
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004628:	78c2      	ldrb	r2, [r0, #3]
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800462a:	b530      	push	{r4, r5, lr}
 800462c:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800462e:	b372      	cbz	r2, 800468e <NVIC_Init+0x66>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004630:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <NVIC_Init+0x7c>)
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004632:	f003 0503 	and.w	r5, r3, #3
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004636:	68d4      	ldr	r4, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004638:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 800463a:	43e4      	mvns	r4, r4
 800463c:	f3c4 2402 	ubfx	r4, r4, #8, #3
    tmppre = (0x4 - tmppriority);
 8004640:	f1c4 0104 	rsb	r1, r4, #4
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004644:	fa02 f101 	lsl.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8004648:	220f      	movs	r2, #15
 800464a:	40e2      	lsrs	r2, r4
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800464c:	7884      	ldrb	r4, [r0, #2]
 800464e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8004652:	4022      	ands	r2, r4
 8004654:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004658:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800465c:	430a      	orrs	r2, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 800465e:	f8d3 4300 	ldr.w	r4, [r3, #768]	; 0x300
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004662:	00ed      	lsls	r5, r5, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8004664:	0112      	lsls	r2, r2, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004666:	21ff      	movs	r1, #255	; 0xff
 8004668:	40a9      	lsls	r1, r5
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800466a:	40aa      	lsls	r2, r5
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 800466c:	ea24 0401 	bic.w	r4, r4, r1
    tmppriority &= tmpmask;  
 8004670:	400a      	ands	r2, r1
    tmpreg |= tmppriority;
 8004672:	4322      	orrs	r2, r4

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8004674:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004678:	7803      	ldrb	r3, [r0, #0]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800467a:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800467c:	0959      	lsrs	r1, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <NVIC_Init+0x80>)
 8004688:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800468c:	bd30      	pop	{r4, r5, pc}
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800468e:	095a      	lsrs	r2, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004690:	2101      	movs	r1, #1
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	4099      	lsls	r1, r3
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004698:	f102 0320 	add.w	r3, r2, #32
 800469c:	4a02      	ldr	r2, [pc, #8]	; (80046a8 <NVIC_Init+0x80>)
 800469e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80046a2:	bd30      	pop	{r4, r5, pc}
 80046a4:	e000ed00 	and	lr, r0, r0, lsl #26
 80046a8:	e000e100 	and	lr, r0, r0, lsl #2

080046ac <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 80046ac:	2300      	movs	r3, #0
 80046ae:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 80046b0:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 80046b2:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 80046b4:	70c3      	strb	r3, [r0, #3]
 80046b6:	4770      	bx	lr

080046b8 <NVIC_SETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
  __SETPRIMASK();
 80046b8:	f001 ba35 	b.w	8005b26 <__SETPRIMASK>

080046bc <NVIC_RESETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
  __RESETPRIMASK();
 80046bc:	f001 ba35 	b.w	8005b2a <__RESETPRIMASK>

080046c0 <NVIC_SETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
  __SETFAULTMASK();
 80046c0:	f001 ba35 	b.w	8005b2e <__SETFAULTMASK>

080046c4 <NVIC_RESETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
  __RESETFAULTMASK();
 80046c4:	f001 ba35 	b.w	8005b32 <__RESETFAULTMASK>

080046c8 <NVIC_BASEPRICONFIG>:
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 80046c8:	0100      	lsls	r0, r0, #4
 80046ca:	f001 ba34 	b.w	8005b36 <__BASEPRICONFIG>

080046ce <NVIC_GetBASEPRI>:
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
  return (__GetBASEPRI());
 80046ce:	f001 ba35 	b.w	8005b3c <__GetBASEPRI>

080046d2 <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 80046d2:	4b02      	ldr	r3, [pc, #8]	; (80046dc <NVIC_GetCurrentPendingIRQChannel+0xa>)
 80046d4:	6858      	ldr	r0, [r3, #4]
}
 80046d6:	f3c0 3009 	ubfx	r0, r0, #12, #10
 80046da:	4770      	bx	lr
 80046dc:	e000ed00 	and	lr, r0, r0, lsl #26

080046e0 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 80046e0:	f000 031f 	and.w	r3, r0, #31
 80046e4:	2201      	movs	r2, #1
 80046e6:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 80046e8:	4904      	ldr	r1, [pc, #16]	; (80046fc <NVIC_GetIRQChannelPendingBitStatus+0x1c>)
 80046ea:	0943      	lsrs	r3, r0, #5
 80046ec:	3340      	adds	r3, #64	; 0x40
 80046ee:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80046f2:	4010      	ands	r0, r2
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 80046f4:	1a83      	subs	r3, r0, r2
 80046f6:	4258      	negs	r0, r3
 80046f8:	4158      	adcs	r0, r3
 80046fa:	4770      	bx	lr
 80046fc:	e000e100 	and	lr, r0, r0, lsl #2

08004700 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8004700:	4b01      	ldr	r3, [pc, #4]	; (8004708 <NVIC_SetIRQChannelPendingBit+0x8>)
 8004702:	6018      	str	r0, [r3, #0]
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000ef00 	and	lr, r0, r0, lsl #30

0800470c <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 800470c:	0943      	lsrs	r3, r0, #5
 800470e:	2201      	movs	r2, #1
 8004710:	f000 001f 	and.w	r0, r0, #31
 8004714:	4902      	ldr	r1, [pc, #8]	; (8004720 <NVIC_ClearIRQChannelPendingBit+0x14>)
 8004716:	4082      	lsls	r2, r0
 8004718:	3360      	adds	r3, #96	; 0x60
 800471a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800471e:	4770      	bx	lr
 8004720:	e000e100 	and	lr, r0, r0, lsl #2

08004724 <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8004724:	4b02      	ldr	r3, [pc, #8]	; (8004730 <NVIC_GetCurrentActiveHandler+0xc>)
 8004726:	6858      	ldr	r0, [r3, #4]
}
 8004728:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000ed00 	and	lr, r0, r0, lsl #26

08004734 <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8004734:	f000 031f 	and.w	r3, r0, #31
 8004738:	2201      	movs	r2, #1
 800473a:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 800473c:	4904      	ldr	r1, [pc, #16]	; (8004750 <NVIC_GetIRQChannelActiveBitStatus+0x1c>)
 800473e:	0943      	lsrs	r3, r0, #5
 8004740:	3380      	adds	r3, #128	; 0x80
 8004742:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8004746:	4010      	ands	r0, r2
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8004748:	1a83      	subs	r3, r0, r2
 800474a:	4258      	negs	r0, r3
 800474c:	4158      	adcs	r0, r3
 800474e:	4770      	bx	lr
 8004750:	e000e100 	and	lr, r0, r0, lsl #2

08004754 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8004754:	4b01      	ldr	r3, [pc, #4]	; (800475c <NVIC_GetCPUID+0x8>)
 8004756:	6818      	ldr	r0, [r3, #0]
}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000ed00 	and	lr, r0, r0, lsl #26

08004760 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8004760:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8004764:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004768:	4b01      	ldr	r3, [pc, #4]	; (8004770 <NVIC_SetVectorTable+0x10>)
 800476a:	4308      	orrs	r0, r1
 800476c:	6098      	str	r0, [r3, #8]
 800476e:	4770      	bx	lr
 8004770:	e000ed00 	and	lr, r0, r0, lsl #26

08004774 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8004774:	4a01      	ldr	r2, [pc, #4]	; (800477c <NVIC_GenerateSystemReset+0x8>)
 8004776:	4b02      	ldr	r3, [pc, #8]	; (8004780 <NVIC_GenerateSystemReset+0xc>)
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	4770      	bx	lr
 800477c:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8004780:	e000ed00 	and	lr, r0, r0, lsl #26

08004784 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8004784:	4a01      	ldr	r2, [pc, #4]	; (800478c <NVIC_GenerateCoreReset+0x8>)
 8004786:	4b02      	ldr	r3, [pc, #8]	; (8004790 <NVIC_GenerateCoreReset+0xc>)
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	4770      	bx	lr
 800478c:	05fa0001 	ldrbeq	r0, [sl, #1]!
 8004790:	e000ed00 	and	lr, r0, r0, lsl #26

08004794 <NVIC_SystemLPConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
{
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8004796:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8004798:	b109      	cbz	r1, 800479e <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 800479a:	4310      	orrs	r0, r2
 800479c:	e001      	b.n	80047a2 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 800479e:	ea22 0000 	bic.w	r0, r2, r0
 80047a2:	6118      	str	r0, [r3, #16]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000ed00 	and	lr, r0, r0, lsl #26

080047ac <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 80047ac:	f000 001f 	and.w	r0, r0, #31
 80047b0:	2201      	movs	r2, #1
 80047b2:	4082      	lsls	r2, r0
 80047b4:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <NVIC_SystemHandlerConfig+0x1c>)

  if (NewState != DISABLE)
 80047b6:	b111      	cbz	r1, 80047be <NVIC_SystemHandlerConfig+0x12>
  {
    SCB->SHCSR |= tmpreg;
 80047b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047ba:	430a      	orrs	r2, r1
 80047bc:	e002      	b.n	80047c4 <NVIC_SystemHandlerConfig+0x18>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 80047be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047c0:	ea21 0202 	bic.w	r2, r1, r2
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24
 80047c6:	4770      	bx	lr
 80047c8:	e000ed00 	and	lr, r0, r0, lsl #26

080047cc <NVIC_SystemHandlerPriorityConfig>:
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <NVIC_SystemHandlerPriorityConfig+0x48>)
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 80047ce:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  tmp1 = (0x4 - tmppriority);
 80047d8:	f1c3 0404 	rsb	r4, r3, #4
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 80047dc:	40a1      	lsls	r1, r4
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
 80047de:	24ff      	movs	r4, #255	; 0xff
 80047e0:	fa24 f303 	lsr.w	r3, r4, r3
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 80047e4:	401a      	ands	r2, r3

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
 80047e6:	f3c0 2301 	ubfx	r3, r0, #8, #2
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 80047ea:	f3c0 1081 	ubfx	r0, r0, #6, #2
 80047ee:	0080      	lsls	r0, r0, #2
 80047f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80047f4:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 80047f8:	4311      	orrs	r1, r2

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 80047fa:	00db      	lsls	r3, r3, #3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 80047fc:	6982      	ldr	r2, [r0, #24]
  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
 80047fe:	409c      	lsls	r4, r3
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8004800:	ea22 0404 	bic.w	r4, r2, r4
 8004804:	6184      	str	r4, [r0, #24]
  SCB->SHPR[tmp1] |= tmppriority;
 8004806:	6982      	ldr	r2, [r0, #24]
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8004808:	0109      	lsls	r1, r1, #4
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 800480a:	4099      	lsls	r1, r3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 800480c:	4311      	orrs	r1, r2
 800480e:	6181      	str	r1, [r0, #24]
 8004810:	bd10      	pop	{r4, pc}
 8004812:	bf00      	nop
 8004814:	e000ed00 	and	lr, r0, r0, lsl #26

08004818 <NVIC_GetSystemHandlerPendingBitStatus>:
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004818:	4a05      	ldr	r2, [pc, #20]	; (8004830 <NVIC_GetSystemHandlerPendingBitStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;
 800481a:	f3c0 2083 	ubfx	r0, r0, #10, #4

  tmppos = (u32)0x01 << tmppos;
 800481e:	2301      	movs	r3, #1
 8004820:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004822:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004824:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004826:	1ac3      	subs	r3, r0, r3
 8004828:	4258      	negs	r0, r3
 800482a:	4158      	adcs	r0, r3
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000ed00 	and	lr, r0, r0, lsl #26

08004834 <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8004834:	4904      	ldr	r1, [pc, #16]	; (8004848 <NVIC_SetSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8004836:	f000 001f 	and.w	r0, r0, #31
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 800483a:	684b      	ldr	r3, [r1, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	4082      	lsls	r2, r0
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	e000ed00 	and	lr, r0, r0, lsl #26

0800484c <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 800484c:	4904      	ldr	r1, [pc, #16]	; (8004860 <NVIC_ClearSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 800484e:	f000 001f 	and.w	r0, r0, #31
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8004852:	684b      	ldr	r3, [r1, #4]
 8004854:	3801      	subs	r0, #1
 8004856:	2201      	movs	r2, #1
 8004858:	4082      	lsls	r2, r0
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	and	lr, r0, r0, lsl #26

08004864 <NVIC_GetSystemHandlerActiveBitStatus>:
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004864:	4a05      	ldr	r2, [pc, #20]	; (800487c <NVIC_GetSystemHandlerActiveBitStatus+0x18>)
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
 8004866:	f3c0 3083 	ubfx	r0, r0, #14, #4

  tmppos = (u32)0x01 << tmppos;
 800486a:	2301      	movs	r3, #1
 800486c:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 800486e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004870:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004872:	1ac3      	subs	r3, r0, r3
 8004874:	4258      	negs	r0, r3
 8004876:	4158      	adcs	r0, r3
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000ed00 	and	lr, r0, r0, lsl #26

08004880 <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 8004880:	f3c0 4381 	ubfx	r3, r0, #18, #2
 8004884:	4a09      	ldr	r2, [pc, #36]	; (80048ac <NVIC_GetFaultHandlerSources+0x2c>)
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 8004886:	b90b      	cbnz	r3, 800488c <NVIC_GetFaultHandlerSources+0xc>
  {
    faultsources = SCB->HFSR;
 8004888:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800488a:	4770      	bx	lr
  }
  else if (tmpreg == 0x01)
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10a      	bne.n	80048a6 <NVIC_GetFaultHandlerSources+0x26>

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8004890:	f3c0 5301 	ubfx	r3, r0, #20, #2
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004894:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004896:	00da      	lsls	r2, r3, #3
 8004898:	40d0      	lsrs	r0, r2
    if (tmppos != 0x02)
 800489a:	2b02      	cmp	r3, #2
    {
      faultsources &= (u32)0x0F;
 800489c:	bf14      	ite	ne
 800489e:	f000 000f 	andne.w	r0, r0, #15
    }
    else
    {
      faultsources &= (u32)0xFF;
 80048a2:	b2c0      	uxtbeq	r0, r0
 80048a4:	4770      	bx	lr
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 80048a6:	6b10      	ldr	r0, [r2, #48]	; 0x30
  }
  return faultsources;
}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	e000ed00 	and	lr, r0, r0, lsl #26

080048b0 <NVIC_GetFaultAddress>:
*                       - SystemHandler_BusFault
* Output         : None
* Return         : Fault address.
*******************************************************************************/
u32 NVIC_GetFaultAddress(u32 SystemHandler)
{
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <NVIC_GetFaultAddress+0x10>)
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 80048b2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 80048b6:	bf0c      	ite	eq
 80048b8:	6b58      	ldreq	r0, [r3, #52]	; 0x34
  }
  else
  {
    faultaddress = SCB->BFAR;
 80048ba:	6b98      	ldrne	r0, [r3, #56]	; 0x38
  }
  return faultaddress;
}
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000ed00 	and	lr, r0, r0, lsl #26

080048c4 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 80048c4:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 80048c6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80048ca:	2101      	movs	r1, #1
 80048cc:	f000 f99a 	bl	8004c04 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
}
 80048d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80048d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80048d8:	2100      	movs	r1, #0
 80048da:	f000 b993 	b.w	8004c04 <RCC_APB1PeriphResetCmd>

080048de <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 80048de:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <PWR_BackupAccessCmd+0x6>)
 80048e0:	6018      	str	r0, [r3, #0]
 80048e2:	4770      	bx	lr
 80048e4:	420e0020 	andmi	r0, lr, #32

080048e8 <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 80048e8:	4b01      	ldr	r3, [pc, #4]	; (80048f0 <PWR_PVDCmd+0x8>)
 80048ea:	6018      	str	r0, [r3, #0]
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	420e0010 	andmi	r0, lr, #16

080048f4 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 80048f4:	4a03      	ldr	r2, [pc, #12]	; (8004904 <PWR_PVDLevelConfig+0x10>)
 80048f6:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 80048f8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 80048fc:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80048fe:	6010      	str	r0, [r2, #0]
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40007000 	andmi	r7, r0, r0

08004908 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8004908:	4b01      	ldr	r3, [pc, #4]	; (8004910 <PWR_WakeUpPinCmd+0x8>)
 800490a:	6018      	str	r0, [r3, #0]
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	420e00a0 	andmi	r0, lr, #160	; 0xa0

08004914 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <PWR_EnterSTOPMode+0x24>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004916:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004918:	6813      	ldr	r3, [r2, #0]

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 800491a:	f023 0303 	bic.w	r3, r3, #3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800491e:	ea40 0003 	orr.w	r0, r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004922:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004924:	4a05      	ldr	r2, [pc, #20]	; (800493c <PWR_EnterSTOPMode+0x28>)
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800492e:	d101      	bne.n	8004934 <PWR_EnterSTOPMode+0x20>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004930:	f001 b8d4 	b.w	8005adc <__WFI>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8004934:	f001 b8d4 	b.w	8005ae0 <__WFE>
 8004938:	40007000 	andmi	r7, r0, r0
 800493c:	e000ed10 	and	lr, r0, r0, lsl sp

08004940 <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <PWR_EnterSTANDBYMode+0x20>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f042 0204 	orr.w	r2, r2, #4
 8004948:	601a      	str	r2, [r3, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f042 0202 	orr.w	r2, r2, #2
 8004950:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004952:	4a04      	ldr	r2, [pc, #16]	; (8004964 <PWR_EnterSTANDBYMode+0x24>)
 8004954:	6813      	ldr	r3, [r2, #0]
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 800495c:	f001 b8be 	b.w	8005adc <__WFI>
 8004960:	40007000 	andmi	r7, r0, r0
 8004964:	e000ed10 	and	lr, r0, r0, lsl sp

08004968 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <PWR_GetFlagStatus+0x10>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 800496e:	bf14      	ite	ne
 8004970:	2001      	movne	r0, #1
 8004972:	2000      	moveq	r0, #0
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40007000 	andmi	r7, r0, r0

0800497c <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800497c:	4a02      	ldr	r2, [pc, #8]	; (8004988 <PWR_ClearFlag+0xc>)
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 8004984:	6010      	str	r0, [r2, #0]
 8004986:	4770      	bx	lr
 8004988:	40007000 	andmi	r7, r0, r0

0800498c <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <RCC_DeInit+0x34>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <RCC_DeInit+0x38>)
 800499a:	400a      	ands	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80049a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80049b8:	605a      	str	r2, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80049ba:	2200      	movs	r2, #0
 80049bc:	609a      	str	r2, [r3, #8]
 80049be:	4770      	bx	lr
 80049c0:	40021000 	andmi	r1, r2, r0
 80049c4:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

080049c8 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <RCC_HSEConfig+0x34>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80049ca:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049dc:	601a      	str	r2, [r3, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80049de:	d003      	beq.n	80049e8 <RCC_HSEConfig+0x20>
 80049e0:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80049e4:	d004      	beq.n	80049f0 <RCC_HSEConfig+0x28>
 80049e6:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049ee:	e002      	b.n	80049f6 <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40021000 	andmi	r1, r2, r0

08004a00 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004a00:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <RCC_AdjustHSICalibrationValue+0x10>)
 8004a02:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004a04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8004a08:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8004a0c:	6010      	str	r0, [r2, #0]
 8004a0e:	4770      	bx	lr
 8004a10:	40021000 	andmi	r1, r2, r0

08004a14 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8004a14:	4b01      	ldr	r3, [pc, #4]	; (8004a1c <RCC_HSICmd+0x8>)
 8004a16:	6018      	str	r0, [r3, #0]
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	42420000 	submi	r0, r2, #0

08004a20 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004a20:	4a03      	ldr	r2, [pc, #12]	; (8004a30 <RCC_PLLConfig+0x10>)
 8004a22:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8004a24:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004a28:	4319      	orrs	r1, r3

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004a2a:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a2c:	6050      	str	r0, [r2, #4]
 8004a2e:	4770      	bx	lr
 8004a30:	40021000 	andmi	r1, r2, r0

08004a34 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8004a34:	4b01      	ldr	r3, [pc, #4]	; (8004a3c <RCC_PLLCmd+0x8>)
 8004a36:	6018      	str	r0, [r3, #0]
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	42420060 	submi	r0, r2, #96	; 0x60

08004a40 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004a40:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <RCC_SYSCLKConfig+0x10>)
 8004a42:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004a44:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004a48:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a4a:	6050      	str	r0, [r2, #4]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40021000 	andmi	r1, r2, r0

08004a54 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <RCC_GetSYSCLKSource+0xc>)
 8004a56:	6858      	ldr	r0, [r3, #4]
}
 8004a58:	f000 000c 	and.w	r0, r0, #12
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40021000 	andmi	r1, r2, r0

08004a64 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004a64:	4a03      	ldr	r2, [pc, #12]	; (8004a74 <RCC_HCLKConfig+0x10>)
 8004a66:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004a6c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a6e:	6050      	str	r0, [r2, #4]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40021000 	andmi	r1, r2, r0

08004a78 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004a78:	4a03      	ldr	r2, [pc, #12]	; (8004a88 <RCC_PCLK1Config+0x10>)
 8004a7a:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8004a7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004a80:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a82:	6050      	str	r0, [r2, #4]
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40021000 	andmi	r1, r2, r0

08004a8c <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004a8c:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <RCC_PCLK2Config+0x10>)
 8004a8e:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8004a90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004a94:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a98:	6050      	str	r0, [r2, #4]
 8004a9a:	4770      	bx	lr
 8004a9c:	40021000 	andmi	r1, r2, r0

08004aa0 <RCC_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
{
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <RCC_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004aa2:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004aa4:	b109      	cbz	r1, 8004aaa <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004aa6:	4310      	orrs	r0, r2
 8004aa8:	e001      	b.n	8004aae <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8004aaa:	ea22 0000 	bic.w	r0, r2, r0
 8004aae:	7018      	strb	r0, [r3, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40021009 	andmi	r1, r2, r9

08004ab8 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8004ab8:	4b01      	ldr	r3, [pc, #4]	; (8004ac0 <RCC_USBCLKConfig+0x8>)
 8004aba:	6018      	str	r0, [r3, #0]
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	424200d8 	submi	r0, r2, #216	; 0xd8

08004ac4 <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8004ac4:	4a03      	ldr	r2, [pc, #12]	; (8004ad4 <RCC_ADCCLKConfig+0x10>)
 8004ac6:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8004ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8004acc:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004ace:	6050      	str	r0, [r2, #4]
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	andmi	r1, r2, r0

08004ad8 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <RCC_LSEConfig+0x1c>)
 8004ada:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004adc:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004ade:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004ae0:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004ae2:	d002      	beq.n	8004aea <RCC_LSEConfig+0x12>
 8004ae4:	2804      	cmp	r0, #4
 8004ae6:	d002      	beq.n	8004aee <RCC_LSEConfig+0x16>
 8004ae8:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 8004aea:	7018      	strb	r0, [r3, #0]
      break;
 8004aec:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004aee:	2205      	movs	r2, #5
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	4770      	bx	lr
 8004af4:	40021020 	andmi	r1, r2, r0, lsr #32

08004af8 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8004af8:	4b01      	ldr	r3, [pc, #4]	; (8004b00 <RCC_LSICmd+0x8>)
 8004afa:	6018      	str	r0, [r3, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

08004b04 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004b04:	4a02      	ldr	r2, [pc, #8]	; (8004b10 <RCC_RTCCLKConfig+0xc>)
 8004b06:	6a13      	ldr	r3, [r2, #32]
 8004b08:	4318      	orrs	r0, r3
 8004b0a:	6210      	str	r0, [r2, #32]
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40021000 	andmi	r1, r2, r0

08004b14 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 8004b14:	4b01      	ldr	r3, [pc, #4]	; (8004b1c <RCC_RTCCLKCmd+0x8>)
 8004b16:	6018      	str	r0, [r3, #0]
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

08004b20 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <RCC_GetClocksFreq+0x74>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004b22:	b510      	push	{r4, lr}
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004b24:	6853      	ldr	r3, [r2, #4]
 8004b26:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d001      	beq.n	8004b32 <RCC_GetClocksFreq+0x12>
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d001      	beq.n	8004b36 <RCC_GetClocksFreq+0x16>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <RCC_GetClocksFreq+0x78>)
 8004b34:	e00e      	b.n	8004b54 <RCC_GetClocksFreq+0x34>
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004b36:	6853      	ldr	r3, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004b38:	6851      	ldr	r1, [r2, #4]
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004b3a:	f3c3 4383 	ubfx	r3, r3, #18, #4

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004b3e:	03cc      	lsls	r4, r1, #15
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004b40:	f103 0302 	add.w	r3, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004b44:	d502      	bpl.n	8004b4c <RCC_GetClocksFreq+0x2c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8004b46:	6851      	ldr	r1, [r2, #4]
 8004b48:	0389      	lsls	r1, r1, #14
 8004b4a:	d501      	bpl.n	8004b50 <RCC_GetClocksFreq+0x30>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8004b4c:	4913      	ldr	r1, [pc, #76]	; (8004b9c <RCC_GetClocksFreq+0x7c>)
 8004b4e:	e000      	b.n	8004b52 <RCC_GetClocksFreq+0x32>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8004b50:	4911      	ldr	r1, [pc, #68]	; (8004b98 <RCC_GetClocksFreq+0x78>)
 8004b52:	434b      	muls	r3, r1
 8004b54:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004b56:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8004b58:	4911      	ldr	r1, [pc, #68]	; (8004ba0 <RCC_GetClocksFreq+0x80>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8004b5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004b5e:	5ccc      	ldrb	r4, [r1, r3]
 8004b60:	6803      	ldr	r3, [r0, #0]
 8004b62:	40e3      	lsrs	r3, r4
 8004b64:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004b66:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8004b68:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004b6c:	5d0c      	ldrb	r4, [r1, r4]
 8004b6e:	fa23 f404 	lsr.w	r4, r3, r4
 8004b72:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004b74:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8004b76:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004b7a:	5d0c      	ldrb	r4, [r1, r4]
 8004b7c:	40e3      	lsrs	r3, r4
 8004b7e:	60c3      	str	r3, [r0, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004b80:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8004b82:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8004b86:	440a      	add	r2, r1
 8004b88:	7c12      	ldrb	r2, [r2, #16]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b8e:	6103      	str	r3, [r0, #16]
 8004b90:	bd10      	pop	{r4, pc}
 8004b92:	bf00      	nop
 8004b94:	40021000 	andmi	r1, r2, r0
 8004b98:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8004b9c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8004ba0:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}

08004ba4 <RCC_AHBPeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
{
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004ba6:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ba8:	b109      	cbz	r1, 8004bae <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004baa:	4310      	orrs	r0, r2
 8004bac:	e001      	b.n	8004bb2 <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004bae:	ea22 0000 	bic.w	r0, r2, r0
 8004bb2:	6158      	str	r0, [r3, #20]
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	andmi	r1, r2, r0

08004bbc <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004bbe:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004bc0:	b109      	cbz	r1, 8004bc6 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004bc2:	4310      	orrs	r0, r2
 8004bc4:	e001      	b.n	8004bca <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004bc6:	ea22 0000 	bic.w	r0, r2, r0
 8004bca:	6198      	str	r0, [r3, #24]
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40021000 	andmi	r1, r2, r0

08004bd4 <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004bd6:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004bd8:	b109      	cbz	r1, 8004bde <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004bda:	4310      	orrs	r0, r2
 8004bdc:	e001      	b.n	8004be2 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004bde:	ea22 0000 	bic.w	r0, r2, r0
 8004be2:	61d8      	str	r0, [r3, #28]
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40021000 	andmi	r1, r2, r0

08004bec <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004bee:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004bf0:	b109      	cbz	r1, 8004bf6 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004bf2:	4310      	orrs	r0, r2
 8004bf4:	e001      	b.n	8004bfa <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004bf6:	ea22 0000 	bic.w	r0, r2, r0
 8004bfa:	60d8      	str	r0, [r3, #12]
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40021000 	andmi	r1, r2, r0

08004c04 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004c06:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c08:	b109      	cbz	r1, 8004c0e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004c0a:	4310      	orrs	r0, r2
 8004c0c:	e001      	b.n	8004c12 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004c0e:	ea22 0000 	bic.w	r0, r2, r0
 8004c12:	6118      	str	r0, [r3, #16]
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40021000 	andmi	r1, r2, r0

08004c1c <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8004c1c:	4b01      	ldr	r3, [pc, #4]	; (8004c24 <RCC_BackupResetCmd+0x8>)
 8004c1e:	6018      	str	r0, [r3, #0]
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

08004c28 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8004c28:	4b01      	ldr	r3, [pc, #4]	; (8004c30 <RCC_ClockSecuritySystemCmd+0x8>)
 8004c2a:	6018      	str	r0, [r3, #0]
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	4242004c 	submi	r0, r2, #76	; 0x4c

08004c34 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8004c34:	4b01      	ldr	r3, [pc, #4]	; (8004c3c <RCC_MCOConfig+0x8>)
 8004c36:	7018      	strb	r0, [r3, #0]
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40021007 	andmi	r1, r2, r7

08004c40 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004c40:	0942      	lsrs	r2, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 8004c42:	2a01      	cmp	r2, #1
 8004c44:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <RCC_GetFlagStatus+0x24>)
 8004c46:	d101      	bne.n	8004c4c <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	e003      	b.n	8004c54 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004c4c:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8004c4e:	bf0c      	ite	eq
 8004c50:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004c52:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8004c54:	f000 001f 	and.w	r0, r0, #31
 8004c58:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004c5c:	f000 0001 	and.w	r0, r0, #1
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40021000 	andmi	r1, r2, r0

08004c68 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004c68:	b507      	push	{r0, r1, r2, lr}
  vu32 StartUpCounter = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8004c6e:	2031      	movs	r0, #49	; 0x31
 8004c70:	f7ff ffe6 	bl	8004c40 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8004c74:	9b01      	ldr	r3, [sp, #4]
 8004c76:	3301      	adds	r3, #1
 8004c78:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8004c7a:	b918      	cbnz	r0, 8004c84 <RCC_WaitForHSEStartUp+0x1c>
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004c82:	d1f4      	bne.n	8004c6e <RCC_WaitForHSEStartUp+0x6>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8004c84:	2031      	movs	r0, #49	; 0x31
 8004c86:	f7ff ffdb 	bl	8004c40 <RCC_GetFlagStatus>
  {
    status = ERROR;
  }  

  return (status);
}
 8004c8a:	3000      	adds	r0, #0
 8004c8c:	bf18      	it	ne
 8004c8e:	2001      	movne	r0, #1
 8004c90:	b003      	add	sp, #12
 8004c92:	f85d fb04 	ldr.w	pc, [sp], #4

08004c96 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8004c96:	4a03      	ldr	r2, [pc, #12]	; (8004ca4 <RCC_ClearFlag+0xe>)
 8004c98:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9e:	6253      	str	r3, [r2, #36]	; 0x24
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	andmi	r1, r2, r0

08004ca8 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <RCC_GetITStatus+0x10>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8004cae:	bf14      	ite	ne
 8004cb0:	2001      	movne	r0, #1
 8004cb2:	2000      	moveq	r0, #0
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	andmi	r1, r2, r0

08004cbc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <RCC_ClearITPendingBit+0x8>)
 8004cbe:	7018      	strb	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	4002100a 	andmi	r1, r2, sl

08004cc8 <SysTick_CLKSourceConfig>:
*                         SysTick clock source.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8004cca:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	bf0c      	ite	eq
 8004cd0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8004cd4:	f022 0204 	bicne.w	r2, r2, #4
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	4770      	bx	lr
 8004cdc:	e000e010 	and	lr, r0, r0, lsl r0

08004ce0 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8004ce0:	4b01      	ldr	r3, [pc, #4]	; (8004ce8 <SysTick_SetReload+0x8>)
 8004ce2:	6058      	str	r0, [r3, #4]
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	e000e010 	and	lr, r0, r0, lsl r0

08004cec <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8004cec:	2801      	cmp	r0, #1
 8004cee:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <SysTick_CounterCmd+0x24>)
 8004cf0:	d103      	bne.n	8004cfa <SysTick_CounterCmd+0xe>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	e004      	b.n	8004d04 <SysTick_CounterCmd+0x18>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8004cfa:	3002      	adds	r0, #2
 8004cfc:	d104      	bne.n	8004d08 <SysTick_CounterCmd+0x1c>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	4770      	bx	lr
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8004d08:	2200      	movs	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	e000e010 	and	lr, r0, r0, lsl r0

08004d14 <SysTick_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_ITConfig(FunctionalState NewState)
{
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <SysTick_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8004d16:	681a      	ldr	r2, [r3, #0]
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004d18:	b110      	cbz	r0, 8004d20 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8004d1a:	f042 0202 	orr.w	r2, r2, #2
 8004d1e:	e001      	b.n	8004d24 <SysTick_ITConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8004d20:	f022 0202 	bic.w	r2, r2, #2
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	4770      	bx	lr
 8004d28:	e000e010 	and	lr, r0, r0, lsl r0

08004d2c <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <SysTick_GetCounter+0x8>)
 8004d2e:	6898      	ldr	r0, [r3, #8]
}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	e000e010 	and	lr, r0, r0, lsl r0

08004d38 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8004d38:	08c3      	lsrs	r3, r0, #3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <SysTick_GetFlagStatus+0x18>)
  {
    statusreg = SysTick->CTRL;
 8004d3e:	bf0c      	ite	eq
 8004d40:	681b      	ldreq	r3, [r3, #0]
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 8004d42:	68db      	ldrne	r3, [r3, #12]
  }

  if ((statusreg & ((u32)1 << SysTick_FLAG)) != (u32)RESET)
 8004d44:	fa23 f000 	lsr.w	r0, r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004d48:	f000 0001 	and.w	r0, r0, #1
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	e000e010 	and	lr, r0, r0, lsl r0

08004d54 <TI1_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI1_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 8004d54:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8004d56:	8c04      	ldrh	r4, [r0, #32]
 8004d58:	f024 0401 	bic.w	r4, r4, #1
 8004d5c:	0424      	lsls	r4, r4, #16
 8004d5e:	0c24      	lsrs	r4, r4, #16
 8004d60:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8004d62:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004d64:	8c05      	ldrh	r5, [r0, #32]
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;

  tmpccmr1 = TIMx->CCMR1;
 8004d66:	b2a4      	uxth	r4, r4
  tmpccer = TIMx->CCER;
 8004d68:	b2ad      	uxth	r5, r5

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 8004d6a:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8004d6e:	4322      	orrs	r2, r4
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8004d70:	f025 0502 	bic.w	r5, r5, #2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8004d74:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8004d78:	f045 0501 	orr.w	r5, r5, #1
 8004d7c:	b29a      	uxth	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8004d7e:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d80:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004d82:	8401      	strh	r1, [r0, #32]
 8004d84:	bd30      	pop	{r4, r5, pc}

08004d86 <TI2_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI2_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 8004d86:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8004d88:	8c04      	ldrh	r4, [r0, #32]
 8004d8a:	f024 0410 	bic.w	r4, r4, #16
 8004d8e:	0424      	lsls	r4, r4, #16
 8004d90:	0c24      	lsrs	r4, r4, #16
 8004d92:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8004d94:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8004d96:	8c04      	ldrh	r4, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8004d98:	f425 7540 	bic.w	r5, r5, #768	; 0x300

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;

  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8004d9c:	b2a4      	uxth	r4, r4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8004d9e:	052d      	lsls	r5, r5, #20
 8004da0:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
 8004da2:	f024 0420 	bic.w	r4, r4, #32
 8004da6:	f044 0410 	orr.w	r4, r4, #16
 8004daa:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8004dae:	ea42 3303 	orr.w	r3, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8004db2:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8004db6:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8004db8:	b28c      	uxth	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dba:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	8404      	strh	r4, [r0, #32]
 8004dbe:	bd30      	pop	{r4, r5, pc}

08004dc0 <TIM_DeInit>:
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8004dc0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8004dc2:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <TIM_DeInit+0xbc>)
 8004dc4:	4298      	cmp	r0, r3
 8004dc6:	d03a      	beq.n	8004e3e <TIM_DeInit+0x7e>
 8004dc8:	d810      	bhi.n	8004dec <TIM_DeInit+0x2c>
 8004dca:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	d025      	beq.n	8004e1e <TIM_DeInit+0x5e>
 8004dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd6:	4298      	cmp	r0, r3
 8004dd8:	d02b      	beq.n	8004e32 <TIM_DeInit+0x72>
 8004dda:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004dde:	d14c      	bne.n	8004e7a <TIM_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
      break; 
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8004de0:	2001      	movs	r0, #1
 8004de2:	4601      	mov	r1, r0
 8004de4:	f7ff ff0e 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8004de8:	2001      	movs	r0, #1
 8004dea:	e01d      	b.n	8004e28 <TIM_DeInit+0x68>
void TIM_DeInit(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8004dec:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <TIM_DeInit+0xc0>)
 8004dee:	4298      	cmp	r0, r3
 8004df0:	d031      	beq.n	8004e56 <TIM_DeInit+0x96>
 8004df2:	d804      	bhi.n	8004dfe <TIM_DeInit+0x3e>
 8004df4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004df8:	4298      	cmp	r0, r3
 8004dfa:	d026      	beq.n	8004e4a <TIM_DeInit+0x8a>
 8004dfc:	bd08      	pop	{r3, pc}
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <TIM_DeInit+0xc4>)
 8004e00:	4298      	cmp	r0, r3
 8004e02:	d004      	beq.n	8004e0e <TIM_DeInit+0x4e>
 8004e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e08:	4298      	cmp	r0, r3
 8004e0a:	d02a      	beq.n	8004e62 <TIM_DeInit+0xa2>
 8004e0c:	bd08      	pop	{r3, pc}
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004e0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e12:	2101      	movs	r1, #1
 8004e14:	f7ff feea 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8004e18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e1c:	e028      	b.n	8004e70 <TIM_DeInit+0xb0>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8004e1e:	2002      	movs	r0, #2
 8004e20:	2101      	movs	r1, #1
 8004e22:	f7ff feef 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8004e26:	2002      	movs	r0, #2
 8004e28:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 8004e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8004e2e:	f7ff bee9 	b.w	8004c04 <RCC_APB1PeriphResetCmd>
      break;
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8004e32:	2004      	movs	r0, #4
 8004e34:	2101      	movs	r1, #1
 8004e36:	f7ff fee5 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8004e3a:	2004      	movs	r0, #4
 8004e3c:	e7f4      	b.n	8004e28 <TIM_DeInit+0x68>
      break;
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8004e3e:	2008      	movs	r0, #8
 8004e40:	2101      	movs	r1, #1
 8004e42:	f7ff fedf 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8004e46:	2008      	movs	r0, #8
 8004e48:	e7ee      	b.n	8004e28 <TIM_DeInit+0x68>
      break;
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8004e4a:	2010      	movs	r0, #16
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	f7ff fed9 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8004e52:	2010      	movs	r0, #16
 8004e54:	e7e8      	b.n	8004e28 <TIM_DeInit+0x68>
      break;
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8004e56:	2020      	movs	r0, #32
 8004e58:	2101      	movs	r1, #1
 8004e5a:	f7ff fed3 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8004e5e:	2020      	movs	r0, #32
 8004e60:	e7e2      	b.n	8004e28 <TIM_DeInit+0x68>
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8004e62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e66:	2101      	movs	r1, #1
 8004e68:	f7ff fec0 	bl	8004bec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8004e6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e70:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 8004e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8004e76:	f7ff beb9 	b.w	8004bec <RCC_APB2PeriphResetCmd>
 8004e7a:	bd08      	pop	{r3, pc}
 8004e7c:	40000c00 	andmi	r0, r0, r0, lsl #24
 8004e80:	40001400 	andmi	r1, r0, r0, lsl #8
 8004e84:	40012c00 	andmi	r2, r1, r0, lsl #24

08004e88 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 8004e88:	8803      	ldrh	r3, [r0, #0]
 8004e8a:	88ca      	ldrh	r2, [r1, #6]
 8004e8c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8004e90:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8004e92:	8803      	ldrh	r3, [r0, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	4313      	orrs	r3, r2
 8004e98:	884a      	ldrh	r2, [r1, #2]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004ea0:	888b      	ldrh	r3, [r1, #4]
 8004ea2:	8583      	strh	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004ea4:	880b      	ldrh	r3, [r1, #0]
 8004ea6:	8503      	strh	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <TIM_TimeBaseInit+0x38>)
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	d003      	beq.n	8004eba <TIM_TimeBaseInit+0x32>
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	4298      	cmp	r0, r3
 8004eb8:	d101      	bne.n	8004ebe <TIM_TimeBaseInit+0x36>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8004eba:	7a0b      	ldrb	r3, [r1, #8]
 8004ebc:	8603      	strh	r3, [r0, #48]	; 0x30
 8004ebe:	4770      	bx	lr
 8004ec0:	40012c00 	andmi	r2, r1, r0, lsl #24

08004ec4 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8004ec4:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004ec6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed6:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004ed8:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8004eda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ede:	0412      	lsls	r2, r2, #16
 8004ee0:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8004ee2:	f023 0502 	bic.w	r5, r3, #2
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004ee6:	4316      	orrs	r6, r2
 8004ee8:	884b      	ldrh	r3, [r1, #2]
 8004eea:	890a      	ldrh	r2, [r1, #8]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8004eec:	042d      	lsls	r5, r5, #16
 8004eee:	4313      	orrs	r3, r2
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8004ef0:	88ca      	ldrh	r2, [r1, #6]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8004ef2:	0c2d      	lsrs	r5, r5, #16
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8004ef4:	8682      	strh	r2, [r0, #52]	; 0x34
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004ef6:	4a0f      	ldr	r2, [pc, #60]	; (8004f34 <TIM_OC1Init+0x70>)

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8004ef8:	432b      	orrs	r3, r5
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004efa:	4290      	cmp	r0, r2
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8004efe:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004f00:	d003      	beq.n	8004f0a <TIM_OC1Init+0x46>
 8004f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f06:	4290      	cmp	r0, r2
 8004f08:	d10f      	bne.n	8004f2a <TIM_OC1Init+0x66>
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8004f0a:	f647 45ff 	movw	r5, #31999	; 0x7cff
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8004f0e:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 8004f10:	f023 0308 	bic.w	r3, r3, #8

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8004f14:	4313      	orrs	r3, r2

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8004f16:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
 8004f18:	f023 0304 	bic.w	r3, r3, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8004f1c:	4025      	ands	r5, r4

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	89cc      	ldrh	r4, [r1, #14]
 8004f22:	898a      	ldrh	r2, [r1, #12]
 8004f24:	4314      	orrs	r4, r2

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8004f26:	432c      	orrs	r4, r5
 8004f28:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2c:	8306      	strh	r6, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2e:	8403      	strh	r3, [r0, #32]
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	bf00      	nop
 8004f34:	40012c00 	andmi	r2, r1, r0, lsl #24

08004f38 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8004f38:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004f3a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8004f3c:	f023 0310 	bic.w	r3, r3, #16
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8004f46:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004f4c:	880c      	ldrh	r4, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 8004f4e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f52:	0412      	lsls	r2, r2, #16
 8004f54:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004f56:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8004f5a:	f023 0320 	bic.w	r3, r3, #32
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004f5e:	b294      	uxth	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8004f60:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004f62:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8004f64:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004f66:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004f6a:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	b2ad      	uxth	r5, r5

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004f6e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8004f72:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004f74:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8004f76:	8702      	strh	r2, [r0, #56]	; 0x38
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004f78:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <TIM_OC2Init+0x84>)
 8004f7a:	4290      	cmp	r0, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_OC2Init+0x4e>
 8004f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f82:	4290      	cmp	r0, r2
 8004f84:	d116      	bne.n	8004fb4 <TIM_OC2Init+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8004f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004f8a:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8004f8c:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004f8e:	ea43 1202 	orr.w	r2, r3, r2, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
 8004f92:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8004f96:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004f98:	888a      	ldrh	r2, [r1, #4]
 8004f9a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
 8004f9e:	f247 32ff 	movw	r2, #29695	; 0x73ff
 8004fa2:	402a      	ands	r2, r5

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004fa4:	898d      	ldrh	r5, [r1, #12]

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004fa6:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004fa8:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004fac:	89cd      	ldrh	r5, [r1, #14]
 8004fae:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
 8004fb2:	b2ad      	uxth	r5, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb6:	8304      	strh	r4, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb8:	8403      	strh	r3, [r0, #32]
 8004fba:	bd30      	pop	{r4, r5, pc}
 8004fbc:	40012c00 	andmi	r2, r1, r0, lsl #24

08004fc0 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8004fc0:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004fc2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd2:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004fd4:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8004fd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fda:	0412      	lsls	r2, r2, #16
 8004fdc:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8004fde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004fe2:	4316      	orrs	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8004fe4:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004fe6:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8004fe8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004fea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004fee:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004ff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004ff6:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004ff8:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004ffa:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004ffc:	4a10      	ldr	r2, [pc, #64]	; (8005040 <TIM_OC3Init+0x80>)
 8004ffe:	4290      	cmp	r0, r2
 8005000:	d003      	beq.n	800500a <TIM_OC3Init+0x4a>
 8005002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005006:	4290      	cmp	r0, r2
 8005008:	d116      	bne.n	8005038 <TIM_OC3Init+0x78>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 800500a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800500e:	894a      	ldrh	r2, [r1, #10]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 8005010:	f644 75ff 	movw	r5, #20479	; 0x4fff
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8005014:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005016:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 800501a:	f64f 33ff 	movw	r3, #64511	; 0xfbff
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 800501e:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005020:	898c      	ldrh	r4, [r1, #12]

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 8005022:	4013      	ands	r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005024:	ea45 1504 	orr.w	r5, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005028:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800502a:	89cc      	ldrh	r4, [r1, #14]

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800502c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005030:	ea45 1404 	orr.w	r4, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005034:	b29b      	uxth	r3, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005036:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005038:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800503a:	8386      	strh	r6, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503c:	8403      	strh	r3, [r0, #32]
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	40012c00 	andmi	r2, r1, r0, lsl #24

08005044 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005044:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005046:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005056:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005058:	880d      	ldrh	r5, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 800505a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800505e:	0412      	lsls	r2, r2, #16
 8005060:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 8005062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005066:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 800506a:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800506c:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 800506e:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005070:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005074:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005076:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005078:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800507c:	88cd      	ldrh	r5, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 800507e:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005080:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005084:	4d08      	ldr	r5, [pc, #32]	; (80050a8 <TIM_OC4Init+0x64>)

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005086:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005088:	42a8      	cmp	r0, r5
 800508a:	d003      	beq.n	8005094 <TIM_OC4Init+0x50>
 800508c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005090:	42a8      	cmp	r0, r5
 8005092:	d105      	bne.n	80050a0 <TIM_OC4Init+0x5c>

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005094:	8989      	ldrh	r1, [r1, #12]
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 8005096:	f3c4 040d 	ubfx	r4, r4, #0, #14

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800509a:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
 800509e:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a0:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80050a2:	8382      	strh	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a4:	8403      	strh	r3, [r0, #32]
 80050a6:	bd30      	pop	{r4, r5, pc}
 80050a8:	40012c00 	andmi	r2, r1, r0, lsl #24

080050ac <TIM_BDTRConfig>:
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80050ac:	884a      	ldrh	r2, [r1, #2]
 80050ae:	880b      	ldrh	r3, [r1, #0]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	888a      	ldrh	r2, [r1, #4]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	88ca      	ldrh	r2, [r1, #6]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	890a      	ldrh	r2, [r1, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	894a      	ldrh	r2, [r1, #10]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	898a      	ldrh	r2, [r1, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80050cc:	4770      	bx	lr

080050ce <TIM_TimeBaseStructInit>:
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80050ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050d2:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80050d4:	2300      	movs	r3, #0
 80050d6:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80050d8:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80050da:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80050dc:	7203      	strb	r3, [r0, #8]
 80050de:	4770      	bx	lr

080050e0 <TIM_OCStructInit>:
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80050e0:	2300      	movs	r3, #0
 80050e2:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80050e4:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80050e6:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80050e8:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80050ea:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80050ec:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80050ee:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80050f0:	81c3      	strh	r3, [r0, #14]
 80050f2:	4770      	bx	lr

080050f4 <TIM_ICStructInit>:
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80050f4:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80050f6:	2201      	movs	r2, #1
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80050f8:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80050fa:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80050fc:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80050fe:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8005100:	8103      	strh	r3, [r0, #8]
 8005102:	4770      	bx	lr

08005104 <TIM_BDTRStructInit>:
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8005104:	2300      	movs	r3, #0
 8005106:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8005108:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800510a:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800510c:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800510e:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8005110:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8005112:	8183      	strh	r3, [r0, #12]
 8005114:	4770      	bx	lr

08005116 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 8005116:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005118:	b119      	cbz	r1, 8005122 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 800511a:	b29b      	uxth	r3, r3
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	e003      	b.n	800512a <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	059b      	lsls	r3, r3, #22
 8005128:	0d9b      	lsrs	r3, r3, #22
 800512a:	8003      	strh	r3, [r0, #0]
 800512c:	4770      	bx	lr

0800512e <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 800512e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005132:	b129      	cbz	r1, 8005140 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 8005134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513c:	b29b      	uxth	r3, r3
 800513e:	e001      	b.n	8005144 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
 8005140:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005144:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8005148:	4770      	bx	lr

0800514a <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800514a:	8983      	ldrh	r3, [r0, #12]
 800514c:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800514e:	b10a      	cbz	r2, 8005154 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005150:	4319      	orrs	r1, r3
 8005152:	e001      	b.n	8005158 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
 8005154:	ea23 0101 	bic.w	r1, r3, r1
 8005158:	8181      	strh	r1, [r0, #12]
 800515a:	4770      	bx	lr

0800515c <TIM_GenerateEvent>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800515c:	8281      	strh	r1, [r0, #20]
 800515e:	4770      	bx	lr

08005160 <TIM_DMAConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8005160:	430a      	orrs	r2, r1
 8005162:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8005166:	4770      	bx	lr

08005168 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8005168:	8983      	ldrh	r3, [r0, #12]
 800516a:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800516c:	b10a      	cbz	r2, 8005172 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800516e:	4319      	orrs	r1, r3
 8005170:	e001      	b.n	8005176 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 8005172:	ea23 0101 	bic.w	r1, r3, r1
 8005176:	8181      	strh	r1, [r0, #12]
 8005178:	4770      	bx	lr

0800517a <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
 800517a:	8903      	ldrh	r3, [r0, #8]
 800517c:	f023 0307 	bic.w	r3, r3, #7
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	8103      	strh	r3, [r0, #8]
 8005186:	4770      	bx	lr

08005188 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005188:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005192:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005194:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8005196:	8903      	ldrh	r3, [r0, #8]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f043 0307 	orr.w	r3, r3, #7
 800519e:	8103      	strh	r3, [r0, #8]
 80051a0:	4770      	bx	lr

080051a2 <TIM_TIxExternalClockConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80051a2:	b538      	push	{r3, r4, r5, lr}
 80051a4:	460d      	mov	r5, r1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80051a6:	2d60      	cmp	r5, #96	; 0x60
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80051a8:	4611      	mov	r1, r2
 80051aa:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80051ac:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80051b0:	d102      	bne.n	80051b8 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80051b2:	f7ff fde8 	bl	8004d86 <TI2_Config>
 80051b6:	e001      	b.n	80051bc <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80051b8:	f7ff fdcc 	bl	8004d54 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051bc:	8921      	ldrh	r1, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80051be:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80051c2:	0409      	lsls	r1, r1, #16
 80051c4:	0c09      	lsrs	r1, r1, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80051c6:	4329      	orrs	r1, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c8:	8121      	strh	r1, [r4, #8]

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80051ca:	8923      	ldrh	r3, [r4, #8]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f043 0307 	orr.w	r3, r3, #7
 80051d2:	8123      	strh	r3, [r4, #8]
 80051d4:	bd38      	pop	{r3, r4, r5, pc}

080051d6 <TIM_ETRConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRConfig(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                   u16 ExtTRGFilter)
{
 80051d6:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80051d8:	8904      	ldrh	r4, [r0, #8]
 80051da:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 80051de:	b2e4      	uxtb	r4, r4
 80051e0:	4323      	orrs	r3, r4
 80051e2:	b29b      	uxth	r3, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 80051e4:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e6:	8101      	strh	r1, [r0, #8]
 80051e8:	bd10      	pop	{r4, pc}

080051ea <TIM_ETRClockMode1Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                             u16 ExtTRGFilter)
{
 80051ea:	b510      	push	{r4, lr}
 80051ec:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80051ee:	f7ff fff2 	bl	80051d6 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051f2:	8923      	ldrh	r3, [r4, #8]
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
 80051f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f8:	041b      	lsls	r3, r3, #16
 80051fa:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 80051fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005200:	8123      	strh	r3, [r4, #8]
 8005202:	bd10      	pop	{r4, pc}

08005204 <TIM_ETRClockMode2Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, 
                             u16 TIM_ExtTRGPolarity, u16 ExtTRGFilter)
{
 8005204:	b510      	push	{r4, lr}
 8005206:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8005208:	f7ff ffe5 	bl	80051d6 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
 800520c:	8923      	ldrh	r3, [r4, #8]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005214:	8123      	strh	r3, [r4, #8]
 8005216:	bd10      	pop	{r4, pc}

08005218 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8005218:	8501      	strh	r1, [r0, #40]	; 0x28

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800521a:	8282      	strh	r2, [r0, #20]
 800521c:	4770      	bx	lr

0800521e <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800521e:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
 8005220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005224:	059b      	lsls	r3, r3, #22
 8005226:	0d9b      	lsrs	r3, r3, #22

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8005228:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800522a:	8001      	strh	r1, [r0, #0]
 800522c:	4770      	bx	lr

0800522e <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800522e:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 8005230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005238:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523a:	8101      	strh	r1, [r0, #8]
 800523c:	4770      	bx	lr

0800523e <TIM_EncoderInterfaceConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
 800523e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005240:	8906      	ldrh	r6, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005242:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005244:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005246:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 800524c:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
 8005250:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005254:	f026 0607 	bic.w	r6, r6, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005258:	0424      	lsls	r4, r4, #16
 800525a:	432a      	orrs	r2, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 800525c:	0436      	lsls	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 800525e:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005260:	0c36      	lsrs	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 8005262:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005266:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
 800526a:	4331      	orrs	r1, r6

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 800526c:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005270:	b29d      	uxth	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005272:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005274:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005276:	8405      	strh	r5, [r0, #32]
 8005278:	bd70      	pop	{r4, r5, r6, pc}

0800527a <TIM_ForcedOC1Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 800527a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8005284:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	8301      	strh	r1, [r0, #24]
 8005288:	4770      	bx	lr

0800528a <TIM_ForcedOC2Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 800528a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
 800528c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
 8005294:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005298:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800529a:	8301      	strh	r1, [r0, #24]
 800529c:	4770      	bx	lr

0800529e <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800529e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80052a8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80052aa:	8381      	strh	r1, [r0, #28]
 80052ac:	4770      	bx	lr

080052ae <TIM_ForcedOC4Config>:
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80052ae:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
 80052b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
 80052b8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80052bc:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80052be:	8381      	strh	r1, [r0, #28]
 80052c0:	4770      	bx	lr

080052c2 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 80052c2:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052c4:	b119      	cbz	r1, 80052ce <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052cc:	e003      	b.n	80052d6 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
 80052ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d2:	059b      	lsls	r3, r3, #22
 80052d4:	0d9b      	lsrs	r3, r3, #22
 80052d6:	8003      	strh	r3, [r0, #0]
 80052d8:	4770      	bx	lr

080052da <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 80052da:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052dc:	b119      	cbz	r1, 80052e6 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f043 0304 	orr.w	r3, r3, #4
 80052e4:	e003      	b.n	80052ee <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
 80052e6:	f023 0304 	bic.w	r3, r3, #4
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	8083      	strh	r3, [r0, #4]
 80052f0:	4770      	bx	lr

080052f2 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 80052f2:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052f4:	b119      	cbz	r1, 80052fe <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	e003      	b.n	8005306 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
 80052fe:	f023 0308 	bic.w	r3, r3, #8
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	8083      	strh	r3, [r0, #4]
 8005308:	4770      	bx	lr

0800530a <TIM_CCPreloadControl>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 800530a:	8883      	ldrh	r3, [r0, #4]
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800530c:	b119      	cbz	r1, 8005316 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 800530e:	b29b      	uxth	r3, r3
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	e003      	b.n	800531e <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	8083      	strh	r3, [r0, #4]
 8005320:	4770      	bx	lr

08005322 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005322:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
 8005324:	f023 0308 	bic.w	r3, r3, #8
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800532c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800532e:	8301      	strh	r1, [r0, #24]
 8005330:	4770      	bx	lr

08005332 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005332:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
 8005334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
 800533c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005340:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005342:	8301      	strh	r1, [r0, #24]
 8005344:	4770      	bx	lr

08005346 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005346:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
 8005348:	f023 0308 	bic.w	r3, r3, #8
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8005350:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005352:	8381      	strh	r1, [r0, #28]
 8005354:	4770      	bx	lr

08005356 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005356:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
 8005358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
 8005360:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005364:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005366:	8381      	strh	r1, [r0, #28]
 8005368:	4770      	bx	lr

0800536a <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800536a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8005374:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005376:	8301      	strh	r1, [r0, #24]
 8005378:	4770      	bx	lr

0800537a <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800537a:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
 800537c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
 8005384:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005388:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800538a:	8301      	strh	r1, [r0, #24]
 800538c:	4770      	bx	lr

0800538e <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800538e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8005398:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800539a:	8381      	strh	r1, [r0, #28]
 800539c:	4770      	bx	lr

0800539e <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800539e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
 80053a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
 80053a8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80053ac:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80053ae:	8381      	strh	r1, [r0, #28]
 80053b0:	4770      	bx	lr

080053b2 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80053b2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
 80053b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80053bc:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80053be:	8301      	strh	r1, [r0, #24]
 80053c0:	4770      	bx	lr

080053c2 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80053c2:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
 80053c4:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
 80053c8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80053cc:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80053ce:	8301      	strh	r1, [r0, #24]
 80053d0:	4770      	bx	lr

080053d2 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80053d2:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80053dc:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80053de:	8381      	strh	r1, [r0, #28]
 80053e0:	4770      	bx	lr

080053e2 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80053e2:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
 80053e4:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
 80053e8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80053ec:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80053ee:	8381      	strh	r1, [r0, #28]
 80053f0:	4770      	bx	lr

080053f2 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80053f2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
 80053f4:	f023 0302 	bic.w	r3, r3, #2
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80053fc:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80053fe:	8401      	strh	r1, [r0, #32]
 8005400:	4770      	bx	lr

08005402 <TIM_OC1NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8005402:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
 8005404:	f023 0308 	bic.w	r3, r3, #8
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 800540c:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800540e:	8401      	strh	r1, [r0, #32]
 8005410:	4770      	bx	lr

08005412 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005412:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
 8005414:	f023 0320 	bic.w	r3, r3, #32
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 4);
 800541c:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8005420:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005422:	8401      	strh	r1, [r0, #32]
 8005424:	4770      	bx	lr

08005426 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8005426:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
 8005428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
 8005430:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8005434:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005436:	8401      	strh	r1, [r0, #32]
 8005438:	4770      	bx	lr

0800543a <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800543a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
 800543c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005440:	041b      	lsls	r3, r3, #16
 8005442:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 8);
 8005444:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005448:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800544a:	8401      	strh	r1, [r0, #32]
 800544c:	4770      	bx	lr

0800544e <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800544e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
 8005450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
 8005458:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800545c:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800545e:	8401      	strh	r1, [r0, #32]
 8005460:	4770      	bx	lr

08005462 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005462:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
 8005464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 12);
 800546c:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8005470:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005472:	8401      	strh	r1, [r0, #32]
 8005474:	4770      	bx	lr

08005476 <TIM_CCxCmd>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005476:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCx)
{
 8005478:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800547a:	b29c      	uxth	r4, r3
 800547c:	2301      	movs	r3, #1
 800547e:	408b      	lsls	r3, r1
 8005480:	ea24 0303 	bic.w	r3, r4, r3
 8005484:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 8005486:	8c03      	ldrh	r3, [r0, #32]
 8005488:	408a      	lsls	r2, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	b29b      	uxth	r3, r3
 800548e:	8403      	strh	r3, [r0, #32]
 8005490:	bd10      	pop	{r4, pc}

08005492 <TIM_CCxNCmd>:
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 8005492:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxNCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCxN)
{
 8005494:	b510      	push	{r4, lr}
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 8005496:	b29c      	uxth	r4, r3
 8005498:	2304      	movs	r3, #4
 800549a:	408b      	lsls	r3, r1
 800549c:	ea24 0303 	bic.w	r3, r4, r3
 80054a0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 80054a2:	8c03      	ldrh	r3, [r0, #32]
 80054a4:	408a      	lsls	r2, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8403      	strh	r3, [r0, #32]
 80054ac:	bd10      	pop	{r4, pc}

080054ae <TIM_SelectOCxM>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80054ae:	8c03      	ldrh	r3, [r0, #32]
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 80054b0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80054b2:	b29c      	uxth	r4, r3
 80054b4:	2301      	movs	r3, #1
 80054b6:	408b      	lsls	r3, r1
 80054b8:	ea24 0303 	bic.w	r3, r4, r3
 80054bc:	8403      	strh	r3, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80054be:	f021 0308 	bic.w	r3, r1, #8
 80054c2:	3018      	adds	r0, #24
 80054c4:	b93b      	cbnz	r3, 80054d6 <TIM_SelectOCxM+0x28>
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
 80054c6:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80054ca:	0849      	lsrs	r1, r1, #1
 80054cc:	5844      	ldr	r4, [r0, r1]
 80054ce:	4023      	ands	r3, r4
 80054d0:	5043      	str	r3, [r0, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
 80054d2:	5843      	ldr	r3, [r0, r1]
 80054d4:	e00a      	b.n	80054ec <TIM_SelectOCxM+0x3e>

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 80054d6:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80054da:	3904      	subs	r1, #4
 80054dc:	f3c1 014e 	ubfx	r1, r1, #1, #15
 80054e0:	5844      	ldr	r4, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 80054e2:	0212      	lsls	r2, r2, #8

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 80054e4:	4023      	ands	r3, r4
 80054e6:	5043      	str	r3, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 80054e8:	5843      	ldr	r3, [r0, r1]
 80054ea:	b292      	uxth	r2, r2
 80054ec:	431a      	orrs	r2, r3
 80054ee:	5042      	str	r2, [r0, r1]
 80054f0:	bd10      	pop	{r4, pc}

080054f2 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 80054f2:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054f4:	b119      	cbz	r1, 80054fe <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	e003      	b.n	8005506 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
 80054fe:	f023 0302 	bic.w	r3, r3, #2
 8005502:	059b      	lsls	r3, r3, #22
 8005504:	0d9b      	lsrs	r3, r3, #22
 8005506:	8003      	strh	r3, [r0, #0]
 8005508:	4770      	bx	lr

0800550a <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 800550a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800550c:	b119      	cbz	r1, 8005516 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 800550e:	b29b      	uxth	r3, r3
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	e003      	b.n	800551e <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
 8005516:	f023 0304 	bic.w	r3, r3, #4
 800551a:	059b      	lsls	r3, r3, #22
 800551c:	0d9b      	lsrs	r3, r3, #22
 800551e:	8003      	strh	r3, [r0, #0]
 8005520:	4770      	bx	lr

08005522 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 8005522:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005524:	b119      	cbz	r1, 800552e <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 8005526:	b29b      	uxth	r3, r3
 8005528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552c:	e003      	b.n	8005536 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
 800552e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005532:	041b      	lsls	r3, r3, #16
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	8083      	strh	r3, [r0, #4]
 8005538:	4770      	bx	lr

0800553a <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
 800553a:	8803      	ldrh	r3, [r0, #0]
 800553c:	f023 0308 	bic.w	r3, r3, #8
 8005540:	059b      	lsls	r3, r3, #22
 8005542:	0d9b      	lsrs	r3, r3, #22
 8005544:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8005546:	8803      	ldrh	r3, [r0, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	4319      	orrs	r1, r3
 800554c:	8001      	strh	r1, [r0, #0]
 800554e:	4770      	bx	lr

08005550 <TIM_SelectOutputTrigger>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
 8005550:	8883      	ldrh	r3, [r0, #4]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	8083      	strh	r3, [r0, #4]

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800555c:	8883      	ldrh	r3, [r0, #4]
 800555e:	b29b      	uxth	r3, r3
 8005560:	4319      	orrs	r1, r3
 8005562:	8081      	strh	r1, [r0, #4]
 8005564:	4770      	bx	lr

08005566 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
 8005566:	8903      	ldrh	r3, [r0, #8]
 8005568:	f023 0307 	bic.w	r3, r3, #7
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	0c1b      	lsrs	r3, r3, #16
 8005570:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8005572:	8903      	ldrh	r3, [r0, #8]
 8005574:	b29b      	uxth	r3, r3
 8005576:	4319      	orrs	r1, r3
 8005578:	8101      	strh	r1, [r0, #8]
 800557a:	4770      	bx	lr

0800557c <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
 800557c:	8903      	ldrh	r3, [r0, #8]
 800557e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8005588:	8903      	ldrh	r3, [r0, #8]
 800558a:	b29b      	uxth	r3, r3
 800558c:	4319      	orrs	r1, r3
 800558e:	8101      	strh	r1, [r0, #8]
 8005590:	4770      	bx	lr

08005592 <TIM_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8005592:	8481      	strh	r1, [r0, #36]	; 0x24
 8005594:	4770      	bx	lr

08005596 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005596:	8581      	strh	r1, [r0, #44]	; 0x2c
 8005598:	4770      	bx	lr

0800559a <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800559a:	8681      	strh	r1, [r0, #52]	; 0x34
 800559c:	4770      	bx	lr

0800559e <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800559e:	8701      	strh	r1, [r0, #56]	; 0x38
 80055a0:	4770      	bx	lr

080055a2 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80055a2:	8781      	strh	r1, [r0, #60]	; 0x3c
 80055a4:	4770      	bx	lr

080055a6 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80055a6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80055aa:	4770      	bx	lr

080055ac <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 80055ac:	8b03      	ldrh	r3, [r0, #24]
 80055ae:	f023 030c 	bic.w	r3, r3, #12
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80055b8:	8b03      	ldrh	r3, [r0, #24]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4319      	orrs	r1, r3
 80055be:	8301      	strh	r1, [r0, #24]
 80055c0:	4770      	bx	lr

080055c2 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 80055c2:	8b03      	ldrh	r3, [r0, #24]
 80055c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	0c1b      	lsrs	r3, r3, #16
 80055cc:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 80055ce:	8b03      	ldrh	r3, [r0, #24]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80055d6:	b289      	uxth	r1, r1
 80055d8:	8301      	strh	r1, [r0, #24]
 80055da:	4770      	bx	lr

080055dc <TIM_PWMIConfig>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80055e0:	8849      	ldrh	r1, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80055e2:	88a2      	ldrh	r2, [r4, #4]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80055e4:	2900      	cmp	r1, #0
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80055e6:	f8b4 e000 	ldrh.w	lr, [r4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80055ea:	bf0c      	ite	eq
 80055ec:	2702      	moveq	r7, #2
 80055ee:	2700      	movne	r7, #0
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80055f0:	2a01      	cmp	r2, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80055f2:	4605      	mov	r5, r0
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80055f4:	bf0c      	ite	eq
 80055f6:	2602      	moveq	r6, #2
 80055f8:	2601      	movne	r6, #1
 80055fa:	8923      	ldrh	r3, [r4, #8]
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80055fc:	f1be 0f00 	cmp.w	lr, #0
 8005600:	d111      	bne.n	8005626 <TIM_PWMIConfig+0x4a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005602:	f7ff fba7 	bl	8004d54 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005606:	4628      	mov	r0, r5
 8005608:	88e1      	ldrh	r1, [r4, #6]
 800560a:	f7ff ffcf 	bl	80055ac <TIM_SetIC1Prescaler>

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800560e:	4628      	mov	r0, r5
 8005610:	4639      	mov	r1, r7
 8005612:	4632      	mov	r2, r6
 8005614:	8923      	ldrh	r3, [r4, #8]
 8005616:	f7ff fbb6 	bl	8004d86 <TI2_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800561a:	4628      	mov	r0, r5
 800561c:	88e1      	ldrh	r1, [r4, #6]
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800561e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005622:	f7ff bfce 	b.w	80055c2 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005626:	f7ff fbae 	bl	8004d86 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800562a:	4628      	mov	r0, r5
 800562c:	88e1      	ldrh	r1, [r4, #6]
 800562e:	f7ff ffc8 	bl	80055c2 <TIM_SetIC2Prescaler>

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8005632:	4628      	mov	r0, r5
 8005634:	4639      	mov	r1, r7
 8005636:	4632      	mov	r2, r6
 8005638:	8923      	ldrh	r3, [r4, #8]
 800563a:	f7ff fb8b 	bl	8004d54 <TI1_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800563e:	4628      	mov	r0, r5
 8005640:	88e1      	ldrh	r1, [r4, #6]
  }
}
 8005642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005646:	f7ff bfb1 	b.w	80055ac <TIM_SetIC1Prescaler>

0800564a <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 800564a:	8b83      	ldrh	r3, [r0, #28]
 800564c:	f023 030c 	bic.w	r3, r3, #12
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8005656:	8b83      	ldrh	r3, [r0, #28]
 8005658:	b29b      	uxth	r3, r3
 800565a:	4319      	orrs	r1, r3
 800565c:	8381      	strh	r1, [r0, #28]
 800565e:	4770      	bx	lr

08005660 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8005660:	8b83      	ldrh	r3, [r0, #28]
 8005662:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	0c1b      	lsrs	r3, r3, #16
 800566a:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 800566c:	8b83      	ldrh	r3, [r0, #28]
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005674:	b289      	uxth	r1, r1
 8005676:	8381      	strh	r1, [r0, #28]
 8005678:	4770      	bx	lr

0800567a <TIM_ICInit>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800567a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567c:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800567e:	880e      	ldrh	r6, [r1, #0]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005680:	4604      	mov	r4, r0
 8005682:	8849      	ldrh	r1, [r1, #2]
 8005684:	88aa      	ldrh	r2, [r5, #4]
 8005686:	892b      	ldrh	r3, [r5, #8]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005688:	b93e      	cbnz	r6, 800569a <TIM_ICInit+0x20>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800568a:	f7ff fb63 	bl	8004d54 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800568e:	4620      	mov	r0, r4
 8005690:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005696:	f7ff bf89 	b.w	80055ac <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800569a:	2e04      	cmp	r6, #4
 800569c:	d107      	bne.n	80056ae <TIM_ICInit+0x34>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800569e:	f7ff fb72 	bl	8004d86 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80056a2:	4620      	mov	r0, r4
 80056a4:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80056a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80056aa:	f7ff bf8a 	b.w	80055c2 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80056ae:	2e08      	cmp	r6, #8
 80056b0:	f8b5 e006 	ldrh.w	lr, [r5, #6]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80056b4:	8c05      	ldrh	r5, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80056b6:	d11c      	bne.n	80056f2 <TIM_ICInit+0x78>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80056b8:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80056bc:	042d      	lsls	r5, r5, #16
 80056be:	0c2d      	lsrs	r5, r5, #16
 80056c0:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 80056c2:	8b87      	ldrh	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 80056c4:	8c06      	ldrh	r6, [r0, #32]
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;

  tmpccmr2 = TIMx->CCMR2;
 80056c6:	b2bf      	uxth	r7, r7
  tmpccer = TIMx->CCER;
 80056c8:	b2b6      	uxth	r6, r6
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 80056ca:	f027 07f3 	bic.w	r7, r7, #243	; 0xf3
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
 80056ce:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 80056d2:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  tmpccer |= tmp | CCER_CC3E_Set;
 80056d6:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 80056da:	b29f      	uxth	r7, r3
 80056dc:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80056de:	433a      	orrs	r2, r7

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80056e0:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056e4:	8382      	strh	r2, [r0, #28]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80056e6:	4671      	mov	r1, lr
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 80056e8:	8406      	strh	r6, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80056ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80056ee:	f7ff bfac 	b.w	800564a <TIM_SetIC3Prescaler>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 80056f2:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80056f6:	042d      	lsls	r5, r5, #16
 80056f8:	0c2d      	lsrs	r5, r5, #16
 80056fa:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 80056fc:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80056fe:	8c07      	ldrh	r7, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005700:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8005704:	052d      	lsls	r5, r5, #20

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;

  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8005706:	b2bf      	uxth	r7, r7
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005708:	0d2d      	lsrs	r5, r5, #20
 800570a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
 800570e:	f427 5200 	bic.w	r2, r7, #8192	; 0x2000
  tmpccer |= tmp | CCER_CC4E_Set;
 8005712:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005716:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 800571a:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 800571c:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 800571e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005722:	8383      	strh	r3, [r0, #28]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005724:	4671      	mov	r1, lr
  }
}
 8005726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer ;
 800572a:	8402      	strh	r2, [r0, #32]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800572c:	f7ff bf98 	b.w	8005660 <TIM_SetIC4Prescaler>

08005730 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
 8005730:	8803      	ldrh	r3, [r0, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8005736:	8803      	ldrh	r3, [r0, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	4319      	orrs	r1, r3
 800573c:	8001      	strh	r1, [r0, #0]
 800573e:	4770      	bx	lr

08005740 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8005740:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 8005742:	b280      	uxth	r0, r0
 8005744:	4770      	bx	lr

08005746 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005746:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8005748:	b280      	uxth	r0, r0
 800574a:	4770      	bx	lr

0800574c <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800574c:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 800574e:	b280      	uxth	r0, r0
 8005750:	4770      	bx	lr

08005752 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8005752:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8005756:	b280      	uxth	r0, r0
 8005758:	4770      	bx	lr

0800575a <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800575a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 800575c:	b280      	uxth	r0, r0
 800575e:	4770      	bx	lr

08005760 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8005760:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8005762:	b280      	uxth	r0, r0
 8005764:	4770      	bx	lr

08005766 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
 8005766:	8a03      	ldrh	r3, [r0, #16]
 8005768:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800576a:	bf14      	ite	ne
 800576c:	2001      	movne	r0, #1
 800576e:	2000      	moveq	r0, #0
 8005770:	4770      	bx	lr

08005772 <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
 8005772:	43c9      	mvns	r1, r1
 8005774:	b289      	uxth	r1, r1
 8005776:	8201      	strh	r1, [r0, #16]
 8005778:	4770      	bx	lr

0800577a <TIM_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800577a:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800577c:	8982      	ldrh	r2, [r0, #12]

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 800577e:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8005782:	b292      	uxth	r2, r2

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005784:	d003      	beq.n	800578e <TIM_GetITStatus+0x14>
 8005786:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8005788:	bf14      	ite	ne
 800578a:	2001      	movne	r0, #1
 800578c:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800578e:	4770      	bx	lr

08005790 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 8005790:	43c9      	mvns	r1, r1
 8005792:	b289      	uxth	r1, r1
 8005794:	8201      	strh	r1, [r0, #16]
 8005796:	4770      	bx	lr

08005798 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005798:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 800579a:	4b22      	ldr	r3, [pc, #136]	; (8005824 <USART_DeInit+0x8c>)
 800579c:	4298      	cmp	r0, r3
 800579e:	d02c      	beq.n	80057fa <USART_DeInit+0x62>
 80057a0:	d808      	bhi.n	80057b4 <USART_DeInit+0x1c>
 80057a2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80057a6:	4298      	cmp	r0, r3
 80057a8:	d017      	beq.n	80057da <USART_DeInit+0x42>
 80057aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ae:	4298      	cmp	r0, r3
 80057b0:	d01b      	beq.n	80057ea <USART_DeInit+0x52>
 80057b2:	bd08      	pop	{r3, pc}
 80057b4:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <USART_DeInit+0x90>)
 80057b6:	4298      	cmp	r0, r3
 80057b8:	d027      	beq.n	800580a <USART_DeInit+0x72>
 80057ba:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80057be:	4298      	cmp	r0, r3
 80057c0:	d12f      	bne.n	8005822 <USART_DeInit+0x8a>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80057c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80057c6:	2101      	movs	r1, #1
 80057c8:	f7ff fa10 	bl	8004bec <RCC_APB2PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 80057cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  switch (*(u32*)&USARTx)
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80057d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80057d4:	2100      	movs	r1, #0
 80057d6:	f7ff ba09 	b.w	8004bec <RCC_APB2PeriphResetCmd>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80057da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80057de:	2101      	movs	r1, #1
 80057e0:	f7ff fa10 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80057e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80057e8:	e016      	b.n	8005818 <USART_DeInit+0x80>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80057ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80057ee:	2101      	movs	r1, #1
 80057f0:	f7ff fa08 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80057f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80057f8:	e00e      	b.n	8005818 <USART_DeInit+0x80>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80057fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057fe:	2101      	movs	r1, #1
 8005800:	f7ff fa00 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8005804:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005808:	e006      	b.n	8005818 <USART_DeInit+0x80>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800580a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800580e:	2101      	movs	r1, #1
 8005810:	f7ff f9f8 	bl	8004c04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005814:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005818:	2100      	movs	r1, #0
      break;            

    default:
      break;
  }
}
 800581a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800581e:	f7ff b9f1 	b.w	8004c04 <RCC_APB1PeriphResetCmd>
 8005822:	bd08      	pop	{r3, pc}
 8005824:	40004c00 	andmi	r4, r0, r0, lsl #24
 8005828:	40005000 	andmi	r5, r0, r0

0800582c <USART_Init>:
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800582c:	b530      	push	{r4, r5, lr}
 800582e:	460d      	mov	r5, r1
 8005830:	4604      	mov	r4, r0
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005832:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8005834:	88ca      	ldrh	r2, [r1, #6]
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005836:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005838:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 800583c:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800583e:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005840:	8982      	ldrh	r2, [r0, #12]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005842:	8909      	ldrh	r1, [r1, #8]
 8005844:	88ab      	ldrh	r3, [r5, #4]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005846:	b292      	uxth	r2, r2

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005848:	430b      	orrs	r3, r1
 800584a:	8969      	ldrh	r1, [r5, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800584c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005850:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005852:	f022 020c 	bic.w	r2, r2, #12

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005856:	4313      	orrs	r3, r2
 8005858:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 800585a:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800585c:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800585e:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005860:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005866:	b087      	sub	sp, #28
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005868:	4313      	orrs	r3, r2

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 800586a:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800586c:	a801      	add	r0, sp, #4
 800586e:	f7ff f957 	bl	8004b20 <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005872:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005874:	9a04      	ldr	r2, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005876:	490e      	ldr	r1, [pc, #56]	; (80058b0 <USART_Init+0x84>)
 8005878:	428c      	cmp	r4, r1
 800587a:	bf18      	it	ne
 800587c:	461a      	movne	r2, r3
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 800587e:	2319      	movs	r3, #25
 8005880:	4353      	muls	r3, r2
 8005882:	682a      	ldr	r2, [r5, #0]
 8005884:	0092      	lsls	r2, r2, #2
 8005886:	fbb3 f2f2 	udiv	r2, r3, r2
  tmpreg = (integerdivider / 0x64) << 0x04;
 800588a:	2364      	movs	r3, #100	; 0x64
 800588c:	fbb2 f0f3 	udiv	r0, r2, r3
 8005890:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 8005892:	0901      	lsrs	r1, r0, #4
 8005894:	fb03 2211 	mls	r2, r3, r1, r2
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8005898:	0112      	lsls	r2, r2, #4
 800589a:	3232      	adds	r2, #50	; 0x32
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	4303      	orrs	r3, r0

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8123      	strh	r3, [r4, #8]
}
 80058aa:	b007      	add	sp, #28
 80058ac:	bd30      	pop	{r4, r5, pc}
 80058ae:	bf00      	nop
 80058b0:	40013800 	andmi	r3, r1, r0, lsl #16

080058b4 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80058b4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80058b8:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80058ba:	220c      	movs	r2, #12
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80058bc:	2300      	movs	r3, #0
 80058be:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80058c0:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80058c2:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80058c4:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80058c6:	8183      	strh	r3, [r0, #12]
 80058c8:	4770      	bx	lr

080058ca <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80058ca:	880b      	ldrh	r3, [r1, #0]
*                    the specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80058cc:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80058ce:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80058d0:	8a02      	ldrh	r2, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80058d2:	4323      	orrs	r3, r4
 80058d4:	888c      	ldrh	r4, [r1, #4]
 80058d6:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80058d8:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80058da:	4323      	orrs	r3, r4
 80058dc:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 80058de:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80058e2:	4313      	orrs	r3, r2
 80058e4:	b29b      	uxth	r3, r3
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 80058e6:	8203      	strh	r3, [r0, #16]
 80058e8:	bd10      	pop	{r4, pc}

080058ea <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80058ea:	2300      	movs	r3, #0
 80058ec:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80058ee:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80058f0:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80058f2:	80c3      	strh	r3, [r0, #6]
 80058f4:	4770      	bx	lr

080058f6 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80058f6:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80058f8:	b119      	cbz	r1, 8005902 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005900:	e003      	b.n	800590a <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8005902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	0c1b      	lsrs	r3, r3, #16
 800590a:	8183      	strh	r3, [r0, #12]
 800590c:	4770      	bx	lr

0800590e <USART_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 800590e:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005910:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005914:	2301      	movs	r3, #1
 8005916:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800591a:	2c01      	cmp	r4, #1
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 800591c:	fa03 f301 	lsl.w	r3, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005920:	d101      	bne.n	8005926 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8005922:	300c      	adds	r0, #12
 8005924:	e003      	b.n	800592e <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005926:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 8005928:	bf0c      	ite	eq
 800592a:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800592c:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 800592e:	b112      	cbz	r2, 8005936 <USART_ITConfig+0x28>
  {
    *(vu32*)usartxbase  |= itmask;
 8005930:	6802      	ldr	r2, [r0, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	e002      	b.n	800593c <USART_ITConfig+0x2e>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 8005936:	6802      	ldr	r2, [r0, #0]
 8005938:	ea22 0303 	bic.w	r3, r2, r3
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	bd10      	pop	{r4, pc}

08005940 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005940:	8a83      	ldrh	r3, [r0, #20]
 8005942:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005944:	b10a      	cbz	r2, 800594a <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005946:	4319      	orrs	r1, r3
 8005948:	e001      	b.n	800594e <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 800594a:	ea23 0101 	bic.w	r1, r3, r1
 800594e:	8281      	strh	r1, [r0, #20]
 8005950:	4770      	bx	lr

08005952 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8005952:	8a03      	ldrh	r3, [r0, #16]
 8005954:	f023 030f 	bic.w	r3, r3, #15
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	0c1b      	lsrs	r3, r3, #16
 800595c:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800595e:	8a03      	ldrh	r3, [r0, #16]
 8005960:	b29b      	uxth	r3, r3
 8005962:	4319      	orrs	r1, r3
 8005964:	8201      	strh	r1, [r0, #16]
 8005966:	4770      	bx	lr

08005968 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8005968:	8983      	ldrh	r3, [r0, #12]
 800596a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005974:	8983      	ldrh	r3, [r0, #12]
 8005976:	b29b      	uxth	r3, r3
 8005978:	4319      	orrs	r1, r3
 800597a:	8181      	strh	r1, [r0, #12]
 800597c:	4770      	bx	lr

0800597e <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 800597e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005980:	b119      	cbz	r1, 800598a <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005982:	b29b      	uxth	r3, r3
 8005984:	f043 0302 	orr.w	r3, r3, #2
 8005988:	e003      	b.n	8005992 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 800598a:	f023 0302 	bic.w	r3, r3, #2
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	8183      	strh	r3, [r0, #12]
 8005994:	4770      	bx	lr

08005996 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8005996:	8a03      	ldrh	r3, [r0, #16]
 8005998:	f023 0320 	bic.w	r3, r3, #32
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	0c1b      	lsrs	r3, r3, #16
 80059a0:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80059a2:	8a03      	ldrh	r3, [r0, #16]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	4319      	orrs	r1, r3
 80059a8:	8201      	strh	r1, [r0, #16]
 80059aa:	4770      	bx	lr

080059ac <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 80059ac:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80059ae:	b119      	cbz	r1, 80059b8 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b6:	e003      	b.n	80059c0 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 80059b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	0c1b      	lsrs	r3, r3, #16
 80059c0:	8203      	strh	r3, [r0, #16]
 80059c2:	4770      	bx	lr

080059c4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 80059c4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80059c8:	8081      	strh	r1, [r0, #4]
 80059ca:	4770      	bx	lr

080059cc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 80059cc:	8880      	ldrh	r0, [r0, #4]
}
 80059ce:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80059d2:	4770      	bx	lr

080059d4 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 80059d4:	8983      	ldrh	r3, [r0, #12]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	8183      	strh	r3, [r0, #12]
 80059de:	4770      	bx	lr

080059e0 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 80059e0:	8b03      	ldrh	r3, [r0, #24]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 80059e6:	8b03      	ldrh	r3, [r0, #24]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80059ee:	8301      	strh	r1, [r0, #24]
 80059f0:	4770      	bx	lr

080059f2 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 80059f2:	8b03      	ldrh	r3, [r0, #24]
 80059f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059f8:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80059fa:	8b03      	ldrh	r3, [r0, #24]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	4319      	orrs	r1, r3
 8005a00:	8301      	strh	r1, [r0, #24]
 8005a02:	4770      	bx	lr

08005a04 <USART_SmartCardCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005a04:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005a06:	b119      	cbz	r1, 8005a10 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f043 0320 	orr.w	r3, r3, #32
 8005a0e:	e003      	b.n	8005a18 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8005a10:	f023 0320 	bic.w	r3, r3, #32
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	8283      	strh	r3, [r0, #20]
 8005a1a:	4770      	bx	lr

08005a1c <USART_SmartCardNACKCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005a1c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005a1e:	b119      	cbz	r1, 8005a28 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f043 0310 	orr.w	r3, r3, #16
 8005a26:	e003      	b.n	8005a30 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8005a28:	f023 0310 	bic.w	r3, r3, #16
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	8283      	strh	r3, [r0, #20]
 8005a32:	4770      	bx	lr

08005a34 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005a34:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005a36:	b119      	cbz	r1, 8005a40 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f043 0308 	orr.w	r3, r3, #8
 8005a3e:	e003      	b.n	8005a48 <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8005a40:	f023 0308 	bic.w	r3, r3, #8
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	0c1b      	lsrs	r3, r3, #16
 8005a48:	8283      	strh	r3, [r0, #20]
 8005a4a:	4770      	bx	lr

08005a4c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8005a4c:	8a83      	ldrh	r3, [r0, #20]
 8005a4e:	f023 0304 	bic.w	r3, r3, #4
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	0c1b      	lsrs	r3, r3, #16
 8005a56:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005a58:	8a83      	ldrh	r3, [r0, #20]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4319      	orrs	r1, r3
 8005a5e:	8281      	strh	r1, [r0, #20]
 8005a60:	4770      	bx	lr

08005a62 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005a62:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005a64:	b119      	cbz	r1, 8005a6e <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	e003      	b.n	8005a76 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8005a6e:	f023 0302 	bic.w	r3, r3, #2
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	8283      	strh	r3, [r0, #20]
 8005a78:	4770      	bx	lr

08005a7a <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005a7e:	bf14      	ite	ne
 8005a80:	2001      	movne	r0, #1
 8005a82:	2000      	moveq	r0, #0
 8005a84:	4770      	bx	lr

08005a86 <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8005a86:	43c9      	mvns	r1, r1
 8005a88:	b289      	uxth	r1, r1
 8005a8a:	8001      	strh	r1, [r0, #0]
 8005a8c:	4770      	bx	lr

08005a8e <USART_GetITStatus>:
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005a8e:	2301      	movs	r3, #1
*                       - USART_IT_PE:   Parity Error interrupt
* Output         : None
* Return         : The new state of USART_IT (SET or RESET).
*******************************************************************************/
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
{
 8005a90:	b510      	push	{r4, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005a92:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005a96:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005a9a:	429c      	cmp	r4, r3
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005a9c:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005aa0:	d101      	bne.n	8005aa6 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8005aa2:	8983      	ldrh	r3, [r0, #12]
 8005aa4:	e003      	b.n	8005aae <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005aa6:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8005aa8:	bf0c      	ite	eq
 8005aaa:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005aac:	8a83      	ldrhne	r3, [r0, #20]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8005ab2:	8802      	ldrh	r2, [r0, #0]
 8005ab4:	b292      	uxth	r2, r2

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005ab6:	b13b      	cbz	r3, 8005ac8 <USART_GetITStatus+0x3a>
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8005ab8:	0a09      	lsrs	r1, r1, #8
 8005aba:	2301      	movs	r3, #1
 8005abc:	408b      	lsls	r3, r1
  bitpos &= USARTx->SR;

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005abe:	4213      	tst	r3, r2
  {
    bitstatus = SET;
 8005ac0:	bf14      	ite	ne
 8005ac2:	2001      	movne	r0, #1
 8005ac4:	2000      	moveq	r0, #0
 8005ac6:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8005ac8:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8005aca:	bd10      	pop	{r4, pc}

08005acc <USART_ClearITPendingBit>:
  assert_param(IS_USART_CLEAR_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
 8005acc:	0a09      	lsrs	r1, r1, #8
 8005ace:	2301      	movs	r3, #1
 8005ad0:	408b      	lsls	r3, r1
  USARTx->SR = (u16)~itmask;
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	8003      	strh	r3, [r0, #0]
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop

08005adc <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8005adc:	bf30      	wfi
    BX r14
 8005ade:	4770      	bx	lr

08005ae0 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8005ae0:	bf20      	wfe
    BX r14
 8005ae2:	4770      	bx	lr

08005ae4 <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8005ae4:	bf40      	sev
    BX r14
 8005ae6:	4770      	bx	lr

08005ae8 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8005ae8:	f3bf 8f6f 	isb	sy
    BX r14
 8005aec:	4770      	bx	lr

08005aee <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8005aee:	f3bf 8f4f 	dsb	sy
    BX r14
 8005af2:	4770      	bx	lr

08005af4 <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8005af4:	f3bf 8f5f 	dmb	sy
    BX r14
 8005af8:	4770      	bx	lr

08005afa <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8005afa:	df01      	svc	1
    BX r14
 8005afc:	4770      	bx	lr

08005afe <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8005afe:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8005b02:	4770      	bx	lr

08005b04 <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8005b04:	f380 8814 	msr	CONTROL, r0
  ISB
 8005b08:	f3bf 8f6f 	isb	sy
  BX r14
 8005b0c:	4770      	bx	lr

08005b0e <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8005b0e:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8005b12:	4770      	bx	lr

08005b14 <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8005b14:	f380 8809 	msr	PSP, r0
    BX r14
 8005b18:	4770      	bx	lr

08005b1a <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8005b1a:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8005b1e:	4770      	bx	lr

08005b20 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8005b20:	f380 8808 	msr	MSP, r0
    BX r14
 8005b24:	4770      	bx	lr

08005b26 <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8005b26:	b672      	cpsid	i
  BX r14
 8005b28:	4770      	bx	lr

08005b2a <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8005b2a:	b662      	cpsie	i
  BX r14
 8005b2c:	4770      	bx	lr

08005b2e <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8005b2e:	b671      	cpsid	f
  BX r14
 8005b30:	4770      	bx	lr

08005b32 <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8005b32:	b661      	cpsie	f
  BX r14
 8005b34:	4770      	bx	lr

08005b36 <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8005b36:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8005b3a:	4770      	bx	lr

08005b3c <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8005b3c:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  BX r14
 8005b40:	4770      	bx	lr

08005b42 <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8005b42:	ba40      	rev16	r0, r0
  BX r14
 8005b44:	4770      	bx	lr

08005b46 <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8005b46:	ba00      	rev	r0, r0
  BX r14
 8005b48:	4770      	bx	lr
	...

08005b4c <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8005b4c:	4668      	mov	r0, sp
 8005b4e:	f020 0107 	bic.w	r1, r0, #7
 8005b52:	468d      	mov	sp, r1
 8005b54:	b501      	push	{r0, lr}
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <Reset_Handler+0x3c>)
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <Reset_Handler+0x40>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8005b5a:	490d      	ldr	r1, [pc, #52]	; (8005b90 <Reset_Handler+0x44>)
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	d204      	bcs.n	8005b6a <Reset_Handler+0x1e>
    {
        *(pulDest++) = *(pulSrc++);
 8005b60:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8005b64:	f843 1b04 	str.w	r1, [r3], #4
 8005b68:	e7f7      	b.n	8005b5a <Reset_Handler+0xe>
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <Reset_Handler+0x48>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8005b6c:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <Reset_Handler+0x4c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d203      	bcs.n	8005b7a <Reset_Handler+0x2e>
    {
        *(pulDest++) = 0;
 8005b72:	2200      	movs	r2, #0
 8005b74:	f843 2b04 	str.w	r2, [r3], #4
 8005b78:	e7f8      	b.n	8005b6c <Reset_Handler+0x20>
    }

    //
    // Call the application's entry point.
    //
    main();
 8005b7a:	f000 f80f 	bl	8005b9c <main>
}
 8005b7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8005b82:	4685      	mov	sp, r0
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	08005e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, lr}
 8005b8c:	20000000 	andcs	r0, r0, r0
 8005b90:	20000018 	andcs	r0, r0, r8, lsl r0
 8005b94:	20000018 	andcs	r0, r0, r8, lsl r0
 8005b98:	2000021c 	andcs	r0, r0, ip, lsl r2

08005b9c <main>:
//////////////////////////   M A I N   L O O P   ////////////////////////
/////////////////////////////////////////////////////////////////////////


int main(void)
{
 8005b9c:	b507      	push	{r0, r1, r2, lr}
  // --------------DO NOT TOUCH!!------------------------ //
  // NEVER!!! EVER!!!

  /* System Clocks Configuration */
  RCC_Configuration();
 8005b9e:	f7fd fadd 	bl	800315c <RCC_Configuration>

  /* NVIC configuration */
  NVIC_Configuration();
 8005ba2:	f7fd fb1d 	bl	80031e0 <NVIC_Configuration>

  /* GPIO configuration */
  GPIO_Configuration();
 8005ba6:	f7fd fb42 	bl	800322e <GPIO_Configuration>

  SysTick_Configuration();
 8005baa:	f7fd fec5 	bl	8003938 <SysTick_Configuration>

  Timer_Configuration();
 8005bae:	f7fd fe3a 	bl	8003826 <Timer_Configuration>

  dxl_initialize( 0, 1 );
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7fd ffd1 	bl	8003b5c <dxl_initialize>
  USART_Configuration(USART_PC, Baudrate_PC);
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <main+0x80>)
 8005bbc:	2002      	movs	r0, #2
 8005bbe:	6859      	ldr	r1, [r3, #4]
 8005bc0:	f7fd ff01 	bl	80039c6 <USART_Configuration>

  while(state!=STOP)
  	{
    state=GO_TO_CENTER;
      while (state==GO_TO_CENTER) {  
        mDelay(2000);
 8005bc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005bc8:	f7fd fecc 	bl	8003964 <mDelay>
    	centerInfraRed(SENSOR, &field);
 8005bcc:	f10d 0105 	add.w	r1, sp, #5
 8005bd0:	2064      	movs	r0, #100	; 0x64
 8005bd2:	f7fd faaf 	bl	8003134 <centerInfraRed>
      		{
	  		TxDString("IR VALUE ") ;
 8005bd6:	4812      	ldr	r0, [pc, #72]	; (8005c20 <main+0x84>)
 8005bd8:	f7fd fbc4 	bl	8003364 <TxDString>
	 	    TxDByte16(field);
 8005bdc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005be0:	f7fd fc68 	bl	80034b4 <TxDByte16>
				
       		}
    	centerLuminosity(SENSOR, &brightness);
 8005be4:	f10d 0106 	add.w	r1, sp, #6
 8005be8:	2064      	movs	r0, #100	; 0x64
 8005bea:	f7fd faad 	bl	8003148 <centerLuminosity>
   			    {
	 		TxDString(" Brightness VALUE ") ;
 8005bee:	480d      	ldr	r0, [pc, #52]	; (8005c24 <main+0x88>)
 8005bf0:	f7fd fbb8 	bl	8003364 <TxDString>
	 		TxDByte16(brightness);	
 8005bf4:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8005bf8:	f7fd fc5c 	bl	80034b4 <TxDByte16>
       			}
    	checkLuminosity(SENSOR, &white_line);
 8005bfc:	f10d 0107 	add.w	r1, sp, #7
 8005c00:	2064      	movs	r0, #100	; 0x64
 8005c02:	f7fd fd41 	bl	8003688 <checkLuminosity>
      			{
	 		TxDString(" WHITE LINE ") ;
 8005c06:	4808      	ldr	r0, [pc, #32]	; (8005c28 <main+0x8c>)
 8005c08:	f7fd fbac 	bl	8003364 <TxDString>
	 		TxDByte16(white_line);
 8005c0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005c10:	f7fd fc50 	bl	80034b4 <TxDByte16>
	 		TxDString("\n") ;
 8005c14:	4805      	ldr	r0, [pc, #20]	; (8005c2c <main+0x90>)
 8005c16:	f7fd fba5 	bl	8003364 <TxDString>
 8005c1a:	e7d3      	b.n	8005bc4 <main+0x28>
 8005c1c:	20000000 	andcs	r0, r0, r0
 8005c20:	08005e69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp, ip, lr}
 8005c24:	08005e73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, sl, fp, ip, lr}
 8005c28:	08005e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp, ip, lr}
 8005c2c:	08005e46 	stmdaeq	r0, {r1, r2, r6, r9, sl, fp, ip, lr}

08005c30 <APBAHBPrescTable>:
 8005c30:	00000000 	andeq	r0, r0, r0
 8005c34:	04030201 	streq	r0, [r3], #-513	; 0x201
 8005c38:	04030201 	streq	r0, [r3], #-513	; 0x201
 8005c3c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

08005c40 <ADCPrescTable>:
 8005c40:	08060402 	stmdaeq	r6, {r1, sl}
 8005c44:	354d430a 	strbcc	r4, [sp, #-778]	; 0x30a
 8005c48:	666e6920 	strbtvs	r6, [lr], -r0, lsr #18
 8005c4c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 8005c50:	6f722065 	svcvs	0x00722065
 8005c54:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 8005c58:	6d206e6f 	stcvs	14, cr6, [r0, #-444]!	; 0xfffffe44
 8005c5c:	2065646f 	rsbcs	r6, r5, pc, ror #8
 8005c60:	0a746573 	beq	9d1f234 <_etext+0x1d193a0>
 8005c64:	4d430a00 	vstrmi	s1, [r3, #-0]
 8005c68:	6f6e2035 	svcvs	0x006e2035
 8005c6c:	6c616d72 	stclvs	13, cr6, [r1], #-456	; 0xfffffe38
 8005c70:	746f7220 	strbtvc	r7, [pc], #-544	; 8005c78 <ADCPrescTable+0x38>
 8005c74:	6f697461 	svcvs	0x00697461
 8005c78:	6f6d206e 	svcvs	0x006d206e
 8005c7c:	73206564 			; <UNDEFINED> instruction: 0x73206564
 8005c80:	000a7465 	andeq	r7, sl, r5, ror #8
 8005c84:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8005c88:	4658545f 			; <UNDEFINED> instruction: 0x4658545f
 8005c8c:	3a4c4941 	bcc	9318198 <_etext+0x1312304>
 8005c90:	69614620 	stmdbvs	r1!, {r5, r9, sl, lr}^
 8005c94:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8005c98:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 8005c9c:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xd73
 8005ca0:	736e6920 	cmnvc	lr, #32, 18	; 0x80000
 8005ca4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 8005ca8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 8005cac:	63617020 	cmnvs	r1, #32
 8005cb0:	2174656b 	cmncs	r4, fp, ror #10
 8005cb4:	4f43000a 	svcmi	0x0043000a
 8005cb8:	545f4d4d 	ldrbpl	r4, [pc], #-3405	; 8005cc0 <ADCPrescTable+0x80>
 8005cbc:	52524558 	subspl	r4, r2, #88, 10	; 0x16000000
 8005cc0:	203a524f 	eorscs	r5, sl, pc, asr #4
 8005cc4:	6f636e49 	svcvs	0x00636e49
 8005cc8:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 8005ccc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 8005cd0:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 8005cd4:	6f697463 	svcvs	0x00697463
 8005cd8:	6170206e 	cmnvs	r0, lr, rrx
 8005cdc:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8005ce0:	43000a21 	movwmi	r0, #2593	; 0xa21
 8005ce4:	5f4d4d4f 	svcpl	0x004d4d4f
 8005ce8:	41465852 	cmpmi	r6, r2, asr r8
 8005cec:	203a4c49 	eorscs	r4, sl, r9, asr #24
 8005cf0:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 8005cf4:	67206465 	strvs	r6, [r0, -r5, ror #8]!
 8005cf8:	73207465 			; <UNDEFINED> instruction: 0x73207465
 8005cfc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 8005d00:	61702073 	cmnvs	r0, r3, ror r0
 8005d04:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8005d08:	6f726620 	svcvs	0x00726620
 8005d0c:	6564206d 	strbvs	r2, [r4, #-109]!	; 0x6d
 8005d10:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
 8005d14:	43000a21 	movwmi	r0, #2593	; 0xa21
 8005d18:	5f4d4d4f 	svcpl	0x004d4d4f
 8005d1c:	41575852 	cmpmi	r7, r2, asr r8
 8005d20:	4e495449 	cdpmi	4, 4, cr5, cr9, cr9, {2}
 8005d24:	4e203a47 	vnmulmi.f32	s6, s0, s14
 8005d28:	7220776f 	eorvc	r7, r0, #29097984	; 0x1bc0000
 8005d2c:	65696365 	strbvs	r6, [r9, #-869]!	; 0x365
 8005d30:	676e6976 			; <UNDEFINED> instruction: 0x676e6976
 8005d34:	61747320 	cmnvs	r4, r0, lsr #6
 8005d38:	20737574 	rsbscs	r7, r3, r4, ror r5
 8005d3c:	6b636170 	blvs	98de304 <_etext+0x18d8470>
 8005d40:	0a217465 	beq	8862edc <_etext+0x85d048>
 8005d44:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 8005d4c <ADCPrescTable+0x10c>
 8005d48:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 8005d4c:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
 8005d50:	3a54554f 	bcc	951b294 <_etext+0x1515400>
 8005d54:	65685420 	strbvs	r5, [r8, #-1056]!	; 0x420
 8005d58:	69206572 	stmdbvs	r0!, {r1, r4, r5, r6, r8, sl, sp, lr}
 8005d5c:	6f6e2073 	svcvs	0x006e2073
 8005d60:	61747320 	cmnvs	r4, r0, lsr #6
 8005d64:	20737574 	rsbscs	r7, r3, r4, ror r5
 8005d68:	6b636170 	blvs	98de330 <_etext+0x18d849c>
 8005d6c:	0a217465 	beq	8862f08 <_etext+0x85d074>
 8005d70:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 8005d78 <ADCPrescTable+0x138>
 8005d74:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 8005d78:	52524f43 	subspl	r4, r2, #268	; 0x10c
 8005d7c:	3a545055 	bcc	9519ed8 <_etext+0x1514044>
 8005d80:	636e4920 	cmnvs	lr, #32, 18	; 0x80000
 8005d84:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
 8005d88:	73207463 			; <UNDEFINED> instruction: 0x73207463
 8005d8c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 8005d90:	61702073 	cmnvs	r0, r3, ror r0
 8005d94:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8005d98:	54000a21 	strpl	r0, [r0], #-2593	; 0xa21
 8005d9c:	20736968 	rsbscs	r6, r3, r8, ror #18
 8005da0:	75207369 	strvc	r7, [r0, #-873]!	; 0x369
 8005da4:	6f6e6b6e 	svcvs	0x006e6b6e
 8005da8:	65206e77 	strvs	r6, [r0, #-3703]!	; 0xe77
 8005dac:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8005db0:	646f6320 	strbtvs	r6, [pc], #-800	; 8005db8 <ADCPrescTable+0x178>
 8005db4:	000a2165 	andeq	r2, sl, r5, ror #2
 8005db8:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
 8005dbc:	6f762074 	svcvs	0x00762074
 8005dc0:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
 8005dc4:	72652065 	rsbvc	r2, r5, #101	; 0x65
 8005dc8:	21726f72 	cmncs	r2, r2, ror pc
 8005dcc:	6e41000a 	cdpvs	0, 4, cr0, cr1, cr10, {0}
 8005dd0:	20656c67 	rsbcs	r6, r5, r7, ror #24
 8005dd4:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 8005dd8:	72652074 	rsbvc	r2, r5, #116	; 0x74
 8005ddc:	21726f72 	cmncs	r2, r2, ror pc
 8005de0:	764f000a 	strbvc	r0, [pc], -sl
 8005de4:	65687265 	strbvs	r7, [r8, #-613]!	; 0x265
 8005de8:	65207461 	strvs	r7, [r0, #-1121]!	; 0x461
 8005dec:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8005df0:	4f000a21 	svcmi	0x00000a21
 8005df4:	6f207475 	svcvs	0x00207475
 8005df8:	61722066 	cmnvs	r2, r6, rrx
 8005dfc:	2065676e 	rsbcs	r6, r5, lr, ror #14
 8005e00:	6f727265 	svcvs	0x00727265
 8005e04:	000a2172 	andeq	r2, sl, r2, ror r1
 8005e08:	63656843 	cmnvs	r5, #4390912	; 0x430000
 8005e0c:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!	; 0xfffffe54
 8005e10:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 8005e14:	0a21726f 	beq	88627d8 <_etext+0x85c944>
 8005e18:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xf00
 8005e1c:	616f6c72 	smcvs	63170	; 0xf6c2
 8005e20:	72652064 	rsbvc	r2, r5, #100	; 0x64
 8005e24:	21726f72 	cmncs	r2, r2, ror pc
 8005e28:	6e49000a 	cdpvs	0, 4, cr0, cr9, cr10, {0}
 8005e2c:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 8005e30:	6f697463 	svcvs	0x00697463
 8005e34:	6f63206e 	svcvs	0x0063206e
 8005e38:	65206564 	strvs	r6, [r0, #-1380]!	; 0x564
 8005e3c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8005e40:	21000a21 	tstcs	r0, r1, lsr #20
 8005e44:	000a2121 	andeq	r2, sl, r1, lsr #2
 8005e48:	6f72700a 	svcvs	0x0072700a
 8005e4c:	6d656c62 	stclvs	12, cr6, [r5, #-392]!	; 0xfffffe78
 8005e50:	6f63202c 	svcvs	0x0063202c
 8005e54:	3d3d6564 	cfldr32cc	mvfx6, [sp, #-400]!	; 0xfffffe70
 8005e58:	72700a00 	rsbsvc	r0, r0, #0, 20
 8005e5c:	656c626f 	strbvs	r6, [ip, #-623]!	; 0x26f
 8005e60:	63202c6d 			; <UNDEFINED> instruction: 0x63202c6d
 8005e64:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 8005e68:	20524900 	subscs	r4, r2, r0, lsl #18
 8005e6c:	554c4156 	strbpl	r4, [ip, #-342]	; 0x156
 8005e70:	20002045 	andcs	r2, r0, r5, asr #32
 8005e74:	67697242 	strbvs	r7, [r9, -r2, asr #4]!
 8005e78:	656e7468 	strbvs	r7, [lr, #-1128]!	; 0x468
 8005e7c:	56207373 			; <UNDEFINED> instruction: 0x56207373
 8005e80:	45554c41 	ldrbmi	r4, [r5, #-3137]	; 0xc41
 8005e84:	57200020 	strpl	r0, [r0, -r0, lsr #32]!
 8005e88:	45544948 	ldrbmi	r4, [r4, #-2376]	; 0x948
 8005e8c:	4e494c20 	cdpmi	12, 4, cr4, cr9, cr0, {1}
 8005e90:	00002045 	andeq	r2, r0, r5, asr #32

Disassembly of section .data:

20000000 <CCR1_Val>:
20000000:	00000064 	andeq	r0, r0, r4, rrx

20000004 <Baudrate_PC>:
20000004:	0000e100 	andeq	lr, r0, r0, lsl #2

20000008 <id>:
20000008:	00000001 	andeq	r0, r0, r1

2000000a <GoalPos>:
2000000a:	03ff0000 	mvnseq	r0, #0
	...

20000010 <Baudrate_DXL>:
20000010:	000f4240 	andeq	r4, pc, r0, asr #4

20000014 <gbCommStatus>:
20000014:	00000001 	andeq	r0, r0, r1

Disassembly of section .bss:

20000018 <_sbss>:
	...

20000019 <gbRxBufferReadPointer>:
	...

2000001a <gbpRxInterruptBuffer>:
	...

2000011c <capture>:
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <gw1msCounter>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <gwTimingDelay>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <CommStatus>:
	...

20000129 <bMoving>:
	...

2000012a <Voltage>:
	...

2000012b <INDEX>:
	...

2000012c <wPresentPos>:
	...

2000012e <Position>:
	...

20000130 <giBusUsing>:
20000130:	00000000 	andeq	r0, r0, r0

20000134 <gbInstructionPacket>:
	...

200001d4 <gbRxGetLength>:
	...

200001d5 <gbRxPacketLength>:
	...

200001d6 <gbStatusPacket>:
	...

Disassembly of section ._usrstack:

2000021c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
  34:	30353130 	eorscc	r3, r5, r0, lsr r1
  38:	20393235 	eorscs	r3, r9, r5, lsr r2
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <SCS_BASE+0x1fff12fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
  6c:	005d3737 	subseq	r3, sp, r7, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  14:	00000934 	andeq	r0, r0, r4, lsr r9
  18:	08005b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, lr}
  1c:	00000094 	muleq	r0, r4, r0
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	24c90002 	strbcs	r0, [r9], #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
  3c:	00000090 	muleq	r0, r0, r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	2a4d0002 	bcs	134005c <__Stack_Size+0x133fc5c>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip, sp}
  5c:	00000062 	andeq	r0, r0, r2, rrx
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	2d250002 	stccs	0, cr0, [r5, #-8]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	08003b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, sp}
  7c:	0000037c 	andeq	r0, r0, ip, ror r3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	34590002 	ldrbcc	r0, [r9], #-2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
  9c:	00000480 	andeq	r0, r0, r0, lsl #9
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	3d140002 	ldccc	0, cr0, [r4, #-8]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08004358 	stmdaeq	r0, {r3, r4, r6, r8, r9, lr}
  bc:	00000256 	andeq	r0, r0, r6, asr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	445b0002 	ldrbmi	r0, [fp], #-2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	080045b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, lr}
  dc:	00000314 	andeq	r0, r0, r4, lsl r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	4dc30002 	stclmi	0, cr0, [r3, #8]
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	080048c4 	stmdaeq	r0, {r2, r6, r7, fp, lr}
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	50890002 	addpl	r0, r9, r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	0800498c 	stmdaeq	r0, {r2, r3, r7, r8, fp, lr}
 11c:	0000033c 	andeq	r0, r0, ip, lsr r3
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	58fa0002 	ldmpl	sl!, {r1}^
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
 13c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	5b050002 	blpl	14015c <__Stack_Size+0x13fd5c>
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
 15c:	00000a44 	andeq	r0, r0, r4, asr #20
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	7a470002 	bvc	11c017c <__Stack_Size+0x11bfd7c>
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08005798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, lr}
 17c:	00000342 	andeq	r0, r0, r2, asr #6
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	84730002 	ldrbthi	r0, [r3], #-2
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08005adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, lr}
 19c:	0000006e 	andeq	r0, r0, lr, rrx
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	84f70002 	ldrbthi	r0, [r7], #2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08005b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, lr}
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000024c5 	andeq	r2, r0, r5, asr #9
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000007f5 	strdeq	r0, [r0], -r5
      10:	00038901 	andeq	r8, r3, r1, lsl #18
      14:	0003dd00 	andeq	sp, r3, r0, lsl #26
	...
      24:	33730200 	cmncc	r3, #0, 4
      28:	17020032 	smladxne	r2, r2, r0, r0
      2c:	00000030 	andeq	r0, r0, r0, lsr r0
      30:	50050403 	andpl	r0, r5, r3, lsl #8
      34:	03000009 	movweq	r0, #9
      38:	09140502 	ldmdbeq	r4, {r1, r8, sl}
      3c:	01030000 	mrseq	r0, (UNDEF: 3)
      40:	000ab106 	andeq	fp, sl, r6, lsl #2
      44:	33750200 	cmncc	r5, #0, 4
      48:	27020032 	smladxcs	r2, r2, r0, r0
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	76070403 	strvc	r0, [r7], -r3, lsl #8
      54:	0200000a 	andeq	r0, r0, #10
      58:	00363175 	eorseq	r3, r6, r5, ror r1
      5c:	00622802 	rsbeq	r2, r2, r2, lsl #16
      60:	02030000 	andeq	r0, r3, #0
      64:	000c6807 	andeq	r6, ip, r7, lsl #16
      68:	38750200 	ldmdacc	r5!, {r9}^
      6c:	73290200 			; <UNDEFINED> instruction: 0x73290200
      70:	03000000 	movweq	r0, #0
      74:	0aaf0801 	beq	febc2080 <SCS_BASE+0x1ebb4080>
      78:	ba040000 	blt	100080 <__Stack_Size+0xffc80>
      7c:	02000004 	andeq	r0, r0, #4
      80:	0000852f 	andeq	r8, r0, pc, lsr #10
      84:	00500500 	subseq	r0, r0, r0, lsl #10
      88:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
      8c:	02000002 	andeq	r0, r0, #2
      90:	00009530 	andeq	r9, r0, r0, lsr r5
      94:	00620500 	rsbeq	r0, r2, r0, lsl #10
      98:	01060000 	mrseq	r0, (UNDEF: 6)
      9c:	00af3902 	adceq	r3, pc, r2, lsl #18
      a0:	da070000 	ble	1c00a8 <__Stack_Size+0x1bfca8>
      a4:	00000018 	andeq	r0, r0, r8, lsl r0
      a8:	54455308 	strbpl	r5, [r5], #-776	; 0x308
      ac:	04000100 	streq	r0, [r0], #-256	; 0x100
      b0:	00000898 	muleq	r0, r8, r8
      b4:	009a3902 	addseq	r3, sl, r2, lsl #18
      b8:	62040000 	andvs	r0, r4, #0
      bc:	02000020 	andeq	r0, r0, #32
      c0:	00009a39 	andeq	r9, r0, r9, lsr sl
      c4:	02010600 	andeq	r0, r1, #0, 12
      c8:	0000da3b 	andeq	sp, r0, fp, lsr sl
      cc:	05b30700 	ldreq	r0, [r3, #1792]!	; 0x700
      d0:	07000000 	streq	r0, [r0, -r0]
      d4:	00000a4f 	andeq	r0, r0, pc, asr #20
      d8:	f9040001 			; <UNDEFINED> instruction: 0xf9040001
      dc:	02000000 	andeq	r0, r0, #0
      e0:	0000c53b 	andeq	ip, r0, fp, lsr r5
      e4:	02010600 	andeq	r0, r1, #0, 12
      e8:	0000fa3e 	andeq	pc, r0, lr, lsr sl	; <UNPREDICTABLE>
      ec:	00110700 	andseq	r0, r1, r0, lsl #14
      f0:	07000000 	streq	r0, [r0, -r0]
      f4:	00000598 	muleq	r0, r8, r5
      f8:	31040001 	tstcc	r4, r1
      fc:	02000001 	andeq	r0, r0, #1
     100:	0000e53e 	andeq	lr, r0, lr, lsr r5
     104:	07040300 	streq	r0, [r4, -r0, lsl #6]
     108:	00000a6d 	andeq	r0, r0, sp, ror #20
     10c:	4e031c09 	cdpmi	12, 0, cr1, cr3, cr9, {0}
     110:	00017101 	andeq	r7, r1, r1, lsl #2
     114:	52430a00 	subpl	r0, r3, #0, 20
     118:	5003004c 	andpl	r0, r3, ip, asr #32
     11c:	00007a01 	andeq	r7, r0, r1, lsl #20
     120:	430a0000 	movwmi	r0, #40960	; 0xa000
     124:	03004852 	movweq	r4, #2130	; 0x852
     128:	007a0151 	rsbseq	r0, sl, r1, asr r1
     12c:	0a040000 	beq	100134 <__Stack_Size+0xffd34>
     130:	00524449 	subseq	r4, r2, r9, asr #8
     134:	7a015203 	bvc	54948 <__Stack_Size+0x54548>
     138:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     13c:	52444f0a 	subpl	r4, r4, #10, 30	; 0x28
     140:	01530300 	cmpeq	r3, r0, lsl #6
     144:	0000007a 	andeq	r0, r0, sl, ror r0
     148:	00760b0c 	rsbseq	r0, r6, ip, lsl #22
     14c:	54030000 	strpl	r0, [r3], #-0
     150:	00007a01 	andeq	r7, r0, r1, lsl #20
     154:	420a1000 	andmi	r1, sl, #0
     158:	03005252 	movweq	r5, #594	; 0x252
     15c:	007a0155 	rsbseq	r0, sl, r5, asr r1
     160:	0b140000 	bleq	500168 <__Stack_Size+0x4ffd68>
     164:	00000d3d 	andeq	r0, r0, sp, lsr sp
     168:	7a015603 	bvc	5597c <__Stack_Size+0x5557c>
     16c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     170:	09f80c00 	ldmibeq	r8!, {sl, fp}^
     174:	57030000 	strpl	r0, [r3, -r0]
     178:	00010c01 	andeq	r0, r1, r1, lsl #24
     17c:	03500900 	cmpeq	r0, #0, 18
     180:	038e020b 	orreq	r0, lr, #-1342177280	; 0xb0000000
     184:	430a0000 	movwmi	r0, #40960	; 0xa000
     188:	03003152 	movweq	r3, #338	; 0x152
     18c:	008a020d 	addeq	r0, sl, sp, lsl #4
     190:	0b000000 	bleq	198 <_Minimum_Stack_Size+0x98>
     194:	000008ce 	andeq	r0, r0, lr, asr #17
     198:	57020e03 	strpl	r0, [r2, -r3, lsl #28]
     19c:	02000000 	andeq	r0, r0, #0
     1a0:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
     1a4:	020f0300 	andeq	r0, pc, #0, 6
     1a8:	0000008a 	andeq	r0, r0, sl, lsl #1
     1ac:	08d80b04 	ldmeq	r8, {r2, r8, r9, fp}^
     1b0:	10030000 	andne	r0, r3, r0
     1b4:	00005702 	andeq	r5, r0, r2, lsl #14
     1b8:	4a0b0600 	bmi	2c19c0 <__Stack_Size+0x2c15c0>
     1bc:	03000006 	movweq	r0, #6
     1c0:	008a0211 	addeq	r0, sl, r1, lsl r2
     1c4:	0b080000 	bleq	2001cc <__Stack_Size+0x1ffdcc>
     1c8:	000008e2 	andeq	r0, r0, r2, ror #17
     1cc:	57021203 	strpl	r1, [r2, -r3, lsl #4]
     1d0:	0a000000 	beq	1d8 <_Minimum_Stack_Size+0xd8>
     1d4:	0004e90b 	andeq	lr, r4, fp, lsl #18
     1d8:	02130300 	andseq	r0, r3, #0, 6
     1dc:	0000008a 	andeq	r0, r0, sl, lsl #1
     1e0:	08ec0b0c 	stmiaeq	ip!, {r2, r3, r8, r9, fp}^
     1e4:	14030000 	strne	r0, [r3], #-0
     1e8:	00005702 	andeq	r5, r0, r2, lsl #14
     1ec:	530a0e00 	movwpl	r0, #44544	; 0xae00
     1f0:	15030052 	strne	r0, [r3, #-82]	; 0x52
     1f4:	00008a02 	andeq	r8, r0, r2, lsl #20
     1f8:	f60b1000 			; <UNDEFINED> instruction: 0xf60b1000
     1fc:	03000008 	movweq	r0, #8
     200:	00570216 	subseq	r0, r7, r6, lsl r2
     204:	0a120000 	beq	48020c <__Stack_Size+0x47fe0c>
     208:	00524745 	subseq	r4, r2, r5, asr #14
     20c:	8a021703 	bhi	85e20 <__Stack_Size+0x85a20>
     210:	14000000 	strne	r0, [r0], #-0
     214:	0009000b 	andeq	r0, r9, fp
     218:	02180300 	andseq	r0, r8, #0, 6
     21c:	00000057 	andeq	r0, r0, r7, asr r0
     220:	03400b16 	movteq	r0, #2838	; 0xb16
     224:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     228:	00008a02 	andeq	r8, r0, r2, lsl #20
     22c:	0a0b1800 	beq	2c6234 <__Stack_Size+0x2c5e34>
     230:	03000009 	movweq	r0, #9
     234:	0057021a 	subseq	r0, r7, sl, lsl r2
     238:	0b1a0000 	bleq	680240 <__Stack_Size+0x67fe40>
     23c:	00000346 	andeq	r0, r0, r6, asr #6
     240:	8a021b03 	bhi	86e54 <__Stack_Size+0x86a54>
     244:	1c000000 	stcne	0, cr0, [r0], {-0}
     248:	000cf90b 	andeq	pc, ip, fp, lsl #18
     24c:	021c0300 	andseq	r0, ip, #0, 6
     250:	00000057 	andeq	r0, r0, r7, asr r0
     254:	057e0b1e 	ldrbeq	r0, [lr, #-2846]!	; 0xb1e
     258:	1d030000 	stcne	0, cr0, [r3, #-0]
     25c:	00008a02 	andeq	r8, r0, r2, lsl #20
     260:	1e0b2000 	cdpne	0, 0, cr2, cr11, cr0, {0}
     264:	03000009 	movweq	r0, #9
     268:	0057021e 	subseq	r0, r7, lr, lsl r2
     26c:	0a220000 	beq	880274 <__Stack_Size+0x87fe74>
     270:	00544e43 	subseq	r4, r4, r3, asr #28
     274:	8a021f03 	bhi	87e88 <__Stack_Size+0x87a88>
     278:	24000000 	strcs	r0, [r0], #-0
     27c:	0009280b 	andeq	r2, r9, fp, lsl #16
     280:	02200300 	eoreq	r0, r0, #0, 6
     284:	00000057 	andeq	r0, r0, r7, asr r0
     288:	53500a26 	cmppl	r0, #155648	; 0x26000
     28c:	21030043 	tstcs	r3, r3, asr #32
     290:	00008a02 	andeq	r8, r0, r2, lsl #20
     294:	2b0b2800 	blcs	2ca29c <__Stack_Size+0x2c9e9c>
     298:	0300000b 	movweq	r0, #11
     29c:	00570222 	subseq	r0, r7, r2, lsr #4
     2a0:	0a2a0000 	beq	a802a8 <__Stack_Size+0xa7fea8>
     2a4:	00525241 	subseq	r5, r2, r1, asr #4
     2a8:	8a022303 	bhi	88ebc <__Stack_Size+0x88abc>
     2ac:	2c000000 	stccs	0, cr0, [r0], {-0}
     2b0:	000b360b 	andeq	r3, fp, fp, lsl #12
     2b4:	02240300 	eoreq	r0, r4, #0, 6
     2b8:	00000057 	andeq	r0, r0, r7, asr r0
     2bc:	43520a2e 	cmpmi	r2, #188416	; 0x2e000
     2c0:	25030052 	strcs	r0, [r3, #-82]	; 0x52
     2c4:	00008a02 	andeq	r8, r0, r2, lsl #20
     2c8:	410b3000 	mrsmi	r3, (UNDEF: 11)
     2cc:	0300000b 	movweq	r0, #11
     2d0:	00570226 	subseq	r0, r7, r6, lsr #4
     2d4:	0b320000 	bleq	c802dc <__Stack_Size+0xc7fedc>
     2d8:	0000032c 	andeq	r0, r0, ip, lsr #6
     2dc:	8a022703 	bhi	89ef0 <__Stack_Size+0x89af0>
     2e0:	34000000 	strcc	r0, [r0], #-0
     2e4:	000b4c0b 	andeq	r4, fp, fp, lsl #24
     2e8:	02280300 	eoreq	r0, r8, #0, 6
     2ec:	00000057 	andeq	r0, r0, r7, asr r0
     2f0:	03310b36 	teqeq	r1, #55296	; 0xd800
     2f4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     2f8:	00008a02 	andeq	r8, r0, r2, lsl #20
     2fc:	570b3800 	strpl	r3, [fp, -r0, lsl #16]
     300:	0300000b 	movweq	r0, #11
     304:	0057022a 	subseq	r0, r7, sl, lsr #4
     308:	0b3a0000 	bleq	e80310 <__Stack_Size+0xe7ff10>
     30c:	00000336 	andeq	r0, r0, r6, lsr r3
     310:	8a022b03 	bhi	8af24 <__Stack_Size+0x8ab24>
     314:	3c000000 	stccc	0, cr0, [r0], {-0}
     318:	000b620b 	andeq	r6, fp, fp, lsl #4
     31c:	022c0300 	eoreq	r0, ip, #0, 6
     320:	00000057 	andeq	r0, r0, r7, asr r0
     324:	033b0b3e 	teqeq	fp, #63488	; 0xf800
     328:	2d030000 	stccs	0, cr0, [r3, #-0]
     32c:	00008a02 	andeq	r8, r0, r2, lsl #20
     330:	6d0b4000 	stcvs	0, cr4, [fp, #-0]
     334:	0300000b 	movweq	r0, #11
     338:	0057022e 	subseq	r0, r7, lr, lsr #4
     33c:	0b420000 	bleq	1080344 <__Stack_Size+0x107ff44>
     340:	000002dd 	ldrdeq	r0, [r0], -sp
     344:	8a022f03 	bhi	8bf58 <__Stack_Size+0x8bb58>
     348:	44000000 	strmi	r0, [r0], #-0
     34c:	000b780b 	andeq	r7, fp, fp, lsl #16
     350:	02300300 	eorseq	r0, r0, #0, 6
     354:	00000057 	andeq	r0, r0, r7, asr r0
     358:	43440a46 	movtmi	r0, #19014	; 0x4a46
     35c:	31030052 	qaddcc	r0, r2, r3
     360:	00008a02 	andeq	r8, r0, r2, lsl #20
     364:	830b4800 	movwhi	r4, #47104	; 0xb800
     368:	0300000b 	movweq	r0, #11
     36c:	00570232 	subseq	r0, r7, r2, lsr r2
     370:	0b4a0000 	bleq	1280378 <__Stack_Size+0x127ff78>
     374:	00000959 	andeq	r0, r0, r9, asr r9
     378:	8a023303 	bhi	8cf8c <__Stack_Size+0x8cb8c>
     37c:	4c000000 	stcmi	0, cr0, [r0], {-0}
     380:	000b8e0b 	andeq	r8, fp, fp, lsl #28
     384:	02340300 	eorseq	r0, r4, #0, 6
     388:	00000057 	andeq	r0, r0, r7, asr r0
     38c:	660c004e 	strvs	r0, [ip], -lr, asr #32
     390:	03000002 	movweq	r0, #2
     394:	017d0235 	cmneq	sp, r5, lsr r2
     398:	1c090000 	stcne	0, cr0, [r9], {-0}
     39c:	58023803 	stmdapl	r2, {r0, r1, fp, ip, sp}
     3a0:	0a000004 	beq	3b8 <_Minimum_Stack_Size+0x2b8>
     3a4:	03005253 	movweq	r5, #595	; 0x253
     3a8:	008a023a 	addeq	r0, sl, sl, lsr r2
     3ac:	0b000000 	bleq	3b4 <_Minimum_Stack_Size+0x2b4>
     3b0:	000008ce 	andeq	r0, r0, lr, asr #17
     3b4:	57023b03 	strpl	r3, [r2, -r3, lsl #22]
     3b8:	02000000 	andeq	r0, r0, #0
     3bc:	0052440a 	subseq	r4, r2, sl, lsl #8
     3c0:	8a023c03 	bhi	8f3d4 <__Stack_Size+0x8efd4>
     3c4:	04000000 	streq	r0, [r0], #-0
     3c8:	0008d80b 	andeq	sp, r8, fp, lsl #16
     3cc:	023d0300 	eorseq	r0, sp, #0, 6
     3d0:	00000057 	andeq	r0, r0, r7, asr r0
     3d4:	52420a06 	subpl	r0, r2, #24576	; 0x6000
     3d8:	3e030052 	mcrcc	0, 0, r0, cr3, cr2, {2}
     3dc:	00008a02 	andeq	r8, r0, r2, lsl #20
     3e0:	e20b0800 	and	r0, fp, #0, 16
     3e4:	03000008 	movweq	r0, #8
     3e8:	0057023f 	subseq	r0, r7, pc, lsr r2
     3ec:	0a0a0000 	beq	2803f4 <__Stack_Size+0x27fff4>
     3f0:	00315243 	eorseq	r5, r1, r3, asr #4
     3f4:	8a024003 	bhi	90408 <__Stack_Size+0x90008>
     3f8:	0c000000 	stceq	0, cr0, [r0], {-0}
     3fc:	0008ec0b 	andeq	lr, r8, fp, lsl #24
     400:	02410300 	subeq	r0, r1, #0, 6
     404:	00000057 	andeq	r0, r0, r7, asr r0
     408:	52430a0e 	subpl	r0, r3, #57344	; 0xe000
     40c:	42030032 	andmi	r0, r3, #50	; 0x32
     410:	00008a02 	andeq	r8, r0, r2, lsl #20
     414:	f60b1000 			; <UNDEFINED> instruction: 0xf60b1000
     418:	03000008 	movweq	r0, #8
     41c:	00570243 	subseq	r0, r7, r3, asr #4
     420:	0a120000 	beq	480428 <__Stack_Size+0x480028>
     424:	00335243 	eorseq	r5, r3, r3, asr #4
     428:	8a024403 	bhi	9143c <__Stack_Size+0x9103c>
     42c:	14000000 	strne	r0, [r0], #-0
     430:	0009000b 	andeq	r0, r9, fp
     434:	02450300 	subeq	r0, r5, #0, 6
     438:	00000057 	andeq	r0, r0, r7, asr r0
     43c:	02410b16 	subeq	r0, r1, #22528	; 0x5800
     440:	46030000 	strmi	r0, [r3], -r0
     444:	00008a02 	andeq	r8, r0, r2, lsl #20
     448:	0a0b1800 	beq	2c6450 <__Stack_Size+0x2c6050>
     44c:	03000009 	movweq	r0, #9
     450:	00570247 	subseq	r0, r7, r7, asr #4
     454:	001a0000 	andseq	r0, sl, r0
     458:	00050b0c 	andeq	r0, r5, ip, lsl #22
     45c:	02480300 	subeq	r0, r8, #0, 6
     460:	0000039a 	muleq	r0, sl, r3
     464:	23040106 	movwcs	r0, #16646	; 0x4106
     468:	0000047f 	andeq	r0, r0, pc, ror r4
     46c:	00034c07 	andeq	r4, r3, r7, lsl #24
     470:	24070100 	strcs	r0, [r7], #-256	; 0x100
     474:	02000002 	andeq	r0, r0, #2
     478:	000ad807 	andeq	sp, sl, r7, lsl #16
     47c:	04000300 	streq	r0, [r0], #-768	; 0x300
     480:	000008a3 	andeq	r0, r0, r3, lsr #17
     484:	04642704 	strbteq	r2, [r4], #-1796	; 0x704
     488:	01060000 	mrseq	r0, (UNDEF: 6)
     48c:	04c42e04 	strbeq	r2, [r4], #3588	; 0xe04
     490:	c0070000 	andgt	r0, r7, r0
     494:	00000008 	andeq	r0, r0, r8
     498:	000ce307 	andeq	lr, ip, r7, lsl #6
     49c:	3c070400 	cfstrscc	mvf0, [r7], {-0}
     4a0:	28000004 	stmdacs	r0, {r2}
     4a4:	00045e07 	andeq	r5, r4, r7, lsl #28
     4a8:	0700c800 	streq	ip, [r0, -r0, lsl #16]
     4ac:	00000492 	muleq	r0, r2, r4
     4b0:	00000714 	andeq	r0, r0, r4, lsl r7
     4b4:	07100000 	ldreq	r0, [r0, -r0]
     4b8:	000007a7 	andeq	r0, r0, r7, lsr #15
     4bc:	0940071c 	stmdbeq	r0, {r2, r3, r4, r8, r9, sl}^
     4c0:	00180000 	andseq	r0, r8, r0
     4c4:	000a1404 	andeq	r1, sl, r4, lsl #8
     4c8:	8a360400 	bhi	d814d0 <__Stack_Size+0xd810d0>
     4cc:	0d000004 	stceq	0, cr0, [r0, #-16]
     4d0:	fc3e0404 	ldc2	4, cr0, [lr], #-16
     4d4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     4d8:	000000cc 	andeq	r0, r0, ip, asr #1
     4dc:	00574004 	subseq	r4, r7, r4
     4e0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     4e4:	0000095e 	andeq	r0, r0, lr, asr r9
     4e8:	047f4104 	ldrbteq	r4, [pc], #-260	; 4f0 <__Stack_Size+0xf0>
     4ec:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     4f0:	000000b3 	strheq	r0, [r0], -r3
     4f4:	04c44204 	strbeq	r4, [r4], #516	; 0x204
     4f8:	00030000 	andeq	r0, r3, r0
     4fc:	000a9e04 	andeq	r9, sl, r4, lsl #28
     500:	cf430400 	svcgt	0x00430400
     504:	0d000004 	stceq	0, cr0, [r0, #-16]
     508:	401a0504 	andsmi	r0, sl, r4, lsl #10
     50c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     510:	00000755 	andeq	r0, r0, r5, asr r7
     514:	00691c05 	rsbeq	r1, r9, r5, lsl #24
     518:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     51c:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
     520:	00691d05 	rsbeq	r1, r9, r5, lsl #26
     524:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     528:	00000bd2 	ldrdeq	r0, [r0], -r2
     52c:	00691e05 	rsbeq	r1, r9, r5, lsl #28
     530:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     534:	000004d6 	ldrdeq	r0, [r0], -r6
     538:	00da1f05 	sbcseq	r1, sl, r5, lsl #30
     53c:	00030000 	andeq	r0, r3, r0
     540:	0002fb04 	andeq	pc, r2, r4, lsl #22
     544:	07200500 	streq	r0, [r0, -r0, lsl #10]!
     548:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     54c:	901b060a 	andsls	r0, fp, sl, lsl #12
     550:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     554:	00000068 	andeq	r0, r0, r8, rrx
     558:	00571d06 	subseq	r1, r7, r6, lsl #26
     55c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     560:	000005fb 	strdeq	r0, [r0], -fp
     564:	00571e06 	subseq	r1, r7, r6, lsl #28
     568:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     56c:	00000765 	andeq	r0, r0, r5, ror #14
     570:	00571f06 	subseq	r1, r7, r6, lsl #30
     574:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     578:	0000029b 	muleq	r0, fp, r2
     57c:	00572006 	subseq	r2, r7, r6
     580:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     584:	0000052d 	andeq	r0, r0, sp, lsr #10
     588:	00692106 	rsbeq	r2, r9, r6, lsl #2
     58c:	00080000 	andeq	r0, r8, r0
     590:	000c1104 	andeq	r1, ip, r4, lsl #2
     594:	4b220600 	blmi	881d9c <__Stack_Size+0x88199c>
     598:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     59c:	04250610 	strteq	r0, [r5], #-1552	; 0x610
     5a0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     5a4:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
     5a8:	00572706 	subseq	r2, r7, r6, lsl #14
     5ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     5b0:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
     5b4:	00572806 	subseq	r2, r7, r6, lsl #16
     5b8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     5bc:	00000a2a 	andeq	r0, r0, sl, lsr #20
     5c0:	00572906 	subseq	r2, r7, r6, lsl #18
     5c4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     5c8:	00000282 	andeq	r0, r0, r2, lsl #5
     5cc:	00572a06 	subseq	r2, r7, r6, lsl #20
     5d0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     5d4:	000000bd 	strheq	r0, [r0], -sp
     5d8:	00572b06 	subseq	r2, r7, r6, lsl #22
     5dc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     5e0:	0000054a 	andeq	r0, r0, sl, asr #10
     5e4:	00572c06 	subseq	r2, r7, r6, lsl #24
     5e8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     5ec:	000001cf 	andeq	r0, r0, pc, asr #3
     5f0:	00572d06 	subseq	r2, r7, r6, lsl #26
     5f4:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     5f8:	000006eb 	andeq	r0, r0, fp, ror #13
     5fc:	00572e06 	subseq	r2, r7, r6, lsl #28
     600:	000e0000 	andeq	r0, lr, r0
     604:	00008a04 	andeq	r8, r0, r4, lsl #20
     608:	9b2f0600 	blls	bc1e10 <__Stack_Size+0xbc1a10>
     60c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     610:	601a0710 	andsvs	r0, sl, r0, lsl r7
     614:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     618:	0000028c 	andeq	r0, r0, ip, lsl #5
     61c:	00451c07 	subeq	r1, r5, r7, lsl #24
     620:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     624:	00000165 	andeq	r0, r0, r5, ror #2
     628:	00571d07 	subseq	r1, r7, r7, lsl #26
     62c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     630:	000001a8 	andeq	r0, r0, r8, lsr #3
     634:	00571e07 	subseq	r1, r7, r7, lsl #28
     638:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     63c:	00000bed 	andeq	r0, r0, sp, ror #23
     640:	00571f07 	subseq	r1, r7, r7, lsl #30
     644:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     648:	0000060b 	andeq	r0, r0, fp, lsl #12
     64c:	00572007 	subseq	r2, r7, r7
     650:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     654:	0000065d 	andeq	r0, r0, sp, asr r6
     658:	00572107 	subseq	r2, r7, r7, lsl #2
     65c:	000c0000 	andeq	r0, ip, r0
     660:	000bba04 	andeq	fp, fp, r4, lsl #20
     664:	0f220700 	svceq	0x00220700
     668:	0f000006 	svceq	0x00000006
     66c:	00000a05 	andeq	r0, r0, r5, lsl #20
     670:	34013801 	strcc	r3, [r1], #-2049	; 0x801
     674:	14080031 	strne	r0, [r8], #-49	; 0x31
     678:	01000000 	mrseq	r0, (UNDEF: 0)
     67c:	0006ca9c 	muleq	r6, ip, sl
     680:	05431000 	strbeq	r1, [r3, #-0]
     684:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     688:	00007301 	andeq	r7, r0, r1, lsl #6
     68c:	00000000 	andeq	r0, r0, r0
     690:	072c1000 	streq	r1, [ip, -r0]!
     694:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     698:	0006ca01 	andeq	ip, r6, r1, lsl #20
     69c:	00002100 	andeq	r2, r0, r0, lsl #2
     6a0:	07481100 	strbeq	r1, [r8, -r0, lsl #2]
     6a4:	3a010000 	bcc	406ac <__Stack_Size+0x402ac>
     6a8:	0006d001 	andeq	sp, r6, r1
     6ac:	313e1200 	teqcc	lr, r0, lsl #4
     6b0:	201a0800 	andscs	r0, sl, r0, lsl #16
     6b4:	06c00000 	strbeq	r0, [r0], r0
     6b8:	01130000 	tsteq	r3, r0
     6bc:	004b0151 	subeq	r0, fp, r1, asr r1
     6c0:	00314814 	eorseq	r4, r1, r4, lsl r8
     6c4:	00203408 	eoreq	r3, r0, r8, lsl #8
     6c8:	04150000 	ldreq	r0, [r5], #-0
     6cc:	00000073 	andeq	r0, r0, r3, ror r0
     6d0:	69050416 	stmdbvs	r5, {r1, r2, r4, sl}
     6d4:	0f00746e 	svceq	0x0000746e
     6d8:	00000057 	andeq	r0, r0, r7, asr r0
     6dc:	48016301 	stmdami	r1, {r0, r8, r9, sp, lr}
     6e0:	14080031 	strne	r0, [r8], #-49	; 0x31
     6e4:	01000000 	mrseq	r0, (UNDEF: 0)
     6e8:	0007369c 	muleq	r7, ip, r6
     6ec:	05431000 	strbeq	r1, [r3, #-0]
     6f0:	63010000 	movwvs	r0, #4096	; 0x1000
     6f4:	00007301 	andeq	r7, r0, r1, lsl #6
     6f8:	00004d00 	andeq	r4, r0, r0, lsl #26
     6fc:	072c1000 	streq	r1, [ip, -r0]!
     700:	63010000 	movwvs	r0, #4096	; 0x1000
     704:	0006ca01 	andeq	ip, r6, r1, lsl #20
     708:	00006e00 	andeq	r6, r0, r0, lsl #28
     70c:	07481100 	strbeq	r1, [r8, -r0, lsl #2]
     710:	65010000 	strvs	r0, [r1, #-0]
     714:	0006d001 	andeq	sp, r6, r1
     718:	31521200 	cmpcc	r2, r0, lsl #4
     71c:	201a0800 	andscs	r0, sl, r0, lsl #16
     720:	072c0000 	streq	r0, [ip, -r0]!
     724:	01130000 	tsteq	r3, r0
     728:	004e0151 	subeq	r0, lr, r1, asr r1
     72c:	00315c14 	eorseq	r5, r1, r4, lsl ip
     730:	00203408 	eoreq	r3, r0, r8, lsl #8
     734:	d90f0000 	stmdble	pc, {}	; <UNPREDICTABLE>
     738:	01000006 	tsteq	r0, r6
     73c:	315c0201 	cmpcc	ip, r1, lsl #4
     740:	00840800 	addeq	r0, r4, r0, lsl #16
     744:	9c010000 	stcls	0, cr0, [r1], {-0}
     748:	0000088e 	andeq	r0, r0, lr, lsl #17
     74c:	000d2c17 	andeq	r2, sp, r7, lsl ip
     750:	02030100 	andeq	r0, r3, #0, 2
     754:	000000fa 	strdeq	r0, [r0], -sl
     758:	0000009a 	muleq	r0, sl, r0
     75c:	00316218 	eorseq	r6, r1, r8, lsl r2
     760:	00203f08 	eoreq	r3, r0, r8, lsl #30
     764:	316a1200 	cmncc	sl, r0, lsl #4
     768:	20460800 	subcs	r0, r6, r0, lsl #16
     76c:	077a0000 	ldrbeq	r0, [sl, -r0]!
     770:	01130000 	tsteq	r3, r0
     774:	3c400350 	mcrrcc	3, 5, r0, r0, cr0
     778:	6e180024 	cdpvs	0, 1, cr0, cr8, cr4, {1}
     77c:	57080031 	smladxpl	r8, r1, r0, r0
     780:	12000020 	andne	r0, r0, #32
     784:	0800317e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, ip, sp}
     788:	00002062 	andeq	r2, r0, r2, rrx
     78c:	0000079d 	muleq	r0, sp, r7
     790:	01510113 	cmpeq	r1, r3, lsl r1
     794:	50011331 	andpl	r1, r1, r1, lsr r3
     798:	40080a03 	andmi	r0, r8, r3, lsl #20
     79c:	31861200 	orrcc	r1, r6, r0, lsl #4
     7a0:	20790800 	rsbscs	r0, r9, r0, lsl #16
     7a4:	07b90000 	ldreq	r0, [r9, r0]!
     7a8:	01130000 	tsteq	r3, r0
     7ac:	13310151 	teqne	r1, #1073741844	; 0x40000014
     7b0:	0c055001 	stceq	0, cr5, [r5], {1}
     7b4:	00040001 	andeq	r0, r4, r1
     7b8:	31901900 	orrscc	r1, r0, r0, lsl #18
     7bc:	20900800 	addscs	r0, r0, r0, lsl #16
     7c0:	07cc0000 	strbeq	r0, [ip, r0]
     7c4:	01130000 	tsteq	r3, r0
     7c8:	00310150 	eorseq	r0, r1, r0, asr r1
     7cc:	00319612 	eorseq	r9, r1, r2, lsl r6
     7d0:	0020a108 	eoreq	sl, r0, r8, lsl #2
     7d4:	0007df00 	andeq	sp, r7, r0, lsl #30
     7d8:	50011300 	andpl	r1, r1, r0, lsl #6
     7dc:	12004001 	andne	r4, r0, #1
     7e0:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
     7e4:	000020b2 	strheq	r2, [r0], -r2	; <UNPREDICTABLE>
     7e8:	000007f2 	strdeq	r0, [r0], -r2
     7ec:	01500113 	cmpeq	r0, r3, lsl r1
     7f0:	a2120032 	andsge	r0, r2, #50	; 0x32
     7f4:	c3080031 	movwgt	r0, #32817	; 0x8031
     7f8:	05000020 	streq	r0, [r0, #-32]
     7fc:	13000008 	movwne	r0, #8
     800:	30015001 	andcc	r5, r1, r1
     804:	31a81200 			; <UNDEFINED> instruction: 0x31a81200
     808:	20d50800 	sbcscs	r0, r5, r0, lsl #16
     80c:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
     810:	01130000 	tsteq	r3, r0
     814:	00300150 	eorseq	r0, r0, r0, asr r1
     818:	0031b012 	eorseq	fp, r1, r2, lsl r0
     81c:	0020e708 	eoreq	lr, r0, r8, lsl #14
     820:	00082d00 	andeq	r2, r8, r0, lsl #26
     824:	50011300 	andpl	r1, r1, r0, lsl #6
     828:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
     82c:	31bc1200 			; <UNDEFINED> instruction: 0x31bc1200
     830:	20f90800 	rscscs	r0, r9, r0, lsl #16
     834:	08490000 	stmdaeq	r9, {}^	; <UNPREDICTABLE>
     838:	01130000 	tsteq	r3, r0
     83c:	404c0351 	submi	r0, ip, r1, asr r3
     840:	50011324 	andpl	r1, r1, r4, lsr #6
     844:	243c4003 	ldrtcs	r4, [ip], #-3
     848:	31c21200 	biccc	r1, r2, r0, lsl #4
     84c:	21100800 	tstcs	r0, r0, lsl #16
     850:	085d0000 	ldmdaeq	sp, {}^	; <UNPREDICTABLE>
     854:	01130000 	tsteq	r3, r0
     858:	00740250 	rsbseq	r0, r4, r0, asr r2
     85c:	31c81200 	biccc	r1, r8, r0, lsl #4
     860:	21220800 			; <UNDEFINED> instruction: 0x21220800
     864:	08710000 	ldmdaeq	r1!, {}^	; <UNPREDICTABLE>
     868:	01130000 	tsteq	r3, r0
     86c:	39080250 	stmdbcc	r8, {r4, r6, r9}
     870:	31d21200 	bicscc	r1, r2, r0, lsl #4
     874:	21380800 	teqcs	r8, r0, lsl #16
     878:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
     87c:	01130000 	tsteq	r3, r0
     880:	00320150 	eorseq	r0, r2, r0, asr r1
     884:	0031d618 	eorseq	sp, r1, r8, lsl r6
     888:	00214a08 	eoreq	r4, r1, r8, lsl #20
     88c:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
     890:	0100000b 	tsteq	r0, fp
     894:	31e00244 	mvncc	r0, r4, asr #4
     898:	004e0800 	subeq	r0, lr, r0, lsl #16
     89c:	9c010000 	stcls	0, cr0, [r1], {-0}
     8a0:	00000909 	andeq	r0, r0, r9, lsl #18
     8a4:	0005a01a 	andeq	sl, r5, sl, lsl r0
     8a8:	02460100 	subeq	r0, r6, #0, 2
     8ac:	00000540 	andeq	r0, r0, r0, asr #10
     8b0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
     8b4:	080031ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, ip, sp}
     8b8:	00002156 	andeq	r2, r0, r6, asr r1
     8bc:	000008cf 	andeq	r0, r0, pc, asr #17
     8c0:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
     8c4:	1330000a 	teqne	r0, #10
     8c8:	40035001 	andmi	r5, r3, r1
     8cc:	12002447 	andne	r2, r0, #1191182336	; 0x47000000
     8d0:	080031f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip, sp}
     8d4:	0000216d 	andeq	r2, r0, sp, ror #2
     8d8:	000008e4 	andeq	r0, r0, r4, ror #17
     8dc:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
     8e0:	0005000a 	andeq	r0, r5, sl
     8e4:	00321212 	eorseq	r1, r2, r2, lsl r2
     8e8:	00217e08 	eoreq	r7, r1, r8, lsl #28
     8ec:	0008f800 	andeq	pc, r8, r0, lsl #16
     8f0:	50011300 	andpl	r1, r1, r0, lsl #6
     8f4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     8f8:	00322a1b 	eorseq	r2, r2, fp, lsl sl
     8fc:	00217e08 	eoreq	r7, r1, r8, lsl #28
     900:	50011300 	andpl	r1, r1, r0, lsl #6
     904:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     908:	0b990f00 	bleq	fe644510 <SCS_BASE+0x1e636510>
     90c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     910:	00322e02 	eorseq	r2, r2, r2, lsl #28
     914:	00008608 	andeq	r8, r0, r8, lsl #12
     918:	029c0100 	addseq	r0, ip, #0, 2
     91c:	1a00000a 	bne	94c <__Stack_Size+0x54c>
     920:	0000070d 	andeq	r0, r0, sp, lsl #14
     924:	fc026b01 	stc2	11, cr6, [r2], {1}
     928:	02000004 	andeq	r0, r0, #4
     92c:	38126491 	ldmdacc	r2, {r0, r4, r7, sl, sp, lr}
     930:	96080032 			; <UNDEFINED> instruction: 0x96080032
     934:	42000021 	andmi	r0, r0, #33	; 0x21
     938:	13000009 	movwne	r0, #9
     93c:	91025001 	tstls	r2, r1
     940:	54120064 	ldrpl	r0, [r2], #-100	; 0x64
     944:	ad080032 	stcge	0, cr0, [r8, #-200]	; 0xffffff38
     948:	5c000021 	stcpl	0, cr0, [r0], {33}	; 0x21
     94c:	13000009 	movwne	r0, #9
     950:	91025101 	tstls	r2, r1, lsl #2
     954:	50011364 	andpl	r1, r1, r4, ror #6
     958:	00007402 	andeq	r7, r0, r2, lsl #8
     95c:	00326a12 	eorseq	r6, r2, r2, lsl sl
     960:	0021ad08 	eoreq	sl, r1, r8, lsl #26
     964:	00097c00 	andeq	r7, r9, r0, lsl #24
     968:	51011300 	mrspl	r1, SP_irq
     96c:	76009108 	strvc	r9, [r0], -r8, lsl #2
     970:	20082200 	andcs	r2, r8, r0, lsl #4
     974:	5001131c 	andpl	r1, r1, ip, lsl r3
     978:	00007402 	andeq	r7, r0, r2, lsl #8
     97c:	00328612 	eorseq	r8, r2, r2, lsl r6
     980:	0021ad08 	eoreq	sl, r1, r8, lsl #26
     984:	00099c00 	andeq	r9, r9, r0, lsl #24
     988:	51011300 	mrspl	r1, SP_irq
     98c:	76009108 	strvc	r9, [r0], -r8, lsl #2
     990:	20082200 	andcs	r2, r8, r0, lsl #4
     994:	5001131c 	andpl	r1, r1, ip, lsl r3
     998:	00007402 	andeq	r7, r0, r2, lsl #8
     99c:	00328e12 	eorseq	r8, r2, r2, lsl lr
     9a0:	0021c908 	eoreq	ip, r1, r8, lsl #18
     9a4:	0009b500 	andeq	fp, r9, r0, lsl #10
     9a8:	51011300 	mrspl	r1, SP_irq
     9ac:	01133101 	tsteq	r3, r1, lsl #2
     9b0:	00760250 	rsbseq	r0, r6, r0, asr r2
     9b4:	32961200 	addscc	r1, r6, #0, 4
     9b8:	21c90800 	biccs	r0, r9, r0, lsl #16
     9bc:	09d10000 	ldmibeq	r1, {}^	; <UNPREDICTABLE>
     9c0:	01130000 	tsteq	r3, r0
     9c4:	13310151 	teqne	r1, #1073741844	; 0x40000014
     9c8:	0c055001 	stceq	0, cr5, [r5], {1}
     9cc:	00300400 	eorseq	r0, r0, r0, lsl #8
     9d0:	329e1200 	addscc	r1, lr, #0, 4
     9d4:	21df0800 	bicscs	r0, pc, r0, lsl #16
     9d8:	09eb0000 	stmibeq	fp!, {}^	; <UNPREDICTABLE>
     9dc:	01130000 	tsteq	r3, r0
     9e0:	00750251 	rsbseq	r0, r5, r1, asr r2
     9e4:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     9e8:	1b000074 	blne	bc0 <__Stack_Size+0x7c0>
     9ec:	080032a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip, sp}
     9f0:	000021f5 	strdeq	r2, [r0], -r5
     9f4:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
     9f8:	01132008 	tsteq	r3, r8
     9fc:	00740250 	rsbseq	r0, r4, r0, asr r2
     a00:	820f0000 	andhi	r0, pc, #0
     a04:	01000009 	tsteq	r0, r9
     a08:	32b402b8 	adcscc	r0, r4, #184, 4	; 0x8000000b
     a0c:	000c0800 	andeq	r0, ip, r0, lsl #16
     a10:	9c010000 	stcls	0, cr0, [r1], {-0}
     a14:	00000a31 	andeq	r0, r0, r1, lsr sl
     a18:	0032bc1c 	eorseq	fp, r2, ip, lsl ip
     a1c:	00220b08 	eoreq	r0, r2, r8, lsl #22
     a20:	51011300 	mrspl	r1, SP_irq
     a24:	01133001 	tsteq	r3, r1
     a28:	000c0550 	andeq	r0, ip, r0, asr r5
     a2c:	00400138 	subeq	r0, r0, r8, lsr r1
     a30:	007b1d00 	rsbseq	r1, fp, r0, lsl #26
     a34:	bd010000 	stclt	0, cr0, [r1, #-0]
     a38:	0032c002 	eorseq	ip, r2, r2
     a3c:	00001008 	andeq	r1, r0, r8
     a40:	1e9c0100 	fmlnee	f0, f4, f0
     a44:	000005d2 	ldrdeq	r0, [r0], -r2
     a48:	6902c201 	stmdbvs	r2, {r0, r9, lr, pc}
     a4c:	d0000000 	andle	r0, r0, r0
     a50:	14080032 	strne	r0, [r8], #-50	; 0x32
     a54:	01000000 	mrseq	r0, (UNDEF: 0)
     a58:	04860f9c 	streq	r0, [r6], #3996	; 0xf9c
     a5c:	ca010000 	bgt	40a64 <__Stack_Size+0x40664>
     a60:	0032e402 	eorseq	lr, r2, r2, lsl #8
     a64:	00004408 	andeq	r4, r0, r8, lsl #8
     a68:	289c0100 	ldmcs	ip, {r8}
     a6c:	1000000b 	andne	r0, r0, fp
     a70:	0000014e 	andeq	r0, r0, lr, asr #2
     a74:	6902ca01 	stmdbvs	r2, {r0, r9, fp, lr, pc}
     a78:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     a7c:	12000000 	andne	r0, r0, #0
     a80:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
     a84:	000021df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
     a88:	00000a9c 	muleq	r0, ip, sl
     a8c:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
     a90:	01132008 	tsteq	r3, r8
     a94:	000c0550 	andeq	r0, ip, r0, asr r5
     a98:	0040010c 	subeq	r0, r0, ip, lsl #2
     a9c:	0032f812 	eorseq	pc, r2, r2, lsl r8	; <UNPREDICTABLE>
     aa0:	0021f508 	eoreq	pc, r1, r8, lsl #10
     aa4:	000ab800 	andeq	fp, sl, r0, lsl #16
     aa8:	51011300 	mrspl	r1, SP_irq
     aac:	01134001 	tsteq	r3, r1
     ab0:	000c0550 	andeq	r0, ip, r0, asr r5
     ab4:	0040010c 	subeq	r0, r0, ip, lsl #2
     ab8:	00330012 	eorseq	r0, r3, r2, lsl r0
     abc:	00222708 	eoreq	r2, r2, r8, lsl #14
     ac0:	000ad500 	andeq	sp, sl, r0, lsl #10
     ac4:	51011300 	mrspl	r1, SP_irq
     ac8:	13007402 	movwne	r7, #1026	; 0x402
     acc:	0c055001 	stceq	0, cr5, [r5], {1}
     ad0:	40013800 	andmi	r3, r1, r0, lsl #16
     ad4:	33081200 	movwcc	r1, #33280	; 0x8200
     ad8:	223d0800 	eorscs	r0, sp, #0, 16
     adc:	0af20000 	beq	ffc80ae4 <SCS_BASE+0x1fc72ae4>
     ae0:	01130000 	tsteq	r3, r0
     ae4:	40080251 	andmi	r0, r8, r1, asr r2
     ae8:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     aec:	0138000c 	teqeq	r8, ip
     af0:	14120040 	ldrne	r0, [r2], #-64	; 0x40
     af4:	df080033 	svcle	0x00080033
     af8:	0e000021 	cdpeq	0, 0, cr0, cr0, cr1, {1}
     afc:	1300000b 	movwne	r0, #11
     b00:	40015101 	andmi	r5, r1, r1, lsl #2
     b04:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     b08:	010c000c 	tsteq	ip, ip
     b0c:	201c0040 	andscs	r0, ip, r0, asr #32
     b10:	f5080033 			; <UNDEFINED> instruction: 0xf5080033
     b14:	13000021 	movwne	r0, #33	; 0x21
     b18:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     b1c:	50011320 	andpl	r1, r1, r0, lsr #6
     b20:	0c000c05 	stceq	12, cr0, [r0], {5}
     b24:	00004001 	andeq	r4, r0, r1
     b28:	0009761f 	andeq	r7, r9, pc, lsl r6
     b2c:	02d60100 	sbcseq	r0, r6, #0, 2
     b30:	00000069 	andeq	r0, r0, r9, rrx
     b34:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
     b38:	00000020 	andeq	r0, r0, r0, lsr #32
     b3c:	0b519c01 	bleq	1467b48 <__Stack_Size+0x1467748>
     b40:	4f1a0000 	svcmi	0x001a0000
     b44:	01000007 	tsteq	r0, r7
     b48:	006902d8 	ldrdeq	r0, [r9], #-40	; 0xffffffd8	; <UNPREDICTABLE>
     b4c:	50010000 	andpl	r0, r1, r0
     b50:	035d0f00 	cmpeq	sp, #0, 30
     b54:	3c010000 	stccc	0, cr0, [r1], {-0}
     b58:	00334803 	eorseq	r4, r3, r3, lsl #16
     b5c:	00001c08 	andeq	r1, r0, r8, lsl #24
     b60:	a89c0100 	ldmge	ip, {r8}
     b64:	1000000b 	andne	r0, r0, fp
     b68:	0000014e 	andeq	r0, r0, lr, asr #2
     b6c:	69033c01 	stmdbvs	r3, {r0, sl, fp, ip, sp}
     b70:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
     b74:	12000000 	andne	r0, r0, #0
     b78:	08003352 	stmdaeq	r0, {r1, r4, r6, r8, r9, ip, sp}
     b7c:	00002227 	andeq	r2, r0, r7, lsr #4
     b80:	00000b8e 	andeq	r0, r0, lr, lsl #23
     b84:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     b88:	0048000c 	subeq	r0, r8, ip
     b8c:	5a1b0040 	bpl	6c0c94 <__Stack_Size+0x6c0894>
     b90:	3d080033 	stccc	0, cr0, [r8, #-204]	; 0xffffff34
     b94:	13000022 	movwne	r0, #34	; 0x22
     b98:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     b9c:	50011340 	andpl	r1, r1, r0, asr #6
     ba0:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
     ba4:	00004000 	andeq	r4, r0, r0
     ba8:	0002460f 	andeq	r4, r2, pc, lsl #12
     bac:	03220100 			; <UNDEFINED> instruction: 0x03220100
     bb0:	08003364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp}
     bb4:	00000012 	andeq	r0, r0, r2, lsl r0
     bb8:	0bd89c01 	bleq	ff627bc4 <SCS_BASE+0x1f619bc4>
     bbc:	e2100000 	ands	r0, r0, #0
     bc0:	01000002 	tsteq	r0, r2
     bc4:	0bd80322 	bleq	ff601854 <SCS_BASE+0x1f5f3854>
     bc8:	00fa0000 	rscseq	r0, sl, r0
     bcc:	72180000 	andsvc	r0, r8, #0
     bd0:	51080033 	tstpl	r8, r3, lsr r0
     bd4:	0000000b 	andeq	r0, r0, fp
     bd8:	00690415 	rsbeq	r0, r9, r5, lsl r4
     bdc:	ad200000 	stcge	0, cr0, [r0, #-0]
     be0:	01000003 	tsteq	r0, r3
     be4:	0033768a 	eorseq	r7, r3, sl, lsl #13
     be8:	00002e08 	andeq	r2, r0, r8, lsl #28
     bec:	6e9c0100 	fmlvse	f0, f4, f0
     bf0:	2100000c 	tstcs	r0, ip
     bf4:	01006469 	tsteq	r0, r9, ror #8
     bf8:	0000738a 	andeq	r7, r0, sl, lsl #7
     bfc:	00013d00 	andeq	r3, r1, r0, lsl #26
     c00:	07482200 	strbeq	r2, [r8, -r0, lsl #4]
     c04:	8c010000 	stchi	0, cr0, [r1], {-0}
     c08:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c0c:	00338212 	eorseq	r8, r3, r2, lsl r2
     c10:	00225708 	eoreq	r5, r2, r8, lsl #14
     c14:	000c2a00 	andeq	r2, ip, r0, lsl #20
     c18:	52011300 	andpl	r1, r1, #0, 6
     c1c:	01133001 	tsteq	r3, r1
     c20:	13360151 	teqne	r6, #1073741844	; 0x40000014
     c24:	74025001 	strvc	r5, [r2], #-1
     c28:	86180000 	ldrhi	r0, [r8], -r0
     c2c:	34080033 	strcc	r0, [r8], #-51	; 0x33
     c30:	12000020 	andne	r0, r0, #32
     c34:	08003390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp}
     c38:	00002257 	andeq	r2, r0, r7, asr r2
     c3c:	00000c51 	andeq	r0, r0, r1, asr ip
     c40:	01520113 	cmpeq	r2, r3, lsl r1
     c44:	51011330 	tstpl	r1, r0, lsr r3
     c48:	01133801 	tsteq	r3, r1, lsl #16
     c4c:	00740250 	rsbseq	r0, r4, r0, asr r2
     c50:	33941800 	orrscc	r1, r4, #0, 16
     c54:	20340800 	eorscs	r0, r4, r0, lsl #16
     c58:	9e1c0000 	cdpls	0, 1, cr0, cr12, cr0, {0}
     c5c:	a8080033 	stmdage	r8, {r0, r1, r4, r5}
     c60:	1300000b 	movwne	r0, #11
     c64:	03055001 	movweq	r5, #20481	; 0x5001
     c68:	08005c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, lr}
     c6c:	cd200000 	stcgt	0, cr0, [r0, #-0]
     c70:	0100000a 	tsteq	r0, sl
     c74:	0033a495 	mlaseq	r3, r5, r4, sl
     c78:	00003008 	andeq	r3, r0, r8
     c7c:	009c0100 	addseq	r0, ip, r0, lsl #2
     c80:	2100000d 	tstcs	r0, sp
     c84:	01006469 	tsteq	r0, r9, ror #8
     c88:	00007395 	muleq	r0, r5, r3
     c8c:	00015e00 	andeq	r5, r1, r0, lsl #28
     c90:	07482200 	strbeq	r2, [r8, -r0, lsl #4]
     c94:	97010000 	strls	r0, [r1, -r0]
     c98:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c9c:	0033b012 	eorseq	fp, r3, r2, lsl r0
     ca0:	00225708 	eoreq	r5, r2, r8, lsl #14
     ca4:	000cba00 	andeq	fp, ip, r0, lsl #20
     ca8:	52011300 	andpl	r1, r1, #0, 6
     cac:	01133001 	tsteq	r3, r1
     cb0:	13360151 	teqne	r6, #1073741844	; 0x40000014
     cb4:	74025001 	strvc	r5, [r2], #-1
     cb8:	b4180000 	ldrlt	r0, [r8], #-0
     cbc:	34080033 	strcc	r0, [r8], #-51	; 0x33
     cc0:	12000020 	andne	r0, r0, #32
     cc4:	080033c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, sp}
     cc8:	00002257 	andeq	r2, r0, r7, asr r2
     ccc:	00000ce3 	andeq	r0, r0, r3, ror #25
     cd0:	03520113 	cmpeq	r2, #-1073741820	; 0xc0000004
     cd4:	1303ff0a 	movwne	pc, #16138	; 0x3f0a	; <UNPREDICTABLE>
     cd8:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
     cdc:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     ce0:	18000074 	stmdane	r0, {r2, r4, r5, r6}
     ce4:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
     ce8:	00002034 	andeq	r2, r0, r4, lsr r0
     cec:	0033ce1c 	eorseq	ip, r3, ip, lsl lr
     cf0:	000ba808 	andeq	sl, fp, r8, lsl #16
     cf4:	50011300 	andpl	r1, r1, r0, lsl #6
     cf8:	5c650305 	stclpl	3, cr0, [r5], #-20	; 0xffffffec
     cfc:	00000800 	andeq	r0, r0, r0, lsl #16
     d00:	00042c0f 	andeq	r2, r4, pc, lsl #24
     d04:	02e70100 	rsceq	r0, r7, #0, 2
     d08:	080033d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, ip, sp}
     d0c:	0000004c 	andeq	r0, r0, ip, asr #32
     d10:	0d309c01 	ldceq	12, cr9, [r0, #-4]!
     d14:	90100000 	andsls	r0, r0, r0
     d18:	01000013 	tsteq	r0, r3, lsl r0
     d1c:	06d002e7 	ldrbeq	r0, [r0], r7, ror #5
     d20:	017f0000 	cmneq	pc, r0
     d24:	02140000 	andseq	r0, r4, #0
     d28:	a8080034 	stmdage	r8, {r2, r4, r5}
     d2c:	0000000b 	andeq	r0, r0, fp
     d30:	000d1d0f 	andeq	r1, sp, pc, lsl #26
     d34:	030a0100 	movweq	r0, #41216	; 0xa100
     d38:	08003420 	stmdaeq	r0, {r5, sl, ip, sp}
     d3c:	00000094 	muleq	r0, r4, r0
     d40:	0e6b9c01 	cdpeq	12, 6, cr9, cr11, cr1, {0}
     d44:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
     d48:	72080034 	andvc	r0, r8, #52	; 0x34
     d4c:	59000022 	stmdbpl	r0, {r1, r5}
     d50:	1300000d 	movwne	r0, #13
     d54:	31015001 	tstcc	r1, r1
     d58:	34321200 	ldrtcc	r1, [r2], #-512	; 0x200
     d5c:	0ba80800 	bleq	fea02d64 <SCS_BASE+0x1e9f4d64>
     d60:	0d700000 	ldcleq	0, cr0, [r0, #-0]
     d64:	01130000 	tsteq	r3, r0
     d68:	b8030550 	stmdalt	r3, {r4, r6, r8, sl}
     d6c:	0008005d 	andeq	r0, r8, sp, asr r0
     d70:	00343812 	eorseq	r3, r4, r2, lsl r8
     d74:	00227208 	eoreq	r7, r2, r8, lsl #4
     d78:	000d8300 	andeq	r8, sp, r0, lsl #6
     d7c:	50011300 	andpl	r1, r1, r0, lsl #6
     d80:	12003201 	andne	r3, r0, #268435456	; 0x10000000
     d84:	08003442 	stmdaeq	r0, {r1, r6, sl, ip, sp}
     d88:	00000ba8 	andeq	r0, r0, r8, lsr #23
     d8c:	00000d9a 	muleq	r0, sl, sp
     d90:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     d94:	005dce03 	subseq	ip, sp, r3, lsl #28
     d98:	48120008 	ldmdami	r2, {r3}
     d9c:	72080034 	andvc	r0, r8, #52	; 0x34
     da0:	ad000022 	stcge	0, cr0, [r0, #-136]	; 0xffffff78
     da4:	1300000d 	movwne	r0, #13
     da8:	34015001 	strcc	r5, [r1], #-1
     dac:	34521200 	ldrbcc	r1, [r2], #-512	; 0x200
     db0:	0ba80800 	bleq	fea02db8 <SCS_BASE+0x1e9f4db8>
     db4:	0dc40000 	stcleq	0, cr0, [r4]
     db8:	01130000 	tsteq	r3, r0
     dbc:	e2030550 	and	r0, r3, #80, 10	; 0x14000000
     dc0:	0008005d 	andeq	r0, r8, sp, asr r0
     dc4:	00345812 	eorseq	r5, r4, r2, lsl r8
     dc8:	00227208 	eoreq	r7, r2, r8, lsl #4
     dcc:	000dd700 	andeq	sp, sp, r0, lsl #14
     dd0:	50011300 	andpl	r1, r1, r0, lsl #6
     dd4:	12003801 	andne	r3, r0, #65536	; 0x10000
     dd8:	08003462 	stmdaeq	r0, {r1, r5, r6, sl, ip, sp}
     ddc:	00000ba8 	andeq	r0, r0, r8, lsr #23
     de0:	00000dee 	andeq	r0, r0, lr, ror #27
     de4:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     de8:	005df303 	subseq	pc, sp, r3, lsl #6
     dec:	68120008 	ldmdavs	r2, {r3}
     df0:	72080034 	andvc	r0, r8, #52	; 0x34
     df4:	01000022 	tsteq	r0, r2, lsr #32
     df8:	1300000e 	movwne	r0, #14
     dfc:	40015001 	andmi	r5, r1, r1
     e00:	34721200 	ldrbtcc	r1, [r2], #-512	; 0x200
     e04:	0ba80800 	bleq	fea02e0c <SCS_BASE+0x1e9f4e0c>
     e08:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     e0c:	01130000 	tsteq	r3, r0
     e10:	08030550 	stmdaeq	r3, {r4, r6, r8, sl}
     e14:	0008005e 	andeq	r0, r8, lr, asr r0
     e18:	00347812 	eorseq	r7, r4, r2, lsl r8
     e1c:	00227208 	eoreq	r7, r2, r8, lsl #4
     e20:	000e2c00 	andeq	r2, lr, r0, lsl #24
     e24:	50011300 	andpl	r1, r1, r0, lsl #6
     e28:	00200802 	eoreq	r0, r0, r2, lsl #16
     e2c:	00348212 	eorseq	r8, r4, r2, lsl r2
     e30:	000ba808 	andeq	sl, fp, r8, lsl #16
     e34:	000e4300 	andeq	r4, lr, r0, lsl #6
     e38:	50011300 	andpl	r1, r1, r0, lsl #6
     e3c:	5e190305 	cdppl	3, 1, cr0, cr9, cr5, {0}
     e40:	12000800 	andne	r0, r0, #0, 16
     e44:	08003488 	stmdaeq	r0, {r3, r7, sl, ip, sp}
     e48:	00002272 	andeq	r2, r0, r2, ror r2
     e4c:	00000e57 	andeq	r0, r0, r7, asr lr
     e50:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     e54:	1c004008 	stcne	0, cr4, [r0], {8}
     e58:	08003496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip, sp}
     e5c:	00000ba8 	andeq	r0, r0, r8, lsr #23
     e60:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     e64:	005e2a03 	subseq	r2, lr, r3, lsl #20
     e68:	0f000008 	svceq	0x00000008
     e6c:	000007eb 	andeq	r0, r0, fp, ror #15
     e70:	b4032e01 	strlt	r2, [r3], #-3585	; 0xe01
     e74:	2e080034 	mcrcs	0, 0, r0, cr8, cr4, {1}
     e78:	01000000 	mrseq	r0, (UNDEF: 0)
     e7c:	000eb49c 	muleq	lr, ip, r4
     e80:	030c1000 	movweq	r1, #49152	; 0xc000
     e84:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     e88:	00006903 	andeq	r6, r0, r3, lsl #18
     e8c:	0001ad00 	andeq	sl, r1, r0, lsl #26
     e90:	0abd1700 	beq	fef46a98 <SCS_BASE+0x1ef38a98>
     e94:	30010000 	andcc	r0, r1, r0
     e98:	00006903 	andeq	r6, r0, r3, lsl #18
     e9c:	0001ce00 	andeq	ip, r1, r0, lsl #28
     ea0:	34ce1800 	strbcc	r1, [lr], #2048	; 0x800
     ea4:	0b510800 	bleq	1442eac <__Stack_Size+0x1442aac>
     ea8:	e2140000 	ands	r0, r4, #0
     eac:	51080034 	tstpl	r8, r4, lsr r0
     eb0:	0000000b 	andeq	r0, r0, fp
     eb4:	0004a30f 	andeq	sl, r4, pc, lsl #6
     eb8:	03280100 			; <UNDEFINED> instruction: 0x03280100
     ebc:	080034e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip, sp}
     ec0:	00000014 	andeq	r0, r0, r4, lsl r0
     ec4:	0efa9c01 	cdpeq	12, 15, cr9, cr10, cr1, {0}
     ec8:	7f100000 	svcvc	0x00100000
     ecc:	01000003 	tsteq	r0, r3
     ed0:	00570328 	subseq	r0, r7, r8, lsr #6
     ed4:	01ec0000 	mvneq	r0, r0
     ed8:	ec120000 	ldc	0, cr0, [r2], {-0}
     edc:	6b080034 	blvs	200fb4 <__Stack_Size+0x200bb4>
     ee0:	f000000e 			; <UNDEFINED> instruction: 0xf000000e
     ee4:	1300000e 	movwne	r0, #14
     ee8:	74045001 	strvc	r5, [r4], #-1
     eec:	00253800 	eoreq	r3, r5, r0, lsl #16
     ef0:	0034f614 	eorseq	pc, r4, r4, lsl r6	; <UNPREDICTABLE>
     ef4:	000e6b08 	andeq	r6, lr, r8, lsl #22
     ef8:	7a200000 	bvc	800f00 <__Stack_Size+0x800b00>
     efc:	01000008 	tsteq	r0, r8
     f00:	0034f6a3 	eorseq	pc, r4, r3, lsr #13
     f04:	00003a08 	andeq	r3, r0, r8, lsl #20
     f08:	be9c0100 	fmllte	f0, f4, f0
     f0c:	2100000f 	tstcs	r0, pc
     f10:	01006469 	tsteq	r0, r9, ror #8
     f14:	000073a3 	andeq	r7, r0, r3, lsr #7
     f18:	00020d00 	andeq	r0, r2, r0, lsl #26
     f1c:	02142300 	andseq	r2, r4, #0, 6
     f20:	a3010000 	movwge	r0, #4096	; 0x1000
     f24:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f28:	0000022e 	andeq	r0, r0, lr, lsr #4
     f2c:	0005e124 	andeq	lr, r5, r4, lsr #2
     f30:	d0a40100 	adcle	r0, r4, r0, lsl #2
     f34:	4f000006 	svcmi	0x00000006
     f38:	24000002 	strcs	r0, [r0], #-2
     f3c:	00000748 	andeq	r0, r0, r8, asr #14
     f40:	06d0aa01 	ldrbeq	sl, [r0], r1, lsl #20
     f44:	02810000 	addeq	r0, r1, #0
     f48:	06120000 	ldreq	r0, [r2], -r0
     f4c:	57080035 	smladxpl	r8, r5, r0, r0
     f50:	76000022 	strvc	r0, [r0], -r2, lsr #32
     f54:	1300000f 	movwne	r0, #15
     f58:	0a145201 	beq	515764 <__Stack_Size+0x515364>
     f5c:	01f30400 	mvnseq	r0, r0, lsl #8
     f60:	01f31c51 	mvnseq	r1, r1, asr ip
     f64:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
     f68:	01282d30 			; <UNDEFINED> instruction: 0x01282d30
     f6c:	13131600 	tstne	r3, #0, 12
     f70:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     f74:	0a180020 	beq	600ffc <__Stack_Size+0x600bfc>
     f78:	34080035 	strcc	r0, [r8], #-53	; 0x35
     f7c:	12000020 	andne	r0, r0, #32
     f80:	08003516 	stmdaeq	r0, {r1, r2, r4, r8, sl, ip, sp}
     f84:	00000ba8 	andeq	r0, r0, r8, lsr #23
     f88:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
     f8c:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     f90:	005e5a03 	subseq	r5, lr, r3, lsl #20
     f94:	1c120008 	ldcne	0, cr0, [r2], {8}
     f98:	b4080035 	strlt	r0, [r8], #-53	; 0x35
     f9c:	aa00000e 	bge	fdc <__Stack_Size+0xbdc>
     fa0:	1300000f 	movwne	r0, #15
     fa4:	74025001 	strvc	r5, [r2], #-1
     fa8:	261c0000 	ldrcs	r0, [ip], -r0
     fac:	a8080035 	stmdage	r8, {r0, r2, r4, r5}
     fb0:	1300000b 	movwne	r0, #11
     fb4:	03055001 	movweq	r5, #20481	; 0x5001
     fb8:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}
     fbc:	94200000 	strtls	r0, [r0], #-0
     fc0:	01000007 	tsteq	r0, r7
     fc4:	003530b7 	ldrhteq	r3, [r5], -r7
     fc8:	00004808 	andeq	r4, r0, r8, lsl #16
     fcc:	9f9c0100 	svcls	0x009c0100
     fd0:	21000010 	tstcs	r0, r0, lsl r0
     fd4:	01006469 	tsteq	r0, r9, ror #8
     fd8:	000073b7 			; <UNDEFINED> instruction: 0x000073b7
     fdc:	0002aa00 	andeq	sl, r2, r0, lsl #20
     fe0:	088b2300 	stmeq	fp, {r8, r9, sp}
     fe4:	b7010000 	strlt	r0, [r1, -r0]
     fe8:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fec:	000002cb 	andeq	r0, r0, fp, asr #5
     ff0:	00021423 	andeq	r1, r2, r3, lsr #8
     ff4:	d0b70100 	adcsle	r0, r7, r0, lsl #2
     ff8:	f7000006 			; <UNDEFINED> instruction: 0xf7000006
     ffc:	24000002 	strcs	r0, [r0], #-2
    1000:	00000677 	andeq	r0, r0, r7, ror r6
    1004:	06d0b901 	ldrbeq	fp, [r0], r1, lsl #18
    1008:	03180000 	tsteq	r8, #0
    100c:	48240000 	stmdami	r4!, {}	; <UNPREDICTABLE>
    1010:	01000007 	tsteq	r0, r7
    1014:	0006d0c2 	andeq	sp, r6, r2, asr #1
    1018:	00034900 	andeq	r4, r3, r0, lsl #18
    101c:	353c1200 	ldrcc	r1, [ip, #-512]!	; 0x200
    1020:	0efa0800 	cdpeq	8, 15, cr0, cr10, cr0, {0}
    1024:	10380000 	eorsne	r0, r8, r0
    1028:	01130000 	tsteq	r3, r0
    102c:	01f30351 	mvnseq	r0, r1, asr r3
    1030:	50011352 	andpl	r1, r1, r2, asr r3
    1034:	00007502 	andeq	r7, r0, r2, lsl #10
    1038:	00354e12 	eorseq	r4, r5, r2, lsl lr
    103c:	00225708 	eoreq	r5, r2, r8, lsl #14
    1040:	00105700 	andseq	r5, r0, r0, lsl #14
    1044:	52011300 	andpl	r1, r1, #0, 6
    1048:	13007402 	movwne	r7, #1026	; 0x402
    104c:	4e015101 	adfmis	f5, f1, f1
    1050:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1054:	18000075 	stmdane	r0, {r0, r2, r4, r5, r6}
    1058:	08003552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip, sp}
    105c:	00002034 	andeq	r2, r0, r4, lsr r0
    1060:	00355e12 	eorseq	r5, r5, r2, lsl lr
    1064:	000ba808 	andeq	sl, fp, r8, lsl #16
    1068:	00107700 	andseq	r7, r0, r0, lsl #14
    106c:	50011300 	andpl	r1, r1, r0, lsl #6
    1070:	5e480305 	cdppl	3, 4, cr0, cr8, cr5, {0}
    1074:	12000800 	andne	r0, r0, #0, 16
    1078:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
    107c:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    1080:	0000108b 	andeq	r1, r0, fp, lsl #1
    1084:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1088:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    108c:	0800356e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip, sp}
    1090:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1094:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1098:	005e4303 	subseq	r4, lr, r3, lsl #6
    109c:	20000008 	andcs	r0, r0, r8
    10a0:	00000883 	andeq	r0, r0, r3, lsl #17
    10a4:	3578ce01 	ldrbcc	ip, [r8, #-3585]!	; 0xe01
    10a8:	00340800 	eorseq	r0, r4, r0, lsl #16
    10ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    10b0:	00001131 	andeq	r1, r0, r1, lsr r1
    10b4:	00646921 	rsbeq	r6, r4, r1, lsr #18
    10b8:	0073ce01 	rsbseq	ip, r3, r1, lsl #28
    10bc:	03720000 	cmneq	r2, #0
    10c0:	48240000 	stmdami	r4!, {}	; <UNPREDICTABLE>
    10c4:	01000007 	tsteq	r0, r7
    10c8:	0006d0d0 	ldrdeq	sp, [r6], -r0
    10cc:	00039300 	andeq	r9, r3, r0, lsl #6
    10d0:	35821200 	strcc	r1, [r2, #512]	; 0x200
    10d4:	22870800 	addcs	r0, r7, #0, 16
    10d8:	10e90000 	rscne	r0, r9, r0
    10dc:	01130000 	tsteq	r3, r0
    10e0:	13310152 	teqne	r1, #-2147483628	; 0x80000014
    10e4:	49015101 	stmdbmi	r1, {r0, r8, ip, lr}
    10e8:	35861800 	strcc	r1, [r6, #2048]	; 0x800
    10ec:	20340800 	eorscs	r0, r4, r0, lsl #16
    10f0:	92120000 	andsls	r0, r2, #0
    10f4:	a8080035 	stmdage	r8, {r0, r2, r4, r5}
    10f8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    10fc:	13000011 	movwne	r0, #17
    1100:	03055001 	movweq	r5, #20481	; 0x5001
    1104:	08005e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, lr}
    1108:	35981200 	ldrcc	r1, [r8, #512]	; 0x200
    110c:	0eb40800 	cdpeq	8, 11, cr0, cr4, cr0, {0}
    1110:	111d0000 	tstne	sp, r0
    1114:	01130000 	tsteq	r3, r0
    1118:	00740250 	rsbseq	r0, r4, r0, asr r2
    111c:	35a21c00 	strcc	r1, [r2, #3072]!	; 0xc00
    1120:	0ba80800 	bleq	fea03128 <SCS_BASE+0x1e9f5128>
    1124:	01130000 	tsteq	r3, r0
    1128:	43030550 	movwmi	r0, #13648	; 0x3550
    112c:	0008005e 	andeq	r0, r8, lr, asr r0
    1130:	05752000 	ldrbeq	r2, [r5, #-0]!
    1134:	db010000 	blle	4113c <__Stack_Size+0x40d3c>
    1138:	080035ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, sp}
    113c:	00000034 	andeq	r0, r0, r4, lsr r0
    1140:	11c39c01 	bicne	r9, r3, r1, lsl #24
    1144:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
    1148:	db010064 	blle	412e0 <__Stack_Size+0x40ee0>
    114c:	00000073 	andeq	r0, r0, r3, ror r0
    1150:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1154:	00074824 	andeq	r4, r7, r4, lsr #16
    1158:	d0dd0100 	sbcsle	r0, sp, r0, lsl #2
    115c:	dd000006 	stcle	0, cr0, [r0, #-24]	; 0xffffffe8
    1160:	12000003 	andne	r0, r0, #3
    1164:	080035b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, ip, sp}
    1168:	00002287 	andeq	r2, r0, r7, lsl #5
    116c:	0000117b 	andeq	r1, r0, fp, ror r1
    1170:	01520113 	cmpeq	r2, r3, lsl r1
    1174:	51011330 	tstpl	r1, r0, lsr r3
    1178:	18004901 	stmdane	r0, {r0, r8, fp, lr}
    117c:	080035ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip, sp}
    1180:	00002034 	andeq	r2, r0, r4, lsr r0
    1184:	0035c612 	eorseq	ip, r5, r2, lsl r6
    1188:	000ba808 	andeq	sl, fp, r8, lsl #16
    118c:	00119b00 	andseq	r9, r1, r0, lsl #22
    1190:	50011300 	andpl	r1, r1, r0, lsl #6
    1194:	5e480305 	cdppl	3, 4, cr0, cr8, cr5, {0}
    1198:	12000800 	andne	r0, r0, #0, 16
    119c:	080035cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip, sp}
    11a0:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    11a4:	000011af 	andeq	r1, r0, pc, lsr #3
    11a8:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    11ac:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    11b0:	080035d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, sp}
    11b4:	00000ba8 	andeq	r0, r0, r8, lsr #23
    11b8:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    11bc:	005e4303 	subseq	r4, lr, r3, lsl #6
    11c0:	20000008 	andcs	r0, r0, r8
    11c4:	00000ca9 	andeq	r0, r0, r9, lsr #25
    11c8:	35e0ea01 	strbcc	lr, [r0, #2561]!	; 0xa01
    11cc:	00380800 	eorseq	r0, r8, r0, lsl #16
    11d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    11d4:	00001260 	andeq	r1, r0, r0, ror #4
    11d8:	00646921 	rsbeq	r6, r4, r1, lsr #18
    11dc:	0073ea01 	rsbseq	lr, r3, r1, lsl #20
    11e0:	04060000 	streq	r0, [r6], #-0
    11e4:	ef230000 	svc	0x00230000
    11e8:	01000009 	tsteq	r0, r9
    11ec:	001260ea 	andseq	r6, r2, sl, ror #1
    11f0:	00042700 	andeq	r2, r4, r0, lsl #14
    11f4:	07482400 	strbeq	r2, [r8, -r0, lsl #8]
    11f8:	ec010000 	stc	0, cr0, [r1], {-0}
    11fc:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1200:	00000453 	andeq	r0, r0, r3, asr r4
    1204:	0035ea12 	eorseq	lr, r5, r2, lsl sl
    1208:	0022a208 	eoreq	sl, r2, r8, lsl #4
    120c:	00121800 	andseq	r1, r2, r0, lsl #16
    1210:	51011300 	mrspl	r1, SP_irq
    1214:	00200802 	eoreq	r0, r0, r2, lsl #16
    1218:	0035f018 	eorseq	pc, r5, r8, lsl r0	; <UNPREDICTABLE>
    121c:	00203408 	eoreq	r3, r0, r8, lsl #8
    1220:	35fc1200 	ldrbcc	r1, [ip, #512]!	; 0x200
    1224:	0ba80800 	bleq	fea0322c <SCS_BASE+0x1e9f522c>
    1228:	12380000 	eorsne	r0, r8, #0
    122c:	01130000 	tsteq	r3, r0
    1230:	59030550 	stmdbpl	r3, {r4, r6, r8, sl}
    1234:	0008005e 	andeq	r0, r8, lr, asr r0
    1238:	00360212 	eorseq	r0, r6, r2, lsl r2
    123c:	000eb408 	andeq	fp, lr, r8, lsl #8
    1240:	00124c00 	andseq	r4, r2, r0, lsl #24
    1244:	50011300 	andpl	r1, r1, r0, lsl #6
    1248:	00007402 	andeq	r7, r0, r2, lsl #8
    124c:	00360c1c 	eorseq	r0, r6, ip, lsl ip
    1250:	000ba808 	andeq	sl, fp, r8, lsl #16
    1254:	50011300 	andpl	r1, r1, r0, lsl #6
    1258:	5e430305 	cdppl	3, 4, cr0, cr3, cr5, {0}
    125c:	00000800 	andeq	r0, r0, r0, lsl #16
    1260:	12660415 	rsbne	r0, r6, #352321536	; 0x15000000
    1264:	04030000 	streq	r0, [r3], #-0
    1268:	000a7b07 	andeq	r7, sl, r7, lsl #22
    126c:	047d2000 	ldrbteq	r2, [sp], #-0
    1270:	fa010000 	blx	41278 <__Stack_Size+0x40e78>
    1274:	08003618 	stmdaeq	r0, {r3, r4, r9, sl, ip, sp}
    1278:	00000038 	andeq	r0, r0, r8, lsr r0
    127c:	130a9c01 	movwne	r9, #44033	; 0xac01
    1280:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
    1284:	fa010064 	blx	4141c <__Stack_Size+0x4101c>
    1288:	00000073 	andeq	r0, r0, r3, ror r0
    128c:	0000047c 	andeq	r0, r0, ip, ror r4
    1290:	00017623 	andeq	r7, r1, r3, lsr #12
    1294:	60fa0100 	rscsvs	r0, sl, r0, lsl #2
    1298:	9d000012 	stcls	0, cr0, [r0, #-72]	; 0xffffffb8
    129c:	24000004 	strcs	r0, [r0], #-4
    12a0:	00000748 	andeq	r0, r0, r8, asr #14
    12a4:	06d0fc01 	ldrbeq	pc, [r0], r1, lsl #24	; <UNPREDICTABLE>
    12a8:	04c90000 	strbeq	r0, [r9], #0
    12ac:	22120000 	andscs	r0, r2, #0
    12b0:	a2080036 	andge	r0, r8, #54	; 0x36
    12b4:	c2000022 	andgt	r0, r0, #34	; 0x22
    12b8:	13000012 	movwne	r0, #18
    12bc:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    12c0:	28180024 	ldmdacs	r8, {r2, r5}
    12c4:	34080036 	strcc	r0, [r8], #-54	; 0x36
    12c8:	12000020 	andne	r0, r0, #32
    12cc:	08003634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip, sp}
    12d0:	00000ba8 	andeq	r0, r0, r8, lsr #23
    12d4:	000012e2 	andeq	r1, r0, r2, ror #5
    12d8:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    12dc:	005e5903 	subseq	r5, lr, r3, lsl #18
    12e0:	3a120008 	bcc	481308 <__Stack_Size+0x480f08>
    12e4:	b4080036 	strlt	r0, [r8], #-54	; 0x36
    12e8:	f600000e 			; <UNDEFINED> instruction: 0xf600000e
    12ec:	13000012 	movwne	r0, #18
    12f0:	74025001 	strvc	r5, [r2], #-1
    12f4:	441c0000 	ldrmi	r0, [ip], #-0
    12f8:	a8080036 	stmdage	r8, {r1, r2, r4, r5}
    12fc:	1300000b 	movwne	r0, #11
    1300:	03055001 	movweq	r5, #20481	; 0x5001
    1304:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}
    1308:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    130c:	01000006 	tsteq	r0, r6
    1310:	3650010c 	ldrbcc	r0, [r0], -ip, lsl #2
    1314:	00380800 	eorseq	r0, r8, r0, lsl #16
    1318:	9c010000 	stcls	0, cr0, [r1], {-0}
    131c:	000013ac 	andeq	r1, r0, ip, lsr #7
    1320:	00054310 	andeq	r4, r5, r0, lsl r3
    1324:	010c0100 	mrseq	r0, (UNDEF: 28)
    1328:	00000073 	andeq	r0, r0, r3, ror r0
    132c:	000004f2 	strdeq	r0, [r0], -r2
    1330:	0000f010 	andeq	pc, r0, r0, lsl r0	; <UNPREDICTABLE>
    1334:	010c0100 	mrseq	r0, (UNDEF: 28)
    1338:	000006ca 	andeq	r0, r0, sl, asr #13
    133c:	00000513 	andeq	r0, r0, r3, lsl r5
    1340:	00074817 	andeq	r4, r7, r7, lsl r8
    1344:	010e0100 	mrseq	r0, (UNDEF: 30)
    1348:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    134c:	0000053f 	andeq	r0, r0, pc, lsr r5
    1350:	00365a12 	eorseq	r5, r6, r2, lsl sl
    1354:	00201a08 	eoreq	r1, r0, r8, lsl #20
    1358:	00136400 	andseq	r6, r3, r0, lsl #8
    135c:	51011300 	mrspl	r1, SP_irq
    1360:	00200802 	eoreq	r0, r0, r2, lsl #16
    1364:	00366018 	eorseq	r6, r6, r8, lsl r0
    1368:	00203408 	eoreq	r3, r0, r8, lsl #8
    136c:	366c1200 	strbtcc	r1, [ip], -r0, lsl #4
    1370:	0ba80800 	bleq	fea03378 <SCS_BASE+0x1e9f5378>
    1374:	13840000 	orrne	r0, r4, #0
    1378:	01130000 	tsteq	r3, r0
    137c:	59030550 	stmdbpl	r3, {r4, r6, r8, sl}
    1380:	0008005e 	andeq	r0, r8, lr, asr r0
    1384:	00367212 	eorseq	r7, r6, r2, lsl r2
    1388:	000eb408 	andeq	fp, lr, r8, lsl #8
    138c:	00139800 	andseq	r9, r3, r0, lsl #16
    1390:	50011300 	andpl	r1, r1, r0, lsl #6
    1394:	00007402 	andeq	r7, r0, r2, lsl #8
    1398:	00367c1c 	eorseq	r7, r6, ip, lsl ip
    139c:	000ba808 	andeq	sl, fp, r8, lsl #16
    13a0:	50011300 	andpl	r1, r1, r0, lsl #6
    13a4:	5e430305 	cdppl	3, 4, cr0, cr3, cr5, {0}
    13a8:	00000800 	andeq	r0, r0, r0, lsl #16
    13ac:	0009b10f 	andeq	fp, r9, pc, lsl #2
    13b0:	011c0100 	tsteq	ip, r0, lsl #2
    13b4:	08003688 	stmdaeq	r0, {r3, r7, r9, sl, ip, sp}
    13b8:	00000038 	andeq	r0, r0, r8, lsr r0
    13bc:	144e9c01 	strbne	r9, [lr], #-3073	; 0xc01
    13c0:	43100000 	tstmi	r0, #0
    13c4:	01000005 	tsteq	r0, r5
    13c8:	0073011c 	rsbseq	r0, r3, ip, lsl r1
    13cc:	05680000 	strbeq	r0, [r8, #-0]!
    13d0:	2c100000 	ldccs	0, cr0, [r0], {-0}
    13d4:	01000007 	tsteq	r0, r7
    13d8:	06ca011c 			; <UNDEFINED> instruction: 0x06ca011c
    13dc:	05890000 	streq	r0, [r9]
    13e0:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
    13e4:	01000007 	tsteq	r0, r7
    13e8:	06d0011e 			; <UNDEFINED> instruction: 0x06d0011e
    13ec:	05b50000 	ldreq	r0, [r5, #0]!
    13f0:	92120000 	andsls	r0, r2, #0
    13f4:	1a080036 	bne	2014d4 <__Stack_Size+0x2010d4>
    13f8:	06000020 	streq	r0, [r0], -r0, lsr #32
    13fc:	13000014 	movwne	r0, #20
    1400:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    1404:	98180021 	ldmdals	r8, {r0, r5}
    1408:	34080036 	strcc	r0, [r8], #-54	; 0x36
    140c:	12000020 	andne	r0, r0, #32
    1410:	080036a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip, sp}
    1414:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1418:	00001426 	andeq	r1, r0, r6, lsr #8
    141c:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1420:	005e5903 	subseq	r5, lr, r3, lsl #18
    1424:	aa120008 	bge	48144c <__Stack_Size+0x48104c>
    1428:	b4080036 	strlt	r0, [r8], #-54	; 0x36
    142c:	3a00000e 	bcc	146c <__Stack_Size+0x106c>
    1430:	13000014 	movwne	r0, #20
    1434:	74025001 	strvc	r5, [r2], #-1
    1438:	b41c0000 	ldrlt	r0, [ip], #-0
    143c:	a8080036 	stmdage	r8, {r1, r2, r4, r5}
    1440:	1300000b 	movwne	r0, #11
    1444:	03055001 	movweq	r5, #20481	; 0x5001
    1448:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}
    144c:	340f0000 	strcc	r0, [pc], #-0	; 1454 <__Stack_Size+0x1054>
    1450:	01000002 	tsteq	r0, r2
    1454:	36c0012a 	strbcc	r0, [r0], sl, lsr #2
    1458:	00380800 	eorseq	r0, r8, r0, lsl #16
    145c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1460:	000014ef 	andeq	r1, r0, pc, ror #9
    1464:	00054310 	andeq	r4, r5, r0, lsl r3
    1468:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
    146c:	00000073 	andeq	r0, r0, r3, ror r0
    1470:	000005de 	ldrdeq	r0, [r0], -lr
    1474:	00072c10 	andeq	r2, r7, r0, lsl ip
    1478:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
    147c:	000006ca 	andeq	r0, r0, sl, asr #13
    1480:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1484:	00074817 	andeq	r4, r7, r7, lsl r8
    1488:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    148c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1490:	0000062b 	andeq	r0, r0, fp, lsr #12
    1494:	0036ca12 	eorseq	ip, r6, r2, lsl sl
    1498:	00201a08 	eoreq	r1, r0, r8, lsl #20
    149c:	0014a700 	andseq	sl, r4, r0, lsl #14
    14a0:	51011300 	mrspl	r1, SP_irq
    14a4:	18004a01 	stmdane	r0, {r0, r9, fp, lr}
    14a8:	080036d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, sp}
    14ac:	00002034 	andeq	r2, r0, r4, lsr r0
    14b0:	0036dc12 	eorseq	sp, r6, r2, lsl ip
    14b4:	000ba808 	andeq	sl, fp, r8, lsl #16
    14b8:	0014c700 	andseq	ip, r4, r0, lsl #14
    14bc:	50011300 	andpl	r1, r1, r0, lsl #6
    14c0:	5e590305 	cdppl	3, 5, cr0, cr9, cr5, {0}
    14c4:	12000800 	andne	r0, r0, #0, 16
    14c8:	080036e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip, sp}
    14cc:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    14d0:	000014db 	ldrdeq	r1, [r0], -fp
    14d4:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    14d8:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    14dc:	080036ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
    14e0:	00000ba8 	andeq	r0, r0, r8, lsr #23
    14e4:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    14e8:	005e4303 	subseq	r4, lr, r3, lsl #6
    14ec:	0f000008 	svceq	0x00000008
    14f0:	00000932 	andeq	r0, r0, r2, lsr r9
    14f4:	f8014601 			; <UNDEFINED> instruction: 0xf8014601
    14f8:	38080036 	stmdacc	r8, {r1, r2, r4, r5}
    14fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1500:	0015909c 	mulseq	r5, ip, r0
    1504:	05431000 	strbeq	r1, [r3, #-0]
    1508:	46010000 	strmi	r0, [r1], -r0
    150c:	00007301 	andeq	r7, r0, r1, lsl #6
    1510:	00065400 	andeq	r5, r6, r0, lsl #8
    1514:	072c1000 	streq	r1, [ip, -r0]!
    1518:	46010000 	strmi	r0, [r1], -r0
    151c:	0006ca01 	andeq	ip, r6, r1, lsl #20
    1520:	00067500 	andeq	r7, r6, r0, lsl #10
    1524:	07481700 	strbeq	r1, [r8, -r0, lsl #14]
    1528:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    152c:	0006d001 	andeq	sp, r6, r1
    1530:	0006a100 	andeq	sl, r6, r0, lsl #2
    1534:	37021200 	strcc	r1, [r2, -r0, lsl #4]
    1538:	201a0800 	andscs	r0, sl, r0, lsl #16
    153c:	15480000 	strbne	r0, [r8, #-0]
    1540:	01130000 	tsteq	r3, r0
    1544:	004c0151 	subeq	r0, ip, r1, asr r1
    1548:	00370818 	eorseq	r0, r7, r8, lsl r8
    154c:	00203408 	eoreq	r3, r0, r8, lsl #8
    1550:	37141200 	ldrcc	r1, [r4, -r0, lsl #4]
    1554:	0ba80800 	bleq	fea0355c <SCS_BASE+0x1e9f555c>
    1558:	15680000 	strbne	r0, [r8, #-0]!
    155c:	01130000 	tsteq	r3, r0
    1560:	59030550 	stmdbpl	r3, {r4, r6, r8, sl}
    1564:	0008005e 	andeq	r0, r8, lr, asr r0
    1568:	00371a12 	eorseq	r1, r7, r2, lsl sl
    156c:	000eb408 	andeq	fp, lr, r8, lsl #8
    1570:	00157c00 	andseq	r7, r5, r0, lsl #24
    1574:	50011300 	andpl	r1, r1, r0, lsl #6
    1578:	00007402 	andeq	r7, r0, r2, lsl #8
    157c:	0037241c 	eorseq	r2, r7, ip, lsl r4
    1580:	000ba808 	andeq	sl, fp, r8, lsl #16
    1584:	50011300 	andpl	r1, r1, r0, lsl #6
    1588:	5e430305 	cdppl	3, 4, cr0, cr3, cr5, {0}
    158c:	00000800 	andeq	r0, r0, r0, lsl #16
    1590:	0004ee0f 	andeq	lr, r4, pc, lsl #28
    1594:	01550100 	cmpeq	r5, r0, lsl #2
    1598:	08003730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, sp}
    159c:	00000038 	andeq	r0, r0, r8, lsr r0
    15a0:	16319c01 	ldrtne	r9, [r1], -r1, lsl #24
    15a4:	43100000 	tstmi	r0, #0
    15a8:	01000005 	tsteq	r0, r5
    15ac:	00730155 	rsbseq	r0, r3, r5, asr r1
    15b0:	06ca0000 	strbeq	r0, [sl], r0
    15b4:	2c100000 	ldccs	0, cr0, [r0], {-0}
    15b8:	01000007 	tsteq	r0, r7
    15bc:	06ca0155 			; <UNDEFINED> instruction: 0x06ca0155
    15c0:	06eb0000 	strbteq	r0, [fp], r0
    15c4:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
    15c8:	01000007 	tsteq	r0, r7
    15cc:	06d00157 			; <UNDEFINED> instruction: 0x06d00157
    15d0:	07170000 	ldreq	r0, [r7, -r0]
    15d4:	3a120000 	bcc	4815dc <__Stack_Size+0x4811dc>
    15d8:	1a080037 	bne	2016bc <__Stack_Size+0x2012bc>
    15dc:	e9000020 	stmdb	r0, {r5}
    15e0:	13000015 	movwne	r0, #21
    15e4:	4d015101 	stfmis	f5, [r1, #-4]
    15e8:	37401800 	strbcc	r1, [r0, -r0, lsl #16]
    15ec:	20340800 	eorscs	r0, r4, r0, lsl #16
    15f0:	4c120000 	ldcmi	0, cr0, [r2], {-0}
    15f4:	a8080037 	stmdage	r8, {r0, r1, r2, r4, r5}
    15f8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    15fc:	13000016 	movwne	r0, #22
    1600:	03055001 	movweq	r5, #20481	; 0x5001
    1604:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
    1608:	37521200 	ldrbcc	r1, [r2, -r0, lsl #4]
    160c:	0eb40800 	cdpeq	8, 11, cr0, cr4, cr0, {0}
    1610:	161d0000 	ldrne	r0, [sp], -r0
    1614:	01130000 	tsteq	r3, r0
    1618:	00740250 	rsbseq	r0, r4, r0, asr r2
    161c:	375c1c00 	ldrbcc	r1, [ip, -r0, lsl #24]
    1620:	0ba80800 	bleq	fea03628 <SCS_BASE+0x1e9f5628>
    1624:	01130000 	tsteq	r3, r0
    1628:	43030550 	movwmi	r0, #13648	; 0x3550
    162c:	0008005e 	andeq	r0, r8, lr, asr r0
    1630:	01160f00 	tsteq	r6, r0, lsl #30
    1634:	71010000 	mrsvc	r0, (UNDEF: 1)
    1638:	00376801 	eorseq	r6, r7, r1, lsl #16
    163c:	00003808 	andeq	r3, r0, r8, lsl #16
    1640:	d29c0100 	addsle	r0, ip, #0, 2
    1644:	10000016 	andne	r0, r0, r6, lsl r0
    1648:	00000543 	andeq	r0, r0, r3, asr #10
    164c:	73017101 	movwvc	r7, #4353	; 0x1101
    1650:	40000000 	andmi	r0, r0, r0
    1654:	10000007 	andne	r0, r0, r7
    1658:	0000072c 	andeq	r0, r0, ip, lsr #14
    165c:	ca017101 	bgt	5da68 <__Stack_Size+0x5d668>
    1660:	61000006 	tstvs	r0, r6
    1664:	17000007 	strne	r0, [r0, -r7]
    1668:	00000748 	andeq	r0, r0, r8, asr #14
    166c:	d0017301 	andle	r7, r1, r1, lsl #6
    1670:	8d000006 	stchi	0, cr0, [r0, #-24]	; 0xffffffe8
    1674:	12000007 	andne	r0, r0, #7
    1678:	08003772 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, ip, sp}
    167c:	0000201a 	andeq	r2, r0, sl, lsl r0
    1680:	0000168a 	andeq	r1, r0, sl, lsl #13
    1684:	01510113 	cmpeq	r1, r3, lsl r1
    1688:	7818004f 	ldmdavc	r8, {r0, r1, r2, r3, r6}
    168c:	34080037 	strcc	r0, [r8], #-55	; 0x37
    1690:	12000020 	andne	r0, r0, #32
    1694:	08003784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, sp}
    1698:	00000ba8 	andeq	r0, r0, r8, lsr #23
    169c:	000016aa 	andeq	r1, r0, sl, lsr #13
    16a0:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    16a4:	005e5903 	subseq	r5, lr, r3, lsl #18
    16a8:	8a120008 	bhi	4816d0 <__Stack_Size+0x4812d0>
    16ac:	b4080037 	strlt	r0, [r8], #-55	; 0x37
    16b0:	be00000e 	cdplt	0, 0, cr0, cr0, cr14, {0}
    16b4:	13000016 	movwne	r0, #22
    16b8:	74025001 	strvc	r5, [r2], #-1
    16bc:	941c0000 	ldrls	r0, [ip], #-0
    16c0:	a8080037 	stmdage	r8, {r0, r1, r2, r4, r5}
    16c4:	1300000b 	movwne	r0, #11
    16c8:	03055001 	movweq	r5, #20481	; 0x5001
    16cc:	08005e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, lr}
    16d0:	1a0f0000 	bne	3c16d8 <__Stack_Size+0x3c12d8>
    16d4:	01000002 	tsteq	r0, r2
    16d8:	37a0017f 			; <UNDEFINED> instruction: 0x37a0017f
    16dc:	00380800 	eorseq	r0, r8, r0, lsl #16
    16e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16e4:	00001774 	andeq	r1, r0, r4, ror r7
    16e8:	00054310 	andeq	r4, r5, r0, lsl r3
    16ec:	017f0100 	cmneq	pc, r0, lsl #2
    16f0:	00000073 	andeq	r0, r0, r3, ror r0
    16f4:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    16f8:	00072c10 	andeq	r2, r7, r0, lsl ip
    16fc:	017f0100 	cmneq	pc, r0, lsl #2
    1700:	00001260 	andeq	r1, r0, r0, ror #4
    1704:	000007d7 	ldrdeq	r0, [r0], -r7
    1708:	00074817 	andeq	r4, r7, r7, lsl r8
    170c:	01810100 	orreq	r0, r1, r0, lsl #2
    1710:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1714:	00000803 	andeq	r0, r0, r3, lsl #16
    1718:	0037aa12 	eorseq	sl, r7, r2, lsl sl
    171c:	0022a208 	eoreq	sl, r2, r8, lsl #4
    1720:	00172c00 	andseq	r2, r7, r0, lsl #24
    1724:	51011300 	mrspl	r1, SP_irq
    1728:	00230802 	eoreq	r0, r3, r2, lsl #16
    172c:	0037b018 	eorseq	fp, r7, r8, lsl r0
    1730:	00203408 	eoreq	r3, r0, r8, lsl #8
    1734:	37bc1200 	ldrcc	r1, [ip, r0, lsl #4]!
    1738:	0ba80800 	bleq	fea03740 <SCS_BASE+0x1e9f5740>
    173c:	174c0000 	strbne	r0, [ip, -r0]
    1740:	01130000 	tsteq	r3, r0
    1744:	59030550 	stmdbpl	r3, {r4, r6, r8, sl}
    1748:	0008005e 	andeq	r0, r8, lr, asr r0
    174c:	0037c212 	eorseq	ip, r7, r2, lsl r2
    1750:	000eb408 	andeq	fp, lr, r8, lsl #8
    1754:	00176000 	andseq	r6, r7, r0
    1758:	50011300 	andpl	r1, r1, r0, lsl #6
    175c:	00007402 	andeq	r7, r0, r2, lsl #8
    1760:	0037cc1c 	eorseq	ip, r7, ip, lsl ip
    1764:	000ba808 	andeq	sl, fp, r8, lsl #16
    1768:	50011300 	andpl	r1, r1, r0, lsl #6
    176c:	5e430305 	cdppl	3, 4, cr0, cr3, cr5, {0}
    1770:	00000800 	andeq	r0, r0, r0, lsl #16
    1774:	000c7b0f 	andeq	r7, ip, pc, lsl #22
    1778:	018c0100 	orreq	r0, ip, r0, lsl #2
    177c:	080037d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, sp}
    1780:	00000034 	andeq	r0, r0, r4, lsr r0
    1784:	181d9c01 	ldmdane	sp, {r0, sl, fp, ip, pc}
    1788:	43100000 	tstmi	r0, #0
    178c:	01000005 	tsteq	r0, r5
    1790:	0073018c 	rsbseq	r0, r3, ip, lsl #3
    1794:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    1798:	25100000 	ldrcs	r0, [r0, #-0]
    179c:	0100000a 	tsteq	r0, sl
    17a0:	06d0018c 	ldrbeq	r0, [r0], ip, lsl #3
    17a4:	084d0000 	stmdaeq	sp, {}^	; <UNPREDICTABLE>
    17a8:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
    17ac:	01000007 	tsteq	r0, r7
    17b0:	06d0018e 	ldrbeq	r0, [r0], lr, lsl #3
    17b4:	08790000 	ldmdaeq	r9!, {}^	; <UNPREDICTABLE>
    17b8:	e2120000 	ands	r0, r2, #0
    17bc:	87080037 	smladxhi	r8, r7, r0, r0
    17c0:	d5000022 	strle	r0, [r0, #-34]	; 0x22
    17c4:	13000017 	movwne	r0, #23
    17c8:	f3035201 	vhsub.u8	d5, d3, d1
    17cc:	01135101 	tsteq	r3, r1, lsl #2
    17d0:	28080251 	stmdacs	r8, {r0, r4, r6, r9}
    17d4:	37e61800 	strbcc	r1, [r6, r0, lsl #16]!
    17d8:	20340800 	eorscs	r0, r4, r0, lsl #16
    17dc:	f2120000 	vhadd.s16	d0, d2, d0
    17e0:	a8080037 	stmdage	r8, {r0, r1, r2, r4, r5}
    17e4:	f500000b 			; <UNDEFINED> instruction: 0xf500000b
    17e8:	13000017 	movwne	r0, #23
    17ec:	03055001 	movweq	r5, #20481	; 0x5001
    17f0:	08005e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
    17f4:	37f81200 	ldrbcc	r1, [r8, r0, lsl #4]!
    17f8:	0eb40800 	cdpeq	8, 11, cr0, cr4, cr0, {0}
    17fc:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    1800:	01130000 	tsteq	r3, r0
    1804:	00740250 	rsbseq	r0, r4, r0, asr r2
    1808:	38021c00 	stmdacc	r2, {sl, fp, ip}
    180c:	0ba80800 	bleq	fea03814 <SCS_BASE+0x1e9f5814>
    1810:	01130000 	tsteq	r3, r0
    1814:	43030550 	movwmi	r0, #13648	; 0x3550
    1818:	0008005e 	andeq	r0, r8, lr, asr r0
    181c:	06bb0f00 	ldrteq	r0, [fp], r0, lsl #30
    1820:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    1824:	00380c01 	eorseq	r0, r8, r1, lsl #24
    1828:	00001a08 	andeq	r1, r0, r8, lsl #20
    182c:	8d9c0100 	ldfhis	f0, [ip]
    1830:	10000018 	andne	r0, r0, r8, lsl r0
    1834:	00000543 	andeq	r0, r0, r3, asr #10
    1838:	73019801 	movwvc	r9, #6145	; 0x1801
    183c:	a2000000 	andge	r0, r0, #0
    1840:	10000008 	andne	r0, r0, r8
    1844:	0000044a 	andeq	r0, r0, sl, asr #8
    1848:	d0019801 	andle	r9, r1, r1, lsl #16
    184c:	c3000006 	movwgt	r0, #6
    1850:	17000008 	strne	r0, [r0, -r8]
    1854:	00000748 	andeq	r0, r0, r8, asr #14
    1858:	d0019901 	andle	r9, r1, r1, lsl #18
    185c:	e1000006 	tst	r0, r6
    1860:	12000008 	andne	r0, r0, #8
    1864:	0800381c 	stmdaeq	r0, {r2, r3, r4, fp, ip, sp}
    1868:	00002287 	andeq	r2, r0, r7, lsl #5
    186c:	00001883 	andeq	r1, r0, r3, lsl #17
    1870:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    1874:	01130074 	tsteq	r3, r4, ror r0
    1878:	29080251 	stmdbcs	r8, {r0, r4, r6, r9}
    187c:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1880:	18000075 	stmdane	r0, {r0, r2, r4, r5, r6}
    1884:	08003820 	stmdaeq	r0, {r5, fp, ip, sp}
    1888:	00002034 	andeq	r2, r0, r4, lsr r0
    188c:	07b70f00 	ldreq	r0, [r7, r0, lsl #30]!
    1890:	42010000 	andmi	r0, r1, #0
    1894:	00382603 	eorseq	r2, r8, r3, lsl #12
    1898:	00008e08 	andeq	r8, r0, r8, lsl #28
    189c:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    18a0:	1a000019 	bne	190c <__Stack_Size+0x150c>
    18a4:	00000a88 	andeq	r0, r0, r8, lsl #21
    18a8:	90034401 	andls	r4, r3, r1, lsl #8
    18ac:	02000005 	andeq	r0, r0, #5
    18b0:	191a5c91 	ldmdbne	sl, {r0, r4, r7, sl, fp, ip, lr}
    18b4:	01000005 	tsteq	r0, r5
    18b8:	06040345 	streq	r0, [r4], -r5, asr #6
    18bc:	91020000 	mrsls	r0, (UNDEF: 2)
    18c0:	38301268 	ldmdacc	r0!, {r3, r5, r6, r9, ip}
    18c4:	22bc0800 	adcscs	r0, ip, #0, 16
    18c8:	18d50000 	ldmne	r5, {}^	; <UNPREDICTABLE>
    18cc:	01130000 	tsteq	r3, r0
    18d0:	5c910250 	lfmpl	f0, 4, [r1], {80}	; 0x50
    18d4:	38361200 	ldmdacc	r6!, {r9, ip}
    18d8:	22d40800 	sbcscs	r0, r4, #0, 16
    18dc:	18e90000 	stmiane	r9!, {}^	; <UNPREDICTABLE>
    18e0:	01130000 	tsteq	r3, r0
    18e4:	68910250 	ldmvs	r1, {r4, r6, r9}
    18e8:	383e1200 	ldmdacc	lr!, {r9, ip}
    18ec:	22ec0800 	rsccs	r0, ip, #0, 16
    18f0:	18fe0000 	ldmne	lr!, {}^	; <UNPREDICTABLE>
    18f4:	01130000 	tsteq	r3, r0
    18f8:	4a400350 	bmi	1002640 <__Stack_Size+0x1002240>
    18fc:	5e120024 	cdppl	0, 1, cr0, cr2, cr4, {1}
    1900:	04080038 	streq	r0, [r8], #-56	; 0x38
    1904:	19000023 	stmdbne	r0, {r0, r1, r5}
    1908:	13000019 	movwne	r0, #25
    190c:	91025101 	tstls	r2, r1, lsl #2
    1910:	5001135c 	andpl	r1, r1, ip, asr r3
    1914:	244a4003 	strbcs	r4, [sl], #-3
    1918:	386c1200 	stmdacc	ip!, {r9, ip}^
    191c:	231b0800 	tstcs	fp, #0, 16
    1920:	193a0000 	ldmdbne	sl!, {}	; <UNPREDICTABLE>
    1924:	01130000 	tsteq	r3, r0
    1928:	13310152 	teqne	r1, #-2147483628	; 0x80000014
    192c:	0a035101 	beq	d5d38 <__Stack_Size+0xd5938>
    1930:	011302d2 			; <UNDEFINED> instruction: 0x011302d2
    1934:	4a400350 	bmi	100267c <__Stack_Size+0x100227c>
    1938:	8a120024 	bhi	4819d0 <__Stack_Size+0x4815d0>
    193c:	37080038 	smladxcc	r8, r8, r0, r0
    1940:	55000023 	strpl	r0, [r0, #-35]	; 0x23
    1944:	13000019 	movwne	r0, #25
    1948:	91025101 	tstls	r2, r1, lsl #2
    194c:	50011368 	andpl	r1, r1, r8, ror #6
    1950:	244a4003 	strbcs	r4, [sl], #-3
    1954:	38941200 	ldmcc	r4, {r9, ip}
    1958:	234e0800 	movtcs	r0, #59392	; 0xe800
    195c:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
    1960:	01130000 	tsteq	r3, r0
    1964:	00740251 	rsbseq	r0, r4, r1, asr r2
    1968:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    196c:	00244a40 	eoreq	r4, r4, r0, asr #20
    1970:	0038a012 	eorseq	sl, r8, r2, lsl r0
    1974:	00236508 	eoreq	r6, r3, r8, lsl #10
    1978:	00198f00 	andseq	r8, r9, r0, lsl #30
    197c:	52011300 	andpl	r1, r1, #0, 6
    1980:	01133101 	tsteq	r3, r1, lsl #2
    1984:	13320151 	teqne	r2, #1073741844	; 0x40000014
    1988:	40035001 	andmi	r5, r3, r1
    198c:	1b00244a 	blne	aabc <__Stack_Size+0xa6bc>
    1990:	080038aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, ip, sp}
    1994:	00002381 	andeq	r2, r0, r1, lsl #7
    1998:	01510113 	cmpeq	r1, r3, lsl r1
    199c:	50011331 	andpl	r1, r1, r1, lsr r3
    19a0:	244a4003 	strbcs	r4, [sl], #-3
    19a4:	820f0000 	andhi	r0, pc, #0
    19a8:	01000006 	tsteq	r0, r6
    19ac:	38b40367 	ldmcc	r4!, {r0, r1, r2, r5, r6, r8, r9}
    19b0:	00540800 	subseq	r0, r4, r0, lsl #16
    19b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19b8:	00001a17 	andeq	r1, r0, r7, lsl sl
    19bc:	0038c012 	eorseq	ip, r8, r2, lsl r0
    19c0:	00239808 	eoreq	r9, r3, r8, lsl #16
    19c4:	0019d600 	andseq	sp, r9, r0, lsl #12
    19c8:	51011300 	mrspl	r1, SP_irq
    19cc:	01133201 	tsteq	r3, r1, lsl #4
    19d0:	4a400350 	bmi	1002718 <__Stack_Size+0x1002318>
    19d4:	cc120024 	ldcgt	0, cr0, [r2], {36}	; 0x24
    19d8:	b3080038 	movwlt	r0, #32824	; 0x8038
    19dc:	f0000023 			; <UNDEFINED> instruction: 0xf0000023
    19e0:	13000019 	movwne	r0, #25
    19e4:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    19e8:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    19ec:	00244a40 	eoreq	r4, r4, r0, asr #20
    19f0:	0038d412 	eorseq	sp, r8, r2, lsl r4
    19f4:	0023ca08 	eoreq	ip, r3, r8, lsl #20
    19f8:	001a0500 	andseq	r0, sl, r0, lsl #10
    19fc:	50011300 	andpl	r1, r1, r0, lsl #6
    1a00:	244a4003 	strbcs	r4, [sl], #-3
    1a04:	38ee1b00 	stmiacc	lr!, {r8, r9, fp, ip}^
    1a08:	23e00800 	mvncs	r0, #0, 16
    1a0c:	01130000 	tsteq	r3, r0
    1a10:	4a400350 	bmi	1002758 <__Stack_Size+0x1002358>
    1a14:	0f000024 	svceq	0x00000024
    1a18:	000002ad 	andeq	r0, r0, sp, lsr #5
    1a1c:	08037601 	stmdaeq	r3, {r0, r9, sl, ip, sp, lr}
    1a20:	30080039 	andcc	r0, r8, r9, lsr r0
    1a24:	01000000 	mrseq	r0, (UNDEF: 0)
    1a28:	001a5f9c 	mulseq	sl, ip, pc	; <UNPREDICTABLE>
    1a2c:	39141200 	ldmdbcc	r4, {r9, ip}
    1a30:	23f70800 	mvnscs	r0, #0, 16
    1a34:	1a4b0000 	bne	12c1a3c <__Stack_Size+0x12c163c>
    1a38:	01130000 	tsteq	r3, r0
    1a3c:	250a0351 	strcs	r0, [sl, #-849]	; 0x351
    1a40:	50011305 	andpl	r1, r1, r5, lsl #6
    1a44:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    1a48:	1b004001 	blne	11a54 <__Stack_Size+0x11654>
    1a4c:	08003928 	stmdaeq	r0, {r3, r5, r8, fp, ip, sp}
    1a50:	00002411 	andeq	r2, r0, r1, lsl r4
    1a54:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1a58:	0138000c 	teqeq	r8, ip
    1a5c:	0f000040 	svceq	0x00000040
    1a60:	000006a0 	andeq	r0, r0, r0, lsr #13
    1a64:	38037c01 	stmdacc	r3, {r0, sl, fp, ip, sp, lr}
    1a68:	14080039 	strne	r0, [r8], #-57	; 0x39
    1a6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a70:	001a9a9c 	mulseq	sl, ip, sl
    1a74:	39421200 	stmdbcc	r2, {r9, ip}^
    1a78:	24260800 	strtcs	r0, [r6], #-2048	; 0x800
    1a7c:	1a8a0000 	bne	fe281a84 <SCS_BASE+0x1e273a84>
    1a80:	01130000 	tsteq	r3, r0
    1a84:	280a0350 	stmdacs	sl, {r4, r6, r8, r9}
    1a88:	4c1c0023 	ldcmi	0, cr0, [ip], {35}	; 0x23
    1a8c:	37080039 	smladxcc	r8, r9, r0, r0
    1a90:	13000024 	movwne	r0, #36	; 0x24
    1a94:	31015001 	tstcc	r1, r1
    1a98:	fa1d0000 	blx	741aa0 <__Stack_Size+0x7416a0>
    1a9c:	0100000b 	tsteq	r0, fp
    1aa0:	394c0385 	stmdbcc	ip, {r0, r2, r7, r8, r9}^
    1aa4:	00180800 	andseq	r0, r8, r0, lsl #16
    1aa8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aac:	00055a0f 	andeq	r5, r5, pc, lsl #20
    1ab0:	038b0100 	orreq	r0, fp, #0, 2
    1ab4:	08003964 	stmdaeq	r0, {r2, r5, r6, r8, fp, ip, sp}
    1ab8:	00000030 	andeq	r0, r0, r0, lsr r0
    1abc:	1b039c01 	blne	e8ac8 <__Stack_Size+0xe86c8>
    1ac0:	17100000 	ldrne	r0, [r0, -r0]
    1ac4:	0100000d 	tsteq	r0, sp
    1ac8:	0045038b 	subeq	r0, r5, fp, lsl #7
    1acc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1ad0:	6e120000 	cdpvs	0, 1, cr0, cr2, cr0, {0}
    1ad4:	48080039 	stmdami	r8, {r0, r3, r4, r5}
    1ad8:	e5000024 	str	r0, [r0, #-36]	; 0x24
    1adc:	1300001a 	movwne	r0, #26
    1ae0:	31015001 	tstcc	r1, r1
    1ae4:	39841200 	stmibcc	r4, {r9, ip}
    1ae8:	24480800 	strbcs	r0, [r8], #-2048	; 0x800
    1aec:	1af90000 	bne	ffe41af4 <SCS_BASE+0x1fe33af4>
    1af0:	01130000 	tsteq	r3, r0
    1af4:	fe090250 	mcr2	2, 0, r0, cr9, cr0, {2}
    1af8:	398e1400 	stmibcc	lr, {sl, ip}
    1afc:	24480800 	strbcs	r0, [r8], #-2048	; 0x800
    1b00:	0f000000 	svceq	0x00000000
    1b04:	000002ed 	andeq	r0, r0, sp, ror #5
    1b08:	9401a901 	strls	sl, [r1], #-2305	; 0x901
    1b0c:	32080039 	andcc	r0, r8, #57	; 0x39
    1b10:	01000000 	mrseq	r0, (UNDEF: 0)
    1b14:	001bae9c 	mulseq	fp, ip, lr
    1b18:	05431000 	strbeq	r1, [r3, #-0]
    1b1c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1b20:	00007301 	andeq	r7, r0, r1, lsl #6
    1b24:	00093c00 	andeq	r3, r9, r0, lsl #24
    1b28:	0a251000 	beq	945b30 <__Stack_Size+0x945730>
    1b2c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1b30:	0006d001 	andeq	sp, r6, r1
    1b34:	00095d00 	andeq	r5, r9, r0, lsl #26
    1b38:	044a1000 	strbeq	r1, [sl], #-0
    1b3c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1b40:	0006d001 	andeq	sp, r6, r1
    1b44:	00098900 	andeq	r8, r9, r0, lsl #18
    1b48:	006b2500 	rsbeq	r2, fp, r0, lsl #10
    1b4c:	d001aa01 	andle	sl, r1, r1, lsl #20
    1b50:	b5000006 	strlt	r0, [r0, #-6]
    1b54:	12000009 	andne	r0, r0, #9
    1b58:	080039a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, ip, sp}
    1b5c:	0000181d 	andeq	r1, r0, sp, lsl r8
    1b60:	00001b71 	andeq	r1, r0, r1, ror fp
    1b64:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    1b68:	0113fe08 	tsteq	r3, r8, lsl #28	; <UNPREDICTABLE>
    1b6c:	00750250 	rsbseq	r0, r5, r0, asr r2
    1b70:	39aa1200 	stmibcc	sl!, {r9, ip}
    1b74:	17740800 	ldrbne	r0, [r4, -r0, lsl #16]!
    1b78:	1b8b0000 	blne	fe2c1b80 <SCS_BASE+0x1e2b3b80>
    1b7c:	01130000 	tsteq	r3, r0
    1b80:	00740251 	rsbseq	r0, r4, r1, asr r2
    1b84:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1b88:	12000075 	andne	r0, r0, #117	; 0x75
    1b8c:	080039b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp, ip, sp}
    1b90:	00001aac 	andeq	r1, r0, ip, lsr #21
    1b94:	00001b9e 	muleq	r0, lr, fp
    1b98:	01500113 	cmpeq	r0, r3, lsl r1
    1b9c:	c61c0031 			; <UNDEFINED> instruction: 0xc61c0031
    1ba0:	1d080039 	stcne	0, cr0, [r8, #-228]	; 0xffffff1c
    1ba4:	13000018 	movwne	r0, #24
    1ba8:	30015101 	andcc	r5, r1, r1, lsl #2
    1bac:	e90f0000 	stmdb	pc, {}	; <UNPREDICTABLE>
    1bb0:	0100000a 	tsteq	r0, sl
    1bb4:	39c60289 	stmibcc	r6, {r0, r3, r7, r9}^
    1bb8:	007a0800 	rsbseq	r0, sl, r0, lsl #16
    1bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bc0:	00001cc8 	andeq	r1, r0, r8, asr #25
    1bc4:	0006b610 	andeq	fp, r6, r0, lsl r6
    1bc8:	02890100 	addeq	r0, r9, #0, 2
    1bcc:	00000069 	andeq	r0, r0, r9, rrx
    1bd0:	000009d4 	ldrdeq	r0, [r0], -r4
    1bd4:	0000d510 	andeq	sp, r0, r0, lsl r5
    1bd8:	02890100 	addeq	r0, r9, #0, 2
    1bdc:	00000045 	andeq	r0, r0, r5, asr #32
    1be0:	000009f5 	strdeq	r0, [r0], -r5
    1be4:	0005611a 	andeq	r6, r5, sl, lsl r1
    1be8:	028c0100 	addeq	r0, ip, #0, 2
    1bec:	00000660 	andeq	r0, r0, r0, ror #12
    1bf0:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1bf4:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
    1bf8:	00002459 	andeq	r2, r0, r9, asr r4
    1bfc:	00001c07 	andeq	r1, r0, r7, lsl #24
    1c00:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1c04:	1200007d 	andne	r0, r0, #125	; 0x7d
    1c08:	080039f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, fp, ip, sp}
    1c0c:	00002470 	andeq	r2, r0, r0, ror r4
    1c10:	00001c1e 	andeq	r1, r0, lr, lsl ip
    1c14:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1c18:	0138000c 	teqeq	r8, ip
    1c1c:	fc120040 	ldc2	0, cr0, [r2], {64}	; 0x40
    1c20:	ac080039 	stcge	0, cr0, [r8], {57}	; 0x39
    1c24:	3100001a 	tstcc	r0, sl, lsl r0
    1c28:	1300001c 	movwne	r0, #28
    1c2c:	3a015001 	bcc	55c38 <__Stack_Size+0x55838>
    1c30:	3a041200 	bcc	106438 <__Stack_Size+0x106038>
    1c34:	24810800 	strcs	r0, [r1], #2048	; 0x800
    1c38:	1c4e0000 	marne	acc0, r0, lr
    1c3c:	01130000 	tsteq	r3, r0
    1c40:	007d0251 	rsbseq	r0, sp, r1, asr r2
    1c44:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1c48:	0138000c 	teqeq	r8, ip
    1c4c:	10120040 	andsne	r0, r2, r0, asr #32
    1c50:	9708003a 	smladxls	r8, sl, r0, r0
    1c54:	71000024 	tstvc	r0, r4, lsr #32
    1c58:	1300001c 	movwne	r0, #28
    1c5c:	31015201 	tstcc	r1, r1, lsl #4
    1c60:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    1c64:	1305250a 	movwne	r2, #21770	; 0x550a
    1c68:	0c055001 	stceq	0, cr5, [r5], {1}
    1c6c:	40013800 	andmi	r3, r1, r0, lsl #16
    1c70:	3a1e1200 	bcc	786478 <__Stack_Size+0x786078>
    1c74:	24700800 	ldrbtcs	r0, [r0], #-2048	; 0x800
    1c78:	1c880000 	stcne	0, cr0, [r8], {0}
    1c7c:	01130000 	tsteq	r3, r0
    1c80:	000c0550 	andeq	r0, ip, r0, asr r5
    1c84:	00400048 	subeq	r0, r0, r8, asr #32
    1c88:	003a2412 	eorseq	r2, sl, r2, lsl r4
    1c8c:	001aac08 	andseq	sl, sl, r8, lsl #24
    1c90:	001c9b00 	andseq	r9, ip, r0, lsl #22
    1c94:	50011300 	andpl	r1, r1, r0, lsl #6
    1c98:	12003a01 	andne	r3, r0, #4096	; 0x1000
    1c9c:	08003a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, sp}
    1ca0:	00002481 	andeq	r2, r0, r1, lsl #9
    1ca4:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    1ca8:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    1cac:	0113007d 	tsteq	r3, sp, ror r0
    1cb0:	000c0550 	andeq	r0, ip, r0, asr r5
    1cb4:	00400048 	subeq	r0, r0, r8, asr #32
    1cb8:	003a341b 	eorseq	r3, sl, fp, lsl r4
    1cbc:	00220b08 	eoreq	r0, r2, r8, lsl #22
    1cc0:	51011300 	mrspl	r1, SP_irq
    1cc4:	00003101 	andeq	r3, r0, r1, lsl #2
    1cc8:	0006160f 	andeq	r1, r6, pc, lsl #12
    1ccc:	02840100 	addeq	r0, r4, #0, 2
    1cd0:	08003a40 	stmdaeq	r0, {r6, r9, fp, ip, sp}
    1cd4:	00000008 	andeq	r0, r0, r8
    1cd8:	1d059c01 	stcne	12, cr9, [r5, #-4]
    1cdc:	d5100000 	ldrle	r0, [r0, #-0]
    1ce0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ce4:	00450284 	subeq	r0, r5, r4, lsl #5
    1ce8:	0a210000 	beq	841cf0 <__Stack_Size+0x8418f0>
    1cec:	481c0000 	ldmdami	ip, {}	; <UNPREDICTABLE>
    1cf0:	ae08003a 	mcrge	0, 0, r0, cr8, cr10, {1}
    1cf4:	1300001b 	movwne	r0, #27
    1cf8:	f3035101 	vrhadd.u8	d5, d3, d1
    1cfc:	01135001 	tsteq	r3, r1
    1d00:	00300150 	eorseq	r0, r0, r0, asr r1
    1d04:	0c941f00 	ldceq	15, cr1, [r4], {0}
    1d08:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    1d0c:	0006d001 	andeq	sp, r6, r1
    1d10:	005b9c00 	subseq	r9, fp, r0, lsl #24
    1d14:	00009408 	andeq	r9, r0, r8, lsl #8
    1d18:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    1d1c:	2600001e 			; <UNDEFINED> instruction: 0x2600001e
    1d20:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    1d24:	d001d501 	andle	sp, r1, r1, lsl #10
    1d28:	32000006 	andcc	r0, r0, #6
    1d2c:	000bcc26 	andeq	ip, fp, r6, lsr #24
    1d30:	01d60100 	bicseq	r0, r6, r0, lsl #2
    1d34:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d38:	0d591a01 	vldreq	s3, [r9, #-4]
    1d3c:	d7010000 	strle	r0, [r1, -r0]
    1d40:	00007301 	andeq	r7, r0, r1, lsl #6
    1d44:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
    1d48:	0006951a 	andeq	r9, r6, sl, lsl r5
    1d4c:	01d70100 	bicseq	r0, r7, r0, lsl #2
    1d50:	00000073 	andeq	r0, r0, r3, ror r0
    1d54:	1a769102 	bne	1da6164 <__Stack_Size+0x1da5d64>
    1d58:	0000062b 	andeq	r0, r0, fp, lsr #12
    1d5c:	7301d701 	movwvc	sp, #5889	; 0x1701
    1d60:	02000000 	andeq	r0, r0, #0
    1d64:	a2187791 	andsge	r7, r8, #38010880	; 0x2440000
    1d68:	3608005b 			; <UNDEFINED> instruction: 0x3608005b
    1d6c:	18000007 	stmdane	r0, {r0, r1, r2}
    1d70:	08005ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp, ip, lr}
    1d74:	0000088e 	andeq	r0, r0, lr, lsl #17
    1d78:	005baa18 	subseq	sl, fp, r8, lsl sl
    1d7c:	00090908 	andeq	r0, r9, r8, lsl #18
    1d80:	5bae1800 	blpl	feb87d88 <SCS_BASE+0x1eb79d88>
    1d84:	1a5f0800 	bne	17c3d8c <__Stack_Size+0x17c398c>
    1d88:	b2180000 	andslt	r0, r8, #0
    1d8c:	8d08005b 	stchi	0, cr0, [r8, #-364]	; 0xfffffe94
    1d90:	12000018 	andne	r0, r0, #24
    1d94:	08005bba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, fp, ip, lr}
    1d98:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    1d9c:	00001dab 	andeq	r1, r0, fp, lsr #27
    1da0:	01510113 	cmpeq	r1, r3, lsl r1
    1da4:	50011331 	andpl	r1, r1, r1, lsr r3
    1da8:	12003001 	andne	r3, r0, #1
    1dac:	08005bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, lr}
    1db0:	00001bae 	andeq	r1, r0, lr, lsr #23
    1db4:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
    1db8:	01500113 	cmpeq	r0, r3, lsl r1
    1dbc:	cc120032 	ldcgt	0, cr0, [r2], {50}	; 0x32
    1dc0:	ac08005b 	stcge	0, cr0, [r8], {91}	; 0x5b
    1dc4:	d300001a 	movwle	r0, #26
    1dc8:	1300001d 	movwne	r0, #29
    1dcc:	0a035001 	beq	d5dd8 <__Stack_Size+0xd59d8>
    1dd0:	120007d0 	andne	r0, r0, #208, 14	; 0x3400000
    1dd4:	08005bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip, lr}
    1dd8:	0000066b 	andeq	r0, r0, fp, ror #12
    1ddc:	00001ded 	andeq	r1, r0, sp, ror #27
    1de0:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    1de4:	01137591 			; <UNDEFINED> instruction: 0x01137591
    1de8:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1dec:	5bdc1200 	blpl	ff7065f4 <SCS_BASE+0x1f6f85f4>
    1df0:	0ba80800 	bleq	fea03df8 <SCS_BASE+0x1e9f5df8>
    1df4:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    1df8:	01130000 	tsteq	r3, r0
    1dfc:	69030550 	stmdbvs	r3, {r4, r6, r8, sl}
    1e00:	0008005e 	andeq	r0, r8, lr, asr r0
    1e04:	005be418 	subseq	lr, fp, r8, lsl r4
    1e08:	000e6b08 	andeq	r6, lr, r8, lsl #22
    1e0c:	5bee1200 	blpl	ffb86614 <SCS_BASE+0x1fb78614>
    1e10:	06d70800 	ldrbeq	r0, [r7], r0, lsl #16
    1e14:	1e270000 	cdpne	0, 2, cr0, cr7, cr0, {0}
    1e18:	01130000 	tsteq	r3, r0
    1e1c:	76910251 			; <UNDEFINED> instruction: 0x76910251
    1e20:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1e24:	12006408 	andne	r6, r0, #8, 8	; 0x8000000
    1e28:	08005bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip, lr}
    1e2c:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1e30:	00001e3e 	andeq	r1, r0, lr, lsr lr
    1e34:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1e38:	005e7303 	subseq	r7, lr, r3, lsl #6
    1e3c:	fc180008 	ldc2	0, cr0, [r8], {8}
    1e40:	6b08005b 	blvs	201fb4 <__Stack_Size+0x201bb4>
    1e44:	1200000e 	andne	r0, r0, #14
    1e48:	08005c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, lr}
    1e4c:	000013ac 	andeq	r1, r0, ip, lsr #7
    1e50:	00001e61 	andeq	r1, r0, r1, ror #28
    1e54:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    1e58:	01137791 			; <UNDEFINED> instruction: 0x01137791
    1e5c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1e60:	5c0c1200 	sfmpl	f1, 4, [ip], {-0}
    1e64:	0ba80800 	bleq	fea03e6c <SCS_BASE+0x1e9f5e6c>
    1e68:	1e780000 	cdpne	0, 7, cr0, cr8, cr0, {0}
    1e6c:	01130000 	tsteq	r3, r0
    1e70:	86030550 			; <UNDEFINED> instruction: 0x86030550
    1e74:	0008005e 	andeq	r0, r8, lr, asr r0
    1e78:	005c1418 	subseq	r1, ip, r8, lsl r4
    1e7c:	000e6b08 	andeq	r6, lr, r8, lsl #22
    1e80:	5c1a1b00 	ldcpl	11, cr1, [sl], {-0}
    1e84:	0ba80800 	bleq	fea03e8c <SCS_BASE+0x1e9f5e8c>
    1e88:	01130000 	tsteq	r3, r0
    1e8c:	46030550 			; <UNDEFINED> instruction: 0x46030550
    1e90:	0008005e 	andeq	r0, r8, lr, asr r0
    1e94:	09e10f00 	stmibeq	r1!, {r8, r9, sl, fp}^
    1e98:	9a010000 	bls	41ea0 <__Stack_Size+0x41aa0>
    1e9c:	003a4803 	eorseq	r4, sl, r3, lsl #16
    1ea0:	00000c08 	andeq	r0, r0, r8, lsl #24
    1ea4:	ba9c0100 	blt	fe7022ac <SCS_BASE+0x1e6f42ac>
    1ea8:	2700001e 	smladcs	r0, lr, r0, r0
    1eac:	00000028 	andeq	r0, r0, r8, lsr #32
    1eb0:	25039a01 	strcs	r9, [r3, #-2561]	; 0xa01
    1eb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb8:	691e0050 	ldmdbvs	lr, {r4, r6}
    1ebc:	01000009 	tsteq	r0, r9
    1ec0:	0069039f 	mlseq	r9, pc, r3, r0	; <UNPREDICTABLE>
    1ec4:	3a540000 	bcc	1501ecc <__Stack_Size+0x1501acc>
    1ec8:	00140800 	andseq	r0, r4, r0, lsl #16
    1ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ed0:	00006928 	andeq	r6, r0, r8, lsr #18
    1ed4:	001ee000 	andseq	lr, lr, r0
    1ed8:	01052900 	tsteq	r5, r0, lsl #18
    1edc:	00ff0000 	rscseq	r0, pc, r0
    1ee0:	0006c42a 	andeq	ip, r6, sl, lsr #8
    1ee4:	f1420100 			; <UNDEFINED> instruction: 0xf1420100
    1ee8:	0500001e 	streq	r0, [r0, #-30]
    1eec:	00001a03 	andeq	r1, r0, r3, lsl #20
    1ef0:	1ed00520 	cdpne	5, 13, cr0, cr0, cr0, {1}
    1ef4:	9c2a0000 	stcls	0, cr0, [sl], #-0
    1ef8:	01000000 	mrseq	r0, (UNDEF: 0)
    1efc:	001f0743 	andseq	r0, pc, r3, asr #14
    1f00:	18030500 	stmdane	r3, {r8, sl}
    1f04:	05200000 	streq	r0, [r0, #-0]!
    1f08:	00000069 	andeq	r0, r0, r9, rrx
    1f0c:	000c422a 	andeq	r4, ip, sl, lsr #4
    1f10:	07430100 	strbeq	r0, [r3, -r0, lsl #2]
    1f14:	0500001f 	streq	r0, [r0, #-31]
    1f18:	00001903 	andeq	r1, r0, r3, lsl #18
    1f1c:	04fd2a20 	ldrbteq	r2, [sp], #2592	; 0xa20
    1f20:	44010000 	strmi	r0, [r1], #-0
    1f24:	0000007a 	andeq	r0, r0, sl, ror r0
    1f28:	01240305 			; <UNDEFINED> instruction: 0x01240305
    1f2c:	ad2a2000 	stcge	0, cr2, [sl, #-0]
    1f30:	01000004 	tsteq	r0, r4
    1f34:	00007a44 	andeq	r7, r0, r4, asr #20
    1f38:	20030500 	andcs	r0, r3, r0, lsl #10
    1f3c:	2a200001 	bcs	801f48 <__Stack_Size+0x801b48>
    1f40:	00000109 	andeq	r0, r0, r9, lsl #2
    1f44:	00454501 	subeq	r4, r5, r1, lsl #10
    1f48:	03050000 	movweq	r0, #20480	; 0x5000
    1f4c:	20000010 	andcs	r0, r0, r0, lsl r0
    1f50:	00058c2a 	andeq	r8, r5, sl, lsr #24
    1f54:	45460100 	strbmi	r0, [r6, #-256]	; 0x100
    1f58:	05000000 	streq	r0, [r0, #-0]
    1f5c:	00000403 	andeq	r0, r0, r3, lsl #8
    1f60:	020b2a20 	andeq	r2, fp, #32, 20	; 0x20000
    1f64:	47010000 	strmi	r0, [r1, -r0]
    1f68:	0000008a 	andeq	r0, r0, sl, lsl #1
    1f6c:	00000305 	andeq	r0, r0, r5, lsl #6
    1f70:	682a2000 	stmdavs	sl!, {sp}
    1f74:	01000003 	tsteq	r0, r3
    1f78:	00007a48 	andeq	r7, r0, r8, asr #20
    1f7c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    1f80:	28200001 	stmdacs	r0!, {r0}
    1f84:	00000057 	andeq	r0, r0, r7, asr r0
    1f88:	00001f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    1f8c:	00010529 	andeq	r0, r1, r9, lsr #10
    1f90:	2a000100 	bcs	2398 <__Stack_Size+0x1f98>
    1f94:	00000c99 	muleq	r0, r9, ip
    1f98:	1f834901 	svcne	0x00834901
    1f9c:	03050000 	movweq	r0, #20480	; 0x5000
    1fa0:	2000000a 	andcs	r0, r0, sl
    1fa4:	0005832a 	andeq	r8, r5, sl, lsr #6
    1fa8:	574b0100 	strbpl	r0, [fp, -r0, lsl #2]
    1fac:	05000000 	streq	r0, [r0, #-0]
    1fb0:	00012e03 	andeq	r2, r1, r3, lsl #28
    1fb4:	07202a20 	streq	r2, [r0, -r0, lsr #20]!
    1fb8:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1fbc:	00000057 	andeq	r0, r0, r7, asr r0
    1fc0:	012c0305 			; <UNDEFINED> instruction: 0x012c0305
    1fc4:	362a2000 	strtcc	r2, [sl], -r0
    1fc8:	01000006 	tsteq	r0, r6
    1fcc:	0000694d 	andeq	r6, r0, sp, asr #18
    1fd0:	2b030500 	blcs	c33d8 <__Stack_Size+0xc2fd8>
    1fd4:	2a200001 	bcs	801fe0 <__Stack_Size+0x801be0>
    1fd8:	000003a5 	andeq	r0, r0, r5, lsr #7
    1fdc:	00694e01 	rsbeq	r4, r9, r1, lsl #28
    1fe0:	03050000 	movweq	r0, #20480	; 0x5000
    1fe4:	2000012a 	andcs	r0, r0, sl, lsr #2
    1fe8:	0064692b 	rsbeq	r6, r4, fp, lsr #18
    1fec:	00694f01 	rsbeq	r4, r9, r1, lsl #30
    1ff0:	03050000 	movweq	r0, #20480	; 0x5000
    1ff4:	20000008 	andcs	r0, r0, r8
    1ff8:	00017f2a 	andeq	r7, r1, sl, lsr #30
    1ffc:	69500100 	ldmdbvs	r0, {r8}^
    2000:	05000000 	streq	r0, [r0, #-0]
    2004:	00012903 	andeq	r2, r1, r3, lsl #18
    2008:	13902a20 	orrsne	r2, r0, #32, 20	; 0x20000
    200c:	50010000 	andpl	r0, r1, r0
    2010:	00000069 	andeq	r0, r0, r9, rrx
    2014:	01280305 			; <UNDEFINED> instruction: 0x01280305
    2018:	fd2c2000 	stc2	0, cr2, [ip, #-0]
    201c:	0800000a 	stmdaeq	r0, {r1, r3}
    2020:	0006d046 	andeq	sp, r6, r6, asr #32
    2024:	00203400 	eoreq	r3, r0, r0, lsl #8
    2028:	06d02d00 	ldrbeq	r2, [r0], r0, lsl #26
    202c:	d02d0000 	eorle	r0, sp, r0
    2030:	00000006 	andeq	r0, r0, r6
    2034:	0007402e 	andeq	r4, r7, lr, lsr #32
    2038:	d0390800 	eorsle	r0, r9, r0, lsl #16
    203c:	2f000006 	svccs	0x00000006
    2040:	0000003c 	andeq	r0, r0, ip, lsr r0
    2044:	4f30fd09 	svcmi	0x0030fd09
    2048:	09000006 	stmdbeq	r0, {r1, r2}
    204c:	002057fe 	strdeq	r5, [r0], -lr	; <UNPREDICTABLE>
    2050:	00452d00 	subeq	r2, r5, r0, lsl #26
    2054:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2058:	00000250 	andeq	r0, r0, r0, asr r2
    205c:	00faff09 	rscseq	pc, sl, r9, lsl #30
    2060:	bf310000 	svclt	0x00310000
    2064:	09000004 	stmdbeq	r0, {r2}
    2068:	20790112 	rsbscs	r0, r9, r2, lsl r1
    206c:	452d0000 	strmi	r0, [sp, #-0]!
    2070:	2d000000 	stccs	0, cr0, [r0, #-0]
    2074:	000000da 	ldrdeq	r0, [r0], -sl
    2078:	05bb3100 	ldreq	r3, [fp, #256]!	; 0x100
    207c:	13090000 	movwne	r0, #36864	; 0x9000
    2080:	00209001 	eoreq	r9, r0, r1
    2084:	00452d00 	subeq	r2, r5, r0, lsl #26
    2088:	da2d0000 	ble	b42090 <__Stack_Size+0xb41c90>
    208c:	00000000 	andeq	r0, r0, r0
    2090:	00041830 	andeq	r1, r4, r0, lsr r8
    2094:	a1420a00 	cmpge	r2, r0, lsl #20
    2098:	2d000020 	stccs	0, cr0, [r0, #-128]	; 0xffffff80
    209c:	000000da 	ldrdeq	r0, [r0], -sl
    20a0:	01b73000 			; <UNDEFINED> instruction: 0x01b73000
    20a4:	b60b0000 	strlt	r0, [fp], -r0
    20a8:	000020b2 	strheq	r2, [r0], -r2	; <UNPREDICTABLE>
    20ac:	0000452d 	andeq	r4, r0, sp, lsr #10
    20b0:	da300000 	ble	c020b8 <__Stack_Size+0xc01cb8>
    20b4:	0b000007 	bleq	20d8 <__Stack_Size+0x1cd8>
    20b8:	0020c3b4 	strhteq	ip, [r0], -r4
    20bc:	00452d00 	subeq	r2, r5, r0, lsl #26
    20c0:	31000000 	mrscc	r0, (UNDEF: 0)
    20c4:	00000731 	andeq	r0, r0, r1, lsr r7
    20c8:	d5010609 	strle	r0, [r1, #-1545]	; 0x609
    20cc:	2d000020 	stccs	0, cr0, [r0, #-128]	; 0xffffff80
    20d0:	00000045 	andeq	r0, r0, r5, asr #32
    20d4:	01fb3100 	mvnseq	r3, r0, lsl #2
    20d8:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    20dc:	0020e701 	eoreq	lr, r0, r1, lsl #14
    20e0:	00452d00 	subeq	r2, r5, r0, lsl #26
    20e4:	31000000 	mrscc	r0, (UNDEF: 0)
    20e8:	00000770 	andeq	r0, r0, r0, ror r7
    20ec:	f9010709 			; <UNDEFINED> instruction: 0xf9010709
    20f0:	2d000020 	stccs	0, cr0, [r0, #-128]	; 0xffffff80
    20f4:	00000045 	andeq	r0, r0, r5, asr #32
    20f8:	01573100 	cmpeq	r7, r0, lsl #2
    20fc:	02090000 	andeq	r0, r9, #0
    2100:	00211001 	eoreq	r1, r1, r1
    2104:	00452d00 	subeq	r2, r5, r0, lsl #26
    2108:	452d0000 	strmi	r0, [sp, #-0]!
    210c:	00000000 	andeq	r0, r0, r0
    2110:	000c0631 	andeq	r0, ip, r1, lsr r6
    2114:	01030900 	tsteq	r3, r0, lsl #18
    2118:	00002122 	andeq	r2, r0, r2, lsr #2
    211c:	0000da2d 	andeq	sp, r0, sp, lsr #20
    2120:	91320000 	teqls	r2, r0
    2124:	09000008 	stmdbeq	r0, {r3}
    2128:	00af0119 	adceq	r0, pc, r9, lsl r1	; <UNPREDICTABLE>
    212c:	21380000 	teqcs	r8, r0
    2130:	692d0000 	pushvs	{}	; <UNPREDICTABLE>
    2134:	00000000 	andeq	r0, r0, r0
    2138:	00001731 	andeq	r1, r0, r1, lsr r7
    213c:	01040900 	tsteq	r4, r0, lsl #18
    2140:	0000214a 	andeq	r2, r0, sl, asr #2
    2144:	0000452d 	andeq	r4, r0, sp, lsr #10
    2148:	3b330000 	blcc	cc2150 <__Stack_Size+0xcc1d50>
    214c:	0900000a 	stmdbeq	r0, {r1, r3}
    2150:	00690105 	rsbeq	r0, r9, r5, lsl #2
    2154:	e7310000 	ldr	r0, [r1, -r0]!
    2158:	05000005 	streq	r0, [r0, #-5]
    215c:	216d010f 	cmncs	sp, pc, lsl #2
    2160:	452d0000 	strmi	r0, [sp, #-0]!
    2164:	2d000000 	stccs	0, cr0, [r0, #-0]
    2168:	00000045 	andeq	r0, r0, r5, asr #32
    216c:	0c293000 	stceq	0, cr3, [r9], #-0
    2170:	ff050000 			; <UNDEFINED> instruction: 0xff050000
    2174:	0000217e 	andeq	r2, r0, lr, ror r1
    2178:	0000452d 	andeq	r4, r0, sp, lsr #10
    217c:	9d310000 	ldcls	0, cr0, [r1, #-0]
    2180:	05000007 	streq	r0, [r0, #-7]
    2184:	21900100 	orrscs	r0, r0, r0, lsl #2
    2188:	902d0000 	eorls	r0, sp, r0
    218c:	00000021 	andeq	r0, r0, r1, lsr #32
    2190:	05400415 	strbeq	r0, [r0, #-1045]	; 0x415
    2194:	47300000 	ldrmi	r0, [r0, -r0]!
    2198:	04000000 	streq	r0, [r0], #-0
    219c:	0021a7dc 	ldrdeq	sl, [r1], -ip	; <UNPREDICTABLE>
    21a0:	21a72d00 			; <UNDEFINED> instruction: 0x21a72d00
    21a4:	15000000 	strne	r0, [r0, #-0]
    21a8:	0004fc04 	andeq	pc, r4, r4, lsl #24
    21ac:	01f13000 	mvnseq	r3, r0
    21b0:	db040000 	blle	1021b8 <__Stack_Size+0x101db8>
    21b4:	000021c3 	andeq	r2, r0, r3, asr #3
    21b8:	0021c32d 	eoreq	ip, r1, sp, lsr #6
    21bc:	21a72d00 			; <UNDEFINED> instruction: 0x21a72d00
    21c0:	15000000 	strne	r0, [r0, #-0]
    21c4:	00017104 	andeq	r7, r1, r4, lsl #2
    21c8:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    21cc:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
    21d0:	000021df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    21d4:	0000452d 	andeq	r4, r0, sp, lsr #10
    21d8:	00da2d00 	sbcseq	r2, sl, r0, lsl #26
    21dc:	30000000 	andcc	r0, r0, r0
    21e0:	000007cb 	andeq	r0, r0, fp, asr #15
    21e4:	21f5e204 	mvnscs	lr, r4, lsl #4
    21e8:	c32d0000 			; <UNDEFINED> instruction: 0xc32d0000
    21ec:	2d000021 	stccs	0, cr0, [r0, #-132]	; 0xffffff7c
    21f0:	00000057 	andeq	r0, r0, r7, asr r0
    21f4:	03983000 	orrseq	r3, r8, #0
    21f8:	e1040000 	mrs	r0, (UNDEF: 4)
    21fc:	0000220b 	andeq	r2, r0, fp, lsl #4
    2200:	0021c32d 	eoreq	ip, r1, sp, lsr #6
    2204:	00572d00 	subseq	r2, r7, r0, lsl #26
    2208:	30000000 	andcc	r0, r0, r0
    220c:	00000032 	andeq	r0, r0, r2, lsr r0
    2210:	2221e407 	eorcs	lr, r1, #117440512	; 0x7000000
    2214:	212d0000 			; <UNDEFINED> instruction: 0x212d0000
    2218:	2d000022 	stccs	0, cr0, [r0, #-136]	; 0xffffff78
    221c:	000000da 	ldrdeq	r0, [r0], -sl
    2220:	58041500 	stmdapl	r4, {r8, sl, ip}
    2224:	30000004 	andcc	r0, r0, r4
    2228:	00000370 	andeq	r0, r0, r0, ror r3
    222c:	223dec07 	eorscs	lr, sp, #1792	; 0x700
    2230:	212d0000 			; <UNDEFINED> instruction: 0x212d0000
    2234:	2d000022 	stccs	0, cr0, [r0, #-136]	; 0xffffff78
    2238:	00000057 	andeq	r0, r0, r7, asr r0
    223c:	07802c00 	streq	r2, [r0, r0, lsl #24]
    2240:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    2244:	000000af 	andeq	r0, r0, pc, lsr #1
    2248:	00002257 	andeq	r2, r0, r7, asr r2
    224c:	0022212d 	eoreq	r2, r2, sp, lsr #2
    2250:	00572d00 	subseq	r2, r7, r0, lsl #26
    2254:	30000000 	andcc	r0, r0, r0
    2258:	0000044f 	andeq	r0, r0, pc, asr #8
    225c:	22724908 	rsbscs	r4, r2, #8, 18	; 0x20000
    2260:	d02d0000 	eorle	r0, sp, r0
    2264:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    2268:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    226c:	0006d02d 	andeq	sp, r6, sp, lsr #32
    2270:	422c0000 	eormi	r0, ip, #0
    2274:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    2278:	0006d021 	andeq	sp, r6, r1, lsr #32
    227c:	00228700 	eoreq	r8, r2, r0, lsl #14
    2280:	06d02d00 	ldrbeq	r2, [r0], r0, lsl #26
    2284:	30000000 	andcc	r0, r0, r0
    2288:	000003ce 	andeq	r0, r0, lr, asr #7
    228c:	22a24708 	adccs	r4, r2, #8, 14	; 0x200000
    2290:	d02d0000 	eorle	r0, sp, r0
    2294:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    2298:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    229c:	0006d02d 	andeq	sp, r6, sp, lsr #32
    22a0:	ac2c0000 	stcge	0, cr0, [ip], #-0
    22a4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    22a8:	0006d048 	andeq	sp, r6, r8, asr #32
    22ac:	0022bc00 	eoreq	fp, r2, r0, lsl #24
    22b0:	06d02d00 	ldrbeq	r2, [r0], r0, lsl #26
    22b4:	d02d0000 	eorle	r0, sp, r0
    22b8:	00000006 	andeq	r0, r0, r6
    22bc:	000a5631 	andeq	r5, sl, r1, lsr r6
    22c0:	02ac0600 	adceq	r0, ip, #0, 12
    22c4:	000022ce 	andeq	r2, r0, lr, asr #5
    22c8:	0022ce2d 	eoreq	ip, r2, sp, lsr #28
    22cc:	04150000 	ldreq	r0, [r5], #-0
    22d0:	00000590 	muleq	r0, r0, r5
    22d4:	00013d31 	andeq	r3, r1, r1, lsr sp
    22d8:	02ad0600 	adceq	r0, sp, #0, 12
    22dc:	000022e6 	andeq	r2, r0, r6, ror #5
    22e0:	0022e62d 	eoreq	lr, r2, sp, lsr #12
    22e4:	04150000 	ldreq	r0, [r5], #-0
    22e8:	00000604 	andeq	r0, r0, r4, lsl #12
    22ec:	000ac231 	andeq	ip, sl, r1, lsr r2
    22f0:	02a30600 	adceq	r0, r3, #0, 12
    22f4:	000022fe 	strdeq	r2, [r0], -lr
    22f8:	0022fe2d 	eoreq	pc, r2, sp, lsr #28
    22fc:	04150000 	ldreq	r0, [r5], #-0
    2300:	0000038e 	andeq	r0, r0, lr, lsl #7
    2304:	0006fc31 	andeq	pc, r6, r1, lsr ip	; <UNPREDICTABLE>
    2308:	02a40600 	adceq	r0, r4, #0, 12
    230c:	0000231b 	andeq	r2, r0, fp, lsl r3
    2310:	0022fe2d 	eoreq	pc, r2, sp, lsr #28
    2314:	22ce2d00 	sbccs	r2, lr, #0, 26
    2318:	31000000 	mrscc	r0, (UNDEF: 0)
    231c:	00000d03 	andeq	r0, r0, r3, lsl #26
    2320:	3702c006 	strcc	ip, [r2, -r6]
    2324:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    2328:	000022fe 	strdeq	r2, [r0], -lr
    232c:	0000572d 	andeq	r5, r0, sp, lsr #14
    2330:	00572d00 	subseq	r2, r7, r0, lsl #26
    2334:	31000000 	mrscc	r0, (UNDEF: 0)
    2338:	00000187 	andeq	r0, r0, r7, lsl #3
    233c:	4e02a506 	cfsh32mi	mvfx10, mvfx2, #6
    2340:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    2344:	000022fe 	strdeq	r2, [r0], -lr
    2348:	0022e62d 	eoreq	lr, r2, sp, lsr #12
    234c:	93310000 	teqls	r1, #0
    2350:	06000001 	streq	r0, [r0], -r1
    2354:	236502cd 	cmncs	r5, #-805306356	; 0xd000000c
    2358:	fe2d0000 	cdp2	0, 2, cr0, cr13, cr0, {0}
    235c:	2d000022 	stccs	0, cr0, [r0, #-136]	; 0xffffff78
    2360:	00000057 	andeq	r0, r0, r7, asr r0
    2364:	09c13100 	stmibeq	r1, {r8, ip, sp}^
    2368:	b2060000 	andlt	r0, r6, #0
    236c:	00238102 	eoreq	r8, r3, r2, lsl #2
    2370:	22fe2d00 	rscscs	r2, lr, #0, 26
    2374:	572d0000 	strpl	r0, [sp, -r0]!
    2378:	2d000000 	stccs	0, cr0, [r0, #-0]
    237c:	000000da 	ldrdeq	r0, [r0], -sl
    2380:	0ca13100 	stfeqs	f3, [r1]
    2384:	b0060000 	andlt	r0, r6, r0
    2388:	00239802 	eoreq	r9, r3, r2, lsl #16
    238c:	22fe2d00 	rscscs	r2, lr, #0, 26
    2390:	da2d0000 	ble	b42398 <__Stack_Size+0xb41f98>
    2394:	00000000 	andeq	r0, r0, r0
    2398:	000c5832 	andeq	r5, ip, r2, lsr r8
    239c:	02fd0600 	rscseq	r0, sp, #0, 12
    23a0:	000000ba 	strheq	r0, [r0], -sl
    23a4:	000023b3 			; <UNDEFINED> instruction: 0x000023b3
    23a8:	0022fe2d 	eoreq	pc, r2, sp, lsr #28
    23ac:	00572d00 	subseq	r2, r7, r0, lsl #26
    23b0:	31000000 	mrscc	r0, (UNDEF: 0)
    23b4:	00000316 	andeq	r0, r0, r6, lsl r3
    23b8:	ca02fe06 	bgt	c1bd8 <__Stack_Size+0xc17d8>
    23bc:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    23c0:	000022fe 	strdeq	r2, [r0], -lr
    23c4:	0000572d 	andeq	r5, r0, sp, lsr #14
    23c8:	72320000 	eorsvc	r0, r2, #0
    23cc:	06000002 	streq	r0, [r0], -r2
    23d0:	005702f5 	ldrsheq	r0, [r7], #-37	; 0xffffffdb
    23d4:	23e00000 	mvncs	r0, #0
    23d8:	fe2d0000 	cdp2	0, 2, cr0, cr13, cr0, {0}
    23dc:	00000022 	andeq	r0, r0, r2, lsr #32
    23e0:	000c8431 	andeq	r8, ip, r1, lsr r4
    23e4:	02ec0600 	rsceq	r0, ip, #0, 12
    23e8:	000023f7 	strdeq	r2, [r0], -r7
    23ec:	0022fe2d 	eoreq	pc, r2, sp, lsr #28
    23f0:	00572d00 	subseq	r2, r7, r0, lsl #26
    23f4:	2c000000 	stccs	0, cr0, [r0], {-0}
    23f8:	000000de 	ldrdeq	r0, [r0], -lr
    23fc:	00baf807 	adcseq	pc, sl, r7, lsl #16
    2400:	24110000 	ldrcs	r0, [r1], #-0
    2404:	212d0000 			; <UNDEFINED> instruction: 0x212d0000
    2408:	2d000022 	stccs	0, cr0, [r0, #-136]	; 0xffffff78
    240c:	00000057 	andeq	r0, r0, r7, asr r0
    2410:	02cb2c00 	sbceq	r2, fp, #0, 24
    2414:	ed070000 	stc	0, cr0, [r7, #-0]
    2418:	00000057 	andeq	r0, r0, r7, asr r0
    241c:	00002426 	andeq	r2, r0, r6, lsr #8
    2420:	0022212d 	eoreq	r2, r2, sp, lsr #2
    2424:	df300000 	svcle	0x00300000
    2428:	0c000001 	stceq	0, cr0, [r0], {1}
    242c:	00243738 	eoreq	r3, r4, r8, lsr r7
    2430:	00452d00 	subeq	r2, r5, r0, lsl #26
    2434:	30000000 	andcc	r0, r0, r0
    2438:	00000869 	andeq	r0, r0, r9, ror #16
    243c:	24483a0c 	strbcs	r3, [r8], #-2572	; 0xa0c
    2440:	da2d0000 	ble	b42448 <__Stack_Size+0xb42048>
    2444:	00000000 	andeq	r0, r0, r0
    2448:	0009ce30 	andeq	ip, r9, r0, lsr lr
    244c:	59390c00 	ldmdbpl	r9!, {sl, fp}
    2450:	2d000024 	stccs	0, cr0, [r0, #-144]	; 0xffffff70
    2454:	00000045 	andeq	r0, r0, r5, asr #32
    2458:	046c3000 	strbteq	r3, [ip], #-0
    245c:	e1070000 	mrs	r0, (UNDEF: 7)
    2460:	0000246a 	andeq	r2, r0, sl, ror #8
    2464:	00246a2d 	eoreq	r6, r4, sp, lsr #20
    2468:	04150000 	ldreq	r0, [r5], #-0
    246c:	00000660 	andeq	r0, r0, r0, ror #12
    2470:	000b0b30 	andeq	r0, fp, r0, lsr fp
    2474:	81df0700 	bicshi	r0, pc, r0, lsl #14
    2478:	2d000024 	stccs	0, cr0, [r0, #-144]	; 0xffffff70
    247c:	00002221 	andeq	r2, r0, r1, lsr #4
    2480:	01263000 			; <UNDEFINED> instruction: 0x01263000
    2484:	e0070000 	and	r0, r7, r0
    2488:	00002497 	muleq	r0, r7, r4
    248c:	0022212d 	eoreq	r2, r2, sp, lsr #2
    2490:	246a2d00 	strbtcs	r2, [sl], #-3328	; 0xd00
    2494:	30000000 	andcc	r0, r0, r0
    2498:	00000990 	muleq	r0, r0, r9
    249c:	24b2e507 	ldrtcs	lr, [r2], #1287	; 0x507
    24a0:	212d0000 			; <UNDEFINED> instruction: 0x212d0000
    24a4:	2d000022 	stccs	0, cr0, [r0, #-136]	; 0xffffff78
    24a8:	00000057 	andeq	r0, r0, r7, asr r0
    24ac:	0000da2d 	andeq	sp, r0, sp, lsr #20
    24b0:	d4340000 	ldrtle	r0, [r4], #-0
    24b4:	0800000c 	stmdaeq	r0, {r2, r3}
    24b8:	0006d00c 	andeq	sp, r6, ip
    24bc:	06d02d00 	ldrbeq	r2, [r0], r0, lsl #26
    24c0:	d02d0000 	eorle	r0, sp, r0
    24c4:	00000006 	andeq	r0, r0, r6
    24c8:	00058000 	andeq	r8, r5, r0
    24cc:	1a000400 	bne	34d4 <__Stack_Size+0x30d4>
    24d0:	04000003 	streq	r0, [r0], #-3
    24d4:	0007f501 	andeq	pc, r7, r1, lsl #10
    24d8:	127c0100 	rsbsne	r0, ip, #0, 2
    24dc:	11850000 	orrne	r0, r5, r0
    24e0:	3a680000 	bcc	1a024e8 <__Stack_Size+0x1a020e8>
    24e4:	00900800 	addseq	r0, r0, r0, lsl #16
    24e8:	036a0000 	cmneq	sl, #0
    24ec:	63020000 	movwvs	r0, #8192	; 0x2000
    24f0:	0100000f 	tsteq	r0, pc
    24f4:	003a6823 	eorseq	r6, sl, r3, lsr #16
    24f8:	00000208 	andeq	r0, r0, r8, lsl #4
    24fc:	029c0100 	addseq	r0, ip, #0, 2
    2500:	00000dcf 	andeq	r0, r0, pc, asr #27
    2504:	3a6a2e01 	bcc	1a8dd10 <__Stack_Size+0x1a8d910>
    2508:	00020800 	andeq	r0, r2, r0, lsl #16
    250c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2510:	000f5002 	andeq	r5, pc, r2
    2514:	6c3d0100 	ldfvss	f0, [sp], #-0
    2518:	0208003a 	andeq	r0, r8, #58	; 0x3a
    251c:	01000000 	mrseq	r0, (UNDEF: 0)
    2520:	0d5f029c 	lfmeq	f0, 2, [pc, #-624]	; 22b8 <__Stack_Size+0x1eb8>
    2524:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2528:	08003a6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, fp, ip, sp}
    252c:	00000002 	andeq	r0, r0, r2
    2530:	d0029c01 	andle	r9, r2, r1, lsl #24
    2534:	0100000f 	tsteq	r0, pc
    2538:	003a705b 	eorseq	r7, sl, fp, asr r0
    253c:	00000208 	andeq	r0, r0, r8, lsl #4
    2540:	029c0100 	addseq	r0, ip, #0, 2
    2544:	00000e38 	andeq	r0, r0, r8, lsr lr
    2548:	3a726a01 	bcc	1c9cd54 <__Stack_Size+0x1c9c954>
    254c:	00020800 	andeq	r0, r2, r0, lsl #16
    2550:	9c010000 	stcls	0, cr0, [r1], {-0}
    2554:	000ee802 	andeq	lr, lr, r2, lsl #16
    2558:	74750100 	ldrbtvc	r0, [r5], #-256	; 0x100
    255c:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2560:	01000000 	mrseq	r0, (UNDEF: 0)
    2564:	1265029c 	rsbne	r0, r5, #156, 4	; 0xc0000009
    2568:	80010000 	andhi	r0, r1, r0
    256c:	08003a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp, ip, sp}
    2570:	00000002 	andeq	r0, r0, r2
    2574:	6d039c01 	stcvs	12, cr9, [r3, #-4]
    2578:	01000012 	tsteq	r0, r2, lsl r0
    257c:	003a788b 	eorseq	r7, sl, fp, lsl #17
    2580:	00000408 	andeq	r0, r0, r8, lsl #8
    2584:	dd9c0100 	ldfles	f0, [ip]
    2588:	04000000 	streq	r0, [r0], #-0
    258c:	00000bfa 	strdeq	r0, [r0], -sl
    2590:	00dd8d01 	sbcseq	r8, sp, r1, lsl #26
    2594:	00d30000 	sbcseq	r0, r3, r0
    2598:	00050000 	andeq	r0, r5, r0
    259c:	003a7c06 	eorseq	r7, sl, r6, lsl #24
    25a0:	00055208 	andeq	r5, r5, r8, lsl #4
    25a4:	04070000 	streq	r0, [r7], #-0
    25a8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    25ac:	12210200 	eorne	r0, r1, #0, 4
    25b0:	97010000 	strls	r0, [r1, -r0]
    25b4:	08003a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, ip, sp}
    25b8:	00000002 	andeq	r0, r0, r2
    25bc:	c0029c01 	andgt	r9, r2, r1, lsl #24
    25c0:	0100000d 	tsteq	r0, sp
    25c4:	003a7ea2 	eorseq	r7, sl, r2, lsr #29
    25c8:	00000208 	andeq	r0, r0, r8, lsl #4
    25cc:	029c0100 	addseq	r0, ip, #0, 2
    25d0:	00000df4 	strdeq	r0, [r0], -r4
    25d4:	3a80ad01 	bcc	fe02d9e0 <SCS_BASE+0x1e01f9e0>
    25d8:	00020800 	andeq	r0, r2, r0, lsl #16
    25dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    25e0:	000f0502 	andeq	r0, pc, r2, lsl #10
    25e4:	82b80100 	adcshi	r0, r8, #0, 2
    25e8:	0208003a 	andeq	r0, r8, #58	; 0x3a
    25ec:	01000000 	mrseq	r0, (UNDEF: 0)
    25f0:	0fbf029c 	svceq	0x00bf029c
    25f4:	c3010000 	movwgt	r0, #4096	; 0x1000
    25f8:	08003a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp}
    25fc:	00000002 	andeq	r0, r0, r2
    2600:	06029c01 	streq	r9, [r2], -r1, lsl #24
    2604:	0100000e 	tsteq	r0, lr
    2608:	003a86ce 	eorseq	r8, sl, lr, asr #13
    260c:	00000208 	andeq	r0, r0, r8, lsl #4
    2610:	029c0100 	addseq	r0, ip, #0, 2
    2614:	00000daf 	andeq	r0, r0, pc, lsr #27
    2618:	3a88d901 	bcc	fe238a24 <SCS_BASE+0x1e22aa24>
    261c:	00020800 	andeq	r0, r2, r0, lsl #16
    2620:	9c010000 	stcls	0, cr0, [r1], {-0}
    2624:	00109802 	andseq	r9, r0, r2, lsl #16
    2628:	8ae40100 	bhi	ff902a30 <SCS_BASE+0x1f8f4a30>
    262c:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2630:	01000000 	mrseq	r0, (UNDEF: 0)
    2634:	0d71029c 	lfmeq	f0, 2, [r1, #-624]!	; 0xfffffd90
    2638:	ef010000 	svc	0x00010000
    263c:	08003a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp}
    2640:	00000002 	andeq	r0, r0, r2
    2644:	70029c01 	andvc	r9, r2, r1, lsl #24
    2648:	0100000f 	tsteq	r0, pc
    264c:	003a8efa 	ldrshteq	r8, [sl], -sl
    2650:	00000208 	andeq	r0, r0, r8, lsl #4
    2654:	089c0100 	ldmeq	ip, {r8}
    2658:	00001241 	andeq	r1, r0, r1, asr #4
    265c:	90010501 	andls	r0, r1, r1, lsl #10
    2660:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2664:	01000000 	mrseq	r0, (UNDEF: 0)
    2668:	0ecf089c 	mcreq	8, 6, r0, cr15, cr12, {4}
    266c:	10010000 	andne	r0, r1, r0
    2670:	003a9201 	eorseq	r9, sl, r1, lsl #4
    2674:	00000208 	andeq	r0, r0, r8, lsl #4
    2678:	089c0100 	ldmeq	ip, {r8}
    267c:	0000115b 	andeq	r1, r0, fp, asr r1
    2680:	94011b01 	strls	r1, [r1], #-2817	; 0xb01
    2684:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2688:	01000000 	mrseq	r0, (UNDEF: 0)
    268c:	0e45089c 	mcreq	8, 2, r0, cr5, cr12, {4}
    2690:	26010000 	strcs	r0, [r1], -r0
    2694:	003a9601 	eorseq	r9, sl, r1, lsl #12
    2698:	00000208 	andeq	r0, r0, r8, lsl #4
    269c:	089c0100 	ldmeq	ip, {r8}
    26a0:	0000106f 	andeq	r1, r0, pc, rrx
    26a4:	98013101 	stmdals	r1, {r0, r8, ip, sp}
    26a8:	0208003a 	andeq	r0, r8, #58	; 0x3a
    26ac:	01000000 	mrseq	r0, (UNDEF: 0)
    26b0:	12ac089c 	adcne	r0, ip, #156, 16	; 0x9c0000
    26b4:	3c010000 	stccc	0, cr0, [r1], {-0}
    26b8:	003a9a01 	eorseq	r9, sl, r1, lsl #20
    26bc:	00000208 	andeq	r0, r0, r8, lsl #4
    26c0:	089c0100 	ldmeq	ip, {r8}
    26c4:	00001023 	andeq	r1, r0, r3, lsr #32
    26c8:	9c014701 	stcls	7, cr4, [r1], {1}
    26cc:	0208003a 	andeq	r0, r8, #58	; 0x3a
    26d0:	01000000 	mrseq	r0, (UNDEF: 0)
    26d4:	1293089c 	addsne	r0, r3, #156, 16	; 0x9c0000
    26d8:	52010000 	andpl	r0, r1, #0
    26dc:	003a9e01 	eorseq	r9, sl, r1, lsl #28
    26e0:	00000208 	andeq	r0, r0, r8, lsl #4
    26e4:	089c0100 	ldmeq	ip, {r8}
    26e8:	00000de2 	andeq	r0, r0, r2, ror #27
    26ec:	a0015e01 	andge	r5, r1, r1, lsl #28
    26f0:	0208003a 	andeq	r0, r8, #58	; 0x3a
    26f4:	01000000 	mrseq	r0, (UNDEF: 0)
    26f8:	110b089c 			; <UNDEFINED> instruction: 0x110b089c
    26fc:	6a010000 	bvs	42704 <__Stack_Size+0x42304>
    2700:	003aa201 	eorseq	sl, sl, r1, lsl #4
    2704:	00000208 	andeq	r0, r0, r8, lsl #4
    2708:	089c0100 	ldmeq	ip, {r8}
    270c:	000010f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2710:	a4017601 	strge	r7, [r1], #-1537	; 0x601
    2714:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2718:	01000000 	mrseq	r0, (UNDEF: 0)
    271c:	0e25089c 	mcreq	8, 1, r0, cr5, cr12, {4}
    2720:	81010000 	mrshi	r0, (UNDEF: 1)
    2724:	003aa601 	eorseq	sl, sl, r1, lsl #12
    2728:	00000208 	andeq	r0, r0, r8, lsl #4
    272c:	089c0100 	ldmeq	ip, {r8}
    2730:	0000105c 	andeq	r1, r0, ip, asr r0
    2734:	a8018c01 	stmdage	r1, {r0, sl, fp, pc}
    2738:	0208003a 	andeq	r0, r8, #58	; 0x3a
    273c:	01000000 	mrseq	r0, (UNDEF: 0)
    2740:	1252089c 	subsne	r0, r2, #156, 16	; 0x9c0000
    2744:	97010000 	strls	r0, [r1, -r0]
    2748:	003aaa01 	eorseq	sl, sl, r1, lsl #20
    274c:	00000208 	andeq	r0, r0, r8, lsl #4
    2750:	089c0100 	ldmeq	ip, {r8}
    2754:	00000d9b 	muleq	r0, fp, sp
    2758:	ac01a201 	sfmge	f2, 1, [r1], {1}
    275c:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2760:	01000000 	mrseq	r0, (UNDEF: 0)
    2764:	0e5e089c 	mrceq	8, 2, r0, cr14, cr12, {4}
    2768:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    276c:	003aae01 	eorseq	sl, sl, r1, lsl #28
    2770:	00000208 	andeq	r0, r0, r8, lsl #4
    2774:	089c0100 	ldmeq	ip, {r8}
    2778:	000011e0 	andeq	r1, r0, r0, ror #3
    277c:	b001ba01 	andlt	fp, r1, r1, lsl #20
    2780:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2784:	01000000 	mrseq	r0, (UNDEF: 0)
    2788:	0e84089c 	mcreq	8, 4, r0, cr4, cr12, {4}
    278c:	c5010000 	strgt	r0, [r1, #-0]
    2790:	003ab201 	eorseq	fp, sl, r1, lsl #4
    2794:	00000208 	andeq	r0, r0, r8, lsl #4
    2798:	099c0100 	ldmibeq	ip, {r8}
    279c:	00000e15 	andeq	r0, r0, r5, lsl lr
    27a0:	b401d001 	strlt	sp, [r1], #-1
    27a4:	0408003a 	streq	r0, [r8], #-58	; 0x3a
    27a8:	01000000 	mrseq	r0, (UNDEF: 0)
    27ac:	0003049c 	muleq	r3, ip, r4
    27b0:	06820a00 	streq	r0, [r2], r0, lsl #20
    27b4:	d2010000 	andle	r0, r1, #0
    27b8:	0000dd01 	andeq	sp, r0, r1, lsl #26
    27bc:	0002fa00 	andeq	pc, r2, r0, lsl #20
    27c0:	06000500 	streq	r0, [r0], -r0, lsl #10
    27c4:	08003ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip, sp}
    27c8:	00000563 	andeq	r0, r0, r3, ror #10
    27cc:	104c0800 	subne	r0, ip, r0, lsl #16
    27d0:	dc010000 	stcle	0, cr0, [r1], {-0}
    27d4:	003ab801 	eorseq	fp, sl, r1, lsl #16
    27d8:	00000208 	andeq	r0, r0, r8, lsl #4
    27dc:	089c0100 	ldmeq	ip, {r8}
    27e0:	000011d0 	ldrdeq	r1, [r0], -r0
    27e4:	ba01e701 	blt	7c3f0 <__Stack_Size+0x7bff0>
    27e8:	0208003a 	andeq	r0, r8, #58	; 0x3a
    27ec:	01000000 	mrseq	r0, (UNDEF: 0)
    27f0:	0fe4089c 	svceq	0x00e4089c
    27f4:	f2010000 	vhadd.s8	d0, d1, d0
    27f8:	003abc01 	eorseq	fp, sl, r1, lsl #24
    27fc:	00000208 	andeq	r0, r0, r8, lsl #4
    2800:	089c0100 	ldmeq	ip, {r8}
    2804:	00001124 	andeq	r1, r0, r4, lsr #2
    2808:	be01fd01 	cdplt	13, 0, cr15, cr1, cr1, {0}
    280c:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2810:	01000000 	mrseq	r0, (UNDEF: 0)
    2814:	10b9089c 	umlalsne	r0, r9, ip, r8
    2818:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    281c:	003ac002 	eorseq	ip, sl, r2
    2820:	00000208 	andeq	r0, r0, r8, lsl #4
    2824:	089c0100 	ldmeq	ip, {r8}
    2828:	000010cc 	andeq	r1, r0, ip, asr #1
    282c:	c2021301 	andgt	r1, r2, #67108864	; 0x4000000
    2830:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2834:	01000000 	mrseq	r0, (UNDEF: 0)
    2838:	1137089c 			; <UNDEFINED> instruction: 0x1137089c
    283c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2840:	003ac402 	eorseq	ip, sl, r2, lsl #8
    2844:	00000208 	andeq	r0, r0, r8, lsl #4
    2848:	089c0100 	ldmeq	ip, {r8}
    284c:	00001231 	andeq	r1, r0, r1, lsr r2
    2850:	c6022901 	strgt	r2, [r2], -r1, lsl #18
    2854:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2858:	01000000 	mrseq	r0, (UNDEF: 0)
    285c:	10df099c 	smullsne	r0, pc, ip, r9	; <UNPREDICTABLE>
    2860:	34010000 	strcc	r0, [r1], #-0
    2864:	003ac802 	eorseq	ip, sl, r2, lsl #16
    2868:	00000408 	andeq	r0, r0, r8, lsl #8
    286c:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    2870:	0a000003 	beq	2884 <__Stack_Size+0x2484>
    2874:	000002ad 	andeq	r0, r0, sp, lsr #5
    2878:	dd023601 	stcle	6, cr3, [r2, #-4]
    287c:	bc000000 	stclt	0, cr0, [r0], {-0}
    2880:	05000003 	streq	r0, [r0, #-3]
    2884:	3acc0600 	bcc	ff30408c <SCS_BASE+0x1f2f608c>
    2888:	05750800 	ldrbeq	r0, [r5, #-2048]!	; 0x800
    288c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2890:	000011be 			; <UNDEFINED> instruction: 0x000011be
    2894:	cc024001 	stcgt	0, cr4, [r2], {1}
    2898:	0208003a 	andeq	r0, r8, #58	; 0x3a
    289c:	01000000 	mrseq	r0, (UNDEF: 0)
    28a0:	0ef3089c 	mrceq	8, 7, r0, cr3, cr12, {4}
    28a4:	4b010000 	blmi	428ac <__Stack_Size+0x424ac>
    28a8:	003ace02 	eorseq	ip, sl, r2, lsl #28
    28ac:	00000208 	andeq	r0, r0, r8, lsl #4
    28b0:	089c0100 	ldmeq	ip, {r8}
    28b4:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
    28b8:	d0025601 	andle	r5, r2, r1, lsl #12
    28bc:	0208003a 	andeq	r0, r8, #58	; 0x3a
    28c0:	01000000 	mrseq	r0, (UNDEF: 0)
    28c4:	100f089c 	mulne	pc, ip, r8	; <UNPREDICTABLE>
    28c8:	61010000 	mrsvs	r0, (UNDEF: 1)
    28cc:	003ad202 	eorseq	sp, sl, r2, lsl #4
    28d0:	00000208 	andeq	r0, r0, r8, lsl #4
    28d4:	089c0100 	ldmeq	ip, {r8}
    28d8:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    28dc:	d4026c01 	strle	r6, [r2], #-3073	; 0xc01
    28e0:	0208003a 	andeq	r0, r8, #58	; 0x3a
    28e4:	01000000 	mrseq	r0, (UNDEF: 0)
    28e8:	1147089c 			; <UNDEFINED> instruction: 0x1147089c
    28ec:	77010000 	strvc	r0, [r1, -r0]
    28f0:	003ad602 	eorseq	sp, sl, r2, lsl #12
    28f4:	00000208 	andeq	r0, r0, r8, lsl #4
    28f8:	089c0100 	ldmeq	ip, {r8}
    28fc:	00000e71 	andeq	r0, r0, r1, ror lr
    2900:	d8028301 	stmdale	r2, {r0, r8, r9, pc}
    2904:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2908:	01000000 	mrseq	r0, (UNDEF: 0)
    290c:	0ff7089c 	svceq	0x00f7089c
    2910:	8f010000 	svchi	0x00010000
    2914:	003ada02 	eorseq	sp, sl, r2, lsl #20
    2918:	00000208 	andeq	r0, r0, r8, lsl #4
    291c:	089c0100 	ldmeq	ip, {r8}
    2920:	00000e97 	muleq	r0, r7, lr
    2924:	dc029a01 	stcle	10, cr9, [r2], {1}
    2928:	0208003a 	andeq	r0, r8, #58	; 0x3a
    292c:	01000000 	mrseq	r0, (UNDEF: 0)
    2930:	10a9089c 	umlalne	r0, r9, ip, r8
    2934:	a5010000 	strge	r0, [r1, #-0]
    2938:	003ade02 	eorseq	sp, sl, r2, lsl #28
    293c:	00000208 	andeq	r0, r0, r8, lsl #4
    2940:	089c0100 	ldmeq	ip, {r8}
    2944:	00001088 	andeq	r1, r0, r8, lsl #1
    2948:	e002b001 	and	fp, r2, r1
    294c:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2950:	01000000 	mrseq	r0, (UNDEF: 0)
    2954:	0faf089c 	svceq	0x00af089c
    2958:	bb010000 	bllt	42960 <__Stack_Size+0x42560>
    295c:	003ae202 	eorseq	lr, sl, r2, lsl #4
    2960:	00000208 	andeq	r0, r0, r8, lsl #4
    2964:	089c0100 	ldmeq	ip, {r8}
    2968:	00000f25 	andeq	r0, r0, r5, lsr #30
    296c:	e402c601 	str	ip, [r2], #-1537	; 0x601
    2970:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2974:	01000000 	mrseq	r0, (UNDEF: 0)
    2978:	103c089c 	mlasne	ip, ip, r8, r0
    297c:	d1010000 	mrsle	r0, (UNDEF: 1)
    2980:	003ae602 	eorseq	lr, sl, r2, lsl #12
    2984:	00000208 	andeq	r0, r0, r8, lsl #4
    2988:	089c0100 	ldmeq	ip, {r8}
    298c:	00001174 	andeq	r1, r0, r4, ror r1
    2990:	e802dc01 	stmda	r2, {r0, sl, fp, ip, lr, pc}
    2994:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2998:	01000000 	mrseq	r0, (UNDEF: 0)
    299c:	0f14089c 	svceq	0x0014089c
    29a0:	e7010000 	str	r0, [r1, -r0]
    29a4:	003aea02 	eorseq	lr, sl, r2, lsl #20
    29a8:	00000208 	andeq	r0, r0, r8, lsl #4
    29ac:	089c0100 	ldmeq	ip, {r8}
    29b0:	00000eaa 	andeq	r0, r0, sl, lsr #29
    29b4:	ec02f201 	sfm	f7, 1, [r2], {1}
    29b8:	0208003a 	andeq	r0, r8, #58	; 0x3a
    29bc:	01000000 	mrseq	r0, (UNDEF: 0)
    29c0:	1211089c 	andsne	r0, r1, #156, 16	; 0x9c0000
    29c4:	fd010000 	stc2	0, cr0, [r1, #-0]
    29c8:	003aee02 	eorseq	lr, sl, r2, lsl #28
    29cc:	00000208 	andeq	r0, r0, r8, lsl #4
    29d0:	089c0100 	ldmeq	ip, {r8}
    29d4:	000011f8 	strdeq	r1, [r0], -r8
    29d8:	f0030801 			; <UNDEFINED> instruction: 0xf0030801
    29dc:	0208003a 	andeq	r0, r8, #58	; 0x3a
    29e0:	01000000 	mrseq	r0, (UNDEF: 0)
    29e4:	0d82089c 	stceq	8, cr0, [r2, #624]	; 0x270
    29e8:	13010000 	movwne	r0, #4096	; 0x1000
    29ec:	003af203 	eorseq	pc, sl, r3, lsl #4
    29f0:	00000208 	andeq	r0, r0, r8, lsl #4
    29f4:	089c0100 	ldmeq	ip, {r8}
    29f8:	00000f81 	andeq	r0, r0, r1, lsl #31
    29fc:	f4031e01 			; <UNDEFINED> instruction: 0xf4031e01
    2a00:	0208003a 	andeq	r0, r8, #58	; 0x3a
    2a04:	01000000 	mrseq	r0, (UNDEF: 0)
    2a08:	0f35089c 	svceq	0x0035089c
    2a0c:	2a010000 	bcs	42a14 <__Stack_Size+0x42614>
    2a10:	003af603 	eorseq	pc, sl, r3, lsl #12
    2a14:	00000208 	andeq	r0, r0, r8, lsl #4
    2a18:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    2a1c:	00000bfa 	strdeq	r0, [r0], -sl
    2a20:	00dd8d01 	sbcseq	r8, sp, r1, lsl #26
    2a24:	05630000 	strbeq	r0, [r3, #-0]!
    2a28:	00050000 	andeq	r0, r5, r0
    2a2c:	0006820a 	andeq	r8, r6, sl, lsl #4
    2a30:	01d20100 	bicseq	r0, r2, r0, lsl #2
    2a34:	000000dd 	ldrdeq	r0, [r0], -sp
    2a38:	00000575 	andeq	r0, r0, r5, ror r5
    2a3c:	ad0b0005 	stcge	0, cr0, [fp, #-20]	; 0xffffffec
    2a40:	01000002 	tsteq	r0, r2
    2a44:	00dd0236 	sbcseq	r0, sp, r6, lsr r2
    2a48:	00050000 	andeq	r0, r5, r0
    2a4c:	0002d400 	andeq	sp, r2, r0, lsl #8
    2a50:	e7000400 	str	r0, [r0, -r0, lsl #8]
    2a54:	04000003 	streq	r0, [r0], #-3
    2a58:	0007f501 	andeq	pc, r7, r1, lsl #10
    2a5c:	12fa0100 	rscsne	r0, sl, #0, 2
    2a60:	11850000 	orrne	r0, r5, r0
    2a64:	3af80000 	bcc	ffe02a6c <SCS_BASE+0x1fdf4a6c>
    2a68:	00620800 	rsbeq	r0, r2, r0, lsl #16
    2a6c:	04930000 	ldreq	r0, [r3], #0
    2a70:	53020000 	movwpl	r0, #8192	; 0x2000
    2a74:	01000013 	tsteq	r0, r3, lsl r0
    2a78:	00007f04 	andeq	r7, r0, r4, lsl #30
    2a7c:	003af800 	eorseq	pc, sl, r0, lsl #16
    2a80:	00000c08 	andeq	r0, r0, r8, lsl #24
    2a84:	7f9c0100 	svcvc	0x009c0100
    2a88:	03000000 	movweq	r0, #0
    2a8c:	000012d5 	ldrdeq	r1, [r0], -r5
    2a90:	007f0401 	rsbseq	r0, pc, r1, lsl #8
    2a94:	0a4d0000 	beq	1342a9c <__Stack_Size+0x134269c>
    2a98:	d5030000 	strle	r0, [r3, #-0]
    2a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2aa0:	00007f04 	andeq	r7, r0, r4, lsl #30
    2aa4:	000a6e00 	andeq	r6, sl, r0, lsl #28
    2aa8:	06160400 	ldreq	r0, [r6], -r0, lsl #8
    2aac:	0b010000 	bleq	42ab4 <__Stack_Size+0x426b4>
    2ab0:	0000007f 	andeq	r0, r0, pc, ror r0
    2ab4:	0000006d 	andeq	r0, r0, sp, rrx
    2ab8:	00060005 	andeq	r0, r6, r5
    2abc:	5308003b 	movwpl	r0, #32827	; 0x803b
    2ac0:	07000002 	streq	r0, [r0, -r2]
    2ac4:	f3035001 	vhadd.u8	d5, d3, d1
    2ac8:	00005101 	andeq	r5, r0, r1, lsl #2
    2acc:	69050408 	stmdbvs	r5, {r3, sl}
    2ad0:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2ad4:	0000130c 	andeq	r1, r0, ip, lsl #6
    2ad8:	3b040f01 	blcc	1066e4 <__Stack_Size+0x1062e4>
    2adc:	00040800 	andeq	r0, r4, r0, lsl #16
    2ae0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ae4:	000000b6 	strheq	r0, [r0], -r6
    2ae8:	00098204 	andeq	r8, r9, r4, lsl #4
    2aec:	7f140100 	svcvc	0x00140100
    2af0:	ac000000 	stcge	0, cr0, [r0], {-0}
    2af4:	05000000 	streq	r0, [r0, #-0]
    2af8:	3b080a00 	blcc	205300 <__Stack_Size+0x204f00>
    2afc:	02640800 	rsbeq	r0, r4, #0, 16
    2b00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2b04:	00001325 	andeq	r1, r0, r5, lsr #6
    2b08:	3b081701 	blcc	208714 <__Stack_Size+0x208314>
    2b0c:	00040800 	andeq	r0, r4, r0, lsl #16
    2b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b14:	000000e6 	andeq	r0, r0, r6, ror #1
    2b18:	00007b04 	andeq	r7, r0, r4, lsl #22
    2b1c:	7f1b0100 	svcvc	0x001b0100
    2b20:	dc000000 	stcle	0, cr0, [r0], {-0}
    2b24:	05000000 	streq	r0, [r0, #-0]
    2b28:	3b0c0a00 	blcc	305330 <__Stack_Size+0x304f30>
    2b2c:	02750800 	rsbseq	r0, r5, #0, 16
    2b30:	02000000 	andeq	r0, r0, #0
    2b34:	00001333 	andeq	r1, r0, r3, lsr r3
    2b38:	007f1e01 	rsbseq	r1, pc, r1, lsl #28
    2b3c:	3b0c0000 	blcc	302b44 <__Stack_Size+0x302744>
    2b40:	001e0800 	andseq	r0, lr, r0, lsl #16
    2b44:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b48:	00000145 	andeq	r0, r0, r5, asr #2
    2b4c:	0012de03 	andseq	sp, r2, r3, lsl #28
    2b50:	451e0100 	ldrmi	r0, [lr, #-256]	; 0x100
    2b54:	8f000001 	svchi	0x00000001
    2b58:	0300000a 	movweq	r0, #10
    2b5c:	0000133e 	andeq	r1, r0, lr, lsr r3
    2b60:	007f1e01 	rsbseq	r1, pc, r1, lsl #28
    2b64:	0aad0000 	beq	feb42b6c <SCS_BASE+0x1eb34b6c>
    2b68:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    2b6c:	4b250100 	blmi	942f74 <__Stack_Size+0x942b74>
    2b70:	cb000001 	blgt	2b7c <__Stack_Size+0x277c>
    2b74:	0400000a 	streq	r0, [r0], #-10
    2b78:	00000486 	andeq	r0, r0, r6, lsl #9
    2b7c:	007f2701 	rsbseq	r2, pc, r1, lsl #14
    2b80:	013b0000 	teqeq	fp, r0
    2b84:	00050000 	andeq	r0, r5, r0
    2b88:	003b220c 	eorseq	r2, fp, ip, lsl #4
    2b8c:	00028608 	andeq	r8, r2, r8, lsl #12
    2b90:	040d0000 	streq	r0, [sp], #-0
    2b94:	0000014b 	andeq	r0, r0, fp, asr #2
    2b98:	af08010e 	svcge	0x0008010e
    2b9c:	0200000a 	andeq	r0, r0, #10
    2ba0:	0000131a 	andeq	r1, r0, sl, lsl r3
    2ba4:	007f2c01 	rsbseq	r2, pc, r1, lsl #24
    2ba8:	3b2a0000 	blcc	a82bb0 <__Stack_Size+0xa827b0>
    2bac:	00240800 	eoreq	r0, r4, r0, lsl #16
    2bb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bb4:	000001d5 	ldrdeq	r0, [r0], -r5
    2bb8:	0012de03 	andseq	sp, r2, r3, lsl #28
    2bbc:	452c0100 	strmi	r0, [ip, #-256]!	; 0x100
    2bc0:	00000001 	andeq	r0, r0, r1
    2bc4:	0300000b 	movweq	r0, #11
    2bc8:	0000133e 	andeq	r1, r0, lr, lsr r3
    2bcc:	007f2c01 	rsbseq	r2, pc, r1, lsl #24
    2bd0:	0b1e0000 	bleq	782bd8 <__Stack_Size+0x7827d8>
    2bd4:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    2bd8:	4b330100 	blmi	cc2fe0 <__Stack_Size+0xcc2be0>
    2bdc:	3c000001 	stccc	0, cr0, [r0], {1}
    2be0:	0f00000b 	svceq	0x0000000b
    2be4:	08003b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip, sp}
    2be8:	00000010 	andeq	r0, r0, r0, lsl r0
    2bec:	0005d204 	andeq	sp, r5, r4, lsl #4
    2bf0:	7f360100 	svcvc	0x00360100
    2bf4:	b0000000 	andlt	r0, r0, r0
    2bf8:	05000001 	streq	r0, [r0, #-1]
    2bfc:	09760400 	ldmdbeq	r6!, {sl}^
    2c00:	37010000 	strcc	r0, [r1, -r0]
    2c04:	0000007f 	andeq	r0, r0, pc, ror r0
    2c08:	000001c1 	andeq	r0, r0, r1, asr #3
    2c0c:	3c0c0005 	stccc	0, cr0, [ip], {5}
    2c10:	9708003b 	smladxls	r8, fp, r0, r0
    2c14:	0c000002 	stceq	0, cr0, [r0], {2}
    2c18:	08003b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, sp}
    2c1c:	000002a8 	andeq	r0, r0, r8, lsr #5
    2c20:	e6090000 	str	r0, [r9], -r0
    2c24:	01000012 	tsteq	r0, r2, lsl r0
    2c28:	003b4e3e 	eorseq	r4, fp, lr, lsr lr
    2c2c:	00000808 	andeq	r0, r0, r8, lsl #16
    2c30:	1f9c0100 	svcne	0x009c0100
    2c34:	03000002 	movweq	r0, #2
    2c38:	00001348 	andeq	r1, r0, r8, asr #6
    2c3c:	007f3e01 	rsbseq	r3, pc, r1, lsl #28
    2c40:	0b7c0000 	bleq	1f02c48 <__Stack_Size+0x1f02848>
    2c44:	e1040000 	mrs	r0, (UNDEF: 4)
    2c48:	01000009 	tsteq	r0, r9
    2c4c:	00007f44 	andeq	r7, r0, r4, asr #30
    2c50:	00020a00 	andeq	r0, r2, r0, lsl #20
    2c54:	10000500 	andne	r0, r0, r0, lsl #10
    2c58:	08003b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, ip, sp}
    2c5c:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    2c60:	06500107 	ldrbeq	r0, [r0], -r7, lsl #2
    2c64:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    2c68:	00001e64 	andeq	r1, r0, r4, ror #28
    2c6c:	0012c502 	andseq	ip, r2, r2, lsl #10
    2c70:	7f470100 	svcvc	0x00470100
    2c74:	56000000 	strpl	r0, [r0], -r0
    2c78:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    2c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c80:	0002539c 	muleq	r2, ip, r3
    2c84:	09690400 	stmdbeq	r9!, {sl}^
    2c88:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2c8c:	0000007f 	andeq	r0, r0, pc, ror r0
    2c90:	00000249 	andeq	r0, r0, r9, asr #4
    2c94:	5a0a0005 	bpl	282cb0 <__Stack_Size+0x2828b0>
    2c98:	ca08003b 	bgt	202d8c <__Stack_Size+0x20298c>
    2c9c:	00000002 	andeq	r0, r0, r2
    2ca0:	00061604 	andeq	r1, r6, r4, lsl #12
    2ca4:	7f0b0100 	svcvc	0x000b0100
    2ca8:	64000000 	strvs	r0, [r0], #-0
    2cac:	05000002 	streq	r0, [r0, #-2]
    2cb0:	09820400 	stmibeq	r2, {sl}
    2cb4:	14010000 	strne	r0, [r1], #-0
    2cb8:	0000007f 	andeq	r0, r0, pc, ror r0
    2cbc:	00000275 	andeq	r0, r0, r5, ror r2
    2cc0:	7b040005 	blvc	102cdc <__Stack_Size+0x1028dc>
    2cc4:	01000000 	mrseq	r0, (UNDEF: 0)
    2cc8:	00007f1b 	andeq	r7, r0, fp, lsl pc
    2ccc:	00028600 	andeq	r8, r2, r0, lsl #12
    2cd0:	04000500 	streq	r0, [r0], #-1280	; 0x500
    2cd4:	00000486 	andeq	r0, r0, r6, lsl #9
    2cd8:	007f2701 	rsbseq	r2, pc, r1, lsl #14
    2cdc:	02970000 	addseq	r0, r7, #0
    2ce0:	00050000 	andeq	r0, r5, r0
    2ce4:	0005d204 	andeq	sp, r5, r4, lsl #4
    2ce8:	7f360100 	svcvc	0x00360100
    2cec:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2cf0:	05000002 	streq	r0, [r0, #-2]
    2cf4:	09760400 	ldmdbeq	r6!, {sl}^
    2cf8:	37010000 	strcc	r0, [r1, -r0]
    2cfc:	0000007f 	andeq	r0, r0, pc, ror r0
    2d00:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    2d04:	e1040005 	tst	r4, r5
    2d08:	01000009 	tsteq	r0, r9
    2d0c:	00007f44 	andeq	r7, r0, r4, asr #30
    2d10:	0002ca00 	andeq	ip, r2, r0, lsl #20
    2d14:	11000500 	tstne	r0, r0, lsl #10
    2d18:	00000969 	andeq	r0, r0, r9, ror #18
    2d1c:	007f4c01 	rsbseq	r4, pc, r1, lsl #24
    2d20:	00050000 	andeq	r0, r5, r0
    2d24:	00073000 	andeq	r3, r7, r0
    2d28:	de000400 	cfcpysle	mvf0, mvf0
    2d2c:	04000004 	streq	r0, [r0], #-4
    2d30:	0007f501 	andeq	pc, r7, r1, lsl #10
    2d34:	14060100 	strne	r0, [r6], #-256	; 0x100
    2d38:	11850000 	orrne	r0, r5, r0
    2d3c:	3b5c0000 	blcc	1702d44 <__Stack_Size+0x1702944>
    2d40:	037c0800 	cmneq	ip, #0, 16
    2d44:	04f90000 	ldrbteq	r0, [r9], #0
    2d48:	71020000 	mrsvc	r0, (UNDEF: 2)
    2d4c:	01000013 	tsteq	r0, r3, lsl r0
    2d50:	005c0128 	subseq	r0, ip, r8, lsr #2
    2d54:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    2d58:	5c2a0100 	stfpls	f0, [sl], #-0
    2d5c:	04000000 	streq	r0, [r0], #-0
    2d60:	0000141e 	andeq	r1, r0, lr, lsl r4
    2d64:	005c2b01 	subseq	r2, ip, r1, lsl #22
    2d68:	1a040000 	bne	102d70 <__Stack_Size+0x102970>
    2d6c:	01000014 	tsteq	r0, r4, lsl r0
    2d70:	00005c2b 	andeq	r5, r0, fp, lsr #24
    2d74:	13fd0400 	mvnsne	r0, #0, 8
    2d78:	2c010000 	stccs	0, cr0, [r1], {-0}
    2d7c:	0000005c 	andeq	r0, r0, ip, asr r0
    2d80:	08010500 	stmdaeq	r1, {r8, sl}
    2d84:	00000aaf 	andeq	r0, r0, pc, lsr #21
    2d88:	0013ef02 	andseq	lr, r3, r2, lsl #30
    2d8c:	016b0100 	cmneq	fp, r0, lsl #2
    2d90:	00000098 	muleq	r0, r8, r0
    2d94:	01006903 	tsteq	r0, r3, lsl #18
    2d98:	00005c6d 	andeq	r5, r0, sp, ror #24
    2d9c:	006a0300 	rsbeq	r0, sl, r0, lsl #6
    2da0:	005c6d01 	subseq	r6, ip, r1, lsl #26
    2da4:	7f040000 	svcvc	0x00040000
    2da8:	01000013 	tsteq	r0, r3, lsl r0
    2dac:	00005c6d 	andeq	r5, r0, sp, ror #24
    2db0:	13fd0400 	mvnsne	r0, #0, 8
    2db4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2db8:	0000005c 	andeq	r0, r0, ip, asr r0
    2dbc:	146e0600 	strbtne	r0, [lr], #-1536	; 0x600
    2dc0:	d5010000 	strle	r0, [r1, #-0]
    2dc4:	147e0701 	ldrbtne	r0, [lr], #-1793	; 0x701
    2dc8:	11010000 	mrsne	r0, (UNDEF: 1)
    2dcc:	0000d601 	andeq	sp, r0, r1, lsl #12
    2dd0:	00d60100 	sbcseq	r0, r6, r0, lsl #2
    2dd4:	e7080000 	str	r0, [r8, -r0]
    2dd8:	01000013 	tsteq	r0, r3, lsl r0
    2ddc:	00d60111 	sbcseq	r0, r6, r1, lsl r1
    2de0:	bb080000 	bllt	202de8 <__Stack_Size+0x2029e8>
    2de4:	01000013 	tsteq	r0, r3, lsl r0
    2de8:	00d60111 	sbcseq	r0, r6, r1, lsl r1
    2dec:	b5090000 	strlt	r0, [r9, #-0]
    2df0:	0100000b 	tsteq	r0, fp
    2df4:	00dd0113 	sbcseq	r0, sp, r3, lsl r1
    2df8:	0a000000 	beq	2e00 <__Stack_Size+0x2a00>
    2dfc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2e00:	02050074 	andeq	r0, r5, #116	; 0x74
    2e04:	000c6807 	andeq	r6, ip, r7, lsl #16
    2e08:	13df0700 	bicsne	r0, pc, #0, 14
    2e0c:	1b010000 	blne	42e14 <__Stack_Size+0x42a14>
    2e10:	0000d601 	andeq	sp, r0, r1, lsl #12
    2e14:	010e0100 	mrseq	r0, (UNDEF: 30)
    2e18:	b5080000 	strlt	r0, [r8, #-0]
    2e1c:	0100000b 	tsteq	r0, fp
    2e20:	00d6011b 	sbcseq	r0, r6, fp, lsl r1
    2e24:	40090000 	andmi	r0, r9, r0
    2e28:	01000014 	tsteq	r0, r4, lsl r0
    2e2c:	00dd011d 	sbcseq	r0, sp, sp, lsl r1
    2e30:	07000000 	streq	r0, [r0, -r0]
    2e34:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    2e38:	d6012301 	strle	r2, [r1], -r1, lsl #6
    2e3c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e40:	00000138 	andeq	r0, r0, r8, lsr r1
    2e44:	000bb508 	andeq	fp, fp, r8, lsl #10
    2e48:	01230100 			; <UNDEFINED> instruction: 0x01230100
    2e4c:	000000d6 	ldrdeq	r0, [r0], -r6
    2e50:	00144009 	andseq	r4, r4, r9
    2e54:	01250100 			; <UNDEFINED> instruction: 0x01250100
    2e58:	000000dd 	ldrdeq	r0, [r0], -sp
    2e5c:	0cd40b00 	vldmiaeq	r4, {d16-d15}
    2e60:	13010000 	movwne	r0, #4096	; 0x1000
    2e64:	000000d6 	ldrdeq	r0, [r0], -r6
    2e68:	08003b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, sp}
    2e6c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2e70:	019f9c01 	orrseq	r9, pc, r1, lsl #24
    2e74:	d50c0000 	strle	r0, [ip, #-0]
    2e78:	01000012 	tsteq	r0, r2, lsl r0
    2e7c:	0000d613 	andeq	sp, r0, r3, lsl r6
    2e80:	000b9d00 	andeq	r9, fp, r0, lsl #26
    2e84:	14fd0c00 	ldrbtne	r0, [sp], #3072	; 0xc00
    2e88:	13010000 	movwne	r0, #4096	; 0x1000
    2e8c:	000000d6 	ldrdeq	r0, [r0], -r6
    2e90:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    2e94:	0000d50d 	andeq	sp, r0, sp, lsl #10
    2e98:	d6150100 	ldrle	r0, [r5], -r0, lsl #2
    2e9c:	ec000000 	stc	0, cr0, [r0], {-0}
    2ea0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2ea4:	08003b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp, ip, sp}
    2ea8:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    2eac:	0b51010f 	bleq	14432f0 <__Stack_Size+0x1442ef0>
    2eb0:	1e84800c 	cdpne	0, 8, cr8, cr4, cr12, {0}
    2eb4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2eb8:	0f1b0123 	svceq	0x001b0123
    2ebc:	f3035001 	vhadd.u8	d5, d3, d1
    2ec0:	00005001 	andeq	r5, r0, r1
    2ec4:	00150510 	andseq	r0, r5, r0, lsl r5
    2ec8:	88230100 	stmdahi	r3!, {r8}
    2ecc:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    2ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ed4:	0001be9c 	muleq	r1, ip, lr
    2ed8:	3b8c1100 	blcc	fe3072e0 <SCS_BASE+0x1e2f92e0>
    2edc:	06cf0800 	strbeq	r0, [pc], r0, lsl #16
    2ee0:	12000000 	andne	r0, r0, #0
    2ee4:	00000025 	andeq	r0, r0, r5, lsr #32
    2ee8:	08003b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip, sp}
    2eec:	0000009c 	muleq	r0, ip, r0
    2ef0:	02449c01 	subeq	r9, r4, #256	; 0x100
    2ef4:	31130000 	tstcc	r3, r0
    2ef8:	3b000000 	blcc	2f00 <__Stack_Size+0x2b00>
    2efc:	1400000c 	strne	r0, [r0], #-12
    2f00:	0000003a 	andeq	r0, r0, sl, lsr r0
    2f04:	00004514 	andeq	r4, r0, r4, lsl r5
    2f08:	00501300 	subseq	r1, r0, r0, lsl #6
    2f0c:	0c7b0000 	ldcleq	0, cr0, [fp], #-0
    2f10:	ea150000 	b	542f18 <__Stack_Size+0x542b18>
    2f14:	3e08003b 	mcrcc	0, 0, r0, cr8, cr11, {1}
    2f18:	3a000000 	bcc	2f20 <__Stack_Size+0x2b20>
    2f1c:	14000002 	strne	r0, [r0], #-2
    2f20:	00000031 	andeq	r0, r0, r1, lsr r0
    2f24:	00003a13 	andeq	r3, r0, r3, lsl sl
    2f28:	000ca500 	andeq	sl, ip, r0, lsl #10
    2f2c:	00451300 	subeq	r1, r5, r0, lsl #6
    2f30:	0cb80000 	ldceq	0, cr0, [r8]
    2f34:	50140000 	andspl	r0, r4, r0
    2f38:	16000000 	strne	r0, [r0], -r0
    2f3c:	08003bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    2f40:	000006d6 	ldrdeq	r0, [r0], -r6
    2f44:	00000230 	andeq	r0, r0, r0, lsr r2
    2f48:	0251010f 	subseq	r0, r1, #-1073741821	; 0xc0000003
    2f4c:	010f0074 	tsteq	pc, r4, ror r0	; <UNPREDICTABLE>
    2f50:	04760250 	ldrbteq	r0, [r6], #-592	; 0x250
    2f54:	3c1a1700 	ldccc	7, cr1, [sl], {-0}
    2f58:	06f60800 	ldrbteq	r0, [r6], r0, lsl #16
    2f5c:	17000000 	strne	r0, [r0, -r0]
    2f60:	08003bea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, fp, ip, sp}
    2f64:	00000707 	andeq	r0, r0, r7, lsl #14
    2f68:	00631200 	rsbeq	r1, r3, r0, lsl #4
    2f6c:	3c280000 	stccc	0, cr0, [r8], #-0
    2f70:	01500800 	cmpeq	r0, r0, lsl #16
    2f74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f78:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    2f7c:	00006f14 	andeq	r6, r0, r4, lsl pc
    2f80:	00781400 	rsbseq	r1, r8, r0, lsl #8
    2f84:	81130000 	tsthi	r3, r0
    2f88:	cb000000 	blgt	2f90 <__Stack_Size+0x2b90>
    2f8c:	1800000c 	stmdane	r0, {r2, r3}
    2f90:	0000008c 	andeq	r0, r0, ip, lsl #1
    2f94:	00181900 	andseq	r1, r8, r0, lsl #18
    2f98:	02a70000 	adceq	r0, r7, #0
    2f9c:	6f130000 	svcvs	0x00130000
    2fa0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    2fa4:	1300000c 	movwne	r0, #12
    2fa8:	00000078 	andeq	r0, r0, r8, ror r0
    2fac:	00000d4d 	andeq	r0, r0, sp, asr #26
    2fb0:	00008113 	andeq	r8, r0, r3, lsl r1
    2fb4:	000d8100 	andeq	r8, sp, r0, lsl #2
    2fb8:	008c1300 	addeq	r1, ip, r0, lsl #6
    2fbc:	0d940000 	ldceq	0, cr0, [r4]
    2fc0:	24170000 	ldrcs	r0, [r7], #-0
    2fc4:	0e08003d 	mcreq	0, 0, r0, cr8, cr13, {1}
    2fc8:	00000007 	andeq	r0, r0, r7
    2fcc:	003c6417 	eorseq	r6, ip, r7, lsl r4
    2fd0:	00070e08 	andeq	r0, r7, r8, lsl #28
    2fd4:	3c7c1700 	ldclcc	7, cr1, [ip], #-0
    2fd8:	07280800 	streq	r0, [r8, -r0, lsl #16]!
    2fdc:	12000000 	andne	r0, r0, #0
    2fe0:	00000098 	muleq	r0, r8, r0
    2fe4:	08003d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, sp}
    2fe8:	00000020 	andeq	r0, r0, r0, lsr #32
    2fec:	02e09c01 	rsceq	r9, r0, #256	; 0x100
    2ff0:	7e170000 	cdpvc	0, 1, cr0, cr7, cr0, {0}
    2ff4:	2508003d 	strcs	r0, [r8, #-61]	; 0x3d
    2ff8:	17000000 	strne	r0, [r0, -r0]
    2ffc:	08003d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp, ip, sp}
    3000:	00000063 	andeq	r0, r0, r3, rrx
    3004:	07401a00 	strbeq	r1, [r0, -r0, lsl #20]
    3008:	e6010000 	str	r0, [r1], -r0
    300c:	000000d6 	ldrdeq	r0, [r0], -r6
    3010:	08003d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, sp}
    3014:	0000000c 	andeq	r0, r0, ip
    3018:	45109c01 	ldrmi	r9, [r0, #-3073]	; 0xc01
    301c:	01000014 	tsteq	r0, r4, lsl r0
    3020:	003da4eb 	eorseq	sl, sp, fp, ror #9
    3024:	00000c08 	andeq	r0, r0, r8, lsl #24
    3028:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    302c:	1b000003 	blne	3040 <__Stack_Size+0x2c40>
    3030:	01006469 	tsteq	r0, r9, ror #8
    3034:	0000d6eb 	andeq	sp, r0, fp, ror #13
    3038:	00500100 	subseq	r0, r0, r0, lsl #2
    303c:	0014b410 	andseq	fp, r4, r0, lsl r4
    3040:	b0f00100 	rscslt	r0, r0, r0, lsl #2
    3044:	0c08003d 	stceq	0, cr0, [r8], {61}	; 0x3d
    3048:	01000000 	mrseq	r0, (UNDEF: 0)
    304c:	00033a9c 	muleq	r3, ip, sl
    3050:	14c51c00 	strbne	r1, [r5], #3072	; 0xc00
    3054:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    3058:	000000d6 	ldrdeq	r0, [r0], -r6
    305c:	10005001 	andne	r5, r0, r1
    3060:	000013c4 	andeq	r1, r0, r4, asr #7
    3064:	3dbcf501 	cfldr32cc	mvfx15, [ip, #4]!
    3068:	000c0800 	andeq	r0, ip, r0, lsl #16
    306c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3070:	0000036c 	andeq	r0, r0, ip, ror #6
    3074:	0014e30c 	andseq	lr, r4, ip, lsl #6
    3078:	d6f50100 	ldrbtle	r0, [r5], r0, lsl #2
    307c:	c0000000 	andgt	r0, r0, r0
    3080:	1c00000d 	stcne	0, cr0, [r0], {13}
    3084:	00001468 	andeq	r1, r0, r8, ror #8
    3088:	00d6f501 	sbcseq	pc, r6, r1, lsl #10
    308c:	51010000 	mrspl	r0, (UNDEF: 1)
    3090:	14281000 	strtne	r1, [r8], #-0
    3094:	fa010000 	blx	4309c <__Stack_Size+0x42c9c>
    3098:	08003dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, ip, sp}
    309c:	0000000c 	andeq	r0, r0, ip
    30a0:	038f9c01 	orreq	r9, pc, #256	; 0x100
    30a4:	ac1c0000 	ldcge	0, cr0, [ip], {-0}
    30a8:	01000013 	tsteq	r0, r3, lsl r0
    30ac:	0000d6fa 	strdeq	sp, [r0], -sl
    30b0:	00500100 	subseq	r0, r0, r0, lsl #2
    30b4:	000d420b 	andeq	r4, sp, fp, lsl #4
    30b8:	d6ff0100 	ldrbtle	r0, [pc], r0, lsl #2
    30bc:	d4000000 	strle	r0, [r0], #-0
    30c0:	1408003d 	strne	r0, [r8], #-61	; 0x3d
    30c4:	01000000 	mrseq	r0, (UNDEF: 0)
    30c8:	0003b89c 	muleq	r3, ip, r8
    30cc:	14d10c00 	ldrbne	r0, [r1], #3072	; 0xc00
    30d0:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    30d4:	000000d6 	ldrdeq	r0, [r0], -r6
    30d8:	00000de6 	andeq	r0, r0, r6, ror #27
    30dc:	139b1d00 	orrsne	r1, fp, #0, 26
    30e0:	07010000 	streq	r0, [r1, -r0]
    30e4:	0000d601 	andeq	sp, r0, r1, lsl #12
    30e8:	003de800 	eorseq	lr, sp, r0, lsl #16
    30ec:	00000c08 	andeq	r0, r0, r8, lsl #24
    30f0:	1e9c0100 	fmlnee	f0, f4, f0
    30f4:	0000148b 	andeq	r1, r0, fp, lsl #9
    30f8:	d6010c01 	strle	r0, [r1], -r1, lsl #24
    30fc:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    3100:	1008003d 	andne	r0, r8, sp, lsr r0
    3104:	01000000 	mrseq	r0, (UNDEF: 0)
    3108:	0003f99c 	muleq	r3, ip, r9
    310c:	14e31f00 	strbtne	r1, [r3], #3840	; 0xf00
    3110:	0c010000 	stceq	0, cr0, [r1], {-0}
    3114:	0000d601 	andeq	sp, r0, r1, lsl #12
    3118:	000e0700 	andeq	r0, lr, r0, lsl #14
    311c:	a0120000 	andsge	r0, r2, r0
    3120:	04000000 	streq	r0, [r0], #-0
    3124:	0808003e 	stmdaeq	r8, {r1, r2, r3, r4, r5}
    3128:	01000000 	mrseq	r0, (UNDEF: 0)
    312c:	0004269c 	muleq	r4, ip, r6
    3130:	00b12000 	adcseq	r2, r1, r0
    3134:	0e3b0000 	cdpeq	0, 3, cr0, cr11, cr0, {0}
    3138:	bd210000 	stclt	0, cr0, [r1, #-0]
    313c:	01000000 	mrseq	r0, (UNDEF: 0)
    3140:	00c91351 	sbceq	r1, r9, r1, asr r3
    3144:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    3148:	12000000 	andne	r0, r0, #0
    314c:	000000e4 	andeq	r0, r0, r4, ror #1
    3150:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
    3154:	00000004 	andeq	r0, r0, r4
    3158:	044c9c01 	strbeq	r9, [ip], #-3073	; 0xc01
    315c:	f5200000 			; <UNDEFINED> instruction: 0xf5200000
    3160:	91000000 	mrsls	r0, (UNDEF: 0)
    3164:	1300000e 	movwne	r0, #14
    3168:	00000101 	andeq	r0, r0, r1, lsl #2
    316c:	00000eb2 			; <UNDEFINED> instruction: 0x00000eb2
    3170:	010e1200 	mrseq	r1, LR_fiq
    3174:	3e100000 	cdpcc	0, 1, cr0, cr0, cr0, {0}
    3178:	00060800 	andeq	r0, r6, r0, lsl #16
    317c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3180:	00000472 	andeq	r0, r0, r2, ror r4
    3184:	00011f20 	andeq	r1, r1, r0, lsr #30
    3188:	000edb00 	andeq	sp, lr, r0, lsl #22
    318c:	012b1300 			; <UNDEFINED> instruction: 0x012b1300
    3190:	0efc0000 	cdpeq	0, 15, cr0, cr12, cr0, {0}
    3194:	22000000 	andcs	r0, r0, #0
    3198:	00001385 	andeq	r1, r0, r5, lsl #7
    319c:	16012c01 	strne	r2, [r1], -r1, lsl #24
    31a0:	1a08003e 	bne	2032a0 <__Stack_Size+0x202ea0>
    31a4:	01000000 	mrseq	r0, (UNDEF: 0)
    31a8:	0004a19c 	muleq	r4, ip, r1
    31ac:	64692300 	strbtvs	r2, [r9], #-768	; 0x300
    31b0:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    31b4:	000000d6 	ldrdeq	r0, [r0], -r6
    31b8:	00000f2b 	andeq	r0, r0, fp, lsr #30
    31bc:	003e2c11 	eorseq	r2, lr, r1, lsl ip
    31c0:	00009808 	andeq	r9, r0, r8, lsl #16
    31c4:	fd1e0000 	ldc2	0, cr0, [lr, #-0]
    31c8:	0100000a 	tsteq	r0, sl
    31cc:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    31d0:	3e300000 	cdpcc	0, 3, cr0, cr0, cr0, {0}
    31d4:	00280800 	eoreq	r0, r8, r0, lsl #16
    31d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    31dc:	000004e4 	andeq	r0, r0, r4, ror #9
    31e0:	00646923 	rsbeq	r6, r4, r3, lsr #18
    31e4:	d6013701 	strle	r3, [r1], -r1, lsl #14
    31e8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    31ec:	1f00000f 	svcne	0x0000000f
    31f0:	00001b3f 	andeq	r1, r0, pc, lsr fp
    31f4:	d6013701 	strle	r3, [r1], -r1, lsl #14
    31f8:	6d000000 	stcvs	0, cr0, [r0, #-0]
    31fc:	1700000f 	strne	r0, [r0, -pc]
    3200:	08003e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, sp}
    3204:	00000098 	muleq	r0, r8, r0
    3208:	03ce2200 	biceq	r2, lr, #0, 4
    320c:	46010000 	strmi	r0, [r1], -r0
    3210:	003e5801 	eorseq	r5, lr, r1, lsl #16
    3214:	00002408 	andeq	r2, r0, r8, lsl #8
    3218:	339c0100 	orrscc	r0, ip, #0, 2
    321c:	23000005 	movwcs	r0, #5
    3220:	01006469 	tsteq	r0, r9, ror #8
    3224:	00d60146 	sbcseq	r0, r6, r6, asr #2
    3228:	0f8e0000 	svceq	0x008e0000
    322c:	3f1f0000 	svccc	0x001f0000
    3230:	0100001b 	tsteq	r0, fp, lsl r0
    3234:	00d60146 	sbcseq	r0, r6, r6, asr #2
    3238:	0faf0000 	svceq	0x00af0000
    323c:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    3240:	01000014 	tsteq	r0, r4, lsl r0
    3244:	00d60146 	sbcseq	r0, r6, r6, asr #2
    3248:	0fd00000 	svceq	0x00d00000
    324c:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
    3250:	9808003e 	stmdals	r8, {r1, r2, r3, r4, r5}
    3254:	00000000 	andeq	r0, r0, r0
    3258:	000bac1e 	andeq	sl, fp, lr, lsl ip
    325c:	01530100 	cmpeq	r3, r0, lsl #2
    3260:	000000d6 	ldrdeq	r0, [r0], -r6
    3264:	08003e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
    3268:	00000030 	andeq	r0, r0, r0, lsr r0
    326c:	05b09c01 	ldreq	r9, [r0, #3073]!	; 0xc01
    3270:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3274:	53010064 	movwpl	r0, #4196	; 0x1064
    3278:	0000d601 	andeq	sp, r0, r1, lsl #12
    327c:	000ff100 	andeq	pc, pc, r0, lsl #2
    3280:	1b3f1f00 	blne	fcae88 <__Stack_Size+0xfcaa88>
    3284:	53010000 	movwpl	r0, #4096	; 0x1000
    3288:	0000d601 	andeq	sp, r0, r1, lsl #12
    328c:	00101200 	andseq	r1, r0, r0, lsl #4
    3290:	00a02400 	adceq	r2, r0, r0, lsl #8
    3294:	3e980000 	cdpcc	0, 9, cr0, cr8, cr0, {0}
    3298:	000c0800 	andeq	r0, ip, r0, lsl #16
    329c:	62010000 	andvs	r0, r1, #0
    32a0:	0005a601 	andeq	sl, r5, r1, lsl #12
    32a4:	00bd2000 	adcseq	r2, sp, r0
    32a8:	10330000 	eorsne	r0, r3, r0
    32ac:	b1200000 			; <UNDEFINED> instruction: 0xb1200000
    32b0:	70000000 	andvc	r0, r0, r0
    32b4:	25000010 	strcs	r0, [r0, #-16]
    32b8:	08003e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp}
    32bc:	0000000c 	andeq	r0, r0, ip
    32c0:	0000c913 	andeq	ip, r0, r3, lsl r9
    32c4:	00109800 	andseq	r9, r0, r0, lsl #16
    32c8:	17000000 	strne	r0, [r0, -r0]
    32cc:	08003e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp}
    32d0:	00000098 	muleq	r0, r8, r0
    32d4:	044f2200 	strbeq	r2, [pc], #-512	; 32dc <__Stack_Size+0x2edc>
    32d8:	65010000 	strvs	r0, [r1, #-0]
    32dc:	003eac01 	eorseq	sl, lr, r1, lsl #24
    32e0:	00002c08 	andeq	r2, r0, r8, lsl #24
    32e4:	289c0100 	ldmcs	ip, {r8}
    32e8:	23000006 	movwcs	r0, #6
    32ec:	01006469 	tsteq	r0, r9, ror #8
    32f0:	00d60165 	sbcseq	r0, r6, r5, ror #2
    32f4:	10dc0000 	sbcsne	r0, ip, r0
    32f8:	3f1f0000 	svccc	0x001f0000
    32fc:	0100001b 	tsteq	r0, fp, lsl r0
    3300:	00d60165 	sbcseq	r0, r6, r5, ror #2
    3304:	10fd0000 	rscsne	r0, sp, r0
    3308:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    330c:	01000014 	tsteq	r0, r4, lsl r0
    3310:	00d60165 	sbcseq	r0, r6, r5, ror #2
    3314:	111e0000 	tstne	lr, r0
    3318:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    331c:	b8000001 	stmdalt	r0, {r0}
    3320:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    3324:	01000000 	mrseq	r0, (UNDEF: 0)
    3328:	061e016d 	ldreq	r0, [lr], -sp, ror #2
    332c:	1f260000 	svcne	0x00260000
    3330:	25000001 	strcs	r0, [r0, #-1]
    3334:	08003eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, sp}
    3338:	00000004 	andeq	r0, r0, r4
    333c:	00012b14 	andeq	r2, r1, r4, lsl fp
    3340:	11000000 	mrsne	r0, (UNDEF: 0)
    3344:	08003ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, ip, sp}
    3348:	00000098 	muleq	r0, r8, r0
    334c:	005c2700 	subseq	r2, ip, r0, lsl #14
    3350:	06380000 	ldrteq	r0, [r8], -r0
    3354:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    3358:	9f000006 	svcls	0x00000006
    335c:	07040500 	streq	r0, [r4, -r0, lsl #10]
    3360:	00000a6d 	andeq	r0, r0, sp, ror #20
    3364:	0014e929 	andseq	lr, r4, r9, lsr #18
    3368:	280b0100 	stmdacs	fp, {r8}
    336c:	05000006 	streq	r0, [r0, #-6]
    3370:	00013403 	andeq	r3, r1, r3, lsl #8
    3374:	005c2720 	subseq	r2, ip, r0, lsr #14
    3378:	06600000 	strbteq	r0, [r0], -r0
    337c:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    3380:	45000006 	strmi	r0, [r0, #-6]
    3384:	14592900 	ldrbne	r2, [r9], #-2304	; 0x900
    3388:	0c010000 	stceq	0, cr0, [r1], {-0}
    338c:	00000650 	andeq	r0, r0, r0, asr r6
    3390:	01d60305 	bicseq	r0, r6, r5, lsl #6
    3394:	60292000 	eorvs	r2, r9, r0
    3398:	01000013 	tsteq	r0, r3, lsl r0
    339c:	00005c0d 	andeq	r5, r0, sp, lsl #24
    33a0:	d5030500 	strle	r0, [r3, #-1280]	; 0x500
    33a4:	29200001 	stmdbcs	r0!, {r0}
    33a8:	000014a6 	andeq	r1, r0, r6, lsr #9
    33ac:	005c0e01 	subseq	r0, ip, r1, lsl #28
    33b0:	03050000 	movweq	r0, #20480	; 0x5000
    33b4:	200001d4 	ldrdcs	r0, [r0], -r4
    33b8:	00138e29 	andseq	r8, r3, r9, lsr #28
    33bc:	d60f0100 	strle	r0, [pc], -r0, lsl #2
    33c0:	05000000 	streq	r0, [r0, #-0]
    33c4:	00001403 	andeq	r1, r0, r3, lsl #8
    33c8:	14d82920 	ldrbne	r2, [r8], #2336	; 0x920
    33cc:	10010000 	andne	r0, r1, r0
    33d0:	000000d6 	ldrdeq	r0, [r0], -r6
    33d4:	01300305 	teqeq	r0, r5, lsl #6
    33d8:	532a2000 			; <UNDEFINED> instruction: 0x532a2000
    33dc:	02000013 	andeq	r0, r0, #19
    33e0:	0000d60b 	andeq	sp, r0, fp, lsl #12
    33e4:	0006cf00 	andeq	ip, r6, r0, lsl #30
    33e8:	00d62b00 	sbcseq	r2, r6, r0, lsl #22
    33ec:	d62b0000 	strtle	r0, [fp], -r0
    33f0:	00000000 	andeq	r0, r0, r0
    33f4:	00130c2c 	andseq	r0, r3, ip, lsr #24
    33f8:	2a0c0200 	bcs	303c00 <__Stack_Size+0x303800>
    33fc:	00001333 	andeq	r1, r0, r3, lsr r3
    3400:	00d60e02 	sbcseq	r0, r6, r2, lsl #28
    3404:	06f00000 	ldrbteq	r0, [r0], r0
    3408:	f02b0000 			; <UNDEFINED> instruction: 0xf02b0000
    340c:	2b000006 	blcs	342c <__Stack_Size+0x302c>
    3410:	000000d6 	ldrdeq	r0, [r0], -r6
    3414:	5c042d00 	stcpl	13, cr2, [r4], {-0}
    3418:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    341c:	000012e6 	andeq	r1, r0, r6, ror #5
    3420:	07071002 	streq	r1, [r7, -r2]
    3424:	d62b0000 	strtle	r0, [fp], -r0
    3428:	00000000 	andeq	r0, r0, r0
    342c:	0013252c 	andseq	r2, r3, ip, lsr #10
    3430:	2a0d0200 	bcs	343c38 <__Stack_Size+0x343838>
    3434:	0000131a 	andeq	r1, r0, sl, lsl r3
    3438:	00d60f02 	sbcseq	r0, r6, r2, lsl #30
    343c:	07280000 	streq	r0, [r8, -r0]!
    3440:	f02b0000 			; <UNDEFINED> instruction: 0xf02b0000
    3444:	2b000006 	blcs	3464 <__Stack_Size+0x3064>
    3448:	000000d6 	ldrdeq	r0, [r0], -r6
    344c:	12c52f00 	sbcne	r2, r5, #0, 30
    3450:	11020000 	mrsne	r0, (UNDEF: 2)
    3454:	000000d6 	ldrdeq	r0, [r0], -r6
    3458:	0008b700 	andeq	fp, r8, r0, lsl #14
    345c:	9d000400 	cfstrsls	mvf0, [r0, #-0]
    3460:	04000007 	streq	r0, [r0], #-7
    3464:	0007f501 	andeq	pc, r7, r1, lsl #10
    3468:	16a80100 	strtne	r0, [r8], r0, lsl #2
    346c:	11850000 	orrne	r0, r5, r0
    3470:	3ed80000 	cdpcc	0, 13, cr0, cr8, cr0, {0}
    3474:	04800800 	streq	r0, [r0], #2048	; 0x800
    3478:	06510000 	ldrbeq	r0, [r1], -r0
    347c:	04020000 	streq	r0, [r2], #-0
    3480:	00095005 	andeq	r5, r9, r5
    3484:	05020200 	streq	r0, [r2, #-512]	; 0x200
    3488:	00000914 	andeq	r0, r0, r4, lsl r9
    348c:	b1060102 	tstlt	r6, r2, lsl #2
    3490:	0300000a 	movweq	r0, #10
    3494:	00323375 	eorseq	r3, r2, r5, ror r3
    3498:	00452702 	subeq	r2, r5, r2, lsl #14
    349c:	04020000 	streq	r0, [r2], #-0
    34a0:	000a7607 	andeq	r7, sl, r7, lsl #12
    34a4:	31750300 	cmncc	r5, r0, lsl #6
    34a8:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    34ac:	00000057 	andeq	r0, r0, r7, asr r0
    34b0:	68070202 	stmdavs	r7, {r1, r9}
    34b4:	0300000c 	movweq	r0, #12
    34b8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    34bc:	00006829 	andeq	r6, r0, r9, lsr #16
    34c0:	08010200 	stmdaeq	r1, {r9}
    34c4:	00000aaf 	andeq	r0, r0, pc, lsr #21
    34c8:	0004ba04 	andeq	fp, r4, r4, lsl #20
    34cc:	7a2f0200 	bvc	bc3cd4 <__Stack_Size+0xbc38d4>
    34d0:	05000000 	streq	r0, [r0, #-0]
    34d4:	00000045 	andeq	r0, r0, r5, asr #32
    34d8:	0002e804 	andeq	lr, r2, r4, lsl #16
    34dc:	8a300200 	bhi	c03ce4 <__Stack_Size+0xc038e4>
    34e0:	05000000 	streq	r0, [r0, #-0]
    34e4:	00000057 	andeq	r0, r0, r7, asr r0
    34e8:	39020106 	stmdbcc	r2, {r1, r2, r8}
    34ec:	000000a4 	andeq	r0, r0, r4, lsr #1
    34f0:	0018da07 	andseq	sp, r8, r7, lsl #20
    34f4:	53080000 	movwpl	r0, #32768	; 0x8000
    34f8:	01005445 	tsteq	r0, r5, asr #8
    34fc:	08980400 	ldmeq	r8, {sl}
    3500:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    3504:	0000008f 	andeq	r0, r0, pc, lsl #1
    3508:	3b020106 	blcc	83928 <__Stack_Size+0x83528>
    350c:	000000c4 	andeq	r0, r0, r4, asr #1
    3510:	0005b307 	andeq	fp, r5, r7, lsl #6
    3514:	4f070000 	svcmi	0x00070000
    3518:	0100000a 	tsteq	r0, sl
    351c:	00f90400 	rscseq	r0, r9, r0, lsl #8
    3520:	3b020000 	blcc	83528 <__Stack_Size+0x83128>
    3524:	000000af 	andeq	r0, r0, pc, lsr #1
    3528:	6d070402 	cfstrsvs	mvf0, [r7, #-8]
    352c:	0900000a 	stmdbeq	r0, {r1, r3}
    3530:	010c0324 	tsteq	ip, r4, lsr #6
    3534:	00000152 	andeq	r0, r0, r2, asr r1
    3538:	5243410a 	subpl	r4, r3, #-2147483646	; 0x80000002
    353c:	010e0300 	mrseq	r0, ELR_hyp
    3540:	0000006f 	andeq	r0, r0, pc, rrx
    3544:	16210b00 	strtne	r0, [r1], -r0, lsl #22
    3548:	0f030000 	svceq	0x00030000
    354c:	00006f01 	andeq	r6, r0, r1, lsl #30
    3550:	1e0b0400 	cfcpysne	mvf0, mvf11
    3554:	03000016 	movweq	r0, #22
    3558:	006f0110 	rsbeq	r0, pc, r0, lsl r1	; <UNPREDICTABLE>
    355c:	0a080000 	beq	203564 <__Stack_Size+0x203164>
    3560:	03005253 	movweq	r5, #595	; 0x253
    3564:	006f0111 	rsbeq	r0, pc, r1, lsl r1	; <UNPREDICTABLE>
    3568:	0a0c0000 	beq	303570 <__Stack_Size+0x303170>
    356c:	03005243 	movweq	r5, #579	; 0x243
    3570:	006f0112 	rsbeq	r0, pc, r2, lsl r1	; <UNPREDICTABLE>
    3574:	0a100000 	beq	40357c <__Stack_Size+0x40317c>
    3578:	03005241 	movweq	r5, #577	; 0x241
    357c:	006f0113 	rsbeq	r0, pc, r3, lsl r1	; <UNPREDICTABLE>
    3580:	0b140000 	bleq	503588 <__Stack_Size+0x503188>
    3584:	00001851 	andeq	r1, r0, r1, asr r8
    3588:	6f011403 	svcvs	0x00011403
    358c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3590:	52424f0a 	subpl	r4, r2, #10, 30	; 0x28
    3594:	01150300 	tsteq	r5, r0, lsl #6
    3598:	0000006f 	andeq	r0, r0, pc, rrx
    359c:	15ab0b1c 	strne	r0, [fp, #2844]!	; 0xb1c
    35a0:	16030000 	strne	r0, [r3], -r0
    35a4:	00006f01 	andeq	r6, r0, r1, lsl #30
    35a8:	0c002000 	stceq	0, cr2, [r0], {-0}
    35ac:	0000185a 	andeq	r1, r0, sl, asr r8
    35b0:	d6011703 	strle	r1, [r1], -r3, lsl #14
    35b4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    35b8:	01190310 	tsteq	r9, r0, lsl r3
    35bc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    35c0:	5044520a 	subpl	r5, r4, sl, lsl #4
    35c4:	011b0300 	tsteq	fp, r0, lsl #6
    35c8:	0000007f 	andeq	r0, r0, pc, ror r0
    35cc:	18190b00 	ldmdane	r9, {r8, r9, fp}
    35d0:	1c030000 	stcne	0, cr0, [r3], {-0}
    35d4:	00007f01 	andeq	r7, r0, r1, lsl #30
    35d8:	1e0b0200 	cdpne	2, 0, cr0, cr11, cr0, {0}
    35dc:	03000018 	movweq	r0, #24
    35e0:	007f011d 	rsbseq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    35e4:	0b040000 	bleq	1035ec <__Stack_Size+0x1031ec>
    35e8:	00001824 	andeq	r1, r0, r4, lsr #16
    35ec:	7f011e03 	svcvc	0x00011e03
    35f0:	06000000 	streq	r0, [r0], -r0
    35f4:	0015e70b 	andseq	lr, r5, fp, lsl #14
    35f8:	011f0300 	tsteq	pc, r0, lsl #6
    35fc:	0000007f 	andeq	r0, r0, pc, ror r0
    3600:	15ec0b08 	strbne	r0, [ip, #2824]!	; 0xb08
    3604:	20030000 	andcs	r0, r3, r0
    3608:	00007f01 	andeq	r7, r0, r1, lsl #30
    360c:	f10b0a00 			; <UNDEFINED> instruction: 0xf10b0a00
    3610:	03000015 	movweq	r0, #21
    3614:	007f0121 	rsbseq	r0, pc, r1, lsr #2
    3618:	0b0c0000 	bleq	303620 <__Stack_Size+0x303220>
    361c:	000015f6 	strdeq	r1, [r0], -r6
    3620:	7f012203 	svcvc	0x00012203
    3624:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3628:	17840c00 	strne	r0, [r4, r0, lsl #24]
    362c:	23030000 	movwcs	r0, #12288	; 0x3000
    3630:	00015e01 	andeq	r5, r1, r1, lsl #28
    3634:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3638:	0002031d 	andeq	r0, r2, sp, lsl r3
    363c:	16ff0700 	ldrbtne	r0, [pc], r0, lsl #14
    3640:	07010000 	streq	r0, [r1, -r0]
    3644:	00001684 	andeq	r1, r0, r4, lsl #13
    3648:	15590702 	ldrbne	r0, [r9, #-1794]	; 0x702
    364c:	07030000 	streq	r0, [r3, -r0]
    3650:	000016f0 	strdeq	r1, [r0], -r0
    3654:	17140704 	ldrne	r0, [r4, -r4, lsl #14]
    3658:	00050000 	andeq	r0, r5, r0
    365c:	0015d104 	andseq	sp, r5, r4, lsl #2
    3660:	dc230400 	cfstrsle	mvf0, [r3], #-0
    3664:	0d000001 	stceq	0, cr0, [r0, #-4]
    3668:	00001774 	andeq	r1, r0, r4, ror r7
    366c:	03033f01 	movweq	r3, #16129	; 0x3f01
    3670:	01000002 	tsteq	r0, r2
    3674:	0000022c 	andeq	r0, r0, ip, lsr #4
    3678:	0016610e 	andseq	r6, r6, lr, lsl #2
    367c:	03410100 	movteq	r0, #4352	; 0x1100
    3680:	00000203 	andeq	r0, r0, r3, lsl #4
    3684:	07da0f00 	ldrbeq	r0, [sl, r0, lsl #30]
    3688:	56010000 	strpl	r0, [r1], -r0
    368c:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    3690:	00000018 	andeq	r0, r0, r8, lsl r0
    3694:	02519c01 	subseq	r9, r1, #256	; 0x100
    3698:	79100000 	ldmdbvc	r0, {}	; <UNPREDICTABLE>
    369c:	01000015 	tsteq	r0, r5, lsl r0
    36a0:	00003a56 	andeq	r3, r0, r6, asr sl
    36a4:	00113f00 	andseq	r3, r1, r0, lsl #30
    36a8:	8f0f0000 	svchi	0x000f0000
    36ac:	01000017 	tsteq	r0, r7, lsl r0
    36b0:	003ef06a 	eorseq	pc, lr, sl, rrx
    36b4:	00001808 	andeq	r1, r0, r8, lsl #16
    36b8:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    36bc:	10000002 	andne	r0, r0, r2
    36c0:	0000175e 	andeq	r1, r0, lr, asr r7
    36c4:	003a6a01 	eorseq	r6, sl, r1, lsl #20
    36c8:	11600000 	cmnne	r0, r0
    36cc:	0f000000 	svceq	0x00000000
    36d0:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    36d4:	3f087e01 	svccc	0x00087e01
    36d8:	00180800 	andseq	r0, r8, r0, lsl #16
    36dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    36e0:	0000029b 	muleq	r0, fp, r2
    36e4:	00188310 	andseq	r8, r8, r0, lsl r3
    36e8:	3a7e0100 	bcc	1f83af0 <__Stack_Size+0x1f836f0>
    36ec:	81000000 	mrshi	r0, (UNDEF: 0)
    36f0:	00000011 	andeq	r0, r0, r1, lsl r0
    36f4:	0015b011 	andseq	fp, r5, r1, lsl r0
    36f8:	20900100 	addscs	r0, r0, r0, lsl #2
    36fc:	1808003f 	stmdane	r8, {r0, r1, r2, r3, r4, r5}
    3700:	01000000 	mrseq	r0, (UNDEF: 0)
    3704:	1693119c 			; <UNDEFINED> instruction: 0x1693119c
    3708:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    370c:	08003f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp}
    3710:	00000010 	andeq	r0, r0, r0, lsl r0
    3714:	c4129c01 	ldrgt	r9, [r2], #-3073	; 0xc01
    3718:	01000017 	tsteq	r0, r7, lsl r0
    371c:	003a0296 	mlaseq	sl, r6, r2, r0
    3720:	3f480000 	svccc	0x00480000
    3724:	000c0800 	andeq	r0, ip, r0, lsl #16
    3728:	9c010000 	stcls	0, cr0, [r1], {-0}
    372c:	0015fb12 	andseq	pc, r5, r2, lsl fp	; <UNPREDICTABLE>
    3730:	02a30100 	adceq	r0, r3, #0, 2
    3734:	0000003a 	andeq	r0, r0, sl, lsr r0
    3738:	08003f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, sp}
    373c:	0000000c 	andeq	r0, r0, ip
    3740:	2a139c01 	bcs	4ea74c <__Stack_Size+0x4ea34c>
    3744:	01000017 	tsteq	r0, r7, lsl r0
    3748:	00a402b1 	strhteq	r0, [r4], r1
    374c:	3f600000 	svccc	0x00600000
    3750:	00100800 	andseq	r0, r0, r0, lsl #16
    3754:	9c010000 	stcls	0, cr0, [r1], {-0}
    3758:	00000314 	andeq	r0, r0, r4, lsl r3
    375c:	00154b14 	andseq	r4, r5, r4, lsl fp
    3760:	02b30100 	adcseq	r0, r3, #0, 2
    3764:	000000a4 	andeq	r0, r0, r4, lsr #1
    3768:	000011a2 	andeq	r1, r0, r2, lsr #3
    376c:	15871300 	strne	r1, [r7, #768]	; 0x300
    3770:	c7010000 	strgt	r0, [r1, -r0]
    3774:	0000a402 	andeq	sl, r0, r2, lsl #8
    3778:	003f7000 	eorseq	r7, pc, r0
    377c:	00001008 	andeq	r1, r0, r8
    3780:	3f9c0100 	svccc	0x009c0100
    3784:	14000003 	strne	r0, [r0], #-3
    3788:	0000166d 	andeq	r1, r0, sp, ror #12
    378c:	a402c901 	strge	ip, [r2], #-2305	; 0x901
    3790:	c7000000 	strgt	r0, [r0, -r0]
    3794:	00000011 	andeq	r0, r0, r1, lsl r0
    3798:	00151315 	andseq	r1, r5, r5, lsl r3
    379c:	02e20100 	rsceq	r0, r2, #0, 2
    37a0:	08003f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, sp}
    37a4:	00000018 	andeq	r0, r0, r8, lsl r0
    37a8:	03749c01 	cmneq	r4, #256	; 0x100
    37ac:	36160000 	ldrcc	r0, [r6], -r0
    37b0:	01000018 	tsteq	r0, r8, lsl r0
    37b4:	004c02e2 	subeq	r0, ip, r2, ror #5
    37b8:	11ed0000 	mvnne	r0, r0
    37bc:	de170000 	cdple	0, 1, cr0, cr7, cr0, {0}
    37c0:	01000015 	tsteq	r0, r5, lsl r0
    37c4:	00c402e2 	sbceq	r0, r4, r2, ror #5
    37c8:	51010000 	mrspl	r0, (UNDEF: 1)
    37cc:	16cc1300 	strbne	r1, [ip], r0, lsl #6
    37d0:	01010000 	mrseq	r0, (UNDEF: 1)
    37d4:	0000a403 	andeq	sl, r0, r3, lsl #8
    37d8:	003f9800 	eorseq	r9, pc, r0, lsl #16
    37dc:	00002008 	andeq	r2, r0, r8
    37e0:	af9c0100 	svcge	0x009c0100
    37e4:	16000003 	strne	r0, [r0], -r3
    37e8:	000017f2 	strdeq	r1, [r0], -r2
    37ec:	4c030101 	stfmis	f0, [r3], {1}
    37f0:	27000000 	strcs	r0, [r0, -r0]
    37f4:	14000012 	strne	r0, [r0], #-18
    37f8:	0000166d 	andeq	r1, r0, sp, ror #12
    37fc:	a4030301 	strge	r0, [r3], #-769	; 0x301
    3800:	61000000 	mrsvs	r0, (UNDEF: 0)
    3804:	00000012 	andeq	r0, r0, r2, lsl r0
    3808:	0016e015 	andseq	lr, r6, r5, lsl r0
    380c:	032e0100 			; <UNDEFINED> instruction: 0x032e0100
    3810:	08003fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    3814:	0000000c 	andeq	r0, r0, ip
    3818:	03d49c01 	bicseq	r9, r4, #256	; 0x100
    381c:	f2170000 	vhadd.s16	d0, d7, d0
    3820:	01000017 	tsteq	r0, r7, lsl r0
    3824:	004c032e 	subeq	r0, ip, lr, lsr #6
    3828:	50010000 	andpl	r0, r1, r0
    382c:	020e1800 	andeq	r1, lr, #0, 16
    3830:	3fc40000 	svccc	0x00c40000
    3834:	00280800 	eoreq	r0, r8, r0, lsl #16
    3838:	9c010000 	stcls	0, cr0, [r1], {-0}
    383c:	00000400 	andeq	r0, r0, r0, lsl #8
    3840:	00021f19 	andeq	r1, r2, r9, lsl pc
    3844:	00128000 	andseq	r8, r2, r0
    3848:	3fd21a00 	svccc	0x00d21a00
    384c:	000e0800 	andeq	r0, lr, r0, lsl #16
    3850:	1f1b0000 	svcne	0x001b0000
    3854:	00000002 	andeq	r0, r0, r2
    3858:	15a51c00 	strne	r1, [r5, #3072]!	; 0xc00
    385c:	85010000 	strhi	r0, [r1, #-0]
    3860:	04180103 	ldreq	r0, [r8], #-259	; 0x103
    3864:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    3868:	03870100 	orreq	r0, r7, #0, 2
    386c:	0000006f 	andeq	r0, r0, pc, rrx
    3870:	18681300 	stmdane	r8!, {r8, r9, ip}^
    3874:	66010000 	strvs	r0, [r1], -r0
    3878:	00020303 	andeq	r0, r2, r3, lsl #6
    387c:	003fec00 	eorseq	lr, pc, r0, lsl #24
    3880:	00003608 	andeq	r3, r0, r8, lsl #12
    3884:	8c9c0100 	ldfhis	f0, [ip], {0}
    3888:	16000004 	strne	r0, [r0], -r4
    388c:	00001722 	andeq	r1, r0, r2, lsr #14
    3890:	3a036601 	bcc	dd09c <__Stack_Size+0xdcc9c>
    3894:	9f000000 	svcls	0x00000000
    3898:	14000012 	strne	r0, [r0], #-18
    389c:	00001666 	andeq	r1, r0, r6, ror #12
    38a0:	03036801 	movweq	r6, #14337	; 0x3801
    38a4:	bd000002 	stclt	0, cr0, [r0, #-8]
    38a8:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    38ac:	00000400 	andeq	r0, r0, r0, lsl #8
    38b0:	08003ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    38b4:	00000012 	andeq	r0, r0, r2, lsl r0
    38b8:	79037001 	stmdbvc	r3, {r0, ip, sp, lr}
    38bc:	1a000004 	bne	38d4 <__Stack_Size+0x34d4>
    38c0:	08003ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    38c4:	00000012 	andeq	r0, r0, r2, lsl r0
    38c8:	00040d1f 	andeq	r0, r4, pc, lsl sp
    38cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    38d0:	f4200000 	vld4.8	{d0-d3}, [r0], r0
    38d4:	0e08003f 	mcreq	0, 0, r0, cr8, cr15, {1}
    38d8:	20000002 	andcs	r0, r0, r2
    38dc:	08004010 	stmdaeq	r0, {r4, lr}
    38e0:	0000020e 	andeq	r0, r0, lr, lsl #4
    38e4:	15692100 	strbne	r2, [r9, #-256]!	; 0x100
    38e8:	ad010000 	stcge	0, cr0, [r1, #-0]
    38ec:	00000203 	andeq	r0, r0, r3, lsl #4
    38f0:	08004022 	stmdaeq	r0, {r1, r5, lr}
    38f4:	00000042 	andeq	r0, r0, r2, asr #32
    38f8:	04ea9c01 	strbteq	r9, [sl], #3073	; 0xc01
    38fc:	77100000 	ldrvc	r0, [r0, -r0]
    3900:	01000016 	tsteq	r0, r6, lsl r0
    3904:	00003aad 	andeq	r3, r0, sp, lsr #21
    3908:	0012f200 	andseq	pc, r2, r0, lsl #4
    390c:	16662200 	strbtne	r2, [r6], -r0, lsl #4
    3910:	af010000 	svcge	0x00010000
    3914:	00000203 	andeq	r0, r0, r3, lsl #4
    3918:	0000131e 	andeq	r1, r0, lr, lsl r3
    391c:	00402e23 	subeq	r2, r0, r3, lsr #28
    3920:	00041808 	andeq	r1, r4, r8, lsl #16
    3924:	0004d800 	andeq	sp, r4, r0, lsl #16
    3928:	50012400 	andpl	r2, r1, r0, lsl #8
    392c:	0fff0a03 	svceq	0x00ff0a03
    3930:	404e2500 	submi	r2, lr, r0, lsl #10
    3934:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    3938:	01240000 			; <UNDEFINED> instruction: 0x01240000
    393c:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    3940:	2100000f 	tstcs	r0, pc
    3944:	000015bd 			; <UNDEFINED> instruction: 0x000015bd
    3948:	0203d401 	andeq	sp, r3, #16777216	; 0x1000000
    394c:	40640000 	rsbmi	r0, r4, r0
    3950:	003c0800 	eorseq	r0, ip, r0, lsl #16
    3954:	9c010000 	stcls	0, cr0, [r1], {-0}
    3958:	00000539 	andeq	r0, r0, r9, lsr r5
    395c:	00166622 	andseq	r6, r6, r2, lsr #12
    3960:	03d60100 	bicseq	r0, r6, #0, 2
    3964:	48000002 	stmdami	r0, {r1}
    3968:	23000013 	movwcs	r0, #19
    396c:	0800406e 	stmdaeq	r0, {r1, r2, r3, r5, r6, lr}
    3970:	00000418 	andeq	r0, r0, r8, lsl r4
    3974:	00000527 	andeq	r0, r0, r7, lsr #10
    3978:	03500124 	cmpeq	r0, #36, 2
    397c:	000fff0a 	andeq	pc, pc, sl, lsl #30
    3980:	00408c25 	subeq	r8, r0, r5, lsr #24
    3984:	00041808 	andeq	r1, r4, r8, lsl #16
    3988:	50012400 	andpl	r2, r1, r0, lsl #8
    398c:	0fff0a03 	svceq	0x00ff0a03
    3990:	34210000 	strtcc	r0, [r1], #-0
    3994:	01000015 	tsteq	r0, r5, lsl r0
    3998:	000203f7 	strdeq	r0, [r2], -r7
    399c:	0040a000 	subeq	sl, r0, r0
    39a0:	00007008 	andeq	r7, r0, r8
    39a4:	9b9c0100 	blls	fe703dac <SCS_BASE+0x1e6f5dac>
    39a8:	22000005 	andcs	r0, r0, #5
    39ac:	00001666 	andeq	r1, r0, r6, ror #12
    39b0:	0203f901 	andeq	pc, r3, #16384	; 0x4000
    39b4:	13720000 	cmnne	r2, #0
    39b8:	aa230000 	bge	8c39c0 <__Stack_Size+0x8c35c0>
    39bc:	18080040 	stmdane	r8, {r6}
    39c0:	76000004 	strvc	r0, [r0], -r4
    39c4:	24000005 	strcs	r0, [r0], #-5
    39c8:	0a035001 	beq	d79d4 <__Stack_Size+0xd75d4>
    39cc:	23000fff 	movwcs	r0, #4095	; 0xfff
    39d0:	080040d2 	stmdaeq	r0, {r1, r4, r6, r7, lr}
    39d4:	00000418 	andeq	r0, r0, r8, lsl r4
    39d8:	0000058b 	andeq	r0, r0, fp, lsl #11
    39dc:	03500124 	cmpeq	r0, #36, 2
    39e0:	000fff0a 	andeq	pc, pc, sl, lsl #30
    39e4:	0040f425 	subeq	pc, r0, r5, lsr #8
    39e8:	00041808 	andeq	r1, r4, r8, lsl #16
    39ec:	50012400 	andpl	r2, r1, r0, lsl #8
    39f0:	00003f01 	andeq	r3, r0, r1, lsl #30
    39f4:	00183f13 	andseq	r3, r8, r3, lsl pc
    39f8:	01360100 	teqeq	r6, r0, lsl #2
    39fc:	00000203 	andeq	r0, r0, r3, lsl #4
    3a00:	08004110 	stmdaeq	r0, {r4, r8, lr}
    3a04:	00000048 	andeq	r0, r0, r8, asr #32
    3a08:	061b9c01 	ldreq	r9, [fp], -r1, lsl #24
    3a0c:	60160000 	andsvs	r0, r6, r0
    3a10:	0100002e 	tsteq	r0, lr, lsr #32
    3a14:	003a0136 	eorseq	r0, sl, r6, lsr r1
    3a18:	13a70000 			; <UNDEFINED> instruction: 0x13a70000
    3a1c:	59160000 	ldmdbpl	r6, {}	; <UNPREDICTABLE>
    3a20:	01000017 	tsteq	r0, r7, lsl r0
    3a24:	003a0136 	eorseq	r0, sl, r6, lsr r1
    3a28:	13d30000 	bicsne	r0, r3, #0
    3a2c:	66140000 	ldrvs	r0, [r4], -r0
    3a30:	01000016 	tsteq	r0, r6, lsl r0
    3a34:	02030138 	andeq	r0, r3, #56, 2
    3a38:	13ff0000 	mvnsne	r0, #0
    3a3c:	1c230000 	stcne	0, cr0, [r3], #-0
    3a40:	18080041 	stmdane	r8, {r0, r6}
    3a44:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    3a48:	24000005 	strcs	r0, [r0], #-5
    3a4c:	3f015001 	svccc	0x00015001
    3a50:	41342300 	teqmi	r4, r0, lsl #6
    3a54:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    3a58:	060b0000 	streq	r0, [fp], -r0
    3a5c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    3a60:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    3a64:	00414225 	subeq	r4, r1, r5, lsr #4
    3a68:	00041808 	andeq	r1, r4, r8, lsl #16
    3a6c:	50012400 	andpl	r2, r1, r0, lsl #8
    3a70:	00003f01 	andeq	r3, r0, r1, lsl #30
    3a74:	0017dc13 	andseq	sp, r7, r3, lsl ip
    3a78:	01710100 	cmneq	r1, r0, lsl #2
    3a7c:	00000203 	andeq	r0, r0, r3, lsl #4
    3a80:	08004158 	stmdaeq	r0, {r3, r4, r6, r8, lr}
    3a84:	00000038 	andeq	r0, r0, r8, lsr r0
    3a88:	06889c01 	streq	r9, [r8], r1, lsl #24
    3a8c:	60160000 	andsvs	r0, r6, r0
    3a90:	0100002e 	tsteq	r0, lr, lsr #32
    3a94:	003a0171 	eorseq	r0, sl, r1, ror r1
    3a98:	14340000 	ldrtne	r0, [r4], #-0
    3a9c:	59160000 	ldmdbpl	r6, {}	; <UNPREDICTABLE>
    3aa0:	01000017 	tsteq	r0, r7, lsl r0
    3aa4:	004c0171 	subeq	r0, ip, r1, ror r1
    3aa8:	14600000 	strbtne	r0, [r0], #-0
    3aac:	66140000 	ldrvs	r0, [r4], -r0
    3ab0:	01000016 	tsteq	r0, r6, lsl r0
    3ab4:	02030173 	andeq	r0, r3, #-1073741796	; 0xc000001c
    3ab8:	14810000 	strne	r0, [r1], #0
    3abc:	64230000 	strtvs	r0, [r3], #-0
    3ac0:	18080041 	stmdane	r8, {r0, r6}
    3ac4:	78000004 	stmdavc	r0, {r2}
    3ac8:	24000006 	strcs	r0, [r0], #-6
    3acc:	3f015001 	svccc	0x00015001
    3ad0:	417a2500 	cmnmi	sl, r0, lsl #10
    3ad4:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    3ad8:	01240000 			; <UNDEFINED> instruction: 0x01240000
    3adc:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    3ae0:	17a81300 	strne	r1, [r8, r0, lsl #6]!
    3ae4:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    3ae8:	00020301 	andeq	r0, r2, r1, lsl #6
    3aec:	00419000 	subeq	r9, r1, r0
    3af0:	00004808 	andeq	r4, r0, r8, lsl #16
    3af4:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    3af8:	16000006 	strne	r0, [r0], -r6
    3afc:	00002e60 	andeq	r2, r0, r0, ror #28
    3b00:	3a019901 	bcc	69f0c <__Stack_Size+0x69b0c>
    3b04:	ab000000 	blge	3b0c <__Stack_Size+0x370c>
    3b08:	16000014 			; <UNDEFINED> instruction: 0x16000014
    3b0c:	00001759 	andeq	r1, r0, r9, asr r7
    3b10:	5e019901 	cdppl	9, 0, cr9, cr1, cr1, {0}
    3b14:	d7000000 	strle	r0, [r0, -r0]
    3b18:	14000014 	strne	r0, [r0], #-20
    3b1c:	00001666 	andeq	r1, r0, r6, ror #12
    3b20:	03019b01 	movweq	r9, #6913	; 0x1b01
    3b24:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
    3b28:	23000014 	movwcs	r0, #20
    3b2c:	0800419c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr}
    3b30:	00000418 	andeq	r0, r0, r8, lsl r4
    3b34:	000006e5 	andeq	r0, r0, r5, ror #13
    3b38:	01500124 	cmpeq	r0, r4, lsr #2
    3b3c:	be25003f 	mcrlt	0, 1, r0, cr5, cr15, {1}
    3b40:	18080041 	stmdane	r8, {r0, r6}
    3b44:	24000004 	strcs	r0, [r0], #-4
    3b48:	3f015001 	svccc	0x00015001
    3b4c:	fd130000 	ldc2	0, cr0, [r3, #-0]
    3b50:	01000017 	tsteq	r0, r7, lsl r0
    3b54:	020301ca 	andeq	r0, r3, #-2147483598	; 0x80000032
    3b58:	41d80000 	bicsmi	r0, r8, r0
    3b5c:	00a00800 	adceq	r0, r0, r0, lsl #16
    3b60:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b64:	000007cb 	andeq	r0, r0, fp, asr #15
    3b68:	00182a16 	andseq	r2, r8, r6, lsl sl
    3b6c:	01ca0100 	biceq	r0, sl, r0, lsl #2
    3b70:	0000003a 	andeq	r0, r0, sl, lsr r0
    3b74:	00001522 	andeq	r1, r0, r2, lsr #10
    3b78:	00175414 	andseq	r5, r7, r4, lsl r4
    3b7c:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3b80:	0000004c 	andeq	r0, r0, ip, asr #32
    3b84:	0000156b 	andeq	r1, r0, fp, ror #10
    3b88:	00170a14 	andseq	r0, r7, r4, lsl sl
    3b8c:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3b90:	0000004c 	andeq	r0, r0, ip, asr #32
    3b94:	000015b7 			; <UNDEFINED> instruction: 0x000015b7
    3b98:	00152214 	andseq	r2, r5, r4, lsl r2
    3b9c:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3ba0:	0000004c 	andeq	r0, r0, ip, asr #32
    3ba4:	0000160f 	andeq	r1, r0, pc, lsl #12
    3ba8:	00169e14 	andseq	r9, r6, r4, lsl lr
    3bac:	01cc0100 	biceq	r0, ip, r0, lsl #2
    3bb0:	0000004c 	andeq	r0, r0, ip, asr #32
    3bb4:	0000166b 	andeq	r1, r0, fp, ror #12
    3bb8:	00166614 	andseq	r6, r6, r4, lsl r6
    3bbc:	01ce0100 	biceq	r0, lr, r0, lsl #2
    3bc0:	00000203 	andeq	r0, r0, r3, lsl #4
    3bc4:	000016b3 			; <UNDEFINED> instruction: 0x000016b3
    3bc8:	0041e223 	subeq	lr, r1, r3, lsr #4
    3bcc:	00041808 	andeq	r1, r4, r8, lsl #16
    3bd0:	00078200 	andeq	r8, r7, r0, lsl #4
    3bd4:	50012400 	andpl	r2, r1, r0, lsl #8
    3bd8:	23003f01 	movwcs	r3, #3841	; 0xf01
    3bdc:	08004216 	stmdaeq	r0, {r1, r2, r4, r9, lr}
    3be0:	00000418 	andeq	r0, r0, r8, lsl r4
    3be4:	00000795 	muleq	r0, r5, r7
    3be8:	01500124 	cmpeq	r0, r4, lsr #2
    3bec:	2823003f 	stmdacs	r3!, {r0, r1, r2, r3, r4, r5}
    3bf0:	18080042 	stmdane	r8, {r1, r6}
    3bf4:	a8000004 	stmdage	r0, {r2}
    3bf8:	24000007 	strcs	r0, [r0], #-7
    3bfc:	3f015001 	svccc	0x00015001
    3c00:	42402300 	submi	r2, r0, #0, 6
    3c04:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    3c08:	07bb0000 	ldreq	r0, [fp, r0]!
    3c0c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    3c10:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    3c14:	00425a25 	subeq	r5, r2, r5, lsr #20
    3c18:	00041808 	andeq	r1, r4, r8, lsl #16
    3c1c:	50012400 	andpl	r2, r1, r0, lsl #8
    3c20:	00003f01 	andeq	r3, r0, r1, lsl #30
    3c24:	00164913 	andseq	r4, r6, r3, lsl r9
    3c28:	02190100 	andseq	r0, r9, #0, 2
    3c2c:	00000203 	andeq	r0, r0, r3, lsl #4
    3c30:	08004278 	stmdaeq	r0, {r3, r4, r5, r6, r9, lr}
    3c34:	0000008c 	andeq	r0, r0, ip, lsl #1
    3c38:	08419c01 	stmdaeq	r1, {r0, sl, fp, ip, pc}^
    3c3c:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
    3c40:	01000015 	tsteq	r0, r5, lsl r0
    3c44:	00c40219 	sbceq	r0, r4, r9, lsl r2
    3c48:	17090000 	strne	r0, [r9, -r0]
    3c4c:	66140000 	ldrvs	r0, [r4], -r0
    3c50:	01000016 	tsteq	r0, r6, lsl r0
    3c54:	0203021b 	andeq	r0, r3, #-1342177279	; 0xb0000001
    3c58:	172a0000 	strne	r0, [sl, -r0]!
    3c5c:	84230000 	strthi	r0, [r3], #-0
    3c60:	18080042 	stmdane	r8, {r1, r6}
    3c64:	1a000004 	bne	3c7c <__Stack_Size+0x387c>
    3c68:	24000008 	strcs	r0, [r0], #-8
    3c6c:	0a035001 	beq	d7c78 <__Stack_Size+0xd7878>
    3c70:	23000fff 	movwcs	r0, #4095	; 0xfff
    3c74:	080042ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, lr}
    3c78:	00000418 	andeq	r0, r0, r8, lsl r4
    3c7c:	0000082f 	andeq	r0, r0, pc, lsr #16
    3c80:	03500124 	cmpeq	r0, #36, 2
    3c84:	000fff0a 	andeq	pc, pc, sl, lsl #30
    3c88:	0042d625 	subeq	sp, r2, r5, lsr #12
    3c8c:	00041808 	andeq	r1, r4, r8, lsl #16
    3c90:	50012400 	andpl	r2, r1, r0, lsl #8
    3c94:	0fff0a03 	svceq	0x00ff0a03
    3c98:	26260000 	strtcs	r0, [r6], -r0
    3c9c:	01000016 	tsteq	r0, r6, lsl r0
    3ca0:	0203026a 	andeq	r0, r3, #-1610612730	; 0xa0000006
    3ca4:	43040000 	movwmi	r0, #16384	; 0x4000
    3ca8:	00540800 	subseq	r0, r4, r0, lsl #16
    3cac:	9c010000 	stcls	0, cr0, [r1], {-0}
    3cb0:	00164116 	andseq	r4, r6, r6, lsl r1
    3cb4:	026a0100 	rsbeq	r0, sl, #0, 2
    3cb8:	0000004c 	andeq	r0, r0, ip, asr #32
    3cbc:	0000175f 	andeq	r1, r0, pc, asr r7
    3cc0:	00152c16 	andseq	r2, r5, r6, lsl ip
    3cc4:	026a0100 	rsbeq	r0, sl, #0, 2
    3cc8:	0000004c 	andeq	r0, r0, ip, asr #32
    3ccc:	00001780 	andeq	r1, r0, r0, lsl #15
    3cd0:	00174b16 	andseq	r4, r7, r6, lsl fp
    3cd4:	026a0100 	rsbeq	r0, sl, #0, 2
    3cd8:	0000004c 	andeq	r0, r0, ip, asr #32
    3cdc:	000017a1 	andeq	r1, r0, r1, lsr #15
    3ce0:	00166614 	andseq	r6, r6, r4, lsl r6
    3ce4:	026c0100 	rsbeq	r0, ip, #0, 2
    3ce8:	00000203 	andeq	r0, r0, r3, lsl #4
    3cec:	000017c2 	andeq	r1, r0, r2, asr #15
    3cf0:	00431e23 	subeq	r1, r3, r3, lsr #28
    3cf4:	00041808 	andeq	r1, r4, r8, lsl #16
    3cf8:	0008aa00 	andeq	sl, r8, r0, lsl #20
    3cfc:	50012400 	andpl	r2, r1, r0, lsl #8
    3d00:	25003f01 	strcs	r3, [r0, #-3841]	; 0xf01
    3d04:	0800433c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, lr}
    3d08:	00000418 	andeq	r0, r0, r8, lsl r4
    3d0c:	01500124 	cmpeq	r0, r4, lsr #2
    3d10:	0000003f 	andeq	r0, r0, pc, lsr r0
    3d14:	00000743 	andeq	r0, r0, r3, asr #14
    3d18:	09eb0004 	stmibeq	fp!, {r2}^
    3d1c:	01040000 	mrseq	r0, (UNDEF: 4)
    3d20:	000007f5 	strdeq	r0, [r0], -r5
    3d24:	0018f501 	andseq	pc, r8, r1, lsl #10
    3d28:	00118500 	andseq	r8, r1, r0, lsl #10
    3d2c:	00435800 	subeq	r5, r3, r0, lsl #16
    3d30:	00025608 	andeq	r5, r2, r8, lsl #12
    3d34:	00085b00 	andeq	r5, r8, r0, lsl #22
    3d38:	05040200 	streq	r0, [r4, #-512]	; 0x200
    3d3c:	00000950 	andeq	r0, r0, r0, asr r9
    3d40:	14050202 	strne	r0, [r5], #-514	; 0x202
    3d44:	02000009 	andeq	r0, r0, #9
    3d48:	0ab10601 	beq	fec45554 <SCS_BASE+0x1ec37554>
    3d4c:	75030000 	strvc	r0, [r3, #-0]
    3d50:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    3d54:	00004527 	andeq	r4, r0, r7, lsr #10
    3d58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3d5c:	00000a76 	andeq	r0, r0, r6, ror sl
    3d60:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    3d64:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    3d68:	02000000 	andeq	r0, r0, #0
    3d6c:	0c680702 	stcleq	7, cr0, [r8], #-8
    3d70:	75030000 	strvc	r0, [r3, #-0]
    3d74:	29020038 	stmdbcs	r2, {r3, r4, r5}
    3d78:	00000068 	andeq	r0, r0, r8, rrx
    3d7c:	af080102 	svcge	0x00080102
    3d80:	0400000a 	streq	r0, [r0], #-10
    3d84:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    3d88:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    3d8c:	45050000 	strmi	r0, [r5, #-0]
    3d90:	06000000 	streq	r0, [r0], -r0
    3d94:	943b0201 	ldrtls	r0, [fp], #-513	; 0x201
    3d98:	07000000 	streq	r0, [r0, -r0]
    3d9c:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    3da0:	0a4f0700 	beq	13c59a8 <__Stack_Size+0x13c55a8>
    3da4:	00010000 	andeq	r0, r1, r0
    3da8:	0000f904 	andeq	pc, r0, r4, lsl #18
    3dac:	7f3b0200 	svcvc	0x003b0200
    3db0:	02000000 	andeq	r0, r0, #0
    3db4:	0a6d0704 	beq	1b459cc <__Stack_Size+0x1b455cc>
    3db8:	1c080000 	stcne	0, cr0, [r8], {-0}
    3dbc:	0b014e03 	bleq	575d0 <__Stack_Size+0x571d0>
    3dc0:	09000001 	stmdbeq	r0, {r0}
    3dc4:	004c5243 	subeq	r5, ip, r3, asr #4
    3dc8:	6f015003 	svcvs	0x00015003
    3dcc:	00000000 	andeq	r0, r0, r0
    3dd0:	48524309 	ldmdami	r2, {r0, r3, r8, r9, lr}^
    3dd4:	01510300 	cmpeq	r1, r0, lsl #6
    3dd8:	0000006f 	andeq	r0, r0, pc, rrx
    3ddc:	44490904 	strbmi	r0, [r9], #-2308	; 0x904
    3de0:	52030052 	andpl	r0, r3, #82	; 0x52
    3de4:	00006f01 	andeq	r6, r0, r1, lsl #30
    3de8:	4f090800 	svcmi	0x00090800
    3dec:	03005244 	movweq	r5, #580	; 0x244
    3df0:	006f0153 	rsbeq	r0, pc, r3, asr r1	; <UNPREDICTABLE>
    3df4:	0a0c0000 	beq	303dfc <__Stack_Size+0x3039fc>
    3df8:	00000076 	andeq	r0, r0, r6, ror r0
    3dfc:	6f015403 	svcvs	0x00015403
    3e00:	10000000 	andne	r0, r0, r0
    3e04:	52524209 	subspl	r4, r2, #-1879048192	; 0x90000000
    3e08:	01550300 	cmpeq	r5, r0, lsl #6
    3e0c:	0000006f 	andeq	r0, r0, pc, rrx
    3e10:	0d3d0a14 	vldmdbeq	sp!, {s0-s19}
    3e14:	56030000 	strpl	r0, [r3], -r0
    3e18:	00006f01 	andeq	r6, r0, r1, lsl #30
    3e1c:	0b001800 	bleq	9e24 <__Stack_Size+0x9a24>
    3e20:	000009f8 	strdeq	r0, [r0], -r8
    3e24:	a6015703 	strge	r5, [r1], -r3, lsl #14
    3e28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3e2c:	01590318 	cmpeq	r9, r8, lsl r3
    3e30:	00000148 	andeq	r0, r0, r8, asr #2
    3e34:	001a440a 	andseq	r4, sl, sl, lsl #8
    3e38:	015b0300 	cmpeq	fp, r0, lsl #6
    3e3c:	0000006f 	andeq	r0, r0, pc, rrx
    3e40:	1a290a00 	bne	a46648 <__Stack_Size+0xa46248>
    3e44:	5c030000 	stcpl	0, cr0, [r3], {-0}
    3e48:	00006f01 	andeq	r6, r0, r1, lsl #30
    3e4c:	ee0a0400 	cfcpys	mvf0, mvf10
    3e50:	03000018 	movweq	r0, #24
    3e54:	0158015d 	cmpeq	r8, sp, asr r1
    3e58:	00080000 	andeq	r0, r8, r0
    3e5c:	00006f0c 	andeq	r6, r0, ip, lsl #30
    3e60:	00015800 	andeq	r5, r1, r0, lsl #16
    3e64:	009f0d00 	addseq	r0, pc, r0, lsl #26
    3e68:	00030000 	andeq	r0, r3, r0
    3e6c:	00014805 	andeq	r4, r1, r5, lsl #16
    3e70:	1a120b00 	bne	486a78 <__Stack_Size+0x486678>
    3e74:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    3e78:	00011701 	andeq	r1, r1, r1, lsl #14
    3e7c:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3e80:	00018423 	andeq	r8, r1, r3, lsr #8
    3e84:	034c0700 	movteq	r0, #50944	; 0xc700
    3e88:	07010000 	streq	r0, [r1, -r0]
    3e8c:	00000224 	andeq	r0, r0, r4, lsr #4
    3e90:	0ad80702 	beq	ff605aa0 <SCS_BASE+0x1f5f7aa0>
    3e94:	00030000 	andeq	r0, r3, r0
    3e98:	0008a304 	andeq	sl, r8, r4, lsl #6
    3e9c:	69270400 	stmdbvs	r7!, {sl}
    3ea0:	06000001 	streq	r0, [r0], -r1
    3ea4:	c92e0401 	stmdbgt	lr!, {r0, sl}
    3ea8:	07000001 	streq	r0, [r0, -r1]
    3eac:	000008c0 	andeq	r0, r0, r0, asr #17
    3eb0:	0ce30700 	stcleq	7, cr0, [r3]
    3eb4:	07040000 	streq	r0, [r4, -r0]
    3eb8:	0000043c 	andeq	r0, r0, ip, lsr r4
    3ebc:	045e0728 	ldrbeq	r0, [lr], #-1832	; 0x728
    3ec0:	00c80000 	sbceq	r0, r8, r0
    3ec4:	00049207 	andeq	r9, r4, r7, lsl #4
    3ec8:	00071400 	andeq	r1, r7, r0, lsl #8
    3ecc:	10000000 	andne	r0, r0, r0
    3ed0:	0007a707 	andeq	sl, r7, r7, lsl #14
    3ed4:	40071c00 	andmi	r1, r7, r0, lsl #24
    3ed8:	18000009 	stmdane	r0, {r0, r3}
    3edc:	0a140400 	beq	504ee4 <__Stack_Size+0x504ae4>
    3ee0:	36040000 	strcc	r0, [r4], -r0
    3ee4:	0000018f 	andeq	r0, r0, pc, lsl #3
    3ee8:	3e04040e 	cdpcc	4, 0, cr0, cr4, cr14, {0}
    3eec:	00000201 	andeq	r0, r0, r1, lsl #4
    3ef0:	0000cc0f 	andeq	ip, r0, pc, lsl #24
    3ef4:	4c400400 	cfstrdmi	mvd0, [r0], {-0}
    3ef8:	00000000 	andeq	r0, r0, r0
    3efc:	00095e0f 	andeq	r5, r9, pc, lsl #28
    3f00:	84410400 	strbhi	r0, [r1], #-1024	; 0x400
    3f04:	02000001 	andeq	r0, r0, #1
    3f08:	0000b30f 	andeq	fp, r0, pc, lsl #6
    3f0c:	c9420400 	stmdbgt	r2, {sl}^
    3f10:	03000001 	movweq	r0, #1
    3f14:	0a9e0400 	beq	fe784f1c <SCS_BASE+0x1e776f1c>
    3f18:	43040000 	movwmi	r0, #16384	; 0x4000
    3f1c:	000001d4 	ldrdeq	r0, [r0], -r4
    3f20:	47040106 	strmi	r0, [r4, -r6, lsl #2]
    3f24:	00000221 	andeq	r0, r0, r1, lsr #4
    3f28:	0018d607 	andseq	sp, r8, r7, lsl #12
    3f2c:	9f070000 	svcls	0x00070000
    3f30:	01000018 	tsteq	r0, r8, lsl r0
    3f34:	1a1f0400 	bne	7c4f3c <__Stack_Size+0x7c4b3c>
    3f38:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    3f3c:	0000020c 	andeq	r0, r0, ip, lsl #4
    3f40:	00193010 	andseq	r3, r9, r0, lsl r0
    3f44:	58330100 	ldmdapl	r3!, {r8}
    3f48:	a4080043 	strge	r0, [r8], #-67	; 0x43
    3f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    3f50:	00030d9c 	muleq	r3, ip, sp
    3f54:	1a2e1100 	bne	b8835c <__Stack_Size+0xb87f5c>
    3f58:	33010000 	movwcc	r0, #4096	; 0x1000
    3f5c:	0000030d 	andeq	r0, r0, sp, lsl #6
    3f60:	000017ec 	andeq	r1, r0, ip, ror #15
    3f64:	00438212 	subeq	r8, r3, r2, lsl r2
    3f68:	00073308 	andeq	r3, r7, r8, lsl #6
    3f6c:	00026800 	andeq	r6, r2, r0, lsl #16
    3f70:	51011300 	mrspl	r1, SP_irq
    3f74:	01133101 	tsteq	r3, r1, lsl #2
    3f78:	00340150 	eorseq	r0, r4, r0, asr r1
    3f7c:	0043a412 	subeq	sl, r3, r2, lsl r4
    3f80:	00073308 	andeq	r3, r7, r8, lsl #6
    3f84:	00028100 	andeq	r8, r2, r0, lsl #2
    3f88:	51011300 	mrspl	r1, SP_irq
    3f8c:	01133101 	tsteq	r3, r1, lsl #2
    3f90:	40080250 	andmi	r0, r8, r0, asr r2
    3f94:	43b01200 	movsmi	r1, #0, 4
    3f98:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    3f9c:	02990000 	addseq	r0, r9, #0
    3fa0:	01130000 	tsteq	r3, r0
    3fa4:	13310151 	teqne	r1, #1073741844	; 0x40000014
    3fa8:	38015001 	stmdacc	r1, {r0, ip, lr}
    3fac:	43bc1200 			; <UNDEFINED> instruction: 0x43bc1200
    3fb0:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    3fb4:	02b10000 	adcseq	r0, r1, #0
    3fb8:	01130000 	tsteq	r3, r0
    3fbc:	13310151 	teqne	r1, #1073741844	; 0x40000014
    3fc0:	40015001 	andmi	r5, r1, r1
    3fc4:	43c81200 	bicmi	r1, r8, #0, 4
    3fc8:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    3fcc:	02ca0000 	sbceq	r0, sl, #0
    3fd0:	01130000 	tsteq	r3, r0
    3fd4:	13310151 	teqne	r1, #1073741844	; 0x40000014
    3fd8:	08025001 	stmdaeq	r2, {r0, ip, lr}
    3fdc:	d4120020 	ldrle	r0, [r2], #-32
    3fe0:	33080043 	movwcc	r0, #32835	; 0x8043
    3fe4:	e3000007 	movw	r0, #7
    3fe8:	13000002 	movwne	r0, #2
    3fec:	31015101 	tstcc	r1, r1, lsl #2
    3ff0:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    3ff4:	12008008 	andne	r8, r0, #8
    3ff8:	080043e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, lr}
    3ffc:	00000733 	andeq	r0, r0, r3, lsr r7
    4000:	000002fd 	strdeq	r0, [r0], -sp
    4004:	01510113 	cmpeq	r1, r3, lsl r1
    4008:	50011331 	andpl	r1, r1, r1, lsr r3
    400c:	01000a03 	tsteq	r0, r3, lsl #20
    4010:	43f01400 	mvnsmi	r1, #0, 8
    4014:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    4018:	01130000 	tsteq	r3, r0
    401c:	00300151 	eorseq	r0, r0, r1, asr r1
    4020:	0b041500 	bleq	109428 <__Stack_Size+0x109028>
    4024:	10000001 	andne	r0, r0, r1
    4028:	00001a60 	andeq	r1, r0, r0, ror #20
    402c:	43fc6b01 	mvnsmi	r6, #1024	; 0x400
    4030:	00160800 	andseq	r0, r6, r0, lsl #16
    4034:	9c010000 	stcls	0, cr0, [r1], {-0}
    4038:	00000355 	andeq	r0, r0, r5, asr r3
    403c:	00440612 	subeq	r0, r4, r2, lsl r6
    4040:	00073308 	andeq	r3, r7, r8, lsl #6
    4044:	00034000 	andeq	r4, r3, r0
    4048:	51011300 	mrspl	r1, SP_irq
    404c:	01133101 	tsteq	r3, r1, lsl #2
    4050:	00310150 	eorseq	r0, r1, r0, asr r1
    4054:	00441214 	subeq	r1, r4, r4, lsl r2
    4058:	00073308 	andeq	r3, r7, r8, lsl #6
    405c:	51011300 	mrspl	r1, SP_irq
    4060:	01133001 	tsteq	r3, r1
    4064:	00310150 	eorseq	r0, r1, r0, asr r1
    4068:	01f11000 	mvnseq	r1, r0
    406c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4070:	08004412 	stmdaeq	r0, {r1, r4, sl, lr}
    4074:	0000009c 	muleq	r0, ip, r0
    4078:	03e19c01 	mvneq	r9, #256	; 0x100
    407c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    4080:	0100001a 	tsteq	r0, sl, lsl r0
    4084:	00030d7c 	andeq	r0, r3, ip, ror sp
    4088:	11500100 	cmpne	r0, r0, lsl #2
    408c:	00001a34 	andeq	r1, r0, r4, lsr sl
    4090:	03e17c01 	mvneq	r7, #256	; 0x100
    4094:	18ae0000 	stmiane	lr!, {}	; <UNPREDICTABLE>
    4098:	83170000 	tsthi	r7, #0
    409c:	01000019 	tsteq	r0, r9, lsl r0
    40a0:	00003a7e 	andeq	r3, r0, lr, ror sl
    40a4:	0018cf00 	andseq	ip, r8, r0, lsl #30
    40a8:	19e31700 	stmibne	r3!, {r8, r9, sl, ip}^
    40ac:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    40b0:	0000003a 	andeq	r0, r0, sl, lsr r0
    40b4:	000018fe 	strdeq	r1, [r0], -lr
    40b8:	00189817 	andseq	r9, r8, r7, lsl r8
    40bc:	3a7e0100 	bcc	1f844c4 <__Stack_Size+0x1f840c4>
    40c0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    40c4:	18000019 	stmdane	r0, {r0, r3, r4}
    40c8:	00736f70 	rsbseq	r6, r3, r0, ror pc
    40cc:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    40d0:	195e0000 	ldmdbne	lr, {}^	; <UNPREDICTABLE>
    40d4:	74170000 	ldrvc	r0, [r7], #-0
    40d8:	01000019 	tsteq	r0, r9, lsl r0
    40dc:	00003a7f 	andeq	r3, r0, pc, ror sl
    40e0:	0019bc00 	andseq	fp, r9, r0, lsl #24
    40e4:	19181700 	ldmdbne	r8, {r8, r9, sl, ip}
    40e8:	7f010000 	svcvc	0x00010000
    40ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    40f0:	000019e6 	andeq	r1, r0, r6, ror #19
    40f4:	01041500 	tsteq	r4, r0, lsl #10
    40f8:	10000002 	andne	r0, r0, r2
    40fc:	00000047 	andeq	r0, r0, r7, asr #32
    4100:	44aee501 	strtmi	lr, [lr], #1281	; 0x501
    4104:	00100800 	andseq	r0, r0, r0, lsl #16
    4108:	9c010000 	stcls	0, cr0, [r1], {-0}
    410c:	0000040a 	andeq	r0, r0, sl, lsl #8
    4110:	001a3416 	andseq	r3, sl, r6, lsl r4
    4114:	e1e50100 	mvn	r0, r0, lsl #2
    4118:	01000003 	tsteq	r0, r3
    411c:	5e190050 	mrcpl	0, 0, r0, cr9, cr0, {2}
    4120:	01000019 	tsteq	r0, r9, lsl r0
    4124:	00005ef6 	strdeq	r5, [r0], -r6
    4128:	0044be00 	subeq	fp, r4, r0, lsl #28
    412c:	00000c08 	andeq	r0, r0, r8, lsl #24
    4130:	4f9c0100 	svcmi	0x009c0100
    4134:	11000004 	tstne	r0, r4
    4138:	00001a2e 	andeq	r1, r0, lr, lsr #20
    413c:	030df601 	movweq	pc, #54785	; 0xd601	; <UNPREDICTABLE>
    4140:	1a4c0000 	bne	1304148 <__Stack_Size+0x1303d48>
    4144:	cc160000 	ldcgt	0, cr0, [r6], {-0}
    4148:	01000000 	mrseq	r0, (UNDEF: 0)
    414c:	00004cf6 	strdeq	r4, [r0], -r6
    4150:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    4154:	0000166d 	andeq	r1, r0, sp, ror #12
    4158:	005ef801 	subseq	pc, lr, r1, lsl #16
    415c:	1a6d0000 	bne	1b44164 <__Stack_Size+0x1b43d64>
    4160:	1a000000 	bne	4168 <__Stack_Size+0x3d68>
    4164:	000019b5 			; <UNDEFINED> instruction: 0x000019b5
    4168:	4c011001 	stcmi	0, cr1, [r1], {1}
    416c:	ca000000 	bgt	4174 <__Stack_Size+0x3d74>
    4170:	06080044 	streq	r0, [r8], -r4, asr #32
    4174:	01000000 	mrseq	r0, (UNDEF: 0)
    4178:	00047a9c 	muleq	r4, ip, sl
    417c:	1a2e1b00 	bne	b8ad84 <__Stack_Size+0xb8a984>
    4180:	10010000 	andne	r0, r1, r0
    4184:	00030d01 	andeq	r0, r3, r1, lsl #26
    4188:	001a9700 	andseq	r9, sl, r0, lsl #14
    418c:	491a0000 	ldmdbmi	sl, {}	; <UNPREDICTABLE>
    4190:	0100001a 	tsteq	r0, sl, lsl r0
    4194:	005e0121 	subseq	r0, lr, r1, lsr #2
    4198:	44d00000 	ldrbmi	r0, [r0], #0
    419c:	000c0800 	andeq	r0, ip, r0, lsl #16
    41a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    41a4:	000004c3 	andeq	r0, r0, r3, asr #9
    41a8:	001a2e1b 	andseq	r2, sl, fp, lsl lr
    41ac:	01210100 			; <UNDEFINED> instruction: 0x01210100
    41b0:	0000030d 	andeq	r0, r0, sp, lsl #6
    41b4:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    41b8:	0000cc1c 	andeq	ip, r0, ip, lsl ip
    41bc:	01210100 			; <UNDEFINED> instruction: 0x01210100
    41c0:	0000004c 	andeq	r0, r0, ip, asr #32
    41c4:	6d1d5101 	ldfvss	f5, [sp, #-4]
    41c8:	01000016 	tsteq	r0, r6, lsl r0
    41cc:	005e0123 	subseq	r0, lr, r3, lsr #2
    41d0:	1ad90000 	bne	ff6441d8 <SCS_BASE+0x1f6361d8>
    41d4:	1a000000 	bne	41dc <__Stack_Size+0x3ddc>
    41d8:	000018a7 	andeq	r1, r0, r7, lsr #17
    41dc:	4c013b01 	stcmi	11, cr3, [r1], {1}
    41e0:	dc000000 	stcle	0, cr0, [r0], {-0}
    41e4:	06080044 	streq	r0, [r8], -r4, asr #32
    41e8:	01000000 	mrseq	r0, (UNDEF: 0)
    41ec:	0004ee9c 	muleq	r4, ip, lr
    41f0:	1a2e1b00 	bne	b8adf8 <__Stack_Size+0xb8a9f8>
    41f4:	3b010000 	blcc	441fc <__Stack_Size+0x43dfc>
    41f8:	00030d01 	andeq	r0, r3, r1, lsl #26
    41fc:	001b0300 	andseq	r0, fp, r0, lsl #6
    4200:	981e0000 	ldmdals	lr, {}	; <UNPREDICTABLE>
    4204:	01000003 	tsteq	r0, r3
    4208:	44e2014d 	strbtmi	r0, [r2], #333	; 0x14d
    420c:	00040800 	andeq	r0, r4, r0, lsl #16
    4210:	9c010000 	stcls	0, cr0, [r1], {-0}
    4214:	00000521 	andeq	r0, r0, r1, lsr #10
    4218:	001a2e1c 	andseq	r2, sl, ip, lsl lr
    421c:	014d0100 	mrseq	r0, (UNDEF: 93)
    4220:	0000030d 	andeq	r0, r0, sp, lsl #6
    4224:	cc1c5001 	ldcgt	0, cr5, [ip], {1}
    4228:	01000000 	mrseq	r0, (UNDEF: 0)
    422c:	004c014d 	subeq	r0, ip, sp, asr #2
    4230:	51010000 	mrspl	r0, (UNDEF: 1)
    4234:	07cb1e00 	strbeq	r1, [fp, r0, lsl #28]
    4238:	60010000 	andvs	r0, r1, r0
    423c:	0044e601 	subeq	lr, r4, r1, lsl #12
    4240:	00000408 	andeq	r0, r0, r8, lsl #8
    4244:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    4248:	1c000005 	stcne	0, cr0, [r0], {5}
    424c:	00001a2e 	andeq	r1, r0, lr, lsr #20
    4250:	0d016001 	stceq	0, cr6, [r1, #-4]
    4254:	01000003 	tsteq	r0, r3
    4258:	00cc1c50 	sbceq	r1, ip, r0, asr ip
    425c:	60010000 	andvs	r0, r1, r0
    4260:	00004c01 	andeq	r4, r0, r1, lsl #24
    4264:	00510100 	subseq	r0, r1, r0, lsl #2
    4268:	0018e01e 	andseq	lr, r8, lr, lsl r0
    426c:	01760100 	cmneq	r6, r0, lsl #2
    4270:	080044ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, lr}
    4274:	0000000a 	andeq	r0, r0, sl
    4278:	05959c01 	ldreq	r9, [r5, #3073]	; 0xc01
    427c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    4280:	0100001a 	tsteq	r0, sl, lsl r0
    4284:	030d0176 	movweq	r0, #53622	; 0xd176
    4288:	50010000 	andpl	r0, r1, r0
    428c:	0000cc1c 	andeq	ip, r0, ip, lsl ip
    4290:	01760100 	cmneq	r6, r0, lsl #2
    4294:	0000004c 	andeq	r0, r0, ip, asr #32
    4298:	cf1c5101 	svcgt	0x001c5101
    429c:	01000018 	tsteq	r0, r8, lsl r0
    42a0:	02210176 	eoreq	r0, r1, #-2147483619	; 0x8000001d
    42a4:	52010000 	andpl	r0, r1, #0
    42a8:	19ee1e00 	stmibne	lr!, {r9, sl, fp, ip}^
    42ac:	90010000 	andls	r0, r1, r0
    42b0:	0044f401 	subeq	pc, r4, r1, lsl #8
    42b4:	00000408 	andeq	r0, r0, r8, lsl #8
    42b8:	c89c0100 	ldmgt	ip, {r8}
    42bc:	1c000005 	stcne	0, cr0, [r0], {5}
    42c0:	00001a2e 	andeq	r1, r0, lr, lsr #20
    42c4:	0d019001 	stceq	0, cr9, [r1, #-4]
    42c8:	01000003 	tsteq	r0, r3
    42cc:	197b1c50 	ldmdbne	fp!, {r4, r6, sl, fp, ip}^
    42d0:	90010000 	andls	r0, r1, r0
    42d4:	00004c01 	andeq	r4, r0, r1, lsl #24
    42d8:	00510100 	subseq	r0, r1, r0, lsl #2
    42dc:	0019d01e 	andseq	sp, r9, lr, lsl r0
    42e0:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    42e4:	080044f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, lr}
    42e8:	00000010 	andeq	r0, r0, r0, lsl r0
    42ec:	060b9c01 	streq	r9, [fp], -r1, lsl #24
    42f0:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    42f4:	0100001a 	tsteq	r0, sl, lsl r0
    42f8:	030d01a2 	movweq	r0, #53666	; 0xd1a2
    42fc:	50010000 	andpl	r0, r1, r0
    4300:	0000cc1c 	andeq	ip, r0, ip, lsl ip
    4304:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    4308:	0000004c 	andeq	r0, r0, ip, asr #32
    430c:	741f5101 	ldrvc	r5, [pc], #-257	; 4314 <__Stack_Size+0x3f14>
    4310:	0100706d 	tsteq	r0, sp, rrx
    4314:	003a01a4 	eorseq	r0, sl, r4, lsr #3
    4318:	1b240000 	blne	904320 <__Stack_Size+0x903f20>
    431c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4320:	0000193c 	andeq	r1, r0, ip, lsr r9
    4324:	0801c301 	stmdaeq	r1, {r0, r8, r9, lr, pc}
    4328:	1c080045 	stcne	0, cr0, [r8], {69}	; 0x45
    432c:	01000000 	mrseq	r0, (UNDEF: 0)
    4330:	0006529c 	muleq	r6, ip, r2
    4334:	19201b00 	stmdbne	r0!, {r8, r9, fp, ip}
    4338:	c3010000 	movwgt	r0, #4096	; 0x1000
    433c:	00005e01 	andeq	r5, r0, r1, lsl #28
    4340:	001b4500 	andseq	r4, fp, r0, lsl #10
    4344:	198f1b00 	stmibne	pc, {r8, r9, fp, ip}	; <UNPREDICTABLE>
    4348:	c3010000 	movwgt	r0, #4096	; 0x1000
    434c:	00005e01 	andeq	r5, r0, r1, lsl #28
    4350:	001b6600 	andseq	r6, fp, r0, lsl #12
    4354:	19741d00 	ldmdbne	r4!, {r8, sl, fp, ip}^
    4358:	c5010000 	strgt	r0, [r1, #-0]
    435c:	00003a01 	andeq	r3, r0, r1, lsl #20
    4360:	001b8700 	andseq	r8, fp, r0, lsl #14
    4364:	bb1e0000 	bllt	78436c <__Stack_Size+0x783f6c>
    4368:	01000018 	tsteq	r0, r8, lsl r0
    436c:	452401dc 	strmi	r0, [r4, #-476]!	; 0x1dc
    4370:	000c0800 	andeq	r0, ip, r0, lsl #16
    4374:	9c010000 	stcls	0, cr0, [r1], {-0}
    4378:	00000677 	andeq	r0, r0, r7, ror r6
    437c:	0015de1c 	andseq	sp, r5, ip, lsl lr
    4380:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    4384:	00000094 	muleq	r0, r4, r0
    4388:	1e005001 	cdpne	0, 0, cr5, cr0, cr1, {0}
    438c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4390:	30020701 	andcc	r0, r2, r1, lsl #14
    4394:	54080045 	strpl	r0, [r8], #-69	; 0x45
    4398:	01000000 	mrseq	r0, (UNDEF: 0)
    439c:	0006ec9c 	muleq	r6, ip, ip
    43a0:	19531b00 	ldmdbne	r3, {r8, r9, fp, ip}^
    43a4:	07010000 	streq	r0, [r1, -r0]
    43a8:	00003a02 	andeq	r3, r0, r2, lsl #20
    43ac:	001bbf00 	andseq	fp, fp, r0, lsl #30
    43b0:	15de1c00 	ldrbne	r1, [lr, #3072]	; 0xc00
    43b4:	07010000 	streq	r0, [r1, -r0]
    43b8:	00009402 	andeq	r9, r0, r2, lsl #8
    43bc:	1f510100 	svcne	0x00510100
    43c0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    43c4:	3a020901 	bcc	867d0 <__Stack_Size+0x863d0>
    43c8:	e0000000 	and	r0, r0, r0
    43cc:	1d00001b 	stcne	0, cr0, [r0, #-108]	; 0xffffff94
    43d0:	000019f9 	strdeq	r1, [r0], -r9
    43d4:	3a020901 	bcc	867e0 <__Stack_Size+0x863e0>
    43d8:	11000000 	mrsne	r0, (UNDEF: 0)
    43dc:	1d00001c 	stcne	0, cr0, [r0, #-112]	; 0xffffff90
    43e0:	00001974 	andeq	r1, r0, r4, ror r9
    43e4:	3a020901 	bcc	867f0 <__Stack_Size+0x863f0>
    43e8:	3a000000 	bcc	43f0 <__Stack_Size+0x3ff0>
    43ec:	1d00001c 	stcne	0, cr0, [r0, #-112]	; 0xffffff90
    43f0:	000019c8 	andeq	r1, r0, r8, asr #19
    43f4:	3a020901 	bcc	86800 <__Stack_Size+0x86400>
    43f8:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    43fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    4400:	0019fe1e 	andseq	pc, r9, lr, lsl lr	; <UNPREDICTABLE>
    4404:	02390100 	eorseq	r0, r9, #0, 2
    4408:	08004584 	stmdaeq	r0, {r2, r7, r8, sl, lr}
    440c:	0000002a 	andeq	r0, r0, sl, lsr #32
    4410:	07339c01 	ldreq	r9, [r3, -r1, lsl #24]!
    4414:	201b0000 	andscs	r0, fp, r0
    4418:	01000019 	tsteq	r0, r9, lsl r0
    441c:	005e0239 	subseq	r0, lr, r9, lsr r2
    4420:	1c940000 	ldcne	0, cr0, [r4], {0}
    4424:	8f1b0000 	svchi	0x001b0000
    4428:	01000019 	tsteq	r0, r9, lsl r0
    442c:	005e0239 	subseq	r0, lr, r9, lsr r2
    4430:	1cb50000 	ldcne	0, cr0, [r5]
    4434:	741f0000 	ldrvc	r0, [pc], #-0	; 443c <__Stack_Size+0x403c>
    4438:	0100706d 	tsteq	r0, sp, rrx
    443c:	003a023b 	eorseq	r0, sl, fp, lsr r2
    4440:	1cd60000 	ldclne	0, cr0, [r6], {0}
    4444:	20000000 	andcs	r0, r0, r0
    4448:	0000199e 	muleq	r0, lr, r9
    444c:	21011405 	tstcs	r1, r5, lsl #8
    4450:	0000003a 	andeq	r0, r0, sl, lsr r0
    4454:	00009421 	andeq	r9, r0, r1, lsr #8
    4458:	64000000 	strvs	r0, [r0], #-0
    445c:	04000009 	streq	r0, [r0], #-9
    4460:	000bd300 	andeq	sp, fp, r0, lsl #6
    4464:	f5010400 			; <UNDEFINED> instruction: 0xf5010400
    4468:	01000007 	tsteq	r0, r7
    446c:	00001b75 	andeq	r1, r0, r5, ror fp
    4470:	00001185 	andeq	r1, r0, r5, lsl #3
    4474:	080045b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, lr}
    4478:	00000314 	andeq	r0, r0, r4, lsl r3
    447c:	000009dd 	ldrdeq	r0, [r0], -sp
    4480:	50050402 	andpl	r0, r5, r2, lsl #8
    4484:	02000009 	andeq	r0, r0, #9
    4488:	09140502 	ldmdbeq	r4, {r1, r8, sl}
    448c:	01020000 	mrseq	r0, (UNDEF: 2)
    4490:	000ab106 	andeq	fp, sl, r6, lsl #2
    4494:	33750300 	cmncc	r5, #0, 6
    4498:	27020032 	smladxcs	r2, r2, r0, r0
    449c:	00000045 	andeq	r0, r0, r5, asr #32
    44a0:	76070402 	strvc	r0, [r7], -r2, lsl #8
    44a4:	0300000a 	movweq	r0, #10
    44a8:	00363175 	eorseq	r3, r6, r5, ror r1
    44ac:	00572802 	subseq	r2, r7, r2, lsl #16
    44b0:	02020000 	andeq	r0, r2, #0
    44b4:	000c6807 	andeq	r6, ip, r7, lsl #16
    44b8:	38750300 	ldmdacc	r5!, {r8, r9}^
    44bc:	68290200 	stmdavs	r9!, {r9}
    44c0:	02000000 	andeq	r0, r0, #0
    44c4:	0aaf0801 	beq	febc64d0 <SCS_BASE+0x1ebb84d0>
    44c8:	ba040000 	blt	1044d0 <__Stack_Size+0x1040d0>
    44cc:	02000004 	andeq	r0, r0, #4
    44d0:	00007a2f 	andeq	r7, r0, pc, lsr #20
    44d4:	00450500 	subeq	r0, r5, r0, lsl #10
    44d8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    44dc:	0200001e 	andeq	r0, r0, #30
    44e0:	00008a33 	andeq	r8, r0, r3, lsr sl
    44e4:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    44e8:	01070000 	mrseq	r0, (UNDEF: 7)
    44ec:	00a43902 	adceq	r3, r4, r2, lsl #18
    44f0:	da080000 	ble	2044f8 <__Stack_Size+0x2040f8>
    44f4:	00000018 	andeq	r0, r0, r8, lsl r0
    44f8:	54455309 	strbpl	r5, [r5], #-777	; 0x309
    44fc:	04000100 	streq	r0, [r0], #-256	; 0x100
    4500:	00002062 	andeq	r2, r0, r2, rrx
    4504:	008f3902 	addeq	r3, pc, r2, lsl #18
    4508:	01070000 	mrseq	r0, (UNDEF: 7)
    450c:	00c43b02 	sbceq	r3, r4, r2, lsl #22
    4510:	b3080000 	movwlt	r0, #32768	; 0x8000
    4514:	00000005 	andeq	r0, r0, r5
    4518:	000a4f08 	andeq	r4, sl, r8, lsl #30
    451c:	04000100 	streq	r0, [r0], #-256	; 0x100
    4520:	000000f9 	strdeq	r0, [r0], -r9
    4524:	00af3b02 	adceq	r3, pc, r2, lsl #22
    4528:	04020000 	streq	r0, [r2], #-0
    452c:	000a6d07 	andeq	r6, sl, r7, lsl #26
    4530:	033c0a00 	teqeq	ip, #0, 20
    4534:	77018103 	strvc	r8, [r1, -r3, lsl #2]
    4538:	0b000001 	bleq	4544 <__Stack_Size+0x4144>
    453c:	00001d8e 	andeq	r1, r0, lr, lsl #27
    4540:	87018303 	strhi	r8, [r1, -r3, lsl #6]
    4544:	00000001 	andeq	r0, r0, r1
    4548:	0008ce0b 	andeq	ip, r8, fp, lsl #28
    454c:	01840300 	orreq	r0, r4, r0, lsl #6
    4550:	0000018c 	andeq	r0, r0, ip, lsl #3
    4554:	1d570b08 	vldrne	d16, [r7, #-32]	; 0xffffffe0
    4558:	85030000 	strhi	r0, [r3, #-0]
    455c:	00019c01 	andeq	r9, r1, r1, lsl #24
    4560:	fd0b8000 	stc2	0, cr8, [fp, #-0]
    4564:	0300001b 	movweq	r0, #27
    4568:	018c0186 	orreq	r0, ip, r6, lsl #3
    456c:	0c880000 	stceq	0, cr0, [r8], {0}
    4570:	00001d68 	andeq	r1, r0, r8, ror #26
    4574:	a1018703 	tstge	r1, r3, lsl #14
    4578:	00000001 	andeq	r0, r0, r1
    457c:	08e20c01 	stmiaeq	r2!, {r0, sl, fp}^
    4580:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    4584:	00018c01 	andeq	r8, r1, r1, lsl #24
    4588:	0c010800 	stceq	8, cr0, [r1], {-0}
    458c:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    4590:	a6018903 	strge	r8, [r1], -r3, lsl #18
    4594:	80000001 	andhi	r0, r0, r1
    4598:	08ec0c01 	stmiaeq	ip!, {r0, sl, fp}^
    459c:	8a030000 	bhi	c45a4 <__Stack_Size+0xc41a4>
    45a0:	00018c01 	andeq	r8, r1, r1, lsl #24
    45a4:	0c018800 	stceq	8, cr8, [r1], {-0}
    45a8:	00001a70 	andeq	r1, r0, r0, ror sl
    45ac:	ab018b03 	blge	671c0 <__Stack_Size+0x66dc0>
    45b0:	00000001 	andeq	r0, r0, r1
    45b4:	08f60c02 	ldmeq	r6!, {r1, sl, fp}^
    45b8:	8c030000 	stchi	0, cr0, [r3], {-0}
    45bc:	0001b001 	andeq	fp, r1, r1
    45c0:	0d020800 	stceq	8, cr0, [r2, #-0]
    45c4:	00525049 	subseq	r5, r2, r9, asr #32
    45c8:	d0018d03 	andle	r8, r1, r3, lsl #26
    45cc:	00000001 	andeq	r0, r0, r1
    45d0:	6f0e0003 	svcvs	0x000e0003
    45d4:	87000000 	strhi	r0, [r0, -r0]
    45d8:	0f000001 	svceq	0x00000001
    45dc:	000000cf 	andeq	r0, r0, pc, asr #1
    45e0:	77050001 	strvc	r0, [r5, -r1]
    45e4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    45e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    45ec:	0000019c 	muleq	r0, ip, r1
    45f0:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    45f4:	05001d00 	streq	r1, [r0, #-3328]	; 0xd00
    45f8:	00000177 	andeq	r0, r0, r7, ror r1
    45fc:	00017705 	andeq	r7, r1, r5, lsl #14
    4600:	01770500 	cmneq	r7, r0, lsl #10
    4604:	77050000 	strvc	r0, [r5, -r0]
    4608:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    460c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4610:	000001c0 	andeq	r0, r0, r0, asr #3
    4614:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    4618:	0e003d00 	cdpeq	13, 0, cr3, cr0, cr0, {0}
    461c:	0000006f 	andeq	r0, r0, pc, rrx
    4620:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4624:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    4628:	05000e00 	streq	r0, [r0, #-3584]	; 0xe00
    462c:	000001c0 	andeq	r0, r0, r0, asr #3
    4630:	001cd810 	andseq	sp, ip, r0, lsl r8
    4634:	018e0300 	orreq	r0, lr, r0, lsl #6
    4638:	000000d6 	ldrdeq	r0, [r0], -r6
    463c:	90034011 	andls	r4, r3, r1, lsl r0
    4640:	0002a101 	andeq	sl, r2, r1, lsl #2
    4644:	1ba00b00 	blne	fe80724c <SCS_BASE+0x1e7f924c>
    4648:	92030000 	andls	r0, r3, #0
    464c:	00007f01 	andeq	r7, r0, r1, lsl #30
    4650:	f80b0000 			; <UNDEFINED> instruction: 0xf80b0000
    4654:	0300001b 	movweq	r0, #27
    4658:	006f0193 	mlseq	pc, r3, r1, r0	; <UNPREDICTABLE>
    465c:	0b040000 	bleq	104664 <__Stack_Size+0x104264>
    4660:	00001a94 	muleq	r0, r4, sl
    4664:	6f019403 	svcvs	0x00019403
    4668:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    466c:	001cb20b 	andseq	fp, ip, fp, lsl #4
    4670:	01950300 	orrseq	r0, r5, r0, lsl #6
    4674:	0000006f 	andeq	r0, r0, pc, rrx
    4678:	4353120c 	cmpmi	r3, #12, 4	; 0xc0000000
    467c:	96030052 			; <UNDEFINED> instruction: 0x96030052
    4680:	00006f01 	andeq	r6, r0, r1, lsl #30
    4684:	43121000 	tstmi	r2, #0
    4688:	03005243 	movweq	r5, #579	; 0x243
    468c:	006f0197 	mlseq	pc, r7, r1, r0	; <UNPREDICTABLE>
    4690:	0b140000 	bleq	504698 <__Stack_Size+0x504298>
    4694:	00001ccd 	andeq	r1, r0, sp, asr #25
    4698:	b1019803 	tstlt	r1, r3, lsl #16
    469c:	18000002 	stmdane	r0, {r1}
    46a0:	001cd20b 	andseq	sp, ip, fp, lsl #4
    46a4:	01990300 	orrseq	r0, r9, r0, lsl #6
    46a8:	0000006f 	andeq	r0, r0, pc, rrx
    46ac:	1c8d0b24 	vstmiane	sp, {d0-d17}
    46b0:	9a030000 	bls	c46b8 <__Stack_Size+0xc42b8>
    46b4:	00006f01 	andeq	r6, r0, r1, lsl #30
    46b8:	720b2800 	andvc	r2, fp, #0, 16
    46bc:	0300001d 	movweq	r0, #29
    46c0:	006f019b 	mlseq	pc, fp, r1, r0	; <UNPREDICTABLE>
    46c4:	0b2c0000 	bleq	b046cc <__Stack_Size+0xb042cc>
    46c8:	00001d6d 	andeq	r1, r0, sp, ror #26
    46cc:	6f019c03 	svcvs	0x00019c03
    46d0:	30000000 	andcc	r0, r0, r0
    46d4:	001d060b 	andseq	r0, sp, fp, lsl #12
    46d8:	019d0300 	orrseq	r0, sp, r0, lsl #6
    46dc:	0000006f 	andeq	r0, r0, pc, rrx
    46e0:	1c640b34 	stclne	11, cr0, [r4], #-208	; 0xffffff30
    46e4:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    46e8:	00006f01 	andeq	r6, r0, r1, lsl #30
    46ec:	890b3800 	stmdbhi	fp, {fp, ip, sp}
    46f0:	0300001d 	movweq	r0, #29
    46f4:	006f019f 	mlseq	pc, pc, r1, r0	; <UNPREDICTABLE>
    46f8:	003c0000 	eorseq	r0, ip, r0
    46fc:	00006f0e 	andeq	r6, r0, lr, lsl #30
    4700:	0002b100 	andeq	fp, r2, r0, lsl #2
    4704:	00cf0f00 	sbceq	r0, pc, r0, lsl #30
    4708:	00020000 	andeq	r0, r2, r0
    470c:	0002a105 	andeq	sl, r2, r5, lsl #2
    4710:	1daf1000 	stcne	0, cr1, [pc]	; 4718 <__Stack_Size+0x4318>
    4714:	a0030000 	andge	r0, r3, r0
    4718:	0001e101 	andeq	lr, r1, r1, lsl #2
    471c:	04041300 	streq	r1, [r4], #-768	; 0x300
    4720:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    4724:	07551400 	ldrbeq	r1, [r5, -r0, lsl #8]
    4728:	1c040000 	stcne	0, cr0, [r4], {-0}
    472c:	0000005e 	andeq	r0, r0, lr, asr r0
    4730:	0cb21400 	cfldrseq	mvf1, [r2]
    4734:	1d040000 	stcne	0, cr0, [r4, #-0]
    4738:	0000005e 	andeq	r0, r0, lr, asr r0
    473c:	0bd21401 	bleq	ff489748 <SCS_BASE+0x1f47b748>
    4740:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    4744:	0000005e 	andeq	r0, r0, lr, asr r0
    4748:	04d61402 	ldrbeq	r1, [r6], #1026	; 0x402
    474c:	1f040000 	svcne	0x00040000
    4750:	000000c4 	andeq	r0, r0, r4, asr #1
    4754:	fb040003 	blx	10476a <__Stack_Size+0x10436a>
    4758:	04000002 	streq	r0, [r0], #-2
    475c:	0002c220 	andeq	ip, r2, r0, lsr #4
    4760:	1eed1500 	cdpne	5, 14, cr1, cr13, cr0, {0}
    4764:	24010000 	strcs	r0, [r1], #-0
    4768:	080045b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, lr}
    476c:	00000034 	andeq	r0, r0, r4, lsr r0
    4770:	032b9c01 			; <UNDEFINED> instruction: 0x032b9c01
    4774:	e3160000 	tst	r6, #0
    4778:	01000014 	tsteq	r0, r4, lsl r0
    477c:	00003a26 	andeq	r3, r0, r6, lsr #20
    4780:	001d1300 	andseq	r1, sp, r0, lsl #6
    4784:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
    4788:	0100001e 	tsteq	r0, lr, lsl r0
    478c:	0045e43b 	subeq	lr, r5, fp, lsr r4
    4790:	00003008 	andeq	r3, r0, r8
    4794:	509c0100 	addspl	r0, ip, r0, lsl #2
    4798:	16000003 	strne	r0, [r0], -r3
    479c:	000014e3 	andeq	r1, r0, r3, ror #9
    47a0:	003a3d01 	eorseq	r3, sl, r1, lsl #26
    47a4:	1d320000 	ldcne	0, cr0, [r2, #-0]
    47a8:	15000000 	strne	r0, [r0, #-0]
    47ac:	00000c29 	andeq	r0, r0, r9, lsr #24
    47b0:	46146101 	ldrmi	r6, [r4], -r1, lsl #2
    47b4:	00140800 	andseq	r0, r4, r0, lsl #16
    47b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    47bc:	00000375 	andeq	r0, r0, r5, ror r3
    47c0:	001ba617 	andseq	sl, fp, r7, lsl r6
    47c4:	3a610100 	bcc	1844bcc <__Stack_Size+0x18447cc>
    47c8:	6a000000 	bvs	47d0 <__Stack_Size+0x43d0>
    47cc:	0000001d 	andeq	r0, r0, sp, lsl r0
    47d0:	00079d15 	andeq	r9, r7, r5, lsl sp
    47d4:	28740100 	ldmdacs	r4!, {r8}^
    47d8:	84080046 	strhi	r0, [r8], #-70	; 0x46
    47dc:	01000000 	mrseq	r0, (UNDEF: 0)
    47e0:	0003e39c 	muleq	r3, ip, r3
    47e4:	1a991800 	bne	fe64a7ec <SCS_BASE+0x1e63c7ec>
    47e8:	74010000 	strvc	r0, [r1], #-0
    47ec:	000003e3 	andeq	r0, r0, r3, ror #7
    47f0:	5c165001 	ldcpl	0, cr5, [r6], {1}
    47f4:	0100001d 	tsteq	r0, sp, lsl r0
    47f8:	00003a76 	andeq	r3, r0, r6, ror sl
    47fc:	001d8b00 	andseq	r8, sp, r0, lsl #22
    4800:	19741600 	ldmdbne	r4!, {r9, sl, ip}^
    4804:	76010000 	strvc	r0, [r1], -r0
    4808:	0000003a 	andeq	r0, r0, sl, lsr r0
    480c:	00001de7 	andeq	r1, r0, r7, ror #27
    4810:	0019c816 	andseq	ip, r9, r6, lsl r8
    4814:	3a760100 	bcc	1d84c1c <__Stack_Size+0x1d8481c>
    4818:	1d000000 	stcne	0, cr0, [r0, #-0]
    481c:	1600001e 			; <UNDEFINED> instruction: 0x1600001e
    4820:	00001b21 	andeq	r1, r0, r1, lsr #22
    4824:	003a7701 	eorseq	r7, sl, r1, lsl #14
    4828:	1e580000 	cdpne	0, 5, cr0, cr8, cr0, {0}
    482c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    4830:	0100001d 	tsteq	r0, sp, lsl r0
    4834:	00003a77 	andeq	r3, r0, r7, ror sl
    4838:	001ea100 	andseq	sl, lr, r0, lsl #2
    483c:	04190000 	ldreq	r0, [r9], #-0
    4840:	000002fb 	strdeq	r0, [r0], -fp
    4844:	001d4715 	andseq	r4, sp, r5, lsl r7
    4848:	aca80100 	stfges	f0, [r8]
    484c:	0c080046 	stceq	0, cr0, [r8], {70}	; 0x46
    4850:	01000000 	mrseq	r0, (UNDEF: 0)
    4854:	00040c9c 	muleq	r4, ip, ip
    4858:	1a991800 	bne	fe64a860 <SCS_BASE+0x1e63c860>
    485c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    4860:	000003e3 	andeq	r0, r0, r3, ror #7
    4864:	15005001 	strne	r5, [r0, #-1]
    4868:	00001af8 	strdeq	r1, [r0], -r8
    486c:	46b8b801 	ldrtmi	fp, [r8], r1, lsl #16
    4870:	00040800 	andeq	r0, r4, r0, lsl #16
    4874:	9c010000 	stcls	0, cr0, [r1], {-0}
    4878:	0000042b 	andeq	r0, r0, fp, lsr #8
    487c:	0046bc1a 	subeq	fp, r6, sl, lsl ip
    4880:	00092f08 	andeq	r2, r9, r8, lsl #30
    4884:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
    4888:	0100001b 	tsteq	r0, fp, lsl r0
    488c:	0046bcc4 	subeq	fp, r6, r4, asr #25
    4890:	00000408 	andeq	r0, r0, r8, lsl #8
    4894:	4a9c0100 	bmi	fe704c9c <SCS_BASE+0x1e6f6c9c>
    4898:	1a000004 	bne	48b0 <__Stack_Size+0x44b0>
    489c:	080046c0 	stmdaeq	r0, {r6, r7, r9, sl, lr}
    48a0:	00000936 	andeq	r0, r0, r6, lsr r9
    48a4:	1d771500 	cfldr64ne	mvdx1, [r7, #-0]
    48a8:	d0010000 	andle	r0, r1, r0
    48ac:	080046c0 	stmdaeq	r0, {r6, r7, r9, sl, lr}
    48b0:	00000004 	andeq	r0, r0, r4
    48b4:	04699c01 	strbteq	r9, [r9], #-3073	; 0xc01
    48b8:	c41a0000 	ldrgt	r0, [sl], #-0
    48bc:	3d080046 	stccc	0, cr0, [r8, #-280]	; 0xfffffee8
    48c0:	00000009 	andeq	r0, r0, r9
    48c4:	001bb915 	andseq	fp, fp, r5, lsl r9
    48c8:	c4dc0100 	ldrbgt	r0, [ip], #256	; 0x100
    48cc:	04080046 	streq	r0, [r8], #-70	; 0x46
    48d0:	01000000 	mrseq	r0, (UNDEF: 0)
    48d4:	0004889c 	muleq	r4, ip, r8
    48d8:	46c81a00 	strbmi	r1, [r8], r0, lsl #20
    48dc:	09440800 	stmdbeq	r4, {fp}^
    48e0:	15000000 	strne	r0, [r0, #-0]
    48e4:	00001c51 	andeq	r1, r0, r1, asr ip
    48e8:	46c8ea01 	strbmi	lr, [r8], r1, lsl #20
    48ec:	00060800 	andeq	r0, r6, r0, lsl #16
    48f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    48f4:	000004c0 	andeq	r0, r0, r0, asr #9
    48f8:	001e6d17 	andseq	r6, lr, r7, lsl sp
    48fc:	3aea0100 	bcc	ffa84d04 <SCS_BASE+0x1fa76d04>
    4900:	db000000 	blle	4908 <__Stack_Size+0x4508>
    4904:	1b00001e 	blne	4984 <__Stack_Size+0x4584>
    4908:	080046ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, lr}
    490c:	0000094b 	andeq	r0, r0, fp, asr #18
    4910:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    4914:	345001f3 	ldrbcc	r0, [r0], #-499	; 0x1f3
    4918:	1d000024 	stcne	0, cr0, [r0, #-144]	; 0xffffff70
    491c:	00001ce5 	andeq	r1, r0, r5, ror #25
    4920:	003af901 	eorseq	pc, sl, r1, lsl #18
    4924:	46ce0000 	strbmi	r0, [lr], r0
    4928:	00040800 	andeq	r0, r4, r0, lsl #16
    492c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4930:	000004e3 	andeq	r0, r0, r3, ror #9
    4934:	0046d21a 	subeq	sp, r6, sl, lsl r2
    4938:	00095c08 	andeq	r5, r9, r8, lsl #24
    493c:	a91e0000 	ldmdbge	lr, {}	; <UNPREDICTABLE>
    4940:	0100001a 	tsteq	r0, sl, lsl r0
    4944:	004c0105 	subeq	r0, ip, r5, lsl #2
    4948:	46d20000 	ldrbmi	r0, [r2], r0
    494c:	000e0800 	andeq	r0, lr, r0, lsl #16
    4950:	9c010000 	stcls	0, cr0, [r1], {-0}
    4954:	001e3b1f 	andseq	r3, lr, pc, lsl fp
    4958:	01120100 	tsteq	r2, r0, lsl #2
    495c:	000000a4 	andeq	r0, r0, r4, lsr #1
    4960:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
    4964:	00000020 	andeq	r0, r0, r0, lsr #32
    4968:	05449c01 	strbeq	r9, [r4, #-3073]	; 0xc01
    496c:	55200000 	strpl	r0, [r0, #-0]!
    4970:	01000007 	tsteq	r0, r7
    4974:	005e0112 	subseq	r0, lr, r2, lsl r1
    4978:	1efc0000 	cdpne	0, 15, cr0, cr12, cr0, {0}
    497c:	f9210000 			; <UNDEFINED> instruction: 0xf9210000
    4980:	0100001e 	tsteq	r0, lr, lsl r0
    4984:	00a40114 	adceq	r0, r4, r4, lsl r1
    4988:	1f1d0000 	svcne	0x001d0000
    498c:	74220000 	strtvc	r0, [r2], #-0
    4990:	0100706d 	tsteq	r0, sp, rrx
    4994:	003a0115 	eorseq	r0, sl, r5, lsl r1
    4998:	1f440000 	svcne	0x00440000
    499c:	23000000 	movwcs	r0, #0
    49a0:	00001c69 	andeq	r1, r0, r9, ror #24
    49a4:	00012e01 	andeq	r2, r1, r1, lsl #28
    49a8:	0c080047 	stceq	0, cr0, [r8], {71}	; 0x47
    49ac:	01000000 	mrseq	r0, (UNDEF: 0)
    49b0:	0005699c 	muleq	r5, ip, r9
    49b4:	07552400 	ldrbeq	r2, [r5, -r0, lsl #8]
    49b8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    49bc:	00005e01 	andeq	r5, r0, r1, lsl #28
    49c0:	00500100 	subseq	r0, r0, r0, lsl #2
    49c4:	001a7523 	andseq	r7, sl, r3, lsr #10
    49c8:	013d0100 	teqeq	sp, r0, lsl #2
    49cc:	0800470c 	stmdaeq	r0, {r2, r3, r8, r9, sl, lr}
    49d0:	00000018 	andeq	r0, r0, r8, lsl r0
    49d4:	05909c01 	ldreq	r9, [r0, #3073]	; 0xc01
    49d8:	55200000 	strpl	r0, [r0, #-0]!
    49dc:	01000007 	tsteq	r0, r7
    49e0:	005e013d 	subseq	r0, lr, sp, lsr r1
    49e4:	1f630000 	svcne	0x00630000
    49e8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    49ec:	00001bcd 	andeq	r1, r0, sp, asr #23
    49f0:	4c014d01 	stcmi	13, cr4, [r1], {1}
    49f4:	24000000 	strcs	r0, [r0], #-0
    49f8:	10080047 	andne	r0, r8, r7, asr #32
    49fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4a00:	1ecb1f9c 	mcrne	15, 6, r1, cr11, cr12, {4}
    4a04:	5a010000 	bpl	44a0c <__Stack_Size+0x4460c>
    4a08:	0000a401 	andeq	sl, r0, r1, lsl #8
    4a0c:	00473400 	subeq	r3, r7, r0, lsl #8
    4a10:	00002008 	andeq	r2, r0, r8
    4a14:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    4a18:	20000005 	andcs	r0, r0, r5
    4a1c:	00000755 	andeq	r0, r0, r5, asr r7
    4a20:	5e015a01 	vmlapl.f32	s10, s2, s2
    4a24:	84000000 	strhi	r0, [r0], #-0
    4a28:	2100001f 	tstcs	r0, pc, lsl r0
    4a2c:	00001e86 	andeq	r1, r0, r6, lsl #29
    4a30:	a4015c01 	strge	r5, [r1], #-3073	; 0xc01
    4a34:	a5000000 	strge	r0, [r0, #-0]
    4a38:	2200001f 	andcs	r0, r0, #31
    4a3c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4a40:	3a015d01 	bcc	5be4c <__Stack_Size+0x5ba4c>
    4a44:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4a48:	0000001f 	andeq	r0, r0, pc, lsl r0
    4a4c:	001b981e 	andseq	r9, fp, lr, lsl r8
    4a50:	01770100 	cmneq	r7, r0, lsl #2
    4a54:	0000003a 	andeq	r0, r0, sl, lsr r0
    4a58:	08004754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, lr}
    4a5c:	0000000c 	andeq	r0, r0, ip
    4a60:	e7239c01 	str	r9, [r3, -r1, lsl #24]!
    4a64:	01000005 	tsteq	r0, r5
    4a68:	47600189 	strbmi	r0, [r0, -r9, lsl #3]!
    4a6c:	00140800 	andseq	r0, r4, r0, lsl #16
    4a70:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a74:	0000063e 	andeq	r0, r0, lr, lsr r6
    4a78:	001e7920 	andseq	r7, lr, r0, lsr #18
    4a7c:	01890100 	orreq	r0, r9, r0, lsl #2
    4a80:	0000003a 	andeq	r0, r0, sl, lsr r0
    4a84:	00001feb 	andeq	r1, r0, fp, ror #31
    4a88:	001d4020 	andseq	r4, sp, r0, lsr #32
    4a8c:	01890100 	orreq	r0, r9, r0, lsl #2
    4a90:	0000003a 	andeq	r0, r0, sl, lsr r0
    4a94:	0000200c 	andeq	r2, r0, ip
    4a98:	1b082500 	blne	20dea0 <__Stack_Size+0x20daa0>
    4a9c:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    4aa0:	00477401 	subeq	r7, r7, r1, lsl #8
    4aa4:	00001008 	andeq	r1, r0, r8
    4aa8:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    4aac:	00001c15 	andeq	r1, r0, r5, lsl ip
    4ab0:	8401a501 	strhi	sl, [r1], #-1281	; 0x501
    4ab4:	10080047 	andne	r0, r8, r7, asr #32
    4ab8:	01000000 	mrseq	r0, (UNDEF: 0)
    4abc:	1d2c239c 	stcne	3, cr2, [ip, #-624]!	; 0xfffffd90
    4ac0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    4ac4:	00479401 	subeq	r9, r7, r1, lsl #8
    4ac8:	00001808 	andeq	r1, r0, r8, lsl #16
    4acc:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    4ad0:	20000006 	andcs	r0, r0, r6
    4ad4:	00001ebe 			; <UNDEFINED> instruction: 0x00001ebe
    4ad8:	5e01b801 	cdppl	8, 0, cr11, cr1, cr1, {0}
    4adc:	2d000000 	stccs	0, cr0, [r0, #-0]
    4ae0:	24000020 	strcs	r0, [r0], #-32
    4ae4:	000015de 	ldrdeq	r1, [r0], -lr
    4ae8:	c401b801 	strgt	fp, [r1], #-2049	; 0x801
    4aec:	01000000 	mrseq	r0, (UNDEF: 0)
    4af0:	13230051 			; <UNDEFINED> instruction: 0x13230051
    4af4:	0100001d 	tsteq	r0, sp, lsl r0
    4af8:	47ac01d6 	sbfxmi	r0, r6, #3, #13
    4afc:	00200800 	eoreq	r0, r0, r0, lsl #16
    4b00:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b04:	000006de 	ldrdeq	r0, [r0], -lr
    4b08:	001bea20 	andseq	lr, fp, r0, lsr #20
    4b0c:	01d60100 	bicseq	r0, r6, r0, lsl #2
    4b10:	0000003a 	andeq	r0, r0, sl, lsr r0
    4b14:	00002067 	andeq	r2, r0, r7, rrx
    4b18:	0015de20 	andseq	sp, r5, r0, lsr #28
    4b1c:	01d60100 	bicseq	r0, r6, r0, lsl #2
    4b20:	000000c4 	andeq	r0, r0, r4, asr #1
    4b24:	00002088 	andeq	r2, r0, r8, lsl #1
    4b28:	00197421 	andseq	r7, r9, r1, lsr #8
    4b2c:	01d80100 	bicseq	r0, r8, r0, lsl #2
    4b30:	0000003a 	andeq	r0, r0, sl, lsr r0
    4b34:	000020c2 	andeq	r2, r0, r2, asr #1
    4b38:	1b472300 	blne	11cd740 <__Stack_Size+0x11cd340>
    4b3c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4b40:	0047cc01 	subeq	ip, r7, r1, lsl #24
    4b44:	00004c08 	andeq	r4, r0, r8, lsl #24
    4b48:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    4b4c:	20000007 	andcs	r0, r0, r7
    4b50:	00001bea 	andeq	r1, r0, sl, ror #23
    4b54:	3a01fe01 	bcc	84360 <__Stack_Size+0x83f60>
    4b58:	0a000000 	beq	4b60 <__Stack_Size+0x4760>
    4b5c:	20000021 	andcs	r0, r0, r1, lsr #32
    4b60:	00001e1b 	andeq	r1, r0, fp, lsl lr
    4b64:	5e01fe01 	cdppl	14, 0, cr15, cr1, cr1, {0}
    4b68:	2b000000 	blcs	4b70 <__Stack_Size+0x4770>
    4b6c:	20000021 	andcs	r0, r0, r1, lsr #32
    4b70:	00001adf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    4b74:	5e01ff01 	cdppl	15, 0, cr15, cr1, cr1, {0}
    4b78:	4c000000 	stcmi	0, cr0, [r0], {-0}
    4b7c:	21000021 	tstcs	r0, r1, lsr #32
    4b80:	000019f9 	strdeq	r1, [r0], -r9
    4b84:	3a020101 	bcc	84f90 <__Stack_Size+0x84b90>
    4b88:	6d000000 	stcvs	0, cr0, [r0, #-0]
    4b8c:	21000021 	tstcs	r0, r1, lsr #32
    4b90:	00001dbb 			; <UNDEFINED> instruction: 0x00001dbb
    4b94:	3a020101 	bcc	84fa0 <__Stack_Size+0x84ba0>
    4b98:	aa000000 	bge	4ba0 <__Stack_Size+0x47a0>
    4b9c:	21000021 	tstcs	r0, r1, lsr #32
    4ba0:	00001ea3 	andeq	r1, r0, r3, lsr #29
    4ba4:	3a020101 	bcc	84fb0 <__Stack_Size+0x84bb0>
    4ba8:	da000000 	ble	4bb0 <__Stack_Size+0x47b0>
    4bac:	21000021 	tstcs	r0, r1, lsr #32
    4bb0:	00001d5c 	andeq	r1, r0, ip, asr sp
    4bb4:	3a020201 	bcc	853c0 <__Stack_Size+0x84fc0>
    4bb8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    4bbc:	00000021 	andeq	r0, r0, r1, lsr #32
    4bc0:	001dc01f 	andseq	ip, sp, pc, lsl r0
    4bc4:	02280100 	eoreq	r0, r8, #0, 2
    4bc8:	000000a4 	andeq	r0, r0, r4, lsr #1
    4bcc:	08004818 	stmdaeq	r0, {r3, r4, fp, lr}
    4bd0:	0000001c 	andeq	r0, r0, ip, lsl r0
    4bd4:	07c09c01 	strbeq	r9, [r0, r1, lsl #24]
    4bd8:	ea200000 	b	804be0 <__Stack_Size+0x8047e0>
    4bdc:	0100001b 	tsteq	r0, fp, lsl r0
    4be0:	003a0228 	eorseq	r0, sl, r8, lsr #4
    4be4:	22430000 	subcs	r0, r3, #0
    4be8:	6d210000 	stcvs	0, cr0, [r1, #-0]
    4bec:	01000016 	tsteq	r0, r6, lsl r0
    4bf0:	00a4022a 	adceq	r0, r4, sl, lsr #4
    4bf4:	22640000 	rsbcs	r0, r4, #0
    4bf8:	74220000 	strtvc	r0, [r2], #-0
    4bfc:	0100706d 	tsteq	r0, sp, rrx
    4c00:	003a022b 	eorseq	r0, sl, fp, lsr #4
    4c04:	228b0000 	addcs	r0, fp, #0
    4c08:	86210000 	strthi	r0, [r1], -r0
    4c0c:	0100001c 	tsteq	r0, ip, lsl r0
    4c10:	003a022b 	eorseq	r0, sl, fp, lsr #4
    4c14:	22ba0000 	adcscs	r0, sl, #0
    4c18:	23000000 	movwcs	r0, #0
    4c1c:	00001c92 	muleq	r0, r2, ip
    4c20:	34024e01 	strcc	r4, [r2], #-3585	; 0xe01
    4c24:	18080048 	stmdane	r8, {r3, r6}
    4c28:	01000000 	mrseq	r0, (UNDEF: 0)
    4c2c:	0007f79c 	muleq	r7, ip, r7
    4c30:	1bea2000 	blne	ffa8cc38 <SCS_BASE+0x1fa7ec38>
    4c34:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    4c38:	00003a02 	andeq	r3, r0, r2, lsl #20
    4c3c:	00230300 	eoreq	r0, r3, r0, lsl #6
    4c40:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    4c44:	50010070 	andpl	r0, r1, r0, ror r0
    4c48:	00003a02 	andeq	r3, r0, r2, lsl #20
    4c4c:	00232400 	eoreq	r2, r3, r0, lsl #8
    4c50:	e6230000 	strt	r0, [r3], -r0
    4c54:	0100001d 	tsteq	r0, sp, lsl r0
    4c58:	484c0266 	stmdami	ip, {r1, r2, r5, r6, r9}^
    4c5c:	00180800 	andseq	r0, r8, r0, lsl #16
    4c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c64:	0000082e 	andeq	r0, r0, lr, lsr #16
    4c68:	001bea20 	andseq	lr, fp, r0, lsr #20
    4c6c:	02660100 	rsbeq	r0, r6, #0, 2
    4c70:	0000003a 	andeq	r0, r0, sl, lsr r0
    4c74:	00002346 	andeq	r2, r0, r6, asr #6
    4c78:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    4c7c:	02680100 	rsbeq	r0, r8, #0, 2
    4c80:	0000003a 	andeq	r0, r0, sl, lsr r0
    4c84:	00002367 	andeq	r2, r0, r7, ror #6
    4c88:	1c2c1f00 	stcne	15, cr1, [ip], #-0
    4c8c:	84010000 	strhi	r0, [r1], #-0
    4c90:	0000a402 	andeq	sl, r0, r2, lsl #8
    4c94:	00486400 	subeq	r6, r8, r0, lsl #8
    4c98:	00001c08 	andeq	r1, r0, r8, lsl #24
    4c9c:	899c0100 	ldmibhi	ip, {r8}
    4ca0:	20000008 	andcs	r0, r0, r8
    4ca4:	00001bea 	andeq	r1, r0, sl, ror #23
    4ca8:	3a028401 	bcc	a5cb4 <__Stack_Size+0xa58b4>
    4cac:	96000000 	strls	r0, [r0], -r0
    4cb0:	21000023 	tstcs	r0, r3, lsr #32
    4cb4:	0000166d 	andeq	r1, r0, sp, ror #12
    4cb8:	a4028601 	strge	r8, [r2], #-1537	; 0x601
    4cbc:	b7000000 	strlt	r0, [r0, -r0]
    4cc0:	22000023 	andcs	r0, r0, #35	; 0x23
    4cc4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4cc8:	3a028801 	bcc	a6cd4 <__Stack_Size+0xa68d4>
    4ccc:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    4cd0:	21000023 	tstcs	r0, r3, lsr #32
    4cd4:	00001c86 	andeq	r1, r0, r6, lsl #25
    4cd8:	3a028801 	bcc	a6ce4 <__Stack_Size+0xa68e4>
    4cdc:	0d000000 	stceq	0, cr0, [r0, #-0]
    4ce0:	00000024 	andeq	r0, r0, r4, lsr #32
    4ce4:	001d931f 	andseq	r9, sp, pc, lsl r3
    4ce8:	02ac0100 	adceq	r0, ip, #0, 2
    4cec:	0000003a 	andeq	r0, r0, sl, lsr r0
    4cf0:	08004880 	stmdaeq	r0, {r7, fp, lr}
    4cf4:	00000030 	andeq	r0, r0, r0, lsr r0
    4cf8:	08e49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}^
    4cfc:	ea200000 	b	804d04 <__Stack_Size+0x804904>
    4d00:	0100001b 	tsteq	r0, fp, lsl r0
    4d04:	003a02ac 	eorseq	r0, sl, ip, lsr #5
    4d08:	24560000 	ldrbcs	r0, [r6], #-0
    4d0c:	0e210000 	cdpeq	0, 2, cr0, cr1, cr0, {0}
    4d10:	0100001e 	tsteq	r0, lr, lsl r0
    4d14:	003a02ae 	eorseq	r0, sl, lr, lsr #5
    4d18:	24a90000 	strtcs	r0, [r9], #0
    4d1c:	74210000 	strtvc	r0, [r1], #-0
    4d20:	01000019 	tsteq	r0, r9, lsl r0
    4d24:	003a02af 	eorseq	r0, sl, pc, lsr #5
    4d28:	24f60000 	ldrbtcs	r0, [r6], #0
    4d2c:	86210000 	strthi	r0, [r1], -r0
    4d30:	0100001c 	tsteq	r0, ip, lsl r0
    4d34:	003a02af 	eorseq	r0, sl, pc, lsr #5
    4d38:	25450000 	strbcs	r0, [r5, #-0]
    4d3c:	1f000000 	svcne	0x00000000
    4d40:	00001aca 	andeq	r1, r0, sl, asr #21
    4d44:	3a02da01 	bcc	bb550 <__Stack_Size+0xbb150>
    4d48:	b0000000 	andlt	r0, r0, r0
    4d4c:	14080048 	strne	r0, [r8], #-72	; 0x48
    4d50:	01000000 	mrseq	r0, (UNDEF: 0)
    4d54:	00092f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    4d58:	1bea2000 	blne	ffa8cd60 <SCS_BASE+0x1fa7ed60>
    4d5c:	da010000 	ble	44d64 <__Stack_Size+0x44964>
    4d60:	00003a02 	andeq	r3, r0, r2, lsl #20
    4d64:	0025c200 	eoreq	ip, r5, r0, lsl #4
    4d68:	1b3a2100 	blne	e8d170 <__Stack_Size+0xe8cd70>
    4d6c:	dc010000 	stcle	0, cr0, [r1], {-0}
    4d70:	00003a02 	andeq	r3, r0, r2, lsl #20
    4d74:	0025e300 	eoreq	lr, r5, r0, lsl #6
    4d78:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    4d7c:	dd010070 	stcle	0, cr0, [r1, #-448]	; 0xfffffe40
    4d80:	00003a02 	andeq	r3, r0, r2, lsl #20
    4d84:	00260200 	eoreq	r0, r6, r0, lsl #4
    4d88:	96260000 	strtls	r0, [r6], -r0
    4d8c:	0500001e 	streq	r0, [r0, #-30]
    4d90:	1eaf2629 	cdpne	6, 10, cr2, cr15, cr9, {1}
    4d94:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    4d98:	001c0626 	andseq	r0, ip, r6, lsr #12
    4d9c:	262c0500 	strtcs	r0, [ip], -r0, lsl #10
    4da0:	00001cf5 	strdeq	r1, [r0], -r5
    4da4:	bd272b05 	fstmdbxlt	r7!, {d2-d3}	;@ Deprecated
    4da8:	0500001c 	streq	r0, [r0, #-28]
    4dac:	00095c2e 	andeq	r5, r9, lr, lsr #24
    4db0:	003a2800 	eorseq	r2, sl, r0, lsl #16
    4db4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4db8:	00001b68 	andeq	r1, r0, r8, ror #22
    4dbc:	003a2f05 	eorseq	r2, sl, r5, lsl #30
    4dc0:	c2000000 	andgt	r0, r0, #0
    4dc4:	04000002 	streq	r0, [r0], #-2
    4dc8:	000e4000 	andeq	r4, lr, r0
    4dcc:	f5010400 			; <UNDEFINED> instruction: 0xf5010400
    4dd0:	01000007 	tsteq	r0, r7
    4dd4:	00001f73 	andeq	r1, r0, r3, ror pc
    4dd8:	00001185 	andeq	r1, r0, r5, lsl #3
    4ddc:	080048c4 	stmdaeq	r0, {r2, r6, r7, fp, lr}
    4de0:	000000c8 	andeq	r0, r0, r8, asr #1
    4de4:	00000baf 	andeq	r0, r0, pc, lsr #23
    4de8:	50050402 	andpl	r0, r5, r2, lsl #8
    4dec:	02000009 	andeq	r0, r0, #9
    4df0:	09140502 	ldmdbeq	r4, {r1, r8, sl}
    4df4:	01020000 	mrseq	r0, (UNDEF: 2)
    4df8:	000ab106 	andeq	fp, sl, r6, lsl #2
    4dfc:	33750300 	cmncc	r5, #0, 6
    4e00:	27020032 	smladxcs	r2, r2, r0, r0
    4e04:	00000045 	andeq	r0, r0, r5, asr #32
    4e08:	76070402 	strvc	r0, [r7], -r2, lsl #8
    4e0c:	0200000a 	andeq	r0, r0, #10
    4e10:	0c680702 	stcleq	7, cr0, [r8], #-8
    4e14:	75030000 	strvc	r0, [r3, #-0]
    4e18:	29020038 	stmdbcs	r2, {r3, r4, r5}
    4e1c:	0000005d 	andeq	r0, r0, sp, asr r0
    4e20:	af080102 	svcge	0x00080102
    4e24:	0400000a 	streq	r0, [r0], #-10
    4e28:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    4e2c:	006f2f02 	rsbeq	r2, pc, r2, lsl #30
    4e30:	45050000 	strmi	r0, [r5, #-0]
    4e34:	06000000 	streq	r0, [r0], -r0
    4e38:	89390201 	ldmdbhi	r9!, {r0, r9}
    4e3c:	07000000 	streq	r0, [r0, -r0]
    4e40:	000018da 	ldrdeq	r1, [r0], -sl
    4e44:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    4e48:	00010054 	andeq	r0, r1, r4, asr r0
    4e4c:	00089804 	andeq	r9, r8, r4, lsl #16
    4e50:	74390200 	ldrtvc	r0, [r9], #-512	; 0x200
    4e54:	06000000 	streq	r0, [r0], -r0
    4e58:	a93b0201 	ldmdbge	fp!, {r0, r9}
    4e5c:	07000000 	streq	r0, [r0, -r0]
    4e60:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    4e64:	0a4f0700 	beq	13c6a6c <__Stack_Size+0x13c666c>
    4e68:	00010000 	andeq	r0, r1, r0
    4e6c:	0000f904 	andeq	pc, r0, r4, lsl #18
    4e70:	943b0200 	ldrtls	r0, [fp], #-512	; 0x200
    4e74:	02000000 	andeq	r0, r0, #0
    4e78:	0a6d0704 	beq	1b46a90 <__Stack_Size+0x1b46690>
    4e7c:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    4e80:	de01a303 	cdple	3, 0, cr10, cr1, cr3, {0}
    4e84:	0a000000 	beq	4e8c <__Stack_Size+0x4a8c>
    4e88:	03005243 	movweq	r5, #579	; 0x243
    4e8c:	006401a5 	rsbeq	r0, r4, r5, lsr #3
    4e90:	0a000000 	beq	4e98 <__Stack_Size+0x4a98>
    4e94:	00525343 	subseq	r5, r2, r3, asr #6
    4e98:	6401a603 	strvs	sl, [r1], #-1539	; 0x603
    4e9c:	04000000 	streq	r0, [r0], #-0
    4ea0:	1f5c0b00 	svcne	0x005c0b00
    4ea4:	a7030000 	strge	r0, [r3, -r0]
    4ea8:	0000bb01 	andeq	fp, r0, r1, lsl #22
    4eac:	1f2d0c00 	svcne	0x002d0c00
    4eb0:	43010000 	movwmi	r0, #4096	; 0x1000
    4eb4:	080048c4 	stmdaeq	r0, {r2, r6, r7, fp, lr}
    4eb8:	0000001a 	andeq	r0, r0, sl, lsl r0
    4ebc:	01309c01 	teqeq	r0, r1, lsl #24
    4ec0:	d00d0000 	andle	r0, sp, r0
    4ec4:	a0080048 	andge	r0, r8, r8, asr #32
    4ec8:	19000002 	stmdbne	r0, {r1}
    4ecc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4ed0:	31015101 	tstcc	r1, r1, lsl #2
    4ed4:	0350010e 	cmpeq	r0, #-2147483645	; 0x80000003
    4ed8:	00244840 	eoreq	r4, r4, r0, asr #16
    4edc:	0048de0f 	subeq	sp, r8, pc, lsl #28
    4ee0:	0002a008 	andeq	sl, r2, r8
    4ee4:	51010e00 	tstpl	r1, r0, lsl #28
    4ee8:	010e3001 	tsteq	lr, r1
    4eec:	48400350 	stmdami	r0, {r4, r6, r8, r9}^
    4ef0:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    4ef4:	00000418 	andeq	r0, r0, r8, lsl r4
    4ef8:	48de5101 	ldmmi	lr, {r0, r8, ip, lr}^
    4efc:	000a0800 	andeq	r0, sl, r0, lsl #16
    4f00:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f04:	00000153 	andeq	r0, r0, r3, asr r1
    4f08:	0015de10 	andseq	sp, r5, r0, lsl lr
    4f0c:	a9510100 	ldmdbge	r1, {r8}^
    4f10:	01000000 	mrseq	r0, (UNDEF: 0)
    4f14:	680c0050 	stmdavs	ip, {r4, r6}
    4f18:	0100001f 	tsteq	r0, pc, lsl r0
    4f1c:	0048e861 	subeq	lr, r8, r1, ror #16
    4f20:	00000c08 	andeq	r0, r0, r8, lsl #24
    4f24:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    4f28:	10000001 	andne	r0, r0, r1
    4f2c:	000015de 	ldrdeq	r1, [r0], -lr
    4f30:	00a96101 	adceq	r6, r9, r1, lsl #2
    4f34:	50010000 	andpl	r0, r1, r0
    4f38:	1f950c00 	svcne	0x00950c00
    4f3c:	7a010000 	bvc	44f44 <__Stack_Size+0x44b44>
    4f40:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
    4f44:	00000014 	andeq	r0, r0, r4, lsl r0
    4f48:	01aa9c01 			; <UNDEFINED> instruction: 0x01aa9c01
    4f4c:	46110000 	ldrmi	r0, [r1], -r0
    4f50:	0100001f 	tsteq	r0, pc, lsl r0
    4f54:	00003a7a 	andeq	r3, r0, sl, ror sl
    4f58:	00262d00 	eoreq	r2, r6, r0, lsl #26
    4f5c:	19741200 	ldmdbne	r4!, {r9, ip}^
    4f60:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4f64:	0000003a 	andeq	r0, r0, sl, lsr r0
    4f68:	0000264e 	andeq	r2, r0, lr, asr #12
    4f6c:	1ffd0c00 	svcne	0x00fd0c00
    4f70:	95010000 	strls	r0, [r1, #-0]
    4f74:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
    4f78:	0000000c 	andeq	r0, r0, ip
    4f7c:	01cd9c01 	biceq	r9, sp, r1, lsl #24
    4f80:	de100000 	cdple	0, 1, cr0, cr0, cr0, {0}
    4f84:	01000015 	tsteq	r0, r5, lsl r0
    4f88:	0000a995 	muleq	r0, r5, r9
    4f8c:	00500100 	subseq	r0, r0, r0, lsl #2
    4f90:	001fc60c 	andseq	ip, pc, ip, lsl #12
    4f94:	14ad0100 	strtne	r0, [sp], #256	; 0x100
    4f98:	2c080049 	stccs	0, cr0, [r8], {73}	; 0x49
    4f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4fa0:	0002229c 	muleq	r2, ip, r2
    4fa4:	1f381100 	svcne	0x00381100
    4fa8:	ad010000 	stcge	0, cr0, [r1, #-0]
    4fac:	0000003a 	andeq	r0, r0, sl, lsr r0
    4fb0:	00002678 	andeq	r2, r0, r8, ror r6
    4fb4:	001fef11 	andseq	lr, pc, r1, lsl pc	; <UNPREDICTABLE>
    4fb8:	53ad0100 			; <UNDEFINED> instruction: 0x53ad0100
    4fbc:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    4fc0:	12000026 	andne	r0, r0, #38	; 0x26
    4fc4:	00001974 	andeq	r1, r0, r4, ror r9
    4fc8:	003aaf01 	eorseq	sl, sl, r1, lsl #30
    4fcc:	26d30000 	ldrbcs	r0, [r3], r0
    4fd0:	34130000 	ldrcc	r0, [r3], #-0
    4fd4:	b7080049 	strlt	r0, [r8, -r9, asr #32]
    4fd8:	13000002 	movwne	r0, #2
    4fdc:	08004938 	stmdaeq	r0, {r3, r4, r5, r8, fp, lr}
    4fe0:	000002be 			; <UNDEFINED> instruction: 0x000002be
    4fe4:	1f0a0c00 	svcne	0x000a0c00
    4fe8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    4fec:	08004940 	stmdaeq	r0, {r6, r8, fp, lr}
    4ff0:	00000028 	andeq	r0, r0, r8, lsr #32
    4ff4:	02419c01 	subeq	r9, r1, #256	; 0x100
    4ff8:	60130000 	andsvs	r0, r3, r0
    4ffc:	b7080049 	strlt	r0, [r8, -r9, asr #32]
    5000:	00000002 	andeq	r0, r0, r2
    5004:	001fa814 	andseq	sl, pc, r4, lsl r8	; <UNPREDICTABLE>
    5008:	89f20100 	ldmibhi	r2!, {r8}^
    500c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    5010:	14080049 	strne	r0, [r8], #-73	; 0x49
    5014:	01000000 	mrseq	r0, (UNDEF: 0)
    5018:	0002799c 	muleq	r2, ip, r9
    501c:	1f531100 	svcne	0x00531100
    5020:	f2010000 	vhadd.s8	d0, d1, d0
    5024:	0000003a 	andeq	r0, r0, sl, lsr r0
    5028:	00002708 	andeq	r2, r0, r8, lsl #14
    502c:	00166d12 	andseq	r6, r6, r2, lsl sp
    5030:	89f40100 	ldmibhi	r4!, {r8}^
    5034:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5038:	00000027 	andeq	r0, r0, r7, lsr #32
    503c:	001f1f15 	andseq	r1, pc, r5, lsl pc	; <UNPREDICTABLE>
    5040:	01100100 	tsteq	r0, r0, lsl #2
    5044:	0800497c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, lr}
    5048:	00000010 	andeq	r0, r0, r0, lsl r0
    504c:	02a09c01 	adceq	r9, r0, #256	; 0x100
    5050:	53160000 	tstpl	r6, #0
    5054:	0100001f 	tsteq	r0, pc, lsl r0
    5058:	003a0110 	eorseq	r0, sl, r0, lsl r1
    505c:	27620000 	strbcs	r0, [r2, -r0]!
    5060:	17000000 	strne	r0, [r0, -r0]
    5064:	00001fd8 	ldrdeq	r1, [r0], -r8
    5068:	b7011505 	strlt	r1, [r1, -r5, lsl #10]
    506c:	18000002 	stmdane	r0, {r1}
    5070:	0000003a 	andeq	r0, r0, sl, lsr r0
    5074:	0000a918 	andeq	sl, r0, r8, lsl r9
    5078:	c0190000 	andsgt	r0, r9, r0
    507c:	0400001f 	streq	r0, [r0], #-31
    5080:	1fba191b 	svcne	0x00ba191b
    5084:	1c040000 	stcne	0, cr0, [r4], {-0}
    5088:	00086d00 	andeq	r6, r8, r0, lsl #26
    508c:	b4000400 	strlt	r0, [r0], #-1024	; 0x400
    5090:	0400000f 	streq	r0, [r0], #-15
    5094:	0007f501 	andeq	pc, r7, r1, lsl #10
    5098:	228e0100 	addcs	r0, lr, #0, 2
    509c:	11850000 	orrne	r0, r5, r0
    50a0:	498c0000 	stmibmi	ip, {}	; <UNPREDICTABLE>
    50a4:	033c0800 	teqeq	ip, #0, 16
    50a8:	0c9a0000 	ldceq	0, cr0, [sl], {0}
    50ac:	04020000 	streq	r0, [r2], #-0
    50b0:	00095005 	andeq	r5, r9, r5
    50b4:	05020200 	streq	r0, [r2, #-512]	; 0x200
    50b8:	00000914 	andeq	r0, r0, r4, lsl r9
    50bc:	b1060102 	tstlt	r6, r2, lsl #2
    50c0:	0300000a 	movweq	r0, #10
    50c4:	00323375 	eorseq	r3, r2, r5, ror r3
    50c8:	00452702 	subeq	r2, r5, r2, lsl #14
    50cc:	04020000 	streq	r0, [r2], #-0
    50d0:	000a7607 	andeq	r7, sl, r7, lsl #12
    50d4:	31750300 	cmncc	r5, r0, lsl #6
    50d8:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    50dc:	00000057 	andeq	r0, r0, r7, asr r0
    50e0:	68070202 	stmdavs	r7, {r1, r9}
    50e4:	0300000c 	movweq	r0, #12
    50e8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    50ec:	00006829 	andeq	r6, r0, r9, lsr #16
    50f0:	08010200 	stmdaeq	r1, {r9}
    50f4:	00000aaf 	andeq	r0, r0, pc, lsr #21
    50f8:	38637503 	stmdacc	r3!, {r0, r1, r8, sl, ip, sp, lr}^
    50fc:	7a2d0200 	bvc	b45904 <__Stack_Size+0xb45504>
    5100:	04000000 	streq	r0, [r0], #-0
    5104:	00000068 	andeq	r0, r0, r8, rrx
    5108:	0004ba05 	andeq	fp, r4, r5, lsl #20
    510c:	8a2f0200 	bhi	bc5914 <__Stack_Size+0xbc5514>
    5110:	06000000 	streq	r0, [r0], -r0
    5114:	00000045 	andeq	r0, r0, r5, asr #32
    5118:	38757603 	ldmdacc	r5!, {r0, r1, r9, sl, ip, sp, lr}^
    511c:	9a310200 	bls	c45924 <__Stack_Size+0xc45524>
    5120:	06000000 	streq	r0, [r0], -r0
    5124:	00000068 	andeq	r0, r0, r8, rrx
    5128:	39020107 	stmdbcc	r2, {r0, r1, r2, r8}
    512c:	000000b4 	strheq	r0, [r0], -r4
    5130:	0018da08 	andseq	sp, r8, r8, lsl #20
    5134:	53090000 	movwpl	r0, #36864	; 0x9000
    5138:	01005445 	tsteq	r0, r5, asr #8
    513c:	08980500 	ldmeq	r8, {r8, sl}
    5140:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    5144:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5148:	00206205 	eoreq	r6, r0, r5, lsl #4
    514c:	9f390200 	svcls	0x00390200
    5150:	07000000 	streq	r0, [r0, -r0]
    5154:	df3b0201 	svcle	0x003b0201
    5158:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    515c:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    5160:	0a4f0800 	beq	13c7168 <__Stack_Size+0x13c6d68>
    5164:	00010000 	andeq	r0, r1, r0
    5168:	0000f905 	andeq	pc, r0, r5, lsl #18
    516c:	ca3b0200 	bgt	ec5974 <__Stack_Size+0xec5574>
    5170:	07000000 	streq	r0, [r0, -r0]
    5174:	ff3e0201 			; <UNDEFINED> instruction: 0xff3e0201
    5178:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    517c:	00000011 	andeq	r0, r0, r1, lsl r0
    5180:	05980800 	ldreq	r0, [r8, #2048]	; 0x800
    5184:	00010000 	andeq	r0, r1, r0
    5188:	00013105 	andeq	r3, r1, r5, lsl #2
    518c:	ea3e0200 	b	f85994 <__Stack_Size+0xf85594>
    5190:	02000000 	andeq	r0, r0, #0
    5194:	0a6d0704 	beq	1b46dac <__Stack_Size+0x1b469ac>
    5198:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    519c:	9c01aa03 	stcls	10, cr10, [r1], {3}
    51a0:	0b000001 	bleq	51ac <__Stack_Size+0x4dac>
    51a4:	03005243 	movweq	r5, #579	; 0x243
    51a8:	007f01ac 	rsbseq	r0, pc, ip, lsr #3
    51ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    51b0:	000020bc 	strheq	r2, [r0], -ip
    51b4:	7f01ad03 	svcvc	0x0001ad03
    51b8:	04000000 	streq	r0, [r0], #-0
    51bc:	5249430b 	subpl	r4, r9, #738197504	; 0x2c000000
    51c0:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    51c4:	0000007f 	andeq	r0, r0, pc, ror r0
    51c8:	211b0c08 	tstcs	fp, r8, lsl #24
    51cc:	af030000 	svcge	0x00030000
    51d0:	00007f01 	andeq	r7, r0, r1, lsl #30
    51d4:	1a0c0c00 	bne	3081dc <__Stack_Size+0x307ddc>
    51d8:	03000020 	movweq	r0, #32
    51dc:	007f01b0 	ldrhteq	r0, [pc], #-16
    51e0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    51e4:	0000213d 	andeq	r2, r0, sp, lsr r1
    51e8:	7f01b103 	svcvc	0x0001b103
    51ec:	14000000 	strne	r0, [r0], #-0
    51f0:	00214e0c 	eoreq	r4, r1, ip, lsl #28
    51f4:	01b20300 			; <UNDEFINED> instruction: 0x01b20300
    51f8:	0000007f 	andeq	r0, r0, pc, ror r0
    51fc:	20d00c18 	sbcscs	r0, r0, r8, lsl ip
    5200:	b3030000 	movwlt	r0, #12288	; 0x3000
    5204:	00007f01 	andeq	r7, r0, r1, lsl #30
    5208:	6b0c1c00 	blvs	30c210 <__Stack_Size+0x30be10>
    520c:	03000020 	movweq	r0, #32
    5210:	007f01b4 	ldrhteq	r0, [pc], #-20
    5214:	0b200000 	bleq	80521c <__Stack_Size+0x804e1c>
    5218:	00525343 	subseq	r5, r2, r3, asr #6
    521c:	7f01b503 	svcvc	0x0001b503
    5220:	24000000 	strcs	r0, [r0], #-0
    5224:	200e0d00 	andcs	r0, lr, r0, lsl #26
    5228:	b6030000 	strlt	r0, [r3], -r0
    522c:	00011101 	andeq	r1, r1, r1, lsl #2
    5230:	04140e00 	ldreq	r0, [r4], #-3584	; 0xe00
    5234:	0001ed19 	andeq	lr, r1, r9, lsl sp
    5238:	22030f00 	andcs	r0, r3, #0, 30
    523c:	1b040000 	blne	105244 <__Stack_Size+0x104e44>
    5240:	0000003a 	andeq	r0, r0, sl, lsr r0
    5244:	20c10f00 	sbccs	r0, r1, r0, lsl #30
    5248:	1c040000 	stcne	0, cr0, [r4], {-0}
    524c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5250:	225b0f04 	subscs	r0, fp, #4, 30
    5254:	1d040000 	stcne	0, cr0, [r4, #-0]
    5258:	0000003a 	andeq	r0, r0, sl, lsr r0
    525c:	221f0f08 	andscs	r0, pc, #8, 30
    5260:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    5264:	0000003a 	andeq	r0, r0, sl, lsr r0
    5268:	21960f0c 	orrscs	r0, r6, ip, lsl #30
    526c:	1f040000 	svcne	0x00040000
    5270:	0000003a 	andeq	r0, r0, sl, lsr r0
    5274:	89050010 	stmdbhi	r5, {r4}
    5278:	04000020 	streq	r0, [r0], #-32
    527c:	0001a820 	andeq	sl, r1, r0, lsr #16
    5280:	003c1000 	eorseq	r1, ip, r0
    5284:	7c010000 	stcvc	0, cr0, [r1], {-0}
    5288:	0800498c 	stmdaeq	r0, {r2, r3, r7, r8, fp, lr}
    528c:	0000003c 	andeq	r0, r0, ip, lsr r0
    5290:	4f119c01 	svcmi	0x00119c01
    5294:	01000006 	tsteq	r0, r6
    5298:	0049c89f 	umaaleq	ip, r9, pc, r8	; <UNPREDICTABLE>
    529c:	00003808 	andeq	r3, r0, r8, lsl #16
    52a0:	2c9c0100 	ldfcss	f0, [ip], {0}
    52a4:	12000002 	andne	r0, r0, #2
    52a8:	00002242 	andeq	r2, r0, r2, asr #4
    52ac:	003a9f01 	eorseq	r9, sl, r1, lsl #30
    52b0:	50010000 	andpl	r0, r1, r0
    52b4:	21781100 	cmncs	r8, r0, lsl #2
    52b8:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    52bc:	08004a00 	stmdaeq	r0, {r9, fp, lr}
    52c0:	00000014 	andeq	r0, r0, r4, lsl r0
    52c4:	02609c01 	rsbeq	r9, r0, #256	; 0x100
    52c8:	82130000 	andshi	r0, r3, #0
    52cc:	01000021 	tsteq	r0, r1, lsr #32
    52d0:	00005ee9 	andeq	r5, r0, r9, ror #29
    52d4:	00278300 	eoreq	r8, r7, r0, lsl #6
    52d8:	19741400 	ldmdbne	r4!, {sl, ip}^
    52dc:	eb010000 	bl	452e4 <__Stack_Size+0x44ee4>
    52e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    52e4:	000027a4 	andeq	r2, r0, r4, lsr #15
    52e8:	22e71500 	rsccs	r1, r7, #0, 10
    52ec:	06010000 	streq	r0, [r1], -r0
    52f0:	004a1401 	subeq	r1, sl, r1, lsl #8
    52f4:	00000c08 	andeq	r0, r0, r8, lsl #24
    52f8:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    52fc:	16000002 	strne	r0, [r0], -r2
    5300:	000015de 	ldrdeq	r1, [r0], -lr
    5304:	df010601 	svcle	0x00010601
    5308:	01000000 	mrseq	r0, (UNDEF: 0)
    530c:	57150050 			; <UNDEFINED> instruction: 0x57150050
    5310:	01000001 	tsteq	r0, r1
    5314:	4a20011f 	bmi	805798 <__Stack_Size+0x805398>
    5318:	00140800 	andseq	r0, r4, r0, lsl #16
    531c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5320:	000002cc 	andeq	r0, r0, ip, asr #5
    5324:	0021b017 	eoreq	fp, r1, r7, lsl r0
    5328:	011f0100 	tsteq	pc, r0, lsl #2
    532c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5330:	000027ce 	andeq	r2, r0, lr, asr #15
    5334:	00209b17 	eoreq	r9, r0, r7, lsl fp
    5338:	011f0100 	tsteq	pc, r0, lsl #2
    533c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5340:	000027ef 	andeq	r2, r0, pc, ror #15
    5344:	00197418 	andseq	r7, r9, r8, lsl r4
    5348:	01210100 			; <UNDEFINED> instruction: 0x01210100
    534c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5350:	00002810 	andeq	r2, r0, r0, lsl r8
    5354:	0c061500 	cfstr32eq	mvfx1, [r6], {-0}
    5358:	3c010000 	stccc	0, cr0, [r1], {-0}
    535c:	004a3401 	subeq	r3, sl, r1, lsl #8
    5360:	00000c08 	andeq	r0, r0, r8, lsl #24
    5364:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    5368:	16000002 	strne	r0, [r0], -r2
    536c:	000015de 	ldrdeq	r1, [r0], -lr
    5370:	df013c01 	svcle	0x00013c01
    5374:	01000000 	mrseq	r0, (UNDEF: 0)
    5378:	17150050 			; <UNDEFINED> instruction: 0x17150050
    537c:	01000000 	mrseq	r0, (UNDEF: 0)
    5380:	4a40014f 	bmi	10058c4 <__Stack_Size+0x10054c4>
    5384:	00140800 	andseq	r0, r4, r0, lsl #16
    5388:	9c010000 	stcls	0, cr0, [r1], {-0}
    538c:	00000328 	andeq	r0, r0, r8, lsr #6
    5390:	00224a17 	eoreq	r4, r2, r7, lsl sl
    5394:	014f0100 	mrseq	r0, (UNDEF: 95)
    5398:	0000003a 	andeq	r0, r0, sl, lsr r0
    539c:	0000284d 	andeq	r2, r0, sp, asr #16
    53a0:	00197418 	andseq	r7, r9, r8, lsl r4
    53a4:	01510100 	cmpeq	r1, r0, lsl #2
    53a8:	0000003a 	andeq	r0, r0, sl, lsr r0
    53ac:	0000286e 	andeq	r2, r0, lr, ror #16
    53b0:	0a3b1900 	beq	ecb7b8 <__Stack_Size+0xecb3b8>
    53b4:	6d010000 	stcvs	0, cr0, [r1, #-0]
    53b8:	00005e01 	andeq	r5, r0, r1, lsl #28
    53bc:	004a5400 	subeq	r5, sl, r0, lsl #8
    53c0:	00001008 	andeq	r1, r0, r8
    53c4:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    53c8:	00000731 	andeq	r0, r0, r1, lsr r7
    53cc:	64018401 	strvs	r8, [r1], #-1025	; 0x401
    53d0:	1408004a 	strne	r0, [r8], #-74	; 0x4a
    53d4:	01000000 	mrseq	r0, (UNDEF: 0)
    53d8:	0003759c 	muleq	r3, ip, r5
    53dc:	21ee1700 	mvncs	r1, r0, lsl #14
    53e0:	84010000 	strhi	r0, [r1], #-0
    53e4:	00003a01 	andeq	r3, r0, r1, lsl #20
    53e8:	00289800 	eoreq	r9, r8, r0, lsl #16
    53ec:	19741800 	ldmdbne	r4!, {fp, ip}^
    53f0:	86010000 	strhi	r0, [r1], -r0
    53f4:	00003a01 	andeq	r3, r0, r1, lsl #20
    53f8:	0028b900 	eoreq	fp, r8, r0, lsl #18
    53fc:	70150000 	andsvc	r0, r5, r0
    5400:	01000007 	tsteq	r0, r7
    5404:	4a7801a5 	bmi	1e05aa0 <__Stack_Size+0x1e056a0>
    5408:	00140800 	andseq	r0, r4, r0, lsl #16
    540c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5410:	000003ac 	andeq	r0, r0, ip, lsr #7
    5414:	00202317 	eoreq	r2, r0, r7, lsl r3
    5418:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    541c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5420:	000028e3 	andeq	r2, r0, r3, ror #17
    5424:	00197418 	andseq	r7, r9, r8, lsl r4
    5428:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    542c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5430:	00002904 	andeq	r2, r0, r4, lsl #18
    5434:	01fb1500 	mvnseq	r1, r0, lsl #10
    5438:	c6010000 	strgt	r0, [r1], -r0
    543c:	004a8c01 	subeq	r8, sl, r1, lsl #24
    5440:	00001408 	andeq	r1, r0, r8, lsl #8
    5444:	e39c0100 	orrs	r0, ip, #0, 2
    5448:	17000003 	strne	r0, [r0, -r3]
    544c:	00002023 	andeq	r2, r0, r3, lsr #32
    5450:	3a01c601 	bcc	76c5c <__Stack_Size+0x7685c>
    5454:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    5458:	18000029 	stmdane	r0, {r0, r3, r5}
    545c:	00001974 	andeq	r1, r0, r4, ror r9
    5460:	3a01c801 	bcc	7746c <__Stack_Size+0x7706c>
    5464:	4f000000 	svcmi	0x00000000
    5468:	00000029 	andeq	r0, r0, r9, lsr #32
    546c:	00222f15 	eoreq	r2, r2, r5, lsl pc
    5470:	01e90100 	mvneq	r0, r0, lsl #2
    5474:	08004aa0 	stmdaeq	r0, {r5, r7, r9, fp, lr}
    5478:	00000018 	andeq	r0, r0, r8, lsl r0
    547c:	04189c01 	ldreq	r9, [r8], #-3073	; 0xc01
    5480:	fa170000 	blx	5c5488 <__Stack_Size+0x5c5088>
    5484:	01000022 	tsteq	r0, r2, lsr #32
    5488:	005e01e9 	subseq	r0, lr, r9, ror #3
    548c:	29790000 	ldmdbcs	r9!, {}^	; <UNPREDICTABLE>
    5490:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
    5494:	01000015 	tsteq	r0, r5, lsl r0
    5498:	00df01e9 	sbcseq	r0, pc, r9, ror #3
    549c:	51010000 	mrspl	r0, (UNDEF: 1)
    54a0:	20ff1500 	rscscs	r1, pc, r0, lsl #10
    54a4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    54a8:	004ab802 	subeq	fp, sl, r2, lsl #16
    54ac:	00000c08 	andeq	r0, r0, r8, lsl #24
    54b0:	3d9c0100 	ldfccs	f0, [ip]
    54b4:	16000004 	strne	r0, [r0], -r4
    54b8:	000021cf 	andeq	r2, r0, pc, asr #3
    54bc:	3a020801 	bcc	874c8 <__Stack_Size+0x870c8>
    54c0:	01000000 	mrseq	r0, (UNDEF: 0)
    54c4:	2c150050 	ldccs	0, cr0, [r5], {80}	; 0x50
    54c8:	01000020 	tsteq	r0, r0, lsr #32
    54cc:	4ac4021d 	bmi	ff105d48 <SCS_BASE+0x1f0f7d48>
    54d0:	00140800 	andseq	r0, r4, r0, lsl #16
    54d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    54d8:	00000474 	andeq	r0, r0, r4, ror r4
    54dc:	00207f17 	eoreq	r7, r0, r7, lsl pc
    54e0:	021d0100 	andseq	r0, sp, #0, 2
    54e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    54e8:	000029b3 			; <UNDEFINED> instruction: 0x000029b3
    54ec:	00197418 	andseq	r7, r9, r8, lsl r4
    54f0:	021f0100 	andseq	r0, pc, #0, 2
    54f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    54f8:	000029d4 	ldrdeq	r2, [r0], -r4
    54fc:	22b01500 	adcscs	r1, r0, #0, 10
    5500:	3c010000 	stccc	0, cr0, [r1], {-0}
    5504:	004ad802 	subeq	sp, sl, r2, lsl #16
    5508:	00002008 	andeq	r2, r0, r8
    550c:	999c0100 	ldmibls	ip, {r8}
    5510:	16000004 	strne	r0, [r0], -r4
    5514:	00002053 	andeq	r2, r0, r3, asr r0
    5518:	5e023c01 	cdppl	12, 0, cr3, cr2, cr1, {0}
    551c:	01000000 	mrseq	r0, (UNDEF: 0)
    5520:	10150050 	andsne	r0, r5, r0, asr r0
    5524:	01000021 	tsteq	r0, r1, lsr #32
    5528:	4af80263 	bmi	ffe05ebc <SCS_BASE+0x1fdf7ebc>
    552c:	000c0800 	andeq	r0, ip, r0, lsl #16
    5530:	9c010000 	stcls	0, cr0, [r1], {-0}
    5534:	000004be 			; <UNDEFINED> instruction: 0x000004be
    5538:	0015de16 	andseq	sp, r5, r6, lsl lr
    553c:	02630100 	rsbeq	r0, r3, #0, 2
    5540:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5544:	15005001 	strne	r5, [r0, #-1]
    5548:	000021be 			; <UNDEFINED> instruction: 0x000021be
    554c:	04027901 	streq	r7, [r2], #-2305	; 0x901
    5550:	1008004b 	andne	r0, r8, fp, asr #32
    5554:	01000000 	mrseq	r0, (UNDEF: 0)
    5558:	0004e59c 	muleq	r4, ip, r5
    555c:	20e61700 	rsccs	r1, r6, r0, lsl #14
    5560:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    5564:	00003a02 	andeq	r3, r0, r2, lsl #20
    5568:	0029fe00 	eoreq	pc, r9, r0, lsl #28
    556c:	be150000 	cdplt	0, 1, cr0, cr5, cr0, {0}
    5570:	01000022 	tsteq	r0, r2, lsr #32
    5574:	4b14028c 	blmi	505fac <__Stack_Size+0x505bac>
    5578:	000c0800 	andeq	r0, ip, r0, lsl #16
    557c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5580:	0000050a 	andeq	r0, r0, sl, lsl #10
    5584:	0015de16 	andseq	sp, r5, r6, lsl lr
    5588:	028c0100 	addeq	r0, ip, #0, 2
    558c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5590:	15005001 	strne	r5, [r0, #-1]
    5594:	0000227c 	andeq	r2, r0, ip, ror r2
    5598:	20029c01 	andcs	r9, r2, r1, lsl #24
    559c:	8408004b 	strhi	r0, [r8], #-75	; 0x4b
    55a0:	01000000 	mrseq	r0, (UNDEF: 0)
    55a4:	00056f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    55a8:	22141600 	andscs	r1, r4, #0, 12
    55ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    55b0:	00056f02 	andeq	r6, r5, r2, lsl #30
    55b4:	1a500100 	bne	14059bc <__Stack_Size+0x14055bc>
    55b8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    55bc:	3a029e01 	bcc	acdc8 <__Stack_Size+0xac9c8>
    55c0:	1f000000 	svcne	0x00000000
    55c4:	1800002a 	stmdane	r0, {r1, r3, r5}
    55c8:	000020f7 	strdeq	r2, [r0], -r7
    55cc:	3a029e01 	bcc	acdd8 <__Stack_Size+0xac9d8>
    55d0:	a3000000 	movwge	r0, #0
    55d4:	1800002a 	stmdane	r0, {r1, r3, r5}
    55d8:	00002133 	andeq	r2, r0, r3, lsr r1
    55dc:	3a029e01 	bcc	acde8 <__Stack_Size+0xac9e8>
    55e0:	d3000000 	movwle	r0, #0
    55e4:	1800002a 	stmdane	r0, {r1, r3, r5}
    55e8:	0000223c 	andeq	r2, r0, ip, lsr r2
    55ec:	3a029e01 	bcc	acdf8 <__Stack_Size+0xac9f8>
    55f0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    55f4:	0000002a 	andeq	r0, r0, sl, lsr #32
    55f8:	01ed041b 	mvneq	r0, fp, lsl r4
    55fc:	a6150000 	ldrge	r0, [r5], -r0
    5600:	01000020 	tsteq	r0, r0, lsr #32
    5604:	4ba40300 	blmi	fe90620c <SCS_BASE+0x1e8f820c>
    5608:	00180800 	andseq	r0, r8, r0, lsl #16
    560c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5610:	000005aa 	andeq	r0, r0, sl, lsr #11
    5614:	00230117 	eoreq	r0, r3, r7, lsl r1
    5618:	03000100 	movweq	r0, #256	; 0x100
    561c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5620:	00002b83 	andeq	r2, r0, r3, lsl #23
    5624:	0015de16 	andseq	sp, r5, r6, lsl lr
    5628:	03000100 	movweq	r0, #256	; 0x100
    562c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5630:	15005101 	strne	r5, [r0, #-257]	; 0x101
    5634:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    5638:	bc032101 	stflts	f2, [r3], {1}
    563c:	1808004b 	stmdane	r8, {r0, r1, r3, r6}
    5640:	01000000 	mrseq	r0, (UNDEF: 0)
    5644:	0005df9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    5648:	20701700 	rsbscs	r1, r0, r0, lsl #14
    564c:	21010000 	mrscs	r0, (UNDEF: 1)
    5650:	00003a03 	andeq	r3, r0, r3, lsl #20
    5654:	002bbd00 	eoreq	fp, fp, r0, lsl #26
    5658:	15de1600 	ldrbne	r1, [lr, #1536]	; 0x600
    565c:	21010000 	mrscs	r0, (UNDEF: 1)
    5660:	0000df03 	andeq	sp, r0, r3, lsl #30
    5664:	00510100 	subseq	r0, r1, r0, lsl #2
    5668:	0005bb15 	andeq	fp, r5, r5, lsl fp
    566c:	03430100 	movteq	r0, #12544	; 0x3100
    5670:	08004bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp, lr}
    5674:	00000018 	andeq	r0, r0, r8, lsl r0
    5678:	06149c01 	ldreq	r9, [r4], -r1, lsl #24
    567c:	24170000 	ldrcs	r0, [r7], #-0
    5680:	01000021 	tsteq	r0, r1, lsr #32
    5684:	003a0343 	eorseq	r0, sl, r3, asr #6
    5688:	2bf70000 	blcs	ffdc5690 <SCS_BASE+0x1fdb7690>
    568c:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
    5690:	01000015 	tsteq	r0, r5, lsl r0
    5694:	00df0343 	sbcseq	r0, pc, r3, asr #6
    5698:	51010000 	mrspl	r0, (UNDEF: 1)
    569c:	199e1500 	ldmibne	lr, {r8, sl, ip}
    56a0:	63010000 	movwvs	r0, #4096	; 0x1000
    56a4:	004bec03 	subeq	lr, fp, r3, lsl #24
    56a8:	00001808 	andeq	r1, r0, r8, lsl #16
    56ac:	499c0100 	ldmibmi	ip, {r8}
    56b0:	17000006 	strne	r0, [r0, -r6]
    56b4:	00002070 	andeq	r2, r0, r0, ror r0
    56b8:	3a036301 	bcc	de2c4 <__Stack_Size+0xddec4>
    56bc:	31000000 	mrscc	r0, (UNDEF: 0)
    56c0:	1600002c 	strne	r0, [r0], -ip, lsr #32
    56c4:	000015de 	ldrdeq	r1, [r0], -lr
    56c8:	df036301 	svcle	0x00036301
    56cc:	01000000 	mrseq	r0, (UNDEF: 0)
    56d0:	d8150051 	ldmdale	r5, {r0, r4, r6}
    56d4:	0100001f 	tsteq	r0, pc, lsl r0
    56d8:	4c040384 	stcmi	3, cr0, [r4], {132}	; 0x84
    56dc:	00180800 	andseq	r0, r8, r0, lsl #16
    56e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    56e4:	0000067e 	andeq	r0, r0, lr, ror r6
    56e8:	00212417 	eoreq	r2, r1, r7, lsl r4
    56ec:	03840100 	orreq	r0, r4, #0, 2
    56f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    56f4:	00002c6b 	andeq	r2, r0, fp, ror #24
    56f8:	0015de16 	andseq	sp, r5, r6, lsl lr
    56fc:	03840100 	orreq	r0, r4, #0, 2
    5700:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5704:	15005101 	strne	r5, [r0, #-257]	; 0x101
    5708:	00002165 	andeq	r2, r0, r5, ror #2
    570c:	1c039c01 	stcne	12, cr9, [r3], {1}
    5710:	0c08004c 	stceq	0, cr0, [r8], {76}	; 0x4c
    5714:	01000000 	mrseq	r0, (UNDEF: 0)
    5718:	0006a39c 	muleq	r6, ip, r3
    571c:	15de1600 	ldrbne	r1, [lr, #1536]	; 0x600
    5720:	9c010000 	stcls	0, cr0, [r1], {-0}
    5724:	0000df03 	andeq	sp, r0, r3, lsl #30
    5728:	00500100 	subseq	r0, r0, r0, lsl #2
    572c:	0022cc15 	eoreq	ip, r2, r5, lsl ip
    5730:	03ac0100 			; <UNDEFINED> instruction: 0x03ac0100
    5734:	08004c28 	stmdaeq	r0, {r3, r5, sl, fp, lr}
    5738:	0000000c 	andeq	r0, r0, ip
    573c:	06c89c01 	strbeq	r9, [r8], r1, lsl #24
    5740:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
    5744:	01000015 	tsteq	r0, r5, lsl r0
    5748:	00df03ac 	sbcseq	r0, pc, ip, lsr #7
    574c:	50010000 	andpl	r0, r1, r0
    5750:	20d81500 	sbcscs	r1, r8, r0, lsl #10
    5754:	c1010000 	mrsgt	r0, (UNDEF: 1)
    5758:	004c3403 	subeq	r3, ip, r3, lsl #8
    575c:	00000c08 	andeq	r0, r0, r8, lsl #24
    5760:	ed9c0100 	ldfs	f0, [ip]
    5764:	16000006 	strne	r0, [r0], -r6
    5768:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    576c:	5e03c101 	mvfpls	f4, f1
    5770:	01000000 	mrseq	r0, (UNDEF: 0)
    5774:	911c0050 	tstls	ip, r0, asr r0
    5778:	01000008 	tsteq	r0, r8
    577c:	00b403dd 	ldrsbteq	r0, [r4], sp
    5780:	4c400000 	marmi	acc0, r0, r0
    5784:	00280800 	eoreq	r0, r8, r0, lsl #16
    5788:	9c010000 	stcls	0, cr0, [r1], {-0}
    578c:	00000748 	andeq	r0, r0, r8, asr #14
    5790:	0021a717 	eoreq	sl, r1, r7, lsl r7
    5794:	03dd0100 	bicseq	r0, sp, #0, 2
    5798:	0000005e 	andeq	r0, r0, lr, asr r0
    579c:	00002ca5 	andeq	r2, r0, r5, lsr #25
    57a0:	706d741a 	rsbvc	r7, sp, sl, lsl r4
    57a4:	03df0100 	bicseq	r0, pc, #0, 2
    57a8:	0000003a 	andeq	r0, r0, sl, lsr r0
    57ac:	00002cc6 	andeq	r2, r0, r6, asr #25
    57b0:	00214418 	eoreq	r4, r1, r8, lsl r4
    57b4:	03e00100 	mvneq	r0, #0, 2
    57b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    57bc:	00002d0f 	andeq	r2, r0, pc, lsl #26
    57c0:	00166d18 	andseq	r6, r6, r8, lsl sp
    57c4:	03e10100 	mvneq	r0, #0, 2
    57c8:	000000b4 	strheq	r0, [r0], -r4
    57cc:	00002d45 	andeq	r2, r0, r5, asr #26
    57d0:	02501d00 	subseq	r1, r0, #0, 26
    57d4:	c6010000 	strgt	r0, [r1], -r0
    57d8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    57dc:	08004c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, lr}
    57e0:	0000002e 	andeq	r0, r0, lr, lsr #32
    57e4:	07b29c01 	ldreq	r9, [r2, r1, lsl #24]!
    57e8:	561e0000 	ldrpl	r0, [lr], -r0
    57ec:	01000021 	tsteq	r0, r1, lsr #32
    57f0:	00007fc8 	andeq	r7, r0, r8, asr #31
    57f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    57f8:	00166614 	andseq	r6, r6, r4, lsl r6
    57fc:	ffc90100 			; <UNDEFINED> instruction: 0xffc90100
    5800:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    5804:	1400002d 	strne	r0, [r0], #-45	; 0x2d
    5808:	000021f9 	strdeq	r2, [r0], -r9
    580c:	00b4ca01 	adcseq	ip, r4, r1, lsl #20
    5810:	2dad0000 	stccs	0, cr0, [sp]
    5814:	741f0000 	ldrvc	r0, [pc], #-0	; 581c <__Stack_Size+0x541c>
    5818:	ed08004c 	stc	0, cr0, [r8, #-304]	; 0xfffffed0
    581c:	a1000006 	tstge	r0, r6
    5820:	20000007 	andcs	r0, r0, r7
    5824:	08025001 	stmdaeq	r2, {r0, ip, lr}
    5828:	8a210031 	bhi	8458f4 <__Stack_Size+0x8454f4>
    582c:	ed08004c 	stc	0, cr0, [r8, #-304]	; 0xfffffed0
    5830:	20000006 	andcs	r0, r0, r6
    5834:	08025001 	stmdaeq	r2, {r0, ip, lr}
    5838:	22000031 	andcs	r0, r0, #49	; 0x31
    583c:	000021e0 	andeq	r2, r0, r0, ror #3
    5840:	96041001 	strls	r1, [r4], -r1
    5844:	1208004c 	andne	r0, r8, #76	; 0x4c
    5848:	01000000 	mrseq	r0, (UNDEF: 0)
    584c:	205b1c9c 			; <UNDEFINED> instruction: 0x205b1c9c
    5850:	24010000 	strcs	r0, [r1], #-0
    5854:	0000bf04 	andeq	fp, r0, r4, lsl #30
    5858:	004ca800 	subeq	sl, ip, r0, lsl #16
    585c:	00001408 	andeq	r1, r0, r8, lsl #8
    5860:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    5864:	17000007 	strne	r0, [r0, -r7]
    5868:	000022fa 	strdeq	r2, [r0], -sl
    586c:	5e042401 	cdppl	4, 0, cr2, cr4, cr1, {0}
    5870:	c0000000 	andgt	r0, r0, r0
    5874:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    5878:	0000166d 	andeq	r1, r0, sp, ror #12
    587c:	bf042601 	svclt	0x00042601
    5880:	e1000000 	mrs	r0, (UNDEF: 0)
    5884:	0000002d 	andeq	r0, r0, sp, lsr #32
    5888:	00203d15 	eoreq	r3, r0, r5, lsl sp
    588c:	04470100 	strbeq	r0, [r7], #-256	; 0x100
    5890:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    5894:	0000000c 	andeq	r0, r0, ip
    5898:	08249c01 	stmdaeq	r4!, {r0, sl, fp, ip, pc}
    589c:	fa160000 	blx	5858a4 <__Stack_Size+0x5854a4>
    58a0:	01000022 	tsteq	r0, r2, lsr #32
    58a4:	005e0447 	subseq	r0, lr, r7, asr #8
    58a8:	50010000 	andpl	r0, r1, r0
    58ac:	006f2300 	rsbeq	r2, pc, r0, lsl #6
    58b0:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    58b4:	0a240000 	beq	9058bc <__Stack_Size+0x9054bc>
    58b8:	0f000001 	svceq	0x00000001
    58bc:	226b1e00 	rsbcs	r1, fp, #0, 28
    58c0:	6f010000 	svcvs	0x00010000
    58c4:	00000845 	andeq	r0, r0, r5, asr #16
    58c8:	5c300305 	ldcpl	3, cr0, [r0], #-20	; 0xffffffec
    58cc:	24040800 	strcs	r0, [r4], #-2048	; 0x800
    58d0:	23000008 	movwcs	r0, #8
    58d4:	0000006f 	andeq	r0, r0, pc, rrx
    58d8:	0000085a 	andeq	r0, r0, sl, asr r8
    58dc:	00010a24 	andeq	r0, r1, r4, lsr #20
    58e0:	1e000300 	cdpne	3, 0, cr0, cr0, cr0, {0}
    58e4:	0000230f 	andeq	r2, r0, pc, lsl #6
    58e8:	086b7001 	stmdaeq	fp!, {r0, ip, sp, lr}^
    58ec:	03050000 	movweq	r0, #20480	; 0x5000
    58f0:	08005c40 	stmdaeq	r0, {r6, sl, fp, ip, lr}
    58f4:	00084a04 	andeq	r4, r8, r4, lsl #20
    58f8:	02070000 	andeq	r0, r7, #0
    58fc:	00040000 	andeq	r0, r4, r0
    5900:	000011db 	ldrdeq	r1, [r0], -fp
    5904:	07f50104 	ldrbeq	r0, [r5, r4, lsl #2]!
    5908:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    590c:	85000023 	strhi	r0, [r0, #-35]	; 0x23
    5910:	c8000011 	stmdagt	r0, {r0, r4}
    5914:	8c08004c 	stchi	0, cr0, [r8], {76}	; 0x4c
    5918:	3a000000 	bcc	5920 <__Stack_Size+0x5520>
    591c:	0200000e 	andeq	r0, r0, #14
    5920:	09500504 	ldmdbeq	r0, {r2, r8, sl}^
    5924:	02020000 	andeq	r0, r2, #0
    5928:	00091405 	andeq	r1, r9, r5, lsl #8
    592c:	06010200 	streq	r0, [r1], -r0, lsl #4
    5930:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    5934:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    5938:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    593c:	02000000 	andeq	r0, r0, #0
    5940:	0a760704 	beq	1d87558 <__Stack_Size+0x1d87158>
    5944:	02020000 	andeq	r0, r2, #0
    5948:	000c6807 	andeq	r6, ip, r7, lsl #16
    594c:	38750300 	ldmdacc	r5!, {r8, r9}^
    5950:	5d290200 	sfmpl	f0, 4, [r9, #-0]
    5954:	02000000 	andeq	r0, r0, #0
    5958:	0aaf0801 	beq	febc7964 <SCS_BASE+0x1ebb9964>
    595c:	ba040000 	blt	105964 <__Stack_Size+0x105564>
    5960:	02000004 	andeq	r0, r0, #4
    5964:	00006f2f 	andeq	r6, r0, pc, lsr #30
    5968:	00450500 	subeq	r0, r5, r0, lsl #10
    596c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5970:	0200001e 	andeq	r0, r0, #30
    5974:	00007f33 	andeq	r7, r0, r3, lsr pc
    5978:	006f0600 	rsbeq	r0, pc, r0, lsl #12
    597c:	01070000 	mrseq	r0, (UNDEF: 7)
    5980:	00993902 	addseq	r3, r9, r2, lsl #18
    5984:	da080000 	ble	20598c <__Stack_Size+0x20558c>
    5988:	00000018 	andeq	r0, r0, r8, lsl r0
    598c:	54455309 	strbpl	r5, [r5], #-777	; 0x309
    5990:	04000100 	streq	r0, [r0], #-256	; 0x100
    5994:	00000898 	muleq	r0, r8, r8
    5998:	00843902 	addeq	r3, r4, r2, lsl #18
    599c:	01070000 	mrseq	r0, (UNDEF: 7)
    59a0:	00b93b02 	adcseq	r3, r9, r2, lsl #22
    59a4:	b3080000 	movwlt	r0, #32768	; 0x8000
    59a8:	00000005 	andeq	r0, r0, r5
    59ac:	000a4f08 	andeq	r4, sl, r8, lsl #30
    59b0:	04000100 	streq	r0, [r0], #-256	; 0x100
    59b4:	000000f9 	strdeq	r0, [r0], -r9
    59b8:	00a43b02 	adceq	r3, r4, r2, lsl #22
    59bc:	04020000 	streq	r0, [r2], #-0
    59c0:	000a6d07 	andeq	r6, sl, r7, lsl #26
    59c4:	03100a00 	tsteq	r0, #0, 20
    59c8:	01090202 	tsteq	r9, r2, lsl #4
    59cc:	7f0b0000 	svcvc	0x000b0000
    59d0:	03000023 	movweq	r0, #35	; 0x23
    59d4:	00640204 	rsbeq	r0, r4, r4, lsl #4
    59d8:	0b000000 	bleq	59e0 <__Stack_Size+0x55e0>
    59dc:	000023ac 	andeq	r2, r0, ip, lsr #7
    59e0:	64020503 	strvs	r0, [r2], #-1283	; 0x503
    59e4:	04000000 	streq	r0, [r0], #-0
    59e8:	4c41560c 	mcrrmi	6, 0, r5, r1, cr12
    59ec:	02060300 	andeq	r0, r6, #0, 6
    59f0:	00000064 	andeq	r0, r0, r4, rrx
    59f4:	23530b08 	cmpcs	r3, #8, 22	; 0x2000
    59f8:	07030000 	streq	r0, [r3, -r0]
    59fc:	00007402 	andeq	r7, r0, r2, lsl #8
    5a00:	0d000c00 	stceq	12, cr0, [r0, #-0]
    5a04:	000023b1 			; <UNDEFINED> instruction: 0x000023b1
    5a08:	cb020803 	blgt	87a1c <__Stack_Size+0x8761c>
    5a0c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5a10:	00002394 	muleq	r0, r4, r3
    5a14:	4cc82b01 	fstmiaxmi	r8, {d18-d17}	;@ Deprecated
    5a18:	00180800 	andseq	r0, r8, r0, lsl #16
    5a1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a20:	00000138 	andeq	r0, r0, r8, lsr r1
    5a24:	0023c10f 	eoreq	ip, r3, pc, lsl #2
    5a28:	3a2b0100 	bcc	ac5e30 <__Stack_Size+0xac5a30>
    5a2c:	01000000 	mrseq	r0, (UNDEF: 0)
    5a30:	df0e0050 	svcle	0x000e0050
    5a34:	01000001 	tsteq	r0, r1
    5a38:	004ce042 	subeq	lr, ip, r2, asr #32
    5a3c:	00000c08 	andeq	r0, r0, r8, lsl #24
    5a40:	5b9c0100 	blpl	fe705e48 <SCS_BASE+0x1e6f7e48>
    5a44:	0f000001 	svceq	0x00000001
    5a48:	000001ea 	andeq	r0, r0, sl, ror #3
    5a4c:	003a4201 	eorseq	r4, sl, r1, lsl #4
    5a50:	50010000 	andpl	r0, r1, r0
    5a54:	09ce0e00 	stmibeq	lr, {r9, sl, fp}^
    5a58:	55010000 	strpl	r0, [r1, #-0]
    5a5c:	08004cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, lr}
    5a60:	00000028 	andeq	r0, r0, r8, lsr #32
    5a64:	01809c01 	orreq	r9, r0, r1, lsl #24
    5a68:	84100000 	ldrhi	r0, [r0], #-0
    5a6c:	01000023 	tsteq	r0, r3, lsr #32
    5a70:	00003a55 	andeq	r3, r0, r5, asr sl
    5a74:	002e2000 	eoreq	r2, lr, r0
    5a78:	690e0000 	stmdbvs	lr, {}	; <UNPREDICTABLE>
    5a7c:	01000008 	tsteq	r0, r8
    5a80:	004d1470 	subeq	r1, sp, r0, ror r4
    5a84:	00001808 	andeq	r1, r0, r8, lsl #16
    5a88:	a39c0100 	orrsge	r0, ip, #0, 2
    5a8c:	0f000001 	svceq	0x00000001
    5a90:	000015de 	ldrdeq	r1, [r0], -lr
    5a94:	00b97001 	adcseq	r7, r9, r1
    5a98:	50010000 	andpl	r0, r1, r0
    5a9c:	231d1100 	tstcs	sp, #0, 2
    5aa0:	86010000 	strhi	r0, [r1], -r0
    5aa4:	0000003a 	andeq	r0, r0, sl, lsr r0
    5aa8:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    5aac:	0000000c 	andeq	r0, r0, ip
    5ab0:	30129c01 	andscc	r9, r2, r1, lsl #24
    5ab4:	01000023 	tsteq	r0, r3, lsr #32
    5ab8:	00009996 	muleq	r0, r6, r9
    5abc:	004d3800 	subeq	r3, sp, r0, lsl #16
    5ac0:	00001c08 	andeq	r1, r0, r8, lsl #24
    5ac4:	109c0100 	addsne	r0, ip, r0, lsl #2
    5ac8:	00002346 	andeq	r2, r0, r6, asr #6
    5acc:	00539601 	subseq	r9, r3, r1, lsl #12
    5ad0:	2e5b0000 	cdpcs	0, 5, cr0, cr11, cr0, {0}
    5ad4:	44130000 	ldrmi	r0, [r3], #-0
    5ad8:	01000021 	tsteq	r0, r1, lsr #32
    5adc:	00003a98 	muleq	r0, r8, sl
    5ae0:	002e7c00 	eoreq	r7, lr, r0, lsl #24
    5ae4:	6d741400 	cfldrdvs	mvd1, [r4, #-0]
    5ae8:	98010070 	stmdals	r1, {r4, r5, r6}
    5aec:	0000003a 	andeq	r0, r0, sl, lsr r0
    5af0:	00002e9b 	muleq	r0, fp, lr
    5af4:	00166d13 	andseq	r6, r6, r3, lsl sp
    5af8:	99990100 	ldmibls	r9, {r8}
    5afc:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    5b00:	0000002e 	andeq	r0, r0, lr, lsr #32
    5b04:	001f3e00 	andseq	r3, pc, r0, lsl #28
    5b08:	03000400 	movweq	r0, #1024	; 0x400
    5b0c:	04000013 	streq	r0, [r0], #-19
    5b10:	0007f501 	andeq	pc, r7, r1, lsl #10
    5b14:	26a40100 	strtcs	r0, [r4], r0, lsl #2
    5b18:	11850000 	orrne	r0, r5, r0
    5b1c:	4d540000 	ldclmi	0, cr0, [r4, #-0]
    5b20:	0a440800 	beq	1107b28 <__Stack_Size+0x1107728>
    5b24:	0eef0000 	cdpeq	0, 14, cr0, cr15, cr0, {0}
    5b28:	04020000 	streq	r0, [r2], #-0
    5b2c:	00095005 	andeq	r5, r9, r5
    5b30:	05020200 	streq	r0, [r2, #-512]	; 0x200
    5b34:	00000914 	andeq	r0, r0, r4, lsl r9
    5b38:	b1060102 	tstlt	r6, r2, lsl #2
    5b3c:	0300000a 	movweq	r0, #10
    5b40:	00323375 	eorseq	r3, r2, r5, ror r3
    5b44:	00452702 	subeq	r2, r5, r2, lsl #14
    5b48:	04020000 	streq	r0, [r2], #-0
    5b4c:	000a7607 	andeq	r7, sl, r7, lsl #12
    5b50:	31750300 	cmncc	r5, r0, lsl #6
    5b54:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    5b58:	00000057 	andeq	r0, r0, r7, asr r0
    5b5c:	68070202 	stmdavs	r7, {r1, r9}
    5b60:	0300000c 	movweq	r0, #12
    5b64:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    5b68:	00006829 	andeq	r6, r0, r9, lsr #16
    5b6c:	08010200 	stmdaeq	r1, {r9}
    5b70:	00000aaf 	andeq	r0, r0, pc, lsr #21
    5b74:	0004ba04 	andeq	fp, r4, r4, lsl #20
    5b78:	7a2f0200 	bvc	bc6380 <__Stack_Size+0xbc5f80>
    5b7c:	05000000 	streq	r0, [r0, #-0]
    5b80:	00000045 	andeq	r0, r0, r5, asr #32
    5b84:	0002e804 	andeq	lr, r2, r4, lsl #16
    5b88:	8a300200 	bhi	c06390 <__Stack_Size+0xc05f90>
    5b8c:	05000000 	streq	r0, [r0, #-0]
    5b90:	00000057 	andeq	r0, r0, r7, asr r0
    5b94:	39020106 	stmdbcc	r2, {r1, r2, r8}
    5b98:	000000a4 	andeq	r0, r0, r4, lsr #1
    5b9c:	0018da07 	andseq	sp, r8, r7, lsl #20
    5ba0:	53080000 	movwpl	r0, #32768	; 0x8000
    5ba4:	01005445 	tsteq	r0, r5, asr #8
    5ba8:	08980400 	ldmeq	r8, {sl}
    5bac:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    5bb0:	0000008f 	andeq	r0, r0, pc, lsl #1
    5bb4:	00206204 	eoreq	r6, r0, r4, lsl #4
    5bb8:	8f390200 	svchi	0x00390200
    5bbc:	06000000 	streq	r0, [r0], -r0
    5bc0:	cf3b0201 	svcgt	0x003b0201
    5bc4:	07000000 	streq	r0, [r0, -r0]
    5bc8:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    5bcc:	0a4f0700 	beq	13c77d4 <__Stack_Size+0x13c73d4>
    5bd0:	00010000 	andeq	r0, r1, r0
    5bd4:	0000f904 	andeq	pc, r0, r4, lsl #18
    5bd8:	ba3b0200 	blt	ec63e0 <__Stack_Size+0xec5fe0>
    5bdc:	02000000 	andeq	r0, r0, #0
    5be0:	0a6d0704 	beq	1b477f8 <__Stack_Size+0x1b473f8>
    5be4:	50090000 	andpl	r0, r9, r0
    5be8:	f2020b03 	vqdmulh.s<illegal width 8>	d0, d2, d3
    5bec:	0a000002 	beq	5bfc <__Stack_Size+0x57fc>
    5bf0:	00315243 	eorseq	r5, r1, r3, asr #4
    5bf4:	7f020d03 	svcvc	0x00020d03
    5bf8:	00000000 	andeq	r0, r0, r0
    5bfc:	0008ce0b 	andeq	ip, r8, fp, lsl #28
    5c00:	020e0300 	andeq	r0, lr, #0, 6
    5c04:	0000004c 	andeq	r0, r0, ip, asr #32
    5c08:	52430a02 	subpl	r0, r3, #8192	; 0x2000
    5c0c:	0f030032 	svceq	0x00030032
    5c10:	00007f02 	andeq	r7, r0, r2, lsl #30
    5c14:	d80b0400 	stmdale	fp, {sl}
    5c18:	03000008 	movweq	r0, #8
    5c1c:	004c0210 	subeq	r0, ip, r0, lsl r2
    5c20:	0b060000 	bleq	185c28 <__Stack_Size+0x185828>
    5c24:	0000064a 	andeq	r0, r0, sl, asr #12
    5c28:	7f021103 	svcvc	0x00021103
    5c2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5c30:	0008e20b 	andeq	lr, r8, fp, lsl #4
    5c34:	02120300 	andseq	r0, r2, #0, 6
    5c38:	0000004c 	andeq	r0, r0, ip, asr #32
    5c3c:	04e90b0a 	strbteq	r0, [r9], #2826	; 0xb0a
    5c40:	13030000 	movwne	r0, #12288	; 0x3000
    5c44:	00007f02 	andeq	r7, r0, r2, lsl #30
    5c48:	ec0b0c00 	stc	12, cr0, [fp], {-0}
    5c4c:	03000008 	movweq	r0, #8
    5c50:	004c0214 	subeq	r0, ip, r4, lsl r2
    5c54:	0a0e0000 	beq	385c5c <__Stack_Size+0x38585c>
    5c58:	03005253 	movweq	r5, #595	; 0x253
    5c5c:	007f0215 	rsbseq	r0, pc, r5, lsl r2	; <UNPREDICTABLE>
    5c60:	0b100000 	bleq	405c68 <__Stack_Size+0x405868>
    5c64:	000008f6 	strdeq	r0, [r0], -r6
    5c68:	4c021603 	stcmi	6, cr1, [r2], {3}
    5c6c:	12000000 	andne	r0, r0, #0
    5c70:	5247450a 	subpl	r4, r7, #41943040	; 0x2800000
    5c74:	02170300 	andseq	r0, r7, #0, 6
    5c78:	0000007f 	andeq	r0, r0, pc, ror r0
    5c7c:	09000b14 	stmdbeq	r0, {r2, r4, r8, r9, fp}
    5c80:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    5c84:	00004c02 	andeq	r4, r0, r2, lsl #24
    5c88:	400b1600 	andmi	r1, fp, r0, lsl #12
    5c8c:	03000003 	movweq	r0, #3
    5c90:	007f0219 	rsbseq	r0, pc, r9, lsl r2	; <UNPREDICTABLE>
    5c94:	0b180000 	bleq	605c9c <__Stack_Size+0x60589c>
    5c98:	0000090a 	andeq	r0, r0, sl, lsl #18
    5c9c:	4c021a03 	stcmi	10, cr1, [r2], {3}
    5ca0:	1a000000 	bne	5ca8 <__Stack_Size+0x58a8>
    5ca4:	0003460b 	andeq	r4, r3, fp, lsl #12
    5ca8:	021b0300 	andseq	r0, fp, #0, 6
    5cac:	0000007f 	andeq	r0, r0, pc, ror r0
    5cb0:	0cf90b1c 	vldmiaeq	r9!, {d16-d29}
    5cb4:	1c030000 	stcne	0, cr0, [r3], {-0}
    5cb8:	00004c02 	andeq	r4, r0, r2, lsl #24
    5cbc:	7e0b1e00 	cdpvc	14, 0, cr1, cr11, cr0, {0}
    5cc0:	03000005 	movweq	r0, #5
    5cc4:	007f021d 	rsbseq	r0, pc, sp, lsl r2	; <UNPREDICTABLE>
    5cc8:	0b200000 	bleq	805cd0 <__Stack_Size+0x8058d0>
    5ccc:	0000091e 	andeq	r0, r0, lr, lsl r9
    5cd0:	4c021e03 	stcmi	14, cr1, [r2], {3}
    5cd4:	22000000 	andcs	r0, r0, #0
    5cd8:	544e430a 	strbpl	r4, [lr], #-778	; 0x30a
    5cdc:	021f0300 	andseq	r0, pc, #0, 6
    5ce0:	0000007f 	andeq	r0, r0, pc, ror r0
    5ce4:	09280b24 	stmdbeq	r8!, {r2, r5, r8, r9, fp}
    5ce8:	20030000 	andcs	r0, r3, r0
    5cec:	00004c02 	andeq	r4, r0, r2, lsl #24
    5cf0:	500a2600 	andpl	r2, sl, r0, lsl #12
    5cf4:	03004353 	movweq	r4, #851	; 0x353
    5cf8:	007f0221 	rsbseq	r0, pc, r1, lsr #4
    5cfc:	0b280000 	bleq	a05d04 <__Stack_Size+0xa05904>
    5d00:	00000b2b 	andeq	r0, r0, fp, lsr #22
    5d04:	4c022203 	sfmmi	f2, 4, [r2], {3}
    5d08:	2a000000 	bcs	5d10 <__Stack_Size+0x5910>
    5d0c:	5252410a 	subspl	r4, r2, #-2147483646	; 0x80000002
    5d10:	02230300 	eoreq	r0, r3, #0, 6
    5d14:	0000007f 	andeq	r0, r0, pc, ror r0
    5d18:	0b360b2c 	bleq	d889d0 <__Stack_Size+0xd885d0>
    5d1c:	24030000 	strcs	r0, [r3], #-0
    5d20:	00004c02 	andeq	r4, r0, r2, lsl #24
    5d24:	520a2e00 	andpl	r2, sl, #0, 28
    5d28:	03005243 	movweq	r5, #579	; 0x243
    5d2c:	007f0225 	rsbseq	r0, pc, r5, lsr #4
    5d30:	0b300000 	bleq	c05d38 <__Stack_Size+0xc05938>
    5d34:	00000b41 	andeq	r0, r0, r1, asr #22
    5d38:	4c022603 	stcmi	6, cr2, [r2], {3}
    5d3c:	32000000 	andcc	r0, r0, #0
    5d40:	00032c0b 	andeq	r2, r3, fp, lsl #24
    5d44:	02270300 	eoreq	r0, r7, #0, 6
    5d48:	0000007f 	andeq	r0, r0, pc, ror r0
    5d4c:	0b4c0b34 	bleq	1308a24 <__Stack_Size+0x1308624>
    5d50:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    5d54:	00004c02 	andeq	r4, r0, r2, lsl #24
    5d58:	310b3600 	tstcc	fp, r0, lsl #12
    5d5c:	03000003 	movweq	r0, #3
    5d60:	007f0229 	rsbseq	r0, pc, r9, lsr #4
    5d64:	0b380000 	bleq	e05d6c <__Stack_Size+0xe0596c>
    5d68:	00000b57 	andeq	r0, r0, r7, asr fp
    5d6c:	4c022a03 	stcmi	10, cr2, [r2], {3}
    5d70:	3a000000 	bcc	5d78 <__Stack_Size+0x5978>
    5d74:	0003360b 	andeq	r3, r3, fp, lsl #12
    5d78:	022b0300 	eoreq	r0, fp, #0, 6
    5d7c:	0000007f 	andeq	r0, r0, pc, ror r0
    5d80:	0b620b3c 	bleq	1888a78 <__Stack_Size+0x1888678>
    5d84:	2c030000 	stccs	0, cr0, [r3], {-0}
    5d88:	00004c02 	andeq	r4, r0, r2, lsl #24
    5d8c:	3b0b3e00 	blcc	2d5594 <__Stack_Size+0x2d5194>
    5d90:	03000003 	movweq	r0, #3
    5d94:	007f022d 	rsbseq	r0, pc, sp, lsr #4
    5d98:	0b400000 	bleq	1005da0 <__Stack_Size+0x10059a0>
    5d9c:	00000b6d 	andeq	r0, r0, sp, ror #22
    5da0:	4c022e03 	stcmi	14, cr2, [r2], {3}
    5da4:	42000000 	andmi	r0, r0, #0
    5da8:	0002dd0b 	andeq	sp, r2, fp, lsl #26
    5dac:	022f0300 	eoreq	r0, pc, #0, 6
    5db0:	0000007f 	andeq	r0, r0, pc, ror r0
    5db4:	0b780b44 	bleq	1e08acc <__Stack_Size+0x1e086cc>
    5db8:	30030000 	andcc	r0, r3, r0
    5dbc:	00004c02 	andeq	r4, r0, r2, lsl #24
    5dc0:	440a4600 	strmi	r4, [sl], #-1536	; 0x600
    5dc4:	03005243 	movweq	r5, #579	; 0x243
    5dc8:	007f0231 	rsbseq	r0, pc, r1, lsr r2	; <UNPREDICTABLE>
    5dcc:	0b480000 	bleq	1205dd4 <__Stack_Size+0x12059d4>
    5dd0:	00000b83 	andeq	r0, r0, r3, lsl #23
    5dd4:	4c023203 	sfmmi	f3, 4, [r2], {3}
    5dd8:	4a000000 	bmi	5de0 <__Stack_Size+0x59e0>
    5ddc:	0009590b 	andeq	r5, r9, fp, lsl #18
    5de0:	02330300 	eorseq	r0, r3, #0, 6
    5de4:	0000007f 	andeq	r0, r0, pc, ror r0
    5de8:	0b8e0b4c 	bleq	fe388b20 <SCS_BASE+0x1e37ab20>
    5dec:	34030000 	strcc	r0, [r3], #-0
    5df0:	00004c02 	andeq	r4, r0, r2, lsl #24
    5df4:	0c004e00 	stceq	14, cr4, [r0], {-0}
    5df8:	00000266 	andeq	r0, r0, r6, ror #4
    5dfc:	e1023503 	tst	r2, r3, lsl #10
    5e00:	0d000000 	stceq	0, cr0, [r0, #-0]
    5e04:	431b040a 	tstmi	fp, #167772160	; 0xa000000
    5e08:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    5e0c:	00000068 	andeq	r0, r0, r8, rrx
    5e10:	004c1d04 	subeq	r1, ip, r4, lsl #26
    5e14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5e18:	000005fb 	strdeq	r0, [r0], -fp
    5e1c:	004c1e04 	subeq	r1, ip, r4, lsl #28
    5e20:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5e24:	00000765 	andeq	r0, r0, r5, ror #14
    5e28:	004c1f04 	subeq	r1, ip, r4, lsl #30
    5e2c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5e30:	0000029b 	muleq	r0, fp, r2
    5e34:	004c2004 	subeq	r2, ip, r4
    5e38:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5e3c:	0000052d 	andeq	r0, r0, sp, lsr #10
    5e40:	005e2104 	subseq	r2, lr, r4, lsl #2
    5e44:	00080000 	andeq	r0, r8, r0
    5e48:	000c1104 	andeq	r1, ip, r4, lsl #2
    5e4c:	fe220400 	cdp2	4, 2, cr0, cr2, cr0, {0}
    5e50:	0d000002 	stceq	0, cr0, [r0, #-8]
    5e54:	b7250410 			; <UNDEFINED> instruction: 0xb7250410
    5e58:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    5e5c:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    5e60:	004c2704 	subeq	r2, ip, r4, lsl #14
    5e64:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5e68:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    5e6c:	004c2804 	subeq	r2, ip, r4, lsl #16
    5e70:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5e74:	00000a2a 	andeq	r0, r0, sl, lsr #20
    5e78:	004c2904 	subeq	r2, ip, r4, lsl #18
    5e7c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5e80:	00000282 	andeq	r0, r0, r2, lsl #5
    5e84:	004c2a04 	subeq	r2, ip, r4, lsl #20
    5e88:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5e8c:	000000bd 	strheq	r0, [r0], -sp
    5e90:	004c2b04 	subeq	r2, ip, r4, lsl #22
    5e94:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    5e98:	0000054a 	andeq	r0, r0, sl, asr #10
    5e9c:	004c2c04 	subeq	r2, ip, r4, lsl #24
    5ea0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    5ea4:	000001cf 	andeq	r0, r0, pc, asr #3
    5ea8:	004c2d04 	subeq	r2, ip, r4, lsl #26
    5eac:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    5eb0:	000006eb 	andeq	r0, r0, fp, ror #13
    5eb4:	004c2e04 	subeq	r2, ip, r4, lsl #28
    5eb8:	000e0000 	andeq	r0, lr, r0
    5ebc:	00008a04 	andeq	r8, r0, r4, lsl #20
    5ec0:	4e2f0400 	cdpmi	4, 2, cr0, cr15, cr0, {0}
    5ec4:	0d000003 	stceq	0, cr0, [r0, #-12]
    5ec8:	0732040a 	ldreq	r0, [r2, -sl, lsl #8]!
    5ecc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5ed0:	000029c2 	andeq	r2, r0, r2, asr #19
    5ed4:	004c3404 	subeq	r3, ip, r4, lsl #8
    5ed8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5edc:	00002aa9 	andeq	r2, r0, r9, lsr #21
    5ee0:	004c3504 	subeq	r3, ip, r4, lsl #10
    5ee4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5ee8:	00002a4d 	andeq	r2, r0, sp, asr #20
    5eec:	004c3604 	subeq	r3, ip, r4, lsl #12
    5ef0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5ef4:	00002797 	muleq	r0, r7, r7
    5ef8:	004c3704 	subeq	r3, ip, r4, lsl #14
    5efc:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5f00:	00002c55 	andeq	r2, r0, r5, asr ip
    5f04:	004c3804 	subeq	r3, ip, r4, lsl #16
    5f08:	00080000 	andeq	r0, r8, r0
    5f0c:	00249404 	eoreq	r9, r4, r4, lsl #8
    5f10:	c2390400 	eorsgt	r0, r9, #0, 8
    5f14:	0d000003 	stceq	0, cr0, [r0, #-12]
    5f18:	6f3c040e 	svcvs	0x003c040e
    5f1c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5f20:	00002a9b 	muleq	r0, fp, sl
    5f24:	004c3e04 	subeq	r3, ip, r4, lsl #28
    5f28:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5f2c:	000025b4 			; <UNDEFINED> instruction: 0x000025b4
    5f30:	004c3f04 	subeq	r3, ip, r4, lsl #30
    5f34:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5f38:	0000276a 	andeq	r2, r0, sl, ror #14
    5f3c:	004c4004 	subeq	r4, ip, r4
    5f40:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5f44:	00002b7c 	andeq	r2, r0, ip, ror fp
    5f48:	004c4104 	subeq	r4, ip, r4, lsl #2
    5f4c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5f50:	00002860 	andeq	r2, r0, r0, ror #16
    5f54:	004c4204 	subeq	r4, ip, r4, lsl #4
    5f58:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    5f5c:	00002708 	andeq	r2, r0, r8, lsl #14
    5f60:	004c4304 	subeq	r4, ip, r4, lsl #6
    5f64:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    5f68:	00002b2c 	andeq	r2, r0, ip, lsr #22
    5f6c:	004c4404 	subeq	r4, ip, r4, lsl #8
    5f70:	000c0000 	andeq	r0, ip, r0
    5f74:	0027ed04 	eoreq	lr, r7, r4, lsl #26
    5f78:	12450400 	subne	r0, r5, #0, 8
    5f7c:	0f000004 	svceq	0x00000004
    5f80:	00002c8a 	andeq	r2, r0, sl, lsl #25
    5f84:	01051801 	tsteq	r5, r1, lsl #16
    5f88:	000004ac 	andeq	r0, r0, ip, lsr #9
    5f8c:	00256c10 	eoreq	r6, r5, r0, lsl ip
    5f90:	05180100 	ldreq	r0, [r8, #-256]	; 0x100
    5f94:	000004ac 	andeq	r0, r0, ip, lsr #9
    5f98:	0024a610 	eoreq	sl, r4, r0, lsl r6
    5f9c:	05180100 	ldreq	r0, [r8, #-256]	; 0x100
    5fa0:	0000004c 	andeq	r0, r0, ip, asr #32
    5fa4:	00255211 	eoreq	r5, r5, r1, lsl r2
    5fa8:	051a0100 	ldreq	r0, [sl, #-256]	; 0x100
    5fac:	0000004c 	andeq	r0, r0, ip, asr #32
    5fb0:	f2041200 	vhsub.s8	d1, d4, d0
    5fb4:	13000002 	movwne	r0, #2
    5fb8:	000025ed 	andeq	r2, r0, sp, ror #11
    5fbc:	540bed01 	strpl	lr, [fp], #-3329	; 0xd01
    5fc0:	3208004d 	andcc	r0, r8, #77	; 0x4d
    5fc4:	01000000 	mrseq	r0, (UNDEF: 0)
    5fc8:	0005279c 	muleq	r5, ip, r7
    5fcc:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    5fd0:	ed010000 	stc	0, cr0, [r1, #-0]
    5fd4:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    5fd8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    5fdc:	00002aa9 	andeq	r2, r0, r9, lsr #21
    5fe0:	4c0bed01 	stcmi	13, cr14, [fp], {1}
    5fe4:	07000000 	streq	r0, [r0, -r0]
    5fe8:	1500002f 	strne	r0, [r0, #-47]	; 0x2f
    5fec:	00002a4d 	andeq	r2, r0, sp, asr #20
    5ff0:	4c0bed01 	stcmi	13, cr14, [fp], {1}
    5ff4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5ff8:	1500002f 	strne	r0, [r0, #-47]	; 0x2f
    5ffc:	00002c55 	andeq	r2, r0, r5, asr ip
    6000:	4c0bee01 	stcmi	14, cr14, [fp], {1}
    6004:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    6008:	1600002f 	strne	r0, [r0], -pc, lsr #32
    600c:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    6010:	4c0bf001 	stcmi	0, cr15, [fp], {1}
    6014:	6a000000 	bvs	601c <__Stack_Size+0x5c1c>
    6018:	1600002f 	strne	r0, [r0], -pc, lsr #32
    601c:	000026d9 	ldrdeq	r2, [r0], -r9
    6020:	4c0bf001 	stcmi	0, cr15, [fp], {1}
    6024:	a5000000 	strge	r0, [r0, #-0]
    6028:	0000002f 	andeq	r0, r0, pc, lsr #32
    602c:	00247613 	eoreq	r7, r4, r3, lsl r6
    6030:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    6034:	08004d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp, lr}
    6038:	0000003a 	andeq	r0, r0, sl, lsr r0
    603c:	05ac9c01 	streq	r9, [ip, #3073]!	; 0xc01
    6040:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6044:	01000025 	tsteq	r0, r5, lsr #32
    6048:	04ac0c1b 	strteq	r0, [ip], #3099	; 0xc1b
    604c:	50010000 	andpl	r0, r1, r0
    6050:	002aa915 	eoreq	sl, sl, r5, lsl r9
    6054:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    6058:	0000004c 	andeq	r0, r0, ip, asr #32
    605c:	00002fcf 	andeq	r2, r0, pc, asr #31
    6060:	002a4d15 	eoreq	r4, sl, r5, lsl sp
    6064:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    6068:	0000004c 	andeq	r0, r0, ip, asr #32
    606c:	00002ff0 	strdeq	r2, [r0], -r0
    6070:	002c5515 	eoreq	r5, ip, r5, lsl r5
    6074:	0c1c0100 	ldfeqs	f0, [ip], {-0}
    6078:	0000004c 	andeq	r0, r0, ip, asr #32
    607c:	00003011 	andeq	r3, r0, r1, lsl r0
    6080:	0029b016 	eoreq	fp, r9, r6, lsl r0
    6084:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    6088:	0000004c 	andeq	r0, r0, ip, asr #32
    608c:	00003032 	andeq	r3, r0, r2, lsr r0
    6090:	0026d916 	eoreq	sp, r6, r6, lsl r9
    6094:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    6098:	0000004c 	andeq	r0, r0, ip, asr #32
    609c:	0000305c 	andeq	r3, r0, ip, asr r0
    60a0:	706d7417 	rsbvc	r7, sp, r7, lsl r4
    60a4:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    60a8:	0000004c 	andeq	r0, r0, ip, asr #32
    60ac:	00003086 	andeq	r3, r0, r6, lsl #1
    60b0:	0ac21800 	beq	ff08c0b8 <SCS_BASE+0x1f07e0b8>
    60b4:	86010000 	strhi	r0, [r1], -r0
    60b8:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    60bc:	000000c8 	andeq	r0, r0, r8, asr #1
    60c0:	06b89c01 	ldrteq	r9, [r8], r1, lsl #24
    60c4:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    60c8:	01000025 	tsteq	r0, r5, lsr #32
    60cc:	0004ac86 	andeq	sl, r4, r6, lsl #25
    60d0:	0030b900 	eorseq	fp, r0, r0, lsl #18
    60d4:	4de81a00 	stclmi	10, cr1, [r8]
    60d8:	1f170800 	svcne	0x00170800
    60dc:	05e80000 	strbeq	r0, [r8, #0]!
    60e0:	011b0000 	tsteq	fp, r0
    60e4:	1b310151 	blne	c46630 <__Stack_Size+0xc46230>
    60e8:	31015001 	tstcc	r1, r1
    60ec:	4e181a00 	vnmlsmi.f32	s2, s16, s0
    60f0:	1f2e0800 	svcne	0x002e0800
    60f4:	06020000 	streq	r0, [r2], -r0
    60f8:	011b0000 	tsteq	fp, r0
    60fc:	1b310151 	blne	c46648 <__Stack_Size+0xc46248>
    6100:	0a035001 	beq	da10c <__Stack_Size+0xd9d0c>
    6104:	1a000800 	bne	810c <__Stack_Size+0x7d0c>
    6108:	08004e26 	stmdaeq	r0, {r1, r2, r5, r9, sl, fp, lr}
    610c:	00001f17 	andeq	r1, r0, r7, lsl pc
    6110:	0000061a 	andeq	r0, r0, sl, lsl r6
    6114:	0151011b 	cmpeq	r1, fp, lsl r1
    6118:	50011b31 	andpl	r1, r1, r1, lsr fp
    611c:	1c003201 	sfmne	f3, 4, [r0], {1}
    6120:	08004e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, lr}
    6124:	00001f17 	andeq	r1, r0, r7, lsl pc
    6128:	0000062d 	andeq	r0, r0, sp, lsr #12
    612c:	0151011b 	cmpeq	r1, fp, lsl r1
    6130:	3a1a0030 	bcc	6861f8 <__Stack_Size+0x685df8>
    6134:	1708004e 	strne	r0, [r8, -lr, asr #32]
    6138:	4500001f 	strmi	r0, [r0, #-31]
    613c:	1b000006 	blne	615c <__Stack_Size+0x5d5c>
    6140:	31015101 	tstcc	r1, r1, lsl #2
    6144:	0150011b 	cmpeq	r0, fp, lsl r1
    6148:	461a0034 			; <UNDEFINED> instruction: 0x461a0034
    614c:	1708004e 	strne	r0, [r8, -lr, asr #32]
    6150:	5d00001f 	stcpl	0, cr0, [r0, #-124]	; 0xffffff84
    6154:	1b000006 	blne	6174 <__Stack_Size+0x5d74>
    6158:	31015101 	tstcc	r1, r1, lsl #2
    615c:	0150011b 	cmpeq	r0, fp, lsl r1
    6160:	521a0038 	andspl	r0, sl, #56	; 0x38
    6164:	1708004e 	strne	r0, [r8, -lr, asr #32]
    6168:	7500001f 	strvc	r0, [r0, #-31]
    616c:	1b000006 	blne	618c <__Stack_Size+0x5d8c>
    6170:	31015101 	tstcc	r1, r1, lsl #2
    6174:	0150011b 	cmpeq	r0, fp, lsl r1
    6178:	5e1a0040 	cdppl	0, 1, cr0, cr10, cr0, {2}
    617c:	1708004e 	strne	r0, [r8, -lr, asr #32]
    6180:	8e00001f 	mcrhi	0, 0, r0, cr0, cr15, {0}
    6184:	1b000006 	blne	61a4 <__Stack_Size+0x5da4>
    6188:	31015101 	tstcc	r1, r1, lsl #2
    618c:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    6190:	1a002008 	bne	e1b8 <__Stack_Size+0xddb8>
    6194:	08004e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, lr}
    6198:	00001f2e 	andeq	r1, r0, lr, lsr #30
    619c:	000006a8 	andeq	r0, r0, r8, lsr #13
    61a0:	0151011b 	cmpeq	r1, fp, lsl r1
    61a4:	50011b31 	andpl	r1, r1, r1, lsr fp
    61a8:	20000a03 	andcs	r0, r0, r3, lsl #20
    61ac:	4e7a1d00 	cdpmi	13, 7, cr1, cr10, cr0, {0}
    61b0:	1f2e0800 	svcne	0x002e0800
    61b4:	011b0000 	tsteq	fp, r0
    61b8:	00300151 	eorseq	r0, r0, r1, asr r1
    61bc:	06fc1800 	ldrbteq	r1, [ip], r0, lsl #16
    61c0:	c6010000 	strgt	r0, [r1], -r0
    61c4:	08004e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, lr}
    61c8:	0000003c 	andeq	r0, r0, ip, lsr r0
    61cc:	06e89c01 	strbteq	r9, [r8], r1, lsl #24
    61d0:	6c1e0000 	ldcvs	0, cr0, [lr], {-0}
    61d4:	01000025 	tsteq	r0, r5, lsr #32
    61d8:	0004acc6 	andeq	sl, r4, r6, asr #25
    61dc:	1e500100 	rdfnes	f0, f0, f0
    61e0:	00002732 	andeq	r2, r0, r2, lsr r7
    61e4:	06e8c601 	strbteq	ip, [r8], r1, lsl #12
    61e8:	51010000 	mrspl	r0, (UNDEF: 1)
    61ec:	43041200 	movwmi	r1, #16896	; 0x4200
    61f0:	18000003 	stmdane	r0, {r0, r1}
    61f4:	00000187 	andeq	r0, r0, r7, lsl #3
    61f8:	4ec4ed01 	cdpmi	13, 12, cr14, cr4, cr1, {0}
    61fc:	00740800 	rsbseq	r0, r4, r0, lsl #16
    6200:	9c010000 	stcls	0, cr0, [r1], {-0}
    6204:	0000074b 	andeq	r0, r0, fp, asr #14
    6208:	00256c1e 	eoreq	r6, r5, lr, lsl ip
    620c:	aced0100 	stfgee	f0, [sp]
    6210:	01000004 	tsteq	r0, r4
    6214:	292d1e50 	pushcs	{r4, r6, r9, sl, fp, ip}
    6218:	ed010000 	stc	0, cr0, [r1, #-0]
    621c:	0000074b 	andeq	r0, r0, fp, asr #14
    6220:	581f5101 	ldmdapl	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    6224:	01000027 	tsteq	r0, r7, lsr #32
    6228:	00004cef 	andeq	r4, r0, pc, ror #25
    622c:	00319400 	eorseq	r9, r1, r0, lsl #8
    6230:	26d91f00 	ldrbcs	r1, [r9], r0, lsl #30
    6234:	ef010000 	svc	0x00010000
    6238:	0000004c 	andeq	r0, r0, ip, asr #32
    623c:	000031b3 			; <UNDEFINED> instruction: 0x000031b3
    6240:	002c281f 	eoreq	r2, ip, pc, lsl r8
    6244:	4cef0100 	stfmie	f0, [pc]	; 624c <__Stack_Size+0x5e4c>
    6248:	dd000000 	stcle	0, cr0, [r0, #-0]
    624c:	00000031 	andeq	r0, r0, r1, lsr r0
    6250:	03b70412 			; <UNDEFINED> instruction: 0x03b70412
    6254:	c9200000 	stmdbgt	r0!, {}	; <UNPREDICTABLE>
    6258:	01000025 	tsteq	r0, r5, lsr #32
    625c:	4f380148 	svcmi	0x00380148
    6260:	00880800 	addeq	r0, r8, r0, lsl #16
    6264:	9c010000 	stcls	0, cr0, [r1], {-0}
    6268:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    626c:	00256c14 	eoreq	r6, r5, r4, lsl ip
    6270:	01480100 	mrseq	r0, (UNDEF: 88)
    6274:	000004ac 	andeq	r0, r0, ip, lsr #9
    6278:	2d145001 	ldccs	0, cr5, [r4, #-4]
    627c:	01000029 	tsteq	r0, r9, lsr #32
    6280:	074b0148 	strbeq	r0, [fp, -r8, asr #2]
    6284:	51010000 	mrspl	r0, (UNDEF: 1)
    6288:	00275816 	eoreq	r5, r7, r6, lsl r8
    628c:	014a0100 	mrseq	r0, (UNDEF: 90)
    6290:	0000004c 	andeq	r0, r0, ip, asr #32
    6294:	00003219 	andeq	r3, r0, r9, lsl r2
    6298:	0026d916 	eoreq	sp, r6, r6, lsl r9
    629c:	014a0100 	mrseq	r0, (UNDEF: 90)
    62a0:	0000004c 	andeq	r0, r0, ip, asr #32
    62a4:	00003238 	andeq	r3, r0, r8, lsr r2
    62a8:	002c2816 	eoreq	r2, ip, r6, lsl r8
    62ac:	014a0100 	mrseq	r0, (UNDEF: 90)
    62b0:	0000004c 	andeq	r0, r0, ip, asr #32
    62b4:	00003299 	muleq	r0, r9, r2
    62b8:	26492000 	strbcs	r2, [r9], -r0
    62bc:	a4010000 	strge	r0, [r1], #-0
    62c0:	004fc001 	subeq	ip, pc, r1
    62c4:	00008408 	andeq	r8, r0, r8, lsl #8
    62c8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    62cc:	14000008 	strne	r0, [r0], #-8
    62d0:	0000256c 	andeq	r2, r0, ip, ror #10
    62d4:	ac01a401 	cfstrsge	mvf10, [r1], {1}
    62d8:	01000004 	tsteq	r0, r4
    62dc:	292d1450 	pushcs	{r4, r6, sl, ip}
    62e0:	a4010000 	strge	r0, [r1], #-0
    62e4:	00074b01 	andeq	r4, r7, r1, lsl #22
    62e8:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    62ec:	00002758 	andeq	r2, r0, r8, asr r7
    62f0:	4c01a601 	stcmi	6, cr10, [r1], {1}
    62f4:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    62f8:	16000032 			; <UNDEFINED> instruction: 0x16000032
    62fc:	000026d9 	ldrdeq	r2, [r0], -r9
    6300:	4c01a601 	stcmi	6, cr10, [r1], {1}
    6304:	ed000000 	stc	0, cr0, [r0, #-0]
    6308:	16000032 			; <UNDEFINED> instruction: 0x16000032
    630c:	00002c28 	andeq	r2, r0, r8, lsr #24
    6310:	4c01a601 	stcmi	6, cr10, [r1], {1}
    6314:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    6318:	00000033 	andeq	r0, r0, r3, lsr r0
    631c:	0028fe20 	eoreq	pc, r8, r0, lsr #28
    6320:	02000100 	andeq	r0, r0, #0, 2
    6324:	08005044 	stmdaeq	r0, {r2, r6, ip, lr}
    6328:	00000068 	andeq	r0, r0, r8, rrx
    632c:	087c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}^
    6330:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6334:	01000025 	tsteq	r0, r5, lsr #32
    6338:	04ac0200 	strteq	r0, [ip], #512	; 0x200
    633c:	50010000 	andpl	r0, r1, r0
    6340:	00292d15 	eoreq	r2, r9, r5, lsl sp
    6344:	02000100 	andeq	r0, r0, #0, 2
    6348:	0000074b 	andeq	r0, r0, fp, asr #14
    634c:	00003383 	andeq	r3, r0, r3, lsl #7
    6350:	00275816 	eoreq	r5, r7, r6, lsl r8
    6354:	02020100 	andeq	r0, r2, #0, 2
    6358:	0000004c 	andeq	r0, r0, ip, asr #32
    635c:	000033a4 	andeq	r3, r0, r4, lsr #7
    6360:	0026d916 	eoreq	sp, r6, r6, lsl r9
    6364:	02020100 	andeq	r0, r2, #0, 2
    6368:	0000004c 	andeq	r0, r0, ip, asr #32
    636c:	000033c3 	andeq	r3, r0, r3, asr #7
    6370:	002c2816 	eoreq	r2, ip, r6, lsl r8
    6374:	02020100 	andeq	r0, r2, #0, 2
    6378:	0000004c 	andeq	r0, r0, ip, asr #32
    637c:	000033ed 	andeq	r3, r0, sp, ror #7
    6380:	2ade2000 	bcs	ff78e388 <SCS_BASE+0x1f780388>
    6384:	d1010000 	mrsle	r0, (UNDEF: 1)
    6388:	0050ac02 	subseq	sl, r0, r2, lsl #24
    638c:	00002208 	andeq	r2, r0, r8, lsl #4
    6390:	af9c0100 	svcge	0x009c0100
    6394:	14000008 	strne	r0, [r0], #-8
    6398:	0000256c 	andeq	r2, r0, ip, ror #10
    639c:	ac02d101 	stfged	f5, [r2], {1}
    63a0:	01000004 	tsteq	r0, r4
    63a4:	26c61450 			; <UNDEFINED> instruction: 0x26c61450
    63a8:	d1010000 	mrsle	r0, (UNDEF: 1)
    63ac:	0008af02 	andeq	sl, r8, r2, lsl #30
    63b0:	00510100 	subseq	r0, r1, r0, lsl #2
    63b4:	046f0412 	strbteq	r0, [pc], #-1042	; 63bc <__Stack_Size+0x5fbc>
    63b8:	56200000 	strtpl	r0, [r0], -r0
    63bc:	0100000a 	tsteq	r0, sl
    63c0:	50ce02ee 	sbcpl	r0, lr, lr, ror #5
    63c4:	00120800 	andseq	r0, r2, r0, lsl #16
    63c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    63cc:	000008da 	ldrdeq	r0, [r0], -sl
    63d0:	00273214 	eoreq	r3, r7, r4, lsl r2
    63d4:	02ee0100 	rsceq	r0, lr, #0, 2
    63d8:	000006e8 	andeq	r0, r0, r8, ror #13
    63dc:	20005001 	andcs	r5, r0, r1
    63e0:	0000013d 	andeq	r0, r0, sp, lsr r1
    63e4:	e0030001 	and	r0, r3, r1
    63e8:	14080050 	strne	r0, [r8], #-80	; 0x50
    63ec:	01000000 	mrseq	r0, (UNDEF: 0)
    63f0:	0008ff9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    63f4:	292d1400 	pushcs	{sl, ip}
    63f8:	00010000 	andeq	r0, r1, r0
    63fc:	00074b03 	andeq	r4, r7, r3, lsl #22
    6400:	00500100 	subseq	r0, r0, r0, lsl #2
    6404:	0023fb20 	eoreq	pc, r3, r0, lsr #22
    6408:	03150100 	tsteq	r5, #0, 2
    640c:	080050f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip, lr}
    6410:	00000010 	andeq	r0, r0, r0, lsl r0
    6414:	09249c01 	stmdbeq	r4!, {r0, sl, fp, ip, pc}
    6418:	ac140000 	ldcge	0, cr0, [r4], {-0}
    641c:	01000028 	tsteq	r0, r8, lsr #32
    6420:	09240315 	stmdbeq	r4!, {r0, r2, r4, r8, r9}
    6424:	50010000 	andpl	r0, r1, r0
    6428:	07041200 	streq	r1, [r4, -r0, lsl #4]
    642c:	20000004 	andcs	r0, r0, r4
    6430:	00002bcd 	andeq	r2, r0, sp, asr #23
    6434:	04032701 	streq	r2, [r3], #-1793	; 0x701
    6438:	12080051 	andne	r0, r8, #81	; 0x51
    643c:	01000000 	mrseq	r0, (UNDEF: 0)
    6440:	00094f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    6444:	26c61400 	strbcs	r1, [r6], r0, lsl #8
    6448:	27010000 	strcs	r0, [r1, -r0]
    644c:	0008af03 	andeq	sl, r8, r3, lsl #30
    6450:	00500100 	subseq	r0, r0, r0, lsl #2
    6454:	000ca120 	andeq	sl, ip, r0, lsr #2
    6458:	033c0100 	teqeq	ip, #0, 2
    645c:	08005116 	stmdaeq	r0, {r1, r2, r4, r8, ip, lr}
    6460:	00000018 	andeq	r0, r0, r8, lsl r0
    6464:	09829c01 	stmibeq	r2, {r0, sl, fp, ip, pc}
    6468:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    646c:	01000025 	tsteq	r0, r5, lsr #32
    6470:	04ac033c 	strteq	r0, [ip], #828	; 0x33c
    6474:	50010000 	andpl	r0, r1, r0
    6478:	0015de14 	andseq	sp, r5, r4, lsl lr
    647c:	033c0100 	teqeq	ip, #0, 2
    6480:	000000cf 	andeq	r0, r0, pc, asr #1
    6484:	20005101 	andcs	r5, r0, r1, lsl #2
    6488:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
    648c:	2e035701 	cdpcs	7, 0, cr5, cr3, cr1, {0}
    6490:	1c080051 	stcne	0, cr0, [r8], {81}	; 0x51
    6494:	01000000 	mrseq	r0, (UNDEF: 0)
    6498:	0009b59c 	muleq	r9, ip, r5
    649c:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    64a0:	57010000 	strpl	r0, [r1, -r0]
    64a4:	0004ac03 	andeq	sl, r4, r3, lsl #24
    64a8:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    64ac:	000015de 	ldrdeq	r1, [r0], -lr
    64b0:	cf035701 	svcgt	0x00035701
    64b4:	01000000 	mrseq	r0, (UNDEF: 0)
    64b8:	c1200051 	qsubgt	r0, r1, r0
    64bc:	01000009 	tsteq	r0, r9
    64c0:	514a037d 	hvcpl	41021	; 0xa03d
    64c4:	00120800 	andseq	r0, r2, r0, lsl #16
    64c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    64cc:	000009f8 	strdeq	r0, [r0], -r8
    64d0:	00256c14 	eoreq	r6, r5, r4, lsl ip
    64d4:	037d0100 	cmneq	sp, #0, 2
    64d8:	000004ac 	andeq	r0, r0, ip, lsr #9
    64dc:	2f155001 	svccs	0x00155001
    64e0:	0100002c 	tsteq	r0, ip, lsr #32
    64e4:	004c037d 	subeq	r0, ip, sp, ror r3
    64e8:	34170000 	ldrcc	r0, [r7], #-0
    64ec:	de140000 	cdple	0, 1, cr0, cr4, cr0, {0}
    64f0:	01000015 	tsteq	r0, r5, lsl r0
    64f4:	00cf037d 	sbceq	r0, pc, sp, ror r3	; <UNPREDICTABLE>
    64f8:	52010000 	andpl	r0, r1, #0
    64fc:	28162000 	ldmdacs	r6, {sp}
    6500:	a0010000 	andge	r0, r1, r0
    6504:	00515c03 	subseq	r5, r1, r3, lsl #24
    6508:	00000408 	andeq	r0, r0, r8, lsl #8
    650c:	2b9c0100 	blcs	fe706914 <SCS_BASE+0x1e6f8914>
    6510:	1400000a 	strne	r0, [r0], #-10
    6514:	0000256c 	andeq	r2, r0, ip, ror #10
    6518:	ac03a001 	stcge	0, cr10, [r3], {1}
    651c:	01000004 	tsteq	r0, r4
    6520:	29a01450 	stmibcs	r0!, {r4, r6, sl, ip}
    6524:	a0010000 	andge	r0, r1, r0
    6528:	00004c03 	andeq	r4, r0, r3, lsl #24
    652c:	00510100 	subseq	r0, r1, r0, lsl #2
    6530:	00268120 	eoreq	r8, r6, r0, lsr #2
    6534:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    6538:	08005160 	stmdaeq	r0, {r5, r6, r8, ip, lr}
    653c:	00000008 	andeq	r0, r0, r8
    6540:	0a6e9c01 	beq	1bad54c <__Stack_Size+0x1bad14c>
    6544:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6548:	01000025 	tsteq	r0, r5, lsr #32
    654c:	04ac03bf 	strteq	r0, [ip], #959	; 0x3bf
    6550:	50010000 	andpl	r0, r1, r0
    6554:	0027e114 	eoreq	lr, r7, r4, lsl r1
    6558:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    655c:	0000004c 	andeq	r0, r0, ip, asr #32
    6560:	28155101 	ldmdacs	r5, {r0, r8, ip, lr}
    6564:	01000026 	tsteq	r0, r6, lsr #32
    6568:	004c03bf 	strheq	r0, [ip], #-63	; 0xffffffc1
    656c:	34510000 	ldrbcc	r0, [r1], #-0
    6570:	20000000 	andcs	r0, r0, r0
    6574:	00002b52 	andeq	r2, r0, r2, asr fp
    6578:	6803dc01 	stmdavs	r3, {r0, sl, fp, ip, lr, pc}
    657c:	12080051 	andne	r0, r8, #81	; 0x51
    6580:	01000000 	mrseq	r0, (UNDEF: 0)
    6584:	000ab19c 	muleq	sl, ip, r1
    6588:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    658c:	dc010000 	stcle	0, cr0, [r1], {-0}
    6590:	0004ac03 	andeq	sl, r4, r3, lsl #24
    6594:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6598:	00002c62 	andeq	r2, r0, r2, ror #24
    659c:	4c03dc01 	stcmi	12, cr13, [r3], {1}
    65a0:	72000000 	andvc	r0, r0, #0
    65a4:	14000034 	strne	r0, [r0], #-52	; 0x34
    65a8:	000015de 	ldrdeq	r1, [r0], -lr
    65ac:	cf03dc01 	svcgt	0x0003dc01
    65b0:	01000000 	mrseq	r0, (UNDEF: 0)
    65b4:	05200052 	streq	r0, [r0, #-82]!	; 0x52
    65b8:	0100002a 	tsteq	r0, sl, lsr #32
    65bc:	517a03f8 	ldrshpl	r0, [sl, #-56]!	; 0xffffffc8
    65c0:	000e0800 	andeq	r0, lr, r0, lsl #16
    65c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    65c8:	00000ad6 	ldrdeq	r0, [r0], -r6
    65cc:	00256c14 	eoreq	r6, r5, r4, lsl ip
    65d0:	03f80100 	mvnseq	r0, #0, 2
    65d4:	000004ac 	andeq	r0, r0, ip, lsr #9
    65d8:	20005001 	andcs	r5, r0, r1
    65dc:	00002665 	andeq	r2, r0, r5, ror #12
    65e0:	88040e01 	stmdahi	r4, {r0, r9, sl, fp}
    65e4:	1a080051 	bne	206730 <__Stack_Size+0x206330>
    65e8:	01000000 	mrseq	r0, (UNDEF: 0)
    65ec:	000b3f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    65f0:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    65f4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    65f8:	0004ac04 	andeq	sl, r4, r4, lsl #24
    65fc:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6600:	000024a6 	andeq	r2, r0, r6, lsr #9
    6604:	4c040e01 	stcmi	14, cr0, [r4], {1}
    6608:	ac000000 	stcge	0, cr0, [r0], {-0}
    660c:	21000034 	tstcs	r0, r4, lsr r0
    6610:	0000047a 	andeq	r0, r0, sl, ror r4
    6614:	08005188 	stmdaeq	r0, {r3, r7, r8, ip, lr}
    6618:	0000000e 	andeq	r0, r0, lr
    661c:	22041501 	andcs	r1, r4, #4194304	; 0x400000
    6620:	00000493 	muleq	r0, r3, r4
    6624:	000034ac 	andeq	r3, r0, ip, lsr #9
    6628:	00048723 	andeq	r8, r4, r3, lsr #14
    662c:	24500100 	ldrbcs	r0, [r0], #-256	; 0x100
    6630:	08005188 	stmdaeq	r0, {r3, r7, r8, ip, lr}
    6634:	0000000e 	andeq	r0, r0, lr
    6638:	00049f25 	andeq	r9, r4, r5, lsr #30
    663c:	0034cd00 	eorseq	ip, r4, r0, lsl #26
    6640:	00000000 	andeq	r0, r0, r0
    6644:	002afd20 	eoreq	pc, sl, r0, lsr #26
    6648:	042d0100 	strteq	r0, [sp], #-256	; 0x100
    664c:	080051a2 	stmdaeq	r0, {r1, r5, r7, r8, ip, lr}
    6650:	00000034 	andeq	r0, r0, r4, lsr r0
    6654:	0bee9c01 	bleq	ffbad660 <SCS_BASE+0x1fb9f660>
    6658:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    665c:	01000025 	tsteq	r0, r5, lsr #32
    6660:	04ac042d 	strteq	r0, [ip], #1069	; 0x42d
    6664:	35020000 	strcc	r0, [r2, #-0]
    6668:	6a150000 	bvs	546670 <__Stack_Size+0x546270>
    666c:	01000028 	tsteq	r0, r8, lsr #32
    6670:	004c042d 	subeq	r0, ip, sp, lsr #8
    6674:	35360000 	ldrcc	r0, [r6, #-0]!
    6678:	a9150000 	ldmdbge	r5, {}	; <UNPREDICTABLE>
    667c:	0100002a 	tsteq	r0, sl, lsr #32
    6680:	004c042e 	subeq	r0, ip, lr, lsr #8
    6684:	35570000 	ldrbcc	r0, [r7, #-0]
    6688:	59150000 	ldmdbpl	r5, {}	; <UNPREDICTABLE>
    668c:	0100002c 	tsteq	r0, ip, lsr #32
    6690:	004c042e 	subeq	r0, ip, lr, lsr #8
    6694:	35780000 	ldrbcc	r0, [r8, #-0]!
    6698:	7a260000 	bvc	9866a0 <__Stack_Size+0x9862a0>
    669c:	bc000004 	stclt	0, cr0, [r0], {4}
    66a0:	0e080051 	mcreq	0, 0, r0, cr8, cr1, {2}
    66a4:	01000000 	mrseq	r0, (UNDEF: 0)
    66a8:	0bcb0441 	bleq	ff2c77b4 <SCS_BASE+0x1f2b97b4>
    66ac:	93230000 			; <UNDEFINED> instruction: 0x93230000
    66b0:	01000004 	tsteq	r0, r4
    66b4:	04872355 	streq	r2, [r7], #853	; 0x355
    66b8:	54010000 	strpl	r0, [r1], #-0
    66bc:	0051bc24 	subseq	fp, r1, r4, lsr #24
    66c0:	00000e08 	andeq	r0, r0, r8, lsl #28
    66c4:	049f2500 	ldreq	r2, [pc], #1280	; 66cc <__Stack_Size+0x62cc>
    66c8:	35b20000 	ldrcc	r0, [r2, #0]!
    66cc:	00000000 	andeq	r0, r0, r0
    66d0:	0051b61a 	subseq	fp, r1, sl, lsl r6
    66d4:	00052708 	andeq	r2, r5, r8, lsl #14
    66d8:	000be400 	andeq	lr, fp, r0, lsl #8
    66dc:	52011b00 	andpl	r1, r1, #0, 22
    66e0:	011b3101 	tsteq	fp, r1, lsl #2
    66e4:	00740250 	rsbseq	r0, r4, r0, asr r2
    66e8:	51bc2700 			; <UNDEFINED> instruction: 0x51bc2700
    66ec:	04b20800 	ldrteq	r0, [r2], #2048	; 0x800
    66f0:	20000000 	andcs	r0, r0, r0
    66f4:	00002971 	andeq	r2, r0, r1, ror r9
    66f8:	d604b101 	strle	fp, [r4], -r1, lsl #2
    66fc:	14080051 	strne	r0, [r8], #-81	; 0x51
    6700:	01000000 	mrseq	r0, (UNDEF: 0)
    6704:	000c519c 	muleq	ip, ip, r1
    6708:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    670c:	b1010000 	mrslt	r0, (UNDEF: 1)
    6710:	0004ac04 	andeq	sl, r4, r4, lsl #24
    6714:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6718:	000024bd 			; <UNDEFINED> instruction: 0x000024bd
    671c:	4c04b101 	stfmid	f3, [r4], {1}
    6720:	dc000000 	stcle	0, cr0, [r0], {-0}
    6724:	14000035 	strne	r0, [r0], #-53	; 0x35
    6728:	00002c06 	andeq	r2, r0, r6, lsl #24
    672c:	4c04b101 	stfmid	f3, [r4], {1}
    6730:	01000000 	mrseq	r0, (UNDEF: 0)
    6734:	293e1552 	ldmdbcs	lr!, {r1, r4, r6, r8, sl, ip}
    6738:	b2010000 	andlt	r0, r1, #0
    673c:	00004c04 	andeq	r4, r0, r4, lsl #24
    6740:	0035fd00 	eorseq	pc, r5, r0, lsl #26
    6744:	25521600 	ldrbcs	r1, [r2, #-1536]	; 0x600
    6748:	b4010000 	strlt	r0, [r1], #-0
    674c:	00004c04 	andeq	r4, r0, r4, lsl #24
    6750:	00361e00 	eorseq	r1, r6, r0, lsl #28
    6754:	5d200000 	stcpl	0, cr0, [r0, #-0]
    6758:	0100002a 	tsteq	r0, sl, lsr #32
    675c:	51ea045b 	mvnpl	r0, fp, asr r4
    6760:	001a0800 	andseq	r0, sl, r0, lsl #16
    6764:	9c010000 	stcls	0, cr0, [r1], {-0}
    6768:	00000cc8 	andeq	r0, r0, r8, asr #25
    676c:	00256c15 	eoreq	r6, r5, r5, lsl ip
    6770:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    6774:	000004ac 	andeq	r0, r0, ip, lsr #9
    6778:	0000364d 	andeq	r3, r0, sp, asr #12
    677c:	0024bd15 	eoreq	fp, r4, r5, lsl sp
    6780:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    6784:	0000004c 	andeq	r0, r0, ip, asr #32
    6788:	0000366b 	andeq	r3, r0, fp, ror #12
    678c:	002c0615 	eoreq	r0, ip, r5, lsl r6
    6790:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    6794:	0000004c 	andeq	r0, r0, ip, asr #32
    6798:	0000368c 	andeq	r3, r0, ip, lsl #13
    679c:	00293e15 	eoreq	r3, r9, r5, lsl lr
    67a0:	045c0100 	ldrbeq	r0, [ip], #-256	; 0x100
    67a4:	0000004c 	andeq	r0, r0, ip, asr #32
    67a8:	000036ad 	andeq	r3, r0, sp, lsr #13
    67ac:	00255216 	eoreq	r5, r5, r6, lsl r2
    67b0:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    67b4:	0000004c 	andeq	r0, r0, ip, asr #32
    67b8:	000036ce 	andeq	r3, r0, lr, asr #13
    67bc:	0051f228 	subseq	pc, r1, r8, lsr #4
    67c0:	000bee08 	andeq	lr, fp, r8, lsl #28
    67c4:	50011b00 	andpl	r1, r1, r0, lsl #22
    67c8:	00007402 	andeq	r7, r0, r2, lsl #8
    67cc:	25d52000 	ldrbcs	r2, [r5]
    67d0:	8d010000 	stchi	0, cr0, [r1, #-0]
    67d4:	00520404 	subseq	r0, r2, r4, lsl #8
    67d8:	00001408 	andeq	r1, r0, r8, lsl #8
    67dc:	2f9c0100 	svccs	0x009c0100
    67e0:	1500000d 	strne	r0, [r0, #-13]
    67e4:	0000256c 	andeq	r2, r0, ip, ror #10
    67e8:	ac048d01 	stcge	13, cr8, [r4], {1}
    67ec:	0b000004 	bleq	6804 <__Stack_Size+0x6404>
    67f0:	15000037 	strne	r0, [r0, #-55]	; 0x37
    67f4:	000024bd 			; <UNDEFINED> instruction: 0x000024bd
    67f8:	4c048d01 	stcmi	13, cr8, [r4], {1}
    67fc:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    6800:	15000037 	strne	r0, [r0, #-55]	; 0x37
    6804:	00002c06 	andeq	r2, r0, r6, lsl #24
    6808:	4c048e01 	stcmi	14, cr8, [r4], {1}
    680c:	4a000000 	bmi	6814 <__Stack_Size+0x6414>
    6810:	15000037 	strne	r0, [r0, #-55]	; 0x37
    6814:	0000293e 	andeq	r2, r0, lr, lsr r9
    6818:	4c048e01 	stcmi	14, cr8, [r4], {1}
    681c:	6b000000 	blvs	6824 <__Stack_Size+0x6424>
    6820:	28000037 	stmdacs	r0, {r0, r1, r2, r4, r5}
    6824:	0800520c 	stmdaeq	r0, {r2, r3, r9, ip, lr}
    6828:	00000bee 	andeq	r0, r0, lr, ror #23
    682c:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    6830:	00000074 	andeq	r0, r0, r4, ror r0
    6834:	000d0320 	andeq	r0, sp, r0, lsr #6
    6838:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    683c:	08005218 	stmdaeq	r0, {r3, r4, r9, ip, lr}
    6840:	00000006 	andeq	r0, r0, r6
    6844:	0d709c01 	ldcleq	12, cr9, [r0, #-4]!
    6848:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    684c:	01000025 	tsteq	r0, r5, lsr #32
    6850:	04ac04d6 	strteq	r0, [ip], #1238	; 0x4d6
    6854:	50010000 	andpl	r0, r1, r0
    6858:	002a2714 	eoreq	r2, sl, r4, lsl r7
    685c:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    6860:	0000004c 	andeq	r0, r0, ip, asr #32
    6864:	b3145101 	tstlt	r4, #1073741824	; 0x40000000
    6868:	01000027 	tsteq	r0, r7, lsr #32
    686c:	004c04d6 	ldrdeq	r0, [ip], #-70	; 0xffffffba
    6870:	52010000 	andpl	r0, r1, #0
    6874:	28c82000 	stmiacs	r8, {sp}^
    6878:	f2010000 	vhadd.s8	d0, d1, d0
    687c:	00521e04 	subseq	r1, r2, r4, lsl #28
    6880:	00001008 	andeq	r1, r0, r8
    6884:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    6888:	1400000d 	strne	r0, [r0], #-13
    688c:	0000256c 	andeq	r2, r0, ip, ror #10
    6890:	ac04f201 	sfmge	f7, 1, [r4], {1}
    6894:	01000004 	tsteq	r0, r4
    6898:	05fb1550 	ldrbeq	r1, [fp, #1360]!	; 0x550
    689c:	f2010000 	vhadd.s8	d0, d1, d0
    68a0:	00004c04 	andeq	r4, r0, r4, lsl #24
    68a4:	00378c00 	eorseq	r8, r7, r0, lsl #24
    68a8:	25c21600 	strbcs	r1, [r2, #1536]	; 0x600
    68ac:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    68b0:	00004c04 	andeq	r4, r0, r4, lsl #24
    68b4:	0037ad00 	eorseq	sl, r7, r0, lsl #26
    68b8:	7a290000 	bvc	a468c0 <__Stack_Size+0xa464c0>
    68bc:	2e000004 	cdpcs	0, 0, cr0, cr0, cr4, {0}
    68c0:	10080052 	andne	r0, r8, r2, asr r0
    68c4:	01000000 	mrseq	r0, (UNDEF: 0)
    68c8:	000de29c 	muleq	sp, ip, r2
    68cc:	04872300 	streq	r2, [r7], #768	; 0x300
    68d0:	50010000 	andpl	r0, r1, r0
    68d4:	00049322 	andeq	r9, r4, r2, lsr #6
    68d8:	0037e200 	eorseq	lr, r7, r0, lsl #4
    68dc:	049f2500 	ldreq	r2, [pc], #1280	; 68e4 <__Stack_Size+0x64e4>
    68e0:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    68e4:	20000000 	andcs	r0, r0, r0
    68e8:	0000283c 	andeq	r2, r0, ip, lsr r8
    68ec:	3e054501 	cfsh32cc	mvfx4, mvfx5, #1
    68f0:	3c080052 	stccc	0, cr0, [r8], {82}	; 0x52
    68f4:	01000000 	mrseq	r0, (UNDEF: 0)
    68f8:	000e679c 	muleq	lr, ip, r7
    68fc:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    6900:	45010000 	strmi	r0, [r1, #-0]
    6904:	0004ac05 	andeq	sl, r4, r5, lsl #24
    6908:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    690c:	00002787 	andeq	r2, r0, r7, lsl #15
    6910:	4c054501 	cfstr32mi	mvfx4, [r5], {1}
    6914:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    6918:	15000038 	strne	r0, [r0, #-56]	; 0x38
    691c:	00002542 	andeq	r2, r0, r2, asr #10
    6920:	4c054601 	stcmi	6, cr4, [r5], {1}
    6924:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    6928:	15000038 	strne	r0, [r0, #-56]	; 0x38
    692c:	00002582 	andeq	r2, r0, r2, lsl #11
    6930:	4c054601 	stcmi	6, cr4, [r5], {1}
    6934:	7a000000 	bvc	693c <__Stack_Size+0x653c>
    6938:	16000038 			; <UNDEFINED> instruction: 0x16000038
    693c:	00002552 	andeq	r2, r0, r2, asr r5
    6940:	4c054801 	stcmi	8, cr4, [r5], {1}
    6944:	9b000000 	blls	694c <__Stack_Size+0x654c>
    6948:	16000038 			; <UNDEFINED> instruction: 0x16000038
    694c:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    6950:	4c054901 	stcmi	9, cr4, [r5], {1}
    6954:	d0000000 	andle	r0, r0, r0
    6958:	16000038 			; <UNDEFINED> instruction: 0x16000038
    695c:	000026d9 	ldrdeq	r2, [r0], -r9
    6960:	4c054a01 	stcmi	10, cr4, [r5], {1}
    6964:	fa000000 	blx	696c <__Stack_Size+0x656c>
    6968:	00000038 	andeq	r0, r0, r8, lsr r0
    696c:	002b5d20 	eoreq	r5, fp, r0, lsr #26
    6970:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 6878 <__Stack_Size+0x6478>
    6974:	0800527a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, lr}
    6978:	00000010 	andeq	r0, r0, r0, lsl r0
    697c:	0eac9c01 	cdpeq	12, 10, cr9, cr12, cr1, {0}
    6980:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6984:	01000025 	tsteq	r0, r5, lsr #32
    6988:	04ac057f 	strteq	r0, [ip], #1407	; 0x57f
    698c:	50010000 	andpl	r0, r1, r0
    6990:	00257115 	eoreq	r7, r5, r5, lsl r1
    6994:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 689c <__Stack_Size+0x649c>
    6998:	0000004c 	andeq	r0, r0, ip, asr #32
    699c:	00003924 	andeq	r3, r0, r4, lsr #18
    69a0:	0029b016 	eoreq	fp, r9, r6, lsl r0
    69a4:	05810100 	streq	r0, [r1, #256]	; 0x100
    69a8:	0000004c 	andeq	r0, r0, ip, asr #32
    69ac:	00003945 	andeq	r3, r0, r5, asr #18
    69b0:	24fb2000 	ldrbtcs	r2, [fp], #0
    69b4:	a1010000 	mrsge	r0, (UNDEF: 1)
    69b8:	00528a05 	subseq	r8, r2, r5, lsl #20
    69bc:	00001408 	andeq	r1, r0, r8, lsl #8
    69c0:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    69c4:	1400000e 	strne	r0, [r0], #-14
    69c8:	0000256c 	andeq	r2, r0, ip, ror #10
    69cc:	ac05a101 	stfged	f2, [r5], {1}
    69d0:	01000004 	tsteq	r0, r4
    69d4:	25711550 	ldrbcs	r1, [r1, #-1360]!	; 0x550
    69d8:	a1010000 	mrsge	r0, (UNDEF: 1)
    69dc:	00004c05 	andeq	r4, r0, r5, lsl #24
    69e0:	00397a00 	eorseq	r7, r9, r0, lsl #20
    69e4:	29b01600 	ldmibcs	r0!, {r9, sl, ip}
    69e8:	a3010000 	movwge	r0, #4096	; 0x1000
    69ec:	00004c05 	andeq	r4, r0, r5, lsl #24
    69f0:	00399b00 	eorseq	r9, r9, r0, lsl #22
    69f4:	36200000 	strtcc	r0, [r0], -r0
    69f8:	0100002c 	tsteq	r0, ip, lsr #32
    69fc:	529e05c3 	addspl	r0, lr, #817889280	; 0x30c00000
    6a00:	00100800 	andseq	r0, r0, r0, lsl #16
    6a04:	9c010000 	stcls	0, cr0, [r1], {-0}
    6a08:	00000f36 	andeq	r0, r0, r6, lsr pc
    6a0c:	00256c14 	eoreq	r6, r5, r4, lsl ip
    6a10:	05c30100 	strbeq	r0, [r3, #256]	; 0x100
    6a14:	000004ac 	andeq	r0, r0, ip, lsr #9
    6a18:	71155001 	tstvc	r5, r1
    6a1c:	01000025 	tsteq	r0, r5, lsr #32
    6a20:	004c05c3 	subeq	r0, ip, r3, asr #11
    6a24:	39d00000 	ldmibcc	r0, {}^	; <UNPREDICTABLE>
    6a28:	b9160000 	ldmdblt	r6, {}	; <UNPREDICTABLE>
    6a2c:	01000029 	tsteq	r0, r9, lsr #32
    6a30:	004c05c5 	subeq	r0, ip, r5, asr #11
    6a34:	39f10000 	ldmibcc	r1!, {}^	; <UNPREDICTABLE>
    6a38:	20000000 	andcs	r0, r0, r0
    6a3c:	0000290a 	andeq	r2, r0, sl, lsl #18
    6a40:	ae05e501 	cfsh32ge	mvfx14, mvfx5, #1
    6a44:	14080052 	strne	r0, [r8], #-82	; 0x52
    6a48:	01000000 	mrseq	r0, (UNDEF: 0)
    6a4c:	000f7b9c 	muleq	pc, ip, fp	; <UNPREDICTABLE>
    6a50:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    6a54:	e5010000 	str	r0, [r1, #-0]
    6a58:	0004ac05 	andeq	sl, r4, r5, lsl #24
    6a5c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6a60:	00002571 	andeq	r2, r0, r1, ror r5
    6a64:	4c05e501 	cfstr32mi	mvfx14, [r5], {1}
    6a68:	26000000 	strcs	r0, [r0], -r0
    6a6c:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    6a70:	000029b9 			; <UNDEFINED> instruction: 0x000029b9
    6a74:	4c05e701 	stcmi	7, cr14, [r5], {1}
    6a78:	47000000 	strmi	r0, [r0, -r0]
    6a7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6a80:	00268f20 	eoreq	r8, r6, r0, lsr #30
    6a84:	06020100 	streq	r0, [r2], -r0, lsl #2
    6a88:	080052c2 	stmdaeq	r0, {r1, r6, r7, r9, ip, lr}
    6a8c:	00000018 	andeq	r0, r0, r8, lsl r0
    6a90:	0fae9c01 	svceq	0x00ae9c01
    6a94:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6a98:	01000025 	tsteq	r0, r5, lsr #32
    6a9c:	04ac0602 	strteq	r0, [ip], #1538	; 0x602
    6aa0:	50010000 	andpl	r0, r1, r0
    6aa4:	0015de14 	andseq	sp, r5, r4, lsl lr
    6aa8:	06020100 	streq	r0, [r2], -r0, lsl #2
    6aac:	000000cf 	andeq	r0, r0, pc, asr #1
    6ab0:	20005101 	andcs	r5, r0, r1, lsl #2
    6ab4:	000029ce 	andeq	r2, r0, lr, asr #19
    6ab8:	da061d01 	ble	18dec4 <__Stack_Size+0x18dac4>
    6abc:	18080052 	stmdane	r8, {r1, r4, r6}
    6ac0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ac4:	000fe19c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    6ac8:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    6acc:	1d010000 	stcne	0, cr0, [r1, #-0]
    6ad0:	0004ac06 	andeq	sl, r4, r6, lsl #24
    6ad4:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    6ad8:	000015de 	ldrdeq	r1, [r0], -lr
    6adc:	cf061d01 	svcgt	0x00061d01
    6ae0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ae4:	27200051 			; <UNDEFINED> instruction: 0x27200051
    6ae8:	01000025 	tsteq	r0, r5, lsr #32
    6aec:	52f20639 	rscspl	r0, r2, #59768832	; 0x3900000
    6af0:	00180800 	andseq	r0, r8, r0, lsl #16
    6af4:	9c010000 	stcls	0, cr0, [r1], {-0}
    6af8:	00001014 	andeq	r1, r0, r4, lsl r0
    6afc:	00256c14 	eoreq	r6, r5, r4, lsl ip
    6b00:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    6b04:	000004ac 	andeq	r0, r0, ip, lsr #9
    6b08:	de145001 	cdple	0, 1, cr5, cr4, cr1, {0}
    6b0c:	01000015 	tsteq	r0, r5, lsl r0
    6b10:	00cf0639 	sbceq	r0, pc, r9, lsr r6	; <UNPREDICTABLE>
    6b14:	51010000 	mrspl	r0, (UNDEF: 1)
    6b18:	29dc2000 	ldmibcs	ip, {sp}^
    6b1c:	55010000 	strpl	r0, [r1, #-0]
    6b20:	00530a06 	subseq	r0, r3, r6, lsl #20
    6b24:	00001808 	andeq	r1, r0, r8, lsl #16
    6b28:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    6b2c:	14000010 	strne	r0, [r0], #-16
    6b30:	0000256c 	andeq	r2, r0, ip, ror #10
    6b34:	ac065501 	cfstr32ge	mvfx5, [r6], {1}
    6b38:	01000004 	tsteq	r0, r4
    6b3c:	15de1450 	ldrbne	r1, [lr, #1104]	; 0x450
    6b40:	55010000 	strpl	r0, [r1, #-0]
    6b44:	0000cf06 	andeq	ip, r0, r6, lsl #30
    6b48:	00510100 	subseq	r0, r1, r0, lsl #2
    6b4c:	00019320 	andeq	r9, r1, r0, lsr #6
    6b50:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    6b54:	08005322 	stmdaeq	r0, {r1, r5, r8, r9, ip, lr}
    6b58:	00000010 	andeq	r0, r0, r0, lsl r0
    6b5c:	108c9c01 	addne	r9, ip, r1, lsl #24
    6b60:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6b64:	01000025 	tsteq	r0, r5, lsr #32
    6b68:	04ac0674 	strteq	r0, [ip], #1652	; 0x674
    6b6c:	50010000 	andpl	r0, r1, r0
    6b70:	00244115 	eoreq	r4, r4, r5, lsl r1
    6b74:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    6b78:	0000004c 	andeq	r0, r0, ip, asr #32
    6b7c:	00003a7c 	andeq	r3, r0, ip, ror sl
    6b80:	0029b016 	eoreq	fp, r9, r6, lsl r0
    6b84:	06760100 	ldrbteq	r0, [r6], -r0, lsl #2
    6b88:	0000004c 	andeq	r0, r0, ip, asr #32
    6b8c:	00003a9d 	muleq	r0, sp, sl
    6b90:	24e62000 	strbtcs	r2, [r6], #0
    6b94:	95010000 	strls	r0, [r1, #-0]
    6b98:	00533206 	subseq	r3, r3, r6, lsl #4
    6b9c:	00001408 	andeq	r1, r0, r8, lsl #8
    6ba0:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    6ba4:	14000010 	strne	r0, [r0], #-16
    6ba8:	0000256c 	andeq	r2, r0, ip, ror #10
    6bac:	ac069501 	cfstr32ge	mvfx9, [r6], {1}
    6bb0:	01000004 	tsteq	r0, r4
    6bb4:	24411550 	strbcs	r1, [r1], #-1360	; 0x550
    6bb8:	95010000 	strls	r0, [r1, #-0]
    6bbc:	00004c06 	andeq	r4, r0, r6, lsl #24
    6bc0:	003ad200 	eorseq	sp, sl, r0, lsl #4
    6bc4:	29b01600 	ldmibcs	r0!, {r9, sl, ip}
    6bc8:	97010000 	strls	r0, [r1, -r0]
    6bcc:	00004c06 	andeq	r4, r0, r6, lsl #24
    6bd0:	003af300 	eorseq	pc, sl, r0, lsl #6
    6bd4:	4f200000 	svcmi	0x00200000
    6bd8:	01000024 	tsteq	r0, r4, lsr #32
    6bdc:	534606b6 	movtpl	r0, #26294	; 0x66b6
    6be0:	00100800 	andseq	r0, r0, r0, lsl #16
    6be4:	9c010000 	stcls	0, cr0, [r1], {-0}
    6be8:	00001116 	andeq	r1, r0, r6, lsl r1
    6bec:	00256c14 	eoreq	r6, r5, r4, lsl ip
    6bf0:	06b60100 	ldrteq	r0, [r6], r0, lsl #2
    6bf4:	000004ac 	andeq	r0, r0, ip, lsr #9
    6bf8:	41155001 	tstmi	r5, r1
    6bfc:	01000024 	tsteq	r0, r4, lsr #32
    6c00:	004c06b6 	strheq	r0, [ip], #-102	; 0xffffff9a
    6c04:	3b280000 	blcc	a06c0c <__Stack_Size+0xa0680c>
    6c08:	b9160000 	ldmdblt	r6, {}	; <UNPREDICTABLE>
    6c0c:	01000029 	tsteq	r0, r9, lsr #32
    6c10:	004c06b8 	strheq	r0, [ip], #-104	; 0xffffff98
    6c14:	3b490000 	blcc	1246c1c <__Stack_Size+0x124681c>
    6c18:	20000000 	andcs	r0, r0, r0
    6c1c:	0000240c 	andeq	r2, r0, ip, lsl #8
    6c20:	5606d701 	strpl	sp, [r6], -r1, lsl #14
    6c24:	14080053 	strne	r0, [r8], #-83	; 0x53
    6c28:	01000000 	mrseq	r0, (UNDEF: 0)
    6c2c:	00115b9c 	mulseq	r1, ip, fp
    6c30:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    6c34:	d7010000 	strle	r0, [r1, -r0]
    6c38:	0004ac06 	andeq	sl, r4, r6, lsl #24
    6c3c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6c40:	00002441 	andeq	r2, r0, r1, asr #8
    6c44:	4c06d701 	stcmi	7, cr13, [r6], {1}
    6c48:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    6c4c:	1600003b 			; <UNDEFINED> instruction: 0x1600003b
    6c50:	000029b9 			; <UNDEFINED> instruction: 0x000029b9
    6c54:	4c06d901 	stcmi	9, cr13, [r6], {1}
    6c58:	9f000000 	svcls	0x00000000
    6c5c:	0000003b 	andeq	r0, r0, fp, lsr r0
    6c60:	00295f20 	eoreq	r5, r9, r0, lsr #30
    6c64:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    6c68:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    6c6c:	00000010 	andeq	r0, r0, r0, lsl r0
    6c70:	11a09c01 	lslne	r9, r1, #24
    6c74:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6c78:	01000025 	tsteq	r0, r5, lsr #32
    6c7c:	04ac06f7 	strteq	r0, [ip], #1783	; 0x6f7
    6c80:	50010000 	andpl	r0, r1, r0
    6c84:	00248115 	eoreq	r8, r4, r5, lsl r1
    6c88:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    6c8c:	0000004c 	andeq	r0, r0, ip, asr #32
    6c90:	00003bd4 	ldrdeq	r3, [r0], -r4
    6c94:	0029b016 	eoreq	fp, r9, r6, lsl r0
    6c98:	06f90100 	ldrbteq	r0, [r9], r0, lsl #2
    6c9c:	0000004c 	andeq	r0, r0, ip, asr #32
    6ca0:	00003bf5 	strdeq	r3, [r0], -r5
    6ca4:	26f62000 	ldrbtcs	r2, [r6], r0
    6ca8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6cac:	00537a07 	subseq	r7, r3, r7, lsl #20
    6cb0:	00001408 	andeq	r1, r0, r8, lsl #8
    6cb4:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    6cb8:	14000011 	strne	r0, [r0], #-17
    6cbc:	0000256c 	andeq	r2, r0, ip, ror #10
    6cc0:	ac071801 	stcge	8, cr1, [r7], {1}
    6cc4:	01000004 	tsteq	r0, r4
    6cc8:	24811550 	strcs	r1, [r1], #1360	; 0x550
    6ccc:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6cd0:	00004c07 	andeq	r4, r0, r7, lsl #24
    6cd4:	003c2a00 	eorseq	r2, ip, r0, lsl #20
    6cd8:	29b01600 	ldmibcs	r0!, {r9, sl, ip}
    6cdc:	1a010000 	bne	46ce4 <__Stack_Size+0x468e4>
    6ce0:	00004c07 	andeq	r4, r0, r7, lsl #24
    6ce4:	003c4b00 	eorseq	r4, ip, r0, lsl #22
    6ce8:	5a200000 	bpl	806cf0 <__Stack_Size+0x8068f0>
    6cec:	01000025 	tsteq	r0, r5, lsr #32
    6cf0:	538e0739 	orrpl	r0, lr, #14942208	; 0xe40000
    6cf4:	00100800 	andseq	r0, r0, r0, lsl #16
    6cf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    6cfc:	0000122a 	andeq	r1, r0, sl, lsr #4
    6d00:	00256c14 	eoreq	r6, r5, r4, lsl ip
    6d04:	07390100 	ldreq	r0, [r9, -r0, lsl #2]!
    6d08:	000004ac 	andeq	r0, r0, ip, lsr #9
    6d0c:	81155001 	tsthi	r5, r1
    6d10:	01000024 	tsteq	r0, r4, lsr #32
    6d14:	004c0739 	subeq	r0, ip, r9, lsr r7
    6d18:	3c800000 	stccc	0, cr0, [r0], {0}
    6d1c:	b9160000 	ldmdblt	r6, {}	; <UNPREDICTABLE>
    6d20:	01000029 	tsteq	r0, r9, lsr #32
    6d24:	004c073b 	subeq	r0, ip, fp, lsr r7
    6d28:	3ca10000 	stccc	0, cr0, [r1]
    6d2c:	20000000 	andcs	r0, r0, r0
    6d30:	000023d3 	ldrdeq	r2, [r0], -r3
    6d34:	9e075a01 	vmlals.f32	s10, s14, s2
    6d38:	14080053 	strne	r0, [r8], #-83	; 0x53
    6d3c:	01000000 	mrseq	r0, (UNDEF: 0)
    6d40:	00126f9c 	mulseq	r2, ip, pc	; <UNPREDICTABLE>
    6d44:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    6d48:	5a010000 	bpl	46d50 <__Stack_Size+0x46950>
    6d4c:	0004ac07 	andeq	sl, r4, r7, lsl #24
    6d50:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6d54:	00002481 	andeq	r2, r0, r1, lsl #9
    6d58:	4c075a01 	stcmi	10, cr5, [r7], {1}
    6d5c:	d6000000 	strle	r0, [r0], -r0
    6d60:	1600003c 			; <UNDEFINED> instruction: 0x1600003c
    6d64:	000029b9 			; <UNDEFINED> instruction: 0x000029b9
    6d68:	4c075c01 	stcmi	12, cr5, [r7], {1}
    6d6c:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    6d70:	0000003c 	andeq	r0, r0, ip, lsr r0
    6d74:	002be020 	eoreq	lr, fp, r0, lsr #32
    6d78:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    6d7c:	080053b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, ip, lr}
    6d80:	00000010 	andeq	r0, r0, r0, lsl r0
    6d84:	12b49c01 	adcsne	r9, r4, #256	; 0x100
    6d88:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6d8c:	01000025 	tsteq	r0, r5, lsr #32
    6d90:	04ac077b 	strteq	r0, [ip], #1915	; 0x77b
    6d94:	50010000 	andpl	r0, r1, r0
    6d98:	0027a715 	eoreq	sl, r7, r5, lsl r7
    6d9c:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    6da0:	0000004c 	andeq	r0, r0, ip, asr #32
    6da4:	00003d2c 	andeq	r3, r0, ip, lsr #26
    6da8:	0029b016 	eoreq	fp, r9, r6, lsl r0
    6dac:	077d0100 	ldrbeq	r0, [sp, -r0, lsl #2]!
    6db0:	0000004c 	andeq	r0, r0, ip, asr #32
    6db4:	00003d4d 	andeq	r3, r0, sp, asr #26
    6db8:	2aed2000 	bcs	ffb4edc0 <SCS_BASE+0x1fb40dc0>
    6dbc:	9b010000 	blls	46dc4 <__Stack_Size+0x469c4>
    6dc0:	0053c207 	subseq	ip, r3, r7, lsl #4
    6dc4:	00001008 	andeq	r1, r0, r8
    6dc8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    6dcc:	14000012 	strne	r0, [r0], #-18
    6dd0:	0000256c 	andeq	r2, r0, ip, ror #10
    6dd4:	ac079b01 	stcge	11, cr9, [r7], {1}
    6dd8:	01000004 	tsteq	r0, r4
    6ddc:	27a71550 	sbfxcs	r1, r0, #10, #8
    6de0:	9b010000 	blls	46de8 <__Stack_Size+0x469e8>
    6de4:	00004c07 	andeq	r4, r0, r7, lsl #24
    6de8:	003d8200 	eorseq	r8, sp, r0, lsl #4
    6dec:	29b01600 	ldmibcs	r0!, {r9, sl, ip}
    6df0:	9d010000 	stcls	0, cr0, [r1, #-0]
    6df4:	00004c07 	andeq	r4, r0, r7, lsl #24
    6df8:	003da300 	eorseq	sl, sp, r0, lsl #6
    6dfc:	ee200000 	cdp	0, 2, cr0, cr0, cr0, {0}
    6e00:	01000028 	tsteq	r0, r8, lsr #32
    6e04:	53d207bb 	bicspl	r0, r2, #49020928	; 0x2ec0000
    6e08:	00100800 	andseq	r0, r0, r0, lsl #16
    6e0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e10:	0000133e 	andeq	r1, r0, lr, lsr r3
    6e14:	00256c14 	eoreq	r6, r5, r4, lsl ip
    6e18:	07bb0100 	ldreq	r0, [fp, r0, lsl #2]!
    6e1c:	000004ac 	andeq	r0, r0, ip, lsr #9
    6e20:	a7155001 	ldrge	r5, [r5, -r1]
    6e24:	01000027 	tsteq	r0, r7, lsr #32
    6e28:	004c07bb 	strheq	r0, [ip], #-123	; 0xffffff85
    6e2c:	3dcd0000 	stclcc	0, cr0, [sp]
    6e30:	b9160000 	ldmdblt	r6, {}	; <UNPREDICTABLE>
    6e34:	01000029 	tsteq	r0, r9, lsr #32
    6e38:	004c07bd 	strheq	r0, [ip], #-125	; 0xffffff83
    6e3c:	3dee0000 	stclcc	0, cr0, [lr]
    6e40:	20000000 	andcs	r0, r0, r0
    6e44:	00002655 	andeq	r2, r0, r5, asr r6
    6e48:	e207db01 	and	sp, r7, #1024	; 0x400
    6e4c:	10080053 	andne	r0, r8, r3, asr r0
    6e50:	01000000 	mrseq	r0, (UNDEF: 0)
    6e54:	0013839c 	mulseq	r3, ip, r3
    6e58:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    6e5c:	db010000 	blle	46e64 <__Stack_Size+0x46a64>
    6e60:	0004ac07 	andeq	sl, r4, r7, lsl #24
    6e64:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6e68:	000027a7 	andeq	r2, r0, r7, lsr #15
    6e6c:	4c07db01 	stcmi	11, cr13, [r7], {1}
    6e70:	23000000 	movwcs	r0, #0
    6e74:	1600003e 			; <UNDEFINED> instruction: 0x1600003e
    6e78:	000029b9 			; <UNDEFINED> instruction: 0x000029b9
    6e7c:	4c07dd01 	stcmi	13, cr13, [r7], {1}
    6e80:	44000000 	strmi	r0, [r0], #-0
    6e84:	0000003e 	andeq	r0, r0, lr, lsr r0
    6e88:	0023e520 	eoreq	lr, r3, r0, lsr #10
    6e8c:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    6e90:	080053f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, ip, lr}
    6e94:	00000010 	andeq	r0, r0, r0, lsl r0
    6e98:	13c89c01 	bicne	r9, r8, #256	; 0x100
    6e9c:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6ea0:	01000025 	tsteq	r0, r5, lsr #32
    6ea4:	04ac07fb 	strteq	r0, [ip], #2043	; 0x7fb
    6ea8:	50010000 	andpl	r0, r1, r0
    6eac:	0000bd15 	andeq	fp, r0, r5, lsl sp
    6eb0:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    6eb4:	0000004c 	andeq	r0, r0, ip, asr #32
    6eb8:	00003e6e 	andeq	r3, r0, lr, ror #28
    6ebc:	0026d916 	eoreq	sp, r6, r6, lsl r9
    6ec0:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    6ec4:	0000004c 	andeq	r0, r0, ip, asr #32
    6ec8:	00003e8f 	andeq	r3, r0, pc, lsl #29
    6ecc:	297f2000 	ldmdbcs	pc!, {sp}^	; <UNPREDICTABLE>
    6ed0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6ed4:	00540208 	subseq	r0, r4, r8, lsl #4
    6ed8:	00001008 	andeq	r1, r0, r8
    6edc:	0d9c0100 	ldfeqs	f0, [ip]
    6ee0:	14000014 	strne	r0, [r0], #-20
    6ee4:	0000256c 	andeq	r2, r0, ip, ror #10
    6ee8:	ac081801 	stcge	8, cr1, [r8], {1}
    6eec:	01000004 	tsteq	r0, r4
    6ef0:	054a1550 	strbeq	r1, [sl, #-1360]	; 0x550
    6ef4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    6ef8:	00004c08 	andeq	r4, r0, r8, lsl #24
    6efc:	003ec400 	eorseq	ip, lr, r0, lsl #8
    6f00:	26d91600 	ldrbcs	r1, [r9], r0, lsl #12
    6f04:	1a010000 	bne	46f0c <__Stack_Size+0x46b0c>
    6f08:	00004c08 	andeq	r4, r0, r8, lsl #24
    6f0c:	003ee500 	eorseq	lr, lr, r0, lsl #10
    6f10:	a1200000 			; <UNDEFINED> instruction: 0xa1200000
    6f14:	0100002c 	tsteq	r0, ip, lsr #32
    6f18:	54120836 	ldrpl	r0, [r2], #-2102	; 0x836
    6f1c:	00140800 	andseq	r0, r4, r0, lsl #16
    6f20:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f24:	00001452 	andeq	r1, r0, r2, asr r4
    6f28:	00256c14 	eoreq	r6, r5, r4, lsl ip
    6f2c:	08360100 	ldmdaeq	r6!, {r8}
    6f30:	000004ac 	andeq	r0, r0, ip, lsr #9
    6f34:	bd155001 	ldclt	0, cr5, [r5, #-4]
    6f38:	01000000 	mrseq	r0, (UNDEF: 0)
    6f3c:	004c0836 	subeq	r0, ip, r6, lsr r8
    6f40:	3f1a0000 	svccc	0x001a0000
    6f44:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    6f48:	01000026 	tsteq	r0, r6, lsr #32
    6f4c:	004c0838 	subeq	r0, ip, r8, lsr r8
    6f50:	3f3b0000 	svccc	0x003b0000
    6f54:	20000000 	andcs	r0, r0, r0
    6f58:	00002ba0 	andeq	r2, r0, r0, lsr #23
    6f5c:	26085301 	strcs	r5, [r8], -r1, lsl #6
    6f60:	14080054 	strne	r0, [r8], #-84	; 0x54
    6f64:	01000000 	mrseq	r0, (UNDEF: 0)
    6f68:	0014979c 	mulseq	r4, ip, r7
    6f6c:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    6f70:	53010000 	movwpl	r0, #4096	; 0x1000
    6f74:	0004ac08 	andeq	sl, r4, r8, lsl #24
    6f78:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6f7c:	0000054a 	andeq	r0, r0, sl, asr #10
    6f80:	4c085301 	stcmi	3, cr5, [r8], {1}
    6f84:	70000000 	andvc	r0, r0, r0
    6f88:	1600003f 			; <UNDEFINED> instruction: 0x1600003f
    6f8c:	000026d9 	ldrdeq	r2, [r0], -r9
    6f90:	4c085501 	cfstr32mi	mvfx5, [r8], {1}
    6f94:	91000000 	mrsls	r0, (UNDEF: 0)
    6f98:	0000003f 	andeq	r0, r0, pc, lsr r0
    6f9c:	002bf020 	eoreq	pc, fp, r0, lsr #32
    6fa0:	08710100 	ldmdaeq	r1!, {r8}^
    6fa4:	0800543a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, lr}
    6fa8:	00000014 	andeq	r0, r0, r4, lsl r0
    6fac:	14dc9c01 	ldrbne	r9, [ip], #3073	; 0xc01
    6fb0:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    6fb4:	01000025 	tsteq	r0, r5, lsr #32
    6fb8:	04ac0871 	strteq	r0, [ip], #2161	; 0x871
    6fbc:	50010000 	andpl	r0, r1, r0
    6fc0:	0000bd15 	andeq	fp, r0, r5, lsl sp
    6fc4:	08710100 	ldmdaeq	r1!, {r8}^
    6fc8:	0000004c 	andeq	r0, r0, ip, asr #32
    6fcc:	00003fc6 	andeq	r3, r0, r6, asr #31
    6fd0:	0026d916 	eoreq	sp, r6, r6, lsl r9
    6fd4:	08730100 	ldmdaeq	r3!, {r8}^
    6fd8:	0000004c 	andeq	r0, r0, ip, asr #32
    6fdc:	00003fe7 	andeq	r3, r0, r7, ror #31
    6fe0:	2b892000 	blcs	fe24efe8 <SCS_BASE+0x1e240fe8>
    6fe4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    6fe8:	00544e08 	subseq	r4, r4, r8, lsl #28
    6fec:	00001408 	andeq	r1, r0, r8, lsl #8
    6ff0:	219c0100 	orrscs	r0, ip, r0, lsl #2
    6ff4:	14000015 	strne	r0, [r0], #-21
    6ff8:	0000256c 	andeq	r2, r0, ip, ror #10
    6ffc:	ac088e01 	stcge	14, cr8, [r8], {1}
    7000:	01000004 	tsteq	r0, r4
    7004:	054a1550 	strbeq	r1, [sl, #-1360]	; 0x550
    7008:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    700c:	00004c08 	andeq	r4, r0, r8, lsl #24
    7010:	00401c00 	subeq	r1, r0, r0, lsl #24
    7014:	26d91600 	ldrbcs	r1, [r9], r0, lsl #12
    7018:	90010000 	andls	r0, r1, r0
    701c:	00004c08 	andeq	r4, r0, r8, lsl #24
    7020:	00403d00 	subeq	r3, r0, r0, lsl #26
    7024:	b7200000 	strlt	r0, [r0, -r0]!
    7028:	0100002b 	tsteq	r0, fp, lsr #32
    702c:	546208ac 	strbtpl	r0, [r2], #-2220	; 0x8ac
    7030:	00140800 	andseq	r0, r4, r0, lsl #16
    7034:	9c010000 	stcls	0, cr0, [r1], {-0}
    7038:	00001566 	andeq	r1, r0, r6, ror #10
    703c:	00256c14 	eoreq	r6, r5, r4, lsl ip
    7040:	08ac0100 	stmiaeq	ip!, {r8}
    7044:	000004ac 	andeq	r0, r0, ip, lsr #9
    7048:	bd155001 	ldclt	0, cr5, [r5, #-4]
    704c:	01000000 	mrseq	r0, (UNDEF: 0)
    7050:	004c08ac 	subeq	r0, ip, ip, lsr #17
    7054:	40720000 	rsbsmi	r0, r2, r0
    7058:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    705c:	01000026 	tsteq	r0, r6, lsr #32
    7060:	004c08ae 	subeq	r0, ip, lr, lsr #17
    7064:	40930000 	addsmi	r0, r3, r0
    7068:	20000000 	andcs	r0, r0, r0
    706c:	000027c5 	andeq	r2, r0, r5, asr #15
    7070:	7608ce01 	strvc	ip, [r8], -r1, lsl #28
    7074:	1c080054 	stcne	0, cr0, [r8], {84}	; 0x54
    7078:	01000000 	mrseq	r0, (UNDEF: 0)
    707c:	0015a99c 	mulseq	r5, ip, r9
    7080:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    7084:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    7088:	0004ac08 	andeq	sl, r4, r8, lsl #24
    708c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    7090:	000029c2 	andeq	r2, r0, r2, asr #19
    7094:	4c08ce01 	stcmi	14, cr12, [r8], {1}
    7098:	01000000 	mrseq	r0, (UNDEF: 0)
    709c:	2a311551 	bcs	c4c5e8 <__Stack_Size+0xc4c1e8>
    70a0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    70a4:	00004c08 	andeq	r4, r0, r8, lsl #24
    70a8:	0040c800 	subeq	ip, r0, r0, lsl #16
    70ac:	d1200000 			; <UNDEFINED> instruction: 0xd1200000
    70b0:	01000024 	tsteq	r0, r4, lsr #32
    70b4:	549208ea 	ldrpl	r0, [r2], #2282	; 0x8ea
    70b8:	001c0800 	andseq	r0, ip, r0, lsl #16
    70bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    70c0:	000015ec 	andeq	r1, r0, ip, ror #11
    70c4:	00256c14 	eoreq	r6, r5, r4, lsl ip
    70c8:	08ea0100 	stmiaeq	sl!, {r8}^
    70cc:	000004ac 	andeq	r0, r0, ip, lsr #9
    70d0:	c2145001 	andsgt	r5, r4, #1
    70d4:	01000029 	tsteq	r0, r9, lsr #32
    70d8:	004c08ea 	subeq	r0, ip, sl, ror #17
    70dc:	51010000 	mrspl	r0, (UNDEF: 1)
    70e0:	00285715 	eoreq	r5, r8, r5, lsl r7
    70e4:	08ea0100 	stmiaeq	sl!, {r8}^
    70e8:	0000004c 	andeq	r0, r0, ip, asr #32
    70ec:	000040e9 	andeq	r4, r0, r9, ror #1
    70f0:	27492000 	strbcs	r2, [r9, -r0]
    70f4:	12010000 	andne	r0, r1, #0
    70f8:	0054ae09 	subseq	sl, r4, r9, lsl #28
    70fc:	00004408 	andeq	r4, r0, r8, lsl #8
    7100:	339c0100 	orrscc	r0, ip, #0, 2
    7104:	15000016 	strne	r0, [r0, #-22]
    7108:	0000256c 	andeq	r2, r0, ip, ror #10
    710c:	ac091201 	sfmge	f1, 4, [r9], {1}
    7110:	0a000004 	beq	7128 <__Stack_Size+0x6d28>
    7114:	15000041 	strne	r0, [r0, #-65]	; 0x41
    7118:	000029c2 	andeq	r2, r0, r2, asr #19
    711c:	4c091201 	sfmmi	f1, 4, [r9], {1}
    7120:	2a000000 	bcs	7128 <__Stack_Size+0x6d28>
    7124:	15000041 	strne	r0, [r0, #-65]	; 0x41
    7128:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    712c:	4c091201 	sfmmi	f1, 4, [r9], {1}
    7130:	64000000 	strvs	r0, [r0], #-0
    7134:	00000041 	andeq	r0, r0, r1, asr #32
    7138:	00288320 	eoreq	r8, r8, r0, lsr #6
    713c:	09380100 	ldmdbeq	r8!, {r8}
    7140:	080054f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, ip, lr}
    7144:	00000018 	andeq	r0, r0, r8, lsl r0
    7148:	16669c01 	strbtne	r9, [r6], -r1, lsl #24
    714c:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    7150:	01000025 	tsteq	r0, r5, lsr #32
    7154:	04ac0938 	strteq	r0, [ip], #2360	; 0x938
    7158:	50010000 	andpl	r0, r1, r0
    715c:	0015de14 	andseq	sp, r5, r4, lsl lr
    7160:	09380100 	ldmdbeq	r8!, {r8}
    7164:	000000cf 	andeq	r0, r0, pc, asr #1
    7168:	20005101 	andcs	r5, r0, r1, lsl #2
    716c:	0000250f 	andeq	r2, r0, pc, lsl #10
    7170:	0a095501 	beq	25c57c <__Stack_Size+0x25c17c>
    7174:	18080055 	stmdane	r8, {r0, r2, r4, r6}
    7178:	01000000 	mrseq	r0, (UNDEF: 0)
    717c:	0016999c 	mulseq	r6, ip, r9
    7180:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    7184:	55010000 	strpl	r0, [r1, #-0]
    7188:	0004ac09 	andeq	sl, r4, r9, lsl #24
    718c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    7190:	0000289b 	muleq	r0, fp, r8
    7194:	4c095501 	cfstr32mi	mvfx5, [r9], {1}
    7198:	01000000 	mrseq	r0, (UNDEF: 0)
    719c:	01200051 	qsubeq	r0, r1, r0
    71a0:	01000028 	tsteq	r0, r8, lsr #32
    71a4:	55220970 	strpl	r0, [r2, #-2416]!	; 0x970
    71a8:	00180800 	andseq	r0, r8, r0, lsl #16
    71ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    71b0:	000016cc 	andeq	r1, r0, ip, asr #13
    71b4:	00256c14 	eoreq	r6, r5, r4, lsl ip
    71b8:	09700100 	ldmdbeq	r0!, {r8}^
    71bc:	000004ac 	andeq	r0, r0, ip, lsr #9
    71c0:	de145001 	cdple	0, 1, cr5, cr4, cr1, {0}
    71c4:	01000015 	tsteq	r0, r5, lsl r0
    71c8:	00cf0970 	sbceq	r0, pc, r0, ror r9	; <UNPREDICTABLE>
    71cc:	51010000 	mrspl	r0, (UNDEF: 1)
    71d0:	2a752000 	bcs	1d4f1d8 <__Stack_Size+0x1d4edd8>
    71d4:	8d010000 	stchi	0, cr0, [r1, #-0]
    71d8:	00553a09 	subseq	r3, r5, r9, lsl #20
    71dc:	00001608 	andeq	r1, r0, r8, lsl #12
    71e0:	019c0100 	orrseq	r0, ip, r0, lsl #2
    71e4:	14000017 	strne	r0, [r0], #-23
    71e8:	0000256c 	andeq	r2, r0, ip, ror #10
    71ec:	ac098d01 	stcge	13, cr8, [r9], {1}
    71f0:	01000004 	tsteq	r0, r4
    71f4:	25371550 	ldrcs	r1, [r7, #-1360]!	; 0x550
    71f8:	8d010000 	stchi	0, cr0, [r1, #-0]
    71fc:	00004c09 	andeq	r4, r0, r9, lsl #24
    7200:	00418500 	subeq	r8, r1, r0, lsl #10
    7204:	1a200000 	bne	80720c <__Stack_Size+0x806e0c>
    7208:	01000027 	tsteq	r0, r7, lsr #32
    720c:	555009ae 	ldrbpl	r0, [r0, #-2478]	; 0x9ae
    7210:	00160800 	andseq	r0, r6, r0, lsl #16
    7214:	9c010000 	stcls	0, cr0, [r1], {-0}
    7218:	00001736 	andeq	r1, r0, r6, lsr r7
    721c:	00256c14 	eoreq	r6, r5, r4, lsl ip
    7220:	09ae0100 	stmibeq	lr!, {r8}
    7224:	000004ac 	andeq	r0, r0, ip, lsr #9
    7228:	8c155001 	ldchi	0, cr5, [r5], {1}
    722c:	0100002a 	tsteq	r0, sl, lsr #32
    7230:	004c09ae 	subeq	r0, ip, lr, lsr #19
    7234:	41a60000 			; <UNDEFINED> instruction: 0x41a60000
    7238:	20000000 	andcs	r0, r0, r0
    723c:	0000294b 	andeq	r2, r0, fp, asr #18
    7240:	6609ca01 	strvs	ip, [r9], -r1, lsl #20
    7244:	16080055 			; <UNDEFINED> instruction: 0x16080055
    7248:	01000000 	mrseq	r0, (UNDEF: 0)
    724c:	00176b9c 	mulseq	r7, ip, fp
    7250:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    7254:	ca010000 	bgt	4725c <__Stack_Size+0x46e5c>
    7258:	0004ac09 	andeq	sl, r4, r9, lsl #24
    725c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7260:	000025a6 	andeq	r2, r0, r6, lsr #11
    7264:	4c09ca01 	stcmi	10, cr12, [r9], {1}
    7268:	c7000000 	strgt	r0, [r0, -r0]
    726c:	00000041 	andeq	r0, r0, r1, asr #32
    7270:	002c7020 	eoreq	r7, ip, r0, lsr #32
    7274:	09e40100 	stmibeq	r4!, {r8}^
    7278:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
    727c:	00000016 	andeq	r0, r0, r6, lsl r0
    7280:	17a09c01 	strne	r9, [r0, r1, lsl #24]!
    7284:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    7288:	01000025 	tsteq	r0, r5, lsr #32
    728c:	04ac09e4 	strteq	r0, [ip], #2532	; 0x9e4
    7290:	50010000 	andpl	r0, r1, r0
    7294:	002b1815 	eoreq	r1, fp, r5, lsl r8
    7298:	09e40100 	stmibeq	r4!, {r8}^
    729c:	0000004c 	andeq	r0, r0, ip, asr #32
    72a0:	000041e8 	andeq	r4, r0, r8, ror #3
    72a4:	27782000 	ldrbcs	r2, [r8, -r0]!
    72a8:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    72ac:	00559209 	subseq	r9, r5, r9, lsl #4
    72b0:	00000408 	andeq	r0, r0, r8, lsl #8
    72b4:	d39c0100 	orrsle	r0, ip, #0, 2
    72b8:	14000017 	strne	r0, [r0], #-23
    72bc:	0000256c 	andeq	r2, r0, ip, ror #10
    72c0:	ac09f901 	stcge	9, cr15, [r9], {1}
    72c4:	01000004 	tsteq	r0, r4
    72c8:	238c1450 	orrcs	r1, ip, #80, 8	; 0x50000000
    72cc:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    72d0:	00004c09 	andeq	r4, r0, r9, lsl #24
    72d4:	00510100 	subseq	r0, r1, r0, lsl #2
    72d8:	002b4020 	eoreq	r4, fp, r0, lsr #32
    72dc:	0a0a0100 	beq	2876e4 <__Stack_Size+0x2872e4>
    72e0:	08005596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, ip, lr}
    72e4:	00000004 	andeq	r0, r0, r4
    72e8:	18069c01 	stmdane	r6, {r0, sl, fp, ip, pc}
    72ec:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    72f0:	01000025 	tsteq	r0, r5, lsr #32
    72f4:	04ac0a0a 	strteq	r0, [ip], #2570	; 0xa0a
    72f8:	50010000 	andpl	r0, r1, r0
    72fc:	002b4714 	eoreq	r4, fp, r4, lsl r7
    7300:	0a0a0100 	beq	287708 <__Stack_Size+0x287308>
    7304:	0000004c 	andeq	r0, r0, ip, asr #32
    7308:	20005101 	andcs	r5, r0, r1, lsl #2
    730c:	00000c84 	andeq	r0, r0, r4, lsl #25
    7310:	9a0a1c01 	bls	28e31c <__Stack_Size+0x28df1c>
    7314:	04080055 	streq	r0, [r8], #-85	; 0x55
    7318:	01000000 	mrseq	r0, (UNDEF: 0)
    731c:	0018399c 	mulseq	r8, ip, r9
    7320:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    7324:	1c010000 	stcne	0, cr0, [r1], {-0}
    7328:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    732c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    7330:	00000c8b 	andeq	r0, r0, fp, lsl #25
    7334:	4c0a1c01 	stcmi	12, cr1, [sl], {1}
    7338:	01000000 	mrseq	r0, (UNDEF: 0)
    733c:	21200051 	qsubcs	r0, r1, r0
    7340:	01000024 	tsteq	r0, r4, lsr #32
    7344:	559e0a2e 	ldrpl	r0, [lr, #2606]	; 0xa2e
    7348:	00040800 	andeq	r0, r4, r0, lsl #16
    734c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7350:	0000186c 	andeq	r1, r0, ip, ror #16
    7354:	00256c14 	eoreq	r6, r5, r4, lsl ip
    7358:	0a2e0100 	beq	b87760 <__Stack_Size+0xb87360>
    735c:	000004ac 	andeq	r0, r0, ip, lsr #9
    7360:	28145001 	ldmdacs	r4, {r0, ip, lr}
    7364:	01000024 	tsteq	r0, r4, lsr #32
    7368:	004c0a2e 	subeq	r0, ip, lr, lsr #20
    736c:	51010000 	mrspl	r0, (UNDEF: 1)
    7370:	28de2000 	ldmcs	lr, {sp}^
    7374:	40010000 	andmi	r0, r1, r0
    7378:	0055a20a 	subseq	sl, r5, sl, lsl #4
    737c:	00000408 	andeq	r0, r0, r8, lsl #8
    7380:	9f9c0100 	svcls	0x009c0100
    7384:	14000018 	strne	r0, [r0], #-24
    7388:	0000256c 	andeq	r2, r0, ip, ror #10
    738c:	ac0a4001 	stcge	0, cr4, [sl], {1}
    7390:	01000004 	tsteq	r0, r4
    7394:	28e51450 	stmiacs	r5!, {r4, r6, sl, ip}^
    7398:	40010000 	andmi	r0, r1, r0
    739c:	00004c0a 	andeq	r4, r0, sl, lsl #24
    73a0:	00510100 	subseq	r0, r1, r0, lsl #2
    73a4:	00243120 	eoreq	r3, r4, r0, lsr #2
    73a8:	0a520100 	beq	14877b0 <__Stack_Size+0x14873b0>
    73ac:	080055a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, lr}
    73b0:	00000006 	andeq	r0, r0, r6
    73b4:	18d29c01 	ldmne	r2, {r0, sl, fp, ip, pc}^
    73b8:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    73bc:	01000025 	tsteq	r0, r5, lsr #32
    73c0:	04ac0a52 	strteq	r0, [ip], #2642	; 0xa52
    73c4:	50010000 	andpl	r0, r1, r0
    73c8:	00243814 	eoreq	r3, r4, r4, lsl r8
    73cc:	0a520100 	beq	14877d4 <__Stack_Size+0x14873d4>
    73d0:	0000004c 	andeq	r0, r0, ip, asr #32
    73d4:	20005101 	andcs	r5, r0, r1, lsl #2
    73d8:	00002a1d 	andeq	r2, r0, sp, lsl sl
    73dc:	ac0a6a01 	stcge	10, cr6, [sl], {1}
    73e0:	16080055 			; <UNDEFINED> instruction: 0x16080055
    73e4:	01000000 	mrseq	r0, (UNDEF: 0)
    73e8:	0019079c 	mulseq	r9, ip, r7
    73ec:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    73f0:	6a010000 	bvs	473f8 <__Stack_Size+0x46ff8>
    73f4:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    73f8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    73fc:	00002996 	muleq	r0, r6, r9
    7400:	4c0a6a01 	stcmi	10, cr6, [sl], {1}
    7404:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7408:	00000042 	andeq	r0, r0, r2, asr #32
    740c:	00282820 	eoreq	r2, r8, r0, lsr #16
    7410:	0a860100 	beq	fe187818 <SCS_BASE+0x1e179818>
    7414:	080055c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, lr}
    7418:	0000001a 	andeq	r0, r0, sl, lsl r0
    741c:	193c9c01 	ldmdbne	ip!, {r0, sl, fp, ip, pc}
    7420:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    7424:	01000025 	tsteq	r0, r5, lsr #32
    7428:	04ac0a86 	strteq	r0, [ip], #2694	; 0xa86
    742c:	50010000 	andpl	r0, r1, r0
    7430:	00299615 	eoreq	r9, r9, r5, lsl r6
    7434:	0a860100 	beq	fe18783c <SCS_BASE+0x1e17983c>
    7438:	0000004c 	andeq	r0, r0, ip, asr #32
    743c:	0000422a 	andeq	r4, r0, sl, lsr #4
    7440:	2c192000 	ldccs	0, cr2, [r9], {-0}
    7444:	8a010000 	bhi	4744c <__Stack_Size+0x4704c>
    7448:	0055dc02 	subseq	sp, r5, r2, lsl #24
    744c:	00006e08 	andeq	r6, r0, r8, lsl #28
    7450:	3e9c0100 	fmlcce	f0, f4, f0
    7454:	1500001a 	strne	r0, [r0, #-26]
    7458:	0000256c 	andeq	r2, r0, ip, ror #10
    745c:	ac028a01 	stcge	10, cr8, [r2], {1}
    7460:	4b000004 	blmi	7478 <__Stack_Size+0x7078>
    7464:	15000042 	strne	r0, [r0, #-66]	; 0x42
    7468:	000028ac 	andeq	r2, r0, ip, lsr #17
    746c:	24028a01 	strcs	r8, [r2], #-2561	; 0xa01
    7470:	b1000009 	tstlt	r0, r9
    7474:	16000042 	strne	r0, [r0], -r2, asr #32
    7478:	00002acb 	andeq	r2, r0, fp, asr #21
    747c:	4c028c01 	stcmi	12, cr8, [r2], {1}
    7480:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    7484:	16000042 	strne	r0, [r0], -r2, asr #32
    7488:	000029f1 	strdeq	r2, [r0], -r1
    748c:	4c028d01 	stcmi	13, cr8, [r2], {1}
    7490:	20000000 	andcs	r0, r0, r0
    7494:	1a000043 	bne	75a8 <__Stack_Size+0x71a8>
    7498:	08005606 	stmdaeq	r0, {r1, r2, r9, sl, ip, lr}
    749c:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    74a0:	000019a6 	andeq	r1, r0, r6, lsr #19
    74a4:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    74a8:	1a000075 	bne	7684 <__Stack_Size+0x7284>
    74ac:	0800560e 	stmdaeq	r0, {r1, r2, r3, r9, sl, ip, lr}
    74b0:	000018d2 	ldrdeq	r1, [r0], -r2
    74b4:	000019ba 			; <UNDEFINED> instruction: 0x000019ba
    74b8:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    74bc:	1a000075 	bne	7698 <__Stack_Size+0x7298>
    74c0:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    74c4:	00000527 	andeq	r0, r0, r7, lsr #10
    74c8:	000019da 	ldrdeq	r1, [r0], -sl
    74cc:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    74d0:	011b0076 	tsteq	fp, r6, ror r0
    74d4:	00770251 	rsbseq	r0, r7, r1, asr r2
    74d8:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    74dc:	1c000075 	stcne	0, cr0, [r0], {117}	; 0x75
    74e0:	08005626 	stmdaeq	r0, {r1, r2, r5, r9, sl, ip, lr}
    74e4:	00001907 	andeq	r1, r0, r7, lsl #18
    74e8:	000019ef 	andeq	r1, r0, pc, ror #19
    74ec:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    74f0:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    74f4:	00562a27 	subseq	r2, r6, r7, lsr #20
    74f8:	00052708 	andeq	r2, r5, r8, lsl #14
    74fc:	56321a00 	ldrtpl	r1, [r2], -r0, lsl #20
    7500:	19070800 	stmdbne	r7, {fp}
    7504:	1a0c0000 	bne	30750c <__Stack_Size+0x30710c>
    7508:	011b0000 	tsteq	fp, r0
    750c:	00750250 	rsbseq	r0, r5, r0, asr r2
    7510:	563e1a00 	ldrtpl	r1, [lr], -r0, lsl #20
    7514:	04b20800 	ldrteq	r0, [r2], #2048	; 0x800
    7518:	1a2c0000 	bne	b07520 <__Stack_Size+0xb07120>
    751c:	011b0000 	tsteq	fp, r0
    7520:	00760252 	rsbseq	r0, r6, r2, asr r2
    7524:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    7528:	011b0077 	tsteq	fp, r7, ror r0
    752c:	00750250 	rsbseq	r0, r5, r0, asr r2
    7530:	564a1d00 	strbpl	r1, [sl], -r0, lsl #26
    7534:	18d20800 	ldmne	r2, {fp}^
    7538:	011b0000 	tsteq	fp, r0
    753c:	01f30350 	mvnseq	r0, r0, asr r3
    7540:	20000050 	andcs	r0, r0, r0, asr r0
    7544:	00002a39 	andeq	r2, r0, r9, lsr sl
    7548:	4a0aa201 	bmi	2afd54 <__Stack_Size+0x2af954>
    754c:	16080056 			; <UNDEFINED> instruction: 0x16080056
    7550:	01000000 	mrseq	r0, (UNDEF: 0)
    7554:	001a739c 	mulseq	sl, ip, r3
    7558:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    755c:	a2010000 	andge	r0, r1, #0
    7560:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    7564:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7568:	00002996 	muleq	r0, r6, r9
    756c:	4c0aa201 	sfmmi	f2, 1, [sl], {1}
    7570:	4a000000 	bmi	7578 <__Stack_Size+0x7178>
    7574:	00000043 	andeq	r0, r0, r3, asr #32
    7578:	00259220 	eoreq	r9, r5, r0, lsr #4
    757c:	0abe0100 	beq	fef87984 <SCS_BASE+0x1ef79984>
    7580:	08005660 	stmdaeq	r0, {r5, r6, r9, sl, ip, lr}
    7584:	0000001a 	andeq	r0, r0, sl, lsl r0
    7588:	1aa89c01 	bne	fea2e594 <SCS_BASE+0x1ea20594>
    758c:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    7590:	01000025 	tsteq	r0, r5, lsr #32
    7594:	04ac0abe 	strteq	r0, [ip], #2750	; 0xabe
    7598:	50010000 	andpl	r0, r1, r0
    759c:	00299615 	eoreq	r9, r9, r5, lsl r6
    75a0:	0abe0100 	beq	fef879a8 <SCS_BASE+0x1ef799a8>
    75a4:	0000004c 	andeq	r0, r0, ip, asr #32
    75a8:	0000436b 	andeq	r4, r0, fp, ror #6
    75ac:	28bd2a00 	popcs	{r9, fp, sp}
    75b0:	4b010000 	blmi	475b8 <__Stack_Size+0x471b8>
    75b4:	1b0a010c 	blne	2879ec <__Stack_Size+0x2875ec>
    75b8:	6c100000 	ldcvs	0, cr0, [r0], {-0}
    75bc:	01000025 	tsteq	r0, r5, lsr #32
    75c0:	04ac0c4b 	strteq	r0, [ip], #3147	; 0xc4b
    75c4:	a9100000 	ldmdbge	r0, {}	; <UNPREDICTABLE>
    75c8:	0100002a 	tsteq	r0, sl, lsr #32
    75cc:	004c0c4b 	subeq	r0, ip, fp, asr #24
    75d0:	4d100000 	ldcmi	0, cr0, [r0, #-0]
    75d4:	0100002a 	tsteq	r0, sl, lsr #32
    75d8:	004c0c4b 	subeq	r0, ip, fp, asr #24
    75dc:	55100000 	ldrpl	r0, [r0, #-0]
    75e0:	0100002c 	tsteq	r0, ip, lsr #32
    75e4:	004c0c4c 	subeq	r0, ip, ip, asr #24
    75e8:	b9110000 	ldmdblt	r1, {}	; <UNPREDICTABLE>
    75ec:	01000029 	tsteq	r0, r9, lsr #32
    75f0:	004c0c4e 	subeq	r0, ip, lr, asr #24
    75f4:	d9110000 	ldmdble	r1, {}	; <UNPREDICTABLE>
    75f8:	01000026 	tsteq	r0, r6, lsr #32
    75fc:	004c0c4e 	subeq	r0, ip, lr, asr #24
    7600:	742b0000 	strtvc	r0, [fp], #-0
    7604:	0100706d 	tsteq	r0, sp, rrx
    7608:	004c0c4e 	subeq	r0, ip, lr, asr #24
    760c:	2a000000 	bcs	7614 <__Stack_Size+0x7214>
    7610:	00002b71 	andeq	r2, r0, r1, ror fp
    7614:	010c7a01 	tsteq	ip, r1, lsl #20
    7618:	00001b6c 	andeq	r1, r0, ip, ror #22
    761c:	00256c10 	eoreq	r6, r5, r0, lsl ip
    7620:	0c7a0100 	ldfeqe	f0, [sl], #-0
    7624:	000004ac 	andeq	r0, r0, ip, lsr #9
    7628:	002aa910 	eoreq	sl, sl, r0, lsl r9
    762c:	0c7a0100 	ldfeqe	f0, [sl], #-0
    7630:	0000004c 	andeq	r0, r0, ip, asr #32
    7634:	002a4d10 	eoreq	r4, sl, r0, lsl sp
    7638:	0c7a0100 	ldfeqe	f0, [sl], #-0
    763c:	0000004c 	andeq	r0, r0, ip, asr #32
    7640:	002c5510 	eoreq	r5, ip, r0, lsl r5
    7644:	0c7b0100 	ldfeqe	f0, [fp], #-0
    7648:	0000004c 	andeq	r0, r0, ip, asr #32
    764c:	0029b911 	eoreq	fp, r9, r1, lsl r9
    7650:	0c7d0100 	ldfeqe	f0, [sp], #-0
    7654:	0000004c 	andeq	r0, r0, ip, asr #32
    7658:	0026d911 	eoreq	sp, r6, r1, lsl r9
    765c:	0c7d0100 	ldfeqe	f0, [sp], #-0
    7660:	0000004c 	andeq	r0, r0, ip, asr #32
    7664:	706d742b 	rsbvc	r7, sp, fp, lsr #8
    7668:	0c7d0100 	ldfeqe	f0, [sp], #-0
    766c:	0000004c 	andeq	r0, r0, ip, asr #32
    7670:	2c4a2000 	marcs	acc0, r2, sl
    7674:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    7678:	00567a02 	subseq	r7, r6, r2, lsl #20
    767c:	0000b608 	andeq	fp, r0, r8, lsl #12
    7680:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    7684:	1500001c 	strne	r0, [r0, #-28]
    7688:	0000256c 	andeq	r2, r0, ip, ror #10
    768c:	ac024901 	stcge	9, cr4, [r2], {1}
    7690:	8c000004 	stchi	0, cr0, [r0], {4}
    7694:	15000043 	strne	r0, [r0, #-67]	; 0x43
    7698:	000028ac 	andeq	r2, r0, ip, lsr #17
    769c:	24024901 	strcs	r4, [r2], #-2305	; 0x901
    76a0:	24000009 	strcs	r0, [r0], #-9
    76a4:	2c000044 	stccs	0, cr0, [r0], {68}	; 0x44
    76a8:	00001aa8 	andeq	r1, r0, r8, lsr #21
    76ac:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
    76b0:	00000030 	andeq	r0, r0, r0, lsr r0
    76b4:	fc026a01 	stc2	10, cr6, [r2], {1}
    76b8:	2200001b 	andcs	r0, r0, #27
    76bc:	00001ad9 	ldrdeq	r1, [r0], -r9
    76c0:	00004482 	andeq	r4, r0, r2, lsl #9
    76c4:	001acd22 	andseq	ip, sl, r2, lsr #26
    76c8:	00449500 	subeq	r9, r4, r0, lsl #10
    76cc:	1ac12200 	bne	ff04fed4 <SCS_BASE+0x1f041ed4>
    76d0:	44a80000 	strtmi	r0, [r8], #0
    76d4:	b5220000 	strlt	r0, [r2, #-0]!
    76d8:	bb00001a 	bllt	7748 <__Stack_Size+0x7348>
    76dc:	2d000044 	stccs	0, cr0, [r0, #-272]	; 0xfffffef0
    76e0:	00000030 	andeq	r0, r0, r0, lsr r0
    76e4:	001ae525 	andseq	lr, sl, r5, lsr #10
    76e8:	0044dc00 	subeq	sp, r4, r0, lsl #24
    76ec:	1af12500 	bne	ffc50af4 <SCS_BASE+0x1fc42af4>
    76f0:	45170000 	ldrmi	r0, [r7, #-0]
    76f4:	fd250000 	stc2	0, cr0, [r5, #-0]
    76f8:	4d00001a 	stcmi	0, cr0, [r0, #-104]	; 0xffffff98
    76fc:	00000045 	andeq	r0, r0, r5, asr #32
    7700:	1b0a2c00 	blne	292708 <__Stack_Size+0x292308>
    7704:	56f20000 	ldrbtpl	r0, [r2], r0
    7708:	00500800 	subseq	r0, r0, r0, lsl #16
    770c:	74010000 	strvc	r0, [r1], #-0
    7710:	001c5602 	andseq	r5, ip, r2, lsl #12
    7714:	1b3b2200 	blne	ecff1c <__Stack_Size+0xecfb1c>
    7718:	45700000 	ldrbmi	r0, [r0, #-0]!
    771c:	2f220000 	svccs	0x00220000
    7720:	8300001b 	movwhi	r0, #27
    7724:	22000045 	andcs	r0, r0, #69	; 0x45
    7728:	00001b23 	andeq	r1, r0, r3, lsr #22
    772c:	00004596 	muleq	r0, r6, r5
    7730:	001b1722 	andseq	r1, fp, r2, lsr #14
    7734:	0045a900 	subeq	sl, r5, r0, lsl #18
    7738:	00502d00 	subseq	r2, r0, r0, lsl #26
    773c:	47250000 	strmi	r0, [r5, -r0]!
    7740:	ca00001b 	bgt	77b4 <__Stack_Size+0x73b4>
    7744:	25000045 	strcs	r0, [r0, #-69]	; 0x45
    7748:	00001b53 	andeq	r1, r0, r3, asr fp
    774c:	00004611 	andeq	r4, r0, r1, lsl r6
    7750:	001b5f25 	andseq	r5, fp, r5, lsr #30
    7754:	00464c00 	subeq	r4, r6, r0, lsl #24
    7758:	1a000000 	bne	7760 <__Stack_Size+0x7360>
    775c:	0800568e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, ip, lr}
    7760:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    7764:	00001c6a 	andeq	r1, r0, sl, ror #24
    7768:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    776c:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    7770:	0800569a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, ip, lr}
    7774:	000018d2 	ldrdeq	r1, [r0], -r2
    7778:	00001c7f 	andeq	r1, r0, pc, ror ip
    777c:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    7780:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    7784:	0056a227 	subseq	sl, r6, r7, lsr #4
    7788:	00052708 	andeq	r2, r5, r8, lsl #14
    778c:	56ae1c00 	strtpl	r1, [lr], r0, lsl #24
    7790:	19070800 	stmdbne	r7, {fp}
    7794:	1c9d0000 	ldcne	0, cr0, [sp], {0}
    7798:	011b0000 	tsteq	fp, r0
    779c:	01f30350 	mvnseq	r0, r0, asr r3
    77a0:	f21c0050 	vqadd.s16	q0, q6, q0
    77a4:	3e080056 	mcrcc	0, 0, r0, cr8, cr6, {2}
    77a8:	b200001a 	andlt	r0, r0, #26
    77ac:	1b00001c 	blne	7824 <__Stack_Size+0x7424>
    77b0:	f3035001 	vhadd.u8	d5, d3, d1
    77b4:	1d005001 	stcne	0, cr5, [r0, #-4]
    77b8:	08005730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, lr}
    77bc:	00001a73 	andeq	r1, r0, r3, ror sl
    77c0:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    77c4:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    77c8:	26e12000 	strbtcs	r2, [r1], r0
    77cc:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    77d0:	0057300a 	subseq	r3, r7, sl
    77d4:	00001008 	andeq	r1, r0, r8
    77d8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    77dc:	1400001c 	strne	r0, [r0], #-28
    77e0:	0000256c 	andeq	r2, r0, ip, ror #10
    77e4:	ac0ad801 	stcge	8, cr13, [sl], {1}
    77e8:	01000004 	tsteq	r0, r4
    77ec:	248c1550 	strcs	r1, [ip], #1360	; 0x550
    77f0:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    77f4:	00004c0a 	andeq	r4, r0, sl, lsl #24
    77f8:	00466f00 	subeq	r6, r6, r0, lsl #30
    77fc:	722e0000 	eorvc	r0, lr, #0
    7800:	01000002 	tsteq	r0, r2
    7804:	004c0aec 	subeq	r0, ip, ip, ror #21
    7808:	57400000 	strbpl	r0, [r0, -r0]
    780c:	00060800 	andeq	r0, r6, r0, lsl #16
    7810:	9c010000 	stcls	0, cr0, [r1], {-0}
    7814:	00001d24 	andeq	r1, r0, r4, lsr #26
    7818:	00256c15 	eoreq	r6, r5, r5, lsl ip
    781c:	0aec0100 	beq	ffb07c24 <SCS_BASE+0x1faf9c24>
    7820:	000004ac 	andeq	r0, r0, ip, lsr #9
    7824:	00004690 	muleq	r0, r0, r6
    7828:	25f82e00 	ldrbcs	r2, [r8, #3584]!	; 0xe00
    782c:	fd010000 	stc2	0, cr0, [r1, #-0]
    7830:	00004c0a 	andeq	r4, r0, sl, lsl #24
    7834:	00574600 	subseq	r4, r7, r0, lsl #12
    7838:	00000608 	andeq	r0, r0, r8, lsl #12
    783c:	4f9c0100 	svcmi	0x009c0100
    7840:	1500001d 	strne	r0, [r0, #-29]
    7844:	0000256c 	andeq	r2, r0, ip, ror #10
    7848:	ac0afd01 	stcge	13, cr15, [sl], {1}
    784c:	b1000004 	tstlt	r0, r4
    7850:	00000046 	andeq	r0, r0, r6, asr #32
    7854:	0026082e 	eoreq	r0, r6, lr, lsr #16
    7858:	0b0e0100 	bleq	387c60 <__Stack_Size+0x387860>
    785c:	0000004c 	andeq	r0, r0, ip, asr #32
    7860:	0800574c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, lr}
    7864:	00000006 	andeq	r0, r0, r6
    7868:	1d7a9c01 	ldclne	12, cr9, [sl, #-4]!
    786c:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    7870:	01000025 	tsteq	r0, r5, lsr #32
    7874:	04ac0b0e 	strteq	r0, [ip], #2830	; 0xb0e
    7878:	46d20000 	ldrbmi	r0, [r2], r0
    787c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    7880:	00002618 	andeq	r2, r0, r8, lsl r6
    7884:	4c0b1f01 	stcmi	15, cr1, [fp], {1}
    7888:	52000000 	andpl	r0, r0, #0
    788c:	08080057 	stmdaeq	r8, {r0, r1, r2, r4, r6}
    7890:	01000000 	mrseq	r0, (UNDEF: 0)
    7894:	001da59c 	mulseq	sp, ip, r5
    7898:	256c1500 	strbcs	r1, [ip, #-1280]!	; 0x500
    789c:	1f010000 	svcne	0x00010000
    78a0:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    78a4:	0046f300 	subeq	pc, r6, r0, lsl #6
    78a8:	1e2e0000 	cdpne	0, 2, cr0, cr14, cr0, {0}
    78ac:	01000029 	tsteq	r0, r9, lsr #32
    78b0:	004c0b2f 	subeq	r0, ip, pc, lsr #22
    78b4:	575a0000 	ldrbpl	r0, [sl, -r0]
    78b8:	00060800 	andeq	r0, r6, r0, lsl #16
    78bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    78c0:	00001dd0 	ldrdeq	r1, [r0], -r0
    78c4:	00256c15 	eoreq	r6, r5, r5, lsl ip
    78c8:	0b2f0100 	bleq	bc7cd0 <__Stack_Size+0xbc78d0>
    78cc:	000004ac 	andeq	r0, r0, ip, lsr #9
    78d0:	00004714 	andeq	r4, r0, r4, lsl r7
    78d4:	27d02e00 	ldrbcs	r2, [r0, r0, lsl #28]
    78d8:	3f010000 	svccc	0x00010000
    78dc:	00004c0b 	andeq	r4, r0, fp, lsl #24
    78e0:	00576000 	subseq	r6, r7, r0
    78e4:	00000608 	andeq	r0, r0, r8, lsl #12
    78e8:	fb9c0100 	blx	fe707cf2 <SCS_BASE+0x1e6f9cf2>
    78ec:	1500001d 	strne	r0, [r0, #-29]
    78f0:	0000256c 	andeq	r2, r0, ip, ror #10
    78f4:	ac0b3f01 	stcge	15, cr3, [fp], {1}
    78f8:	35000004 	strcc	r0, [r0, #-4]
    78fc:	00000047 	andeq	r0, r0, r7, asr #32
    7900:	0024642e 	eoreq	r6, r4, lr, lsr #8
    7904:	0b5d0100 	bleq	1747d0c <__Stack_Size+0x174790c>
    7908:	000000a4 	andeq	r0, r0, r4, lsr #1
    790c:	08005766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, ip, lr}
    7910:	0000000c 	andeq	r0, r0, ip
    7914:	1e449c01 	cdpne	12, 4, cr9, cr4, cr1, {0}
    7918:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    791c:	01000025 	tsteq	r0, r5, lsr #32
    7920:	04ac0b5d 	strteq	r0, [ip], #2909	; 0xb5d
    7924:	47560000 	ldrbmi	r0, [r6, -r0]
    7928:	61140000 	tstvs	r4, r0
    792c:	01000027 	tsteq	r0, r7, lsr #32
    7930:	004c0b5d 	subeq	r0, ip, sp, asr fp
    7934:	51010000 	mrspl	r0, (UNDEF: 1)
    7938:	00166d16 	andseq	r6, r6, r6, lsl sp
    793c:	0b5f0100 	bleq	17c7d44 <__Stack_Size+0x17c7944>
    7940:	000000af 	andeq	r0, r0, pc, lsr #1
    7944:	00004777 	andeq	r4, r0, r7, ror r7
    7948:	263b2000 	ldrtcs	r2, [fp], -r0
    794c:	86010000 	strhi	r0, [r1], -r0
    7950:	0057720b 	subseq	r7, r7, fp, lsl #4
    7954:	00000808 	andeq	r0, r0, r8, lsl #16
    7958:	799c0100 	ldmibvc	ip, {r8}
    795c:	1400001e 	strne	r0, [r0], #-30
    7960:	0000256c 	andeq	r2, r0, ip, ror #10
    7964:	ac0b8601 	stcge	6, cr8, [fp], {1}
    7968:	01000004 	tsteq	r0, r4
    796c:	27611550 			; <UNDEFINED> instruction: 0x27611550
    7970:	86010000 	strhi	r0, [r1], -r0
    7974:	00004c0b 	andeq	r4, r0, fp, lsl #24
    7978:	00479f00 	subeq	r9, r7, r0, lsl #30
    797c:	582e0000 	stmdapl	lr!, {}	; <UNPREDICTABLE>
    7980:	0100000c 	tsteq	r0, ip
    7984:	00af0ba2 	adceq	r0, pc, r2, lsr #23
    7988:	577a0000 	ldrbpl	r0, [sl, -r0]!
    798c:	00160800 	andseq	r0, r6, r0, lsl #16
    7990:	9c010000 	stcls	0, cr0, [r1], {-0}
    7994:	00001ee2 	andeq	r1, r0, r2, ror #29
    7998:	00256c15 	eoreq	r6, r5, r5, lsl ip
    799c:	0ba20100 	bleq	fe887da4 <SCS_BASE+0x1e879da4>
    79a0:	000004ac 	andeq	r0, r0, ip, lsr #9
    79a4:	000047c0 	andeq	r4, r0, r0, asr #15
    79a8:	002c2f14 	eoreq	r2, ip, r4, lsl pc
    79ac:	0ba20100 	bleq	fe887db4 <SCS_BASE+0x1e879db4>
    79b0:	0000004c 	andeq	r0, r0, ip, asr #32
    79b4:	6d165101 	ldfvss	f5, [r6, #-4]
    79b8:	01000016 	tsteq	r0, r6, lsl r0
    79bc:	00af0ba4 	adceq	r0, pc, r4, lsr #23
    79c0:	47e10000 	strbmi	r0, [r1, r0]!
    79c4:	6e160000 	cdpvs	0, 1, cr0, cr6, cr0, {0}
    79c8:	01000016 	tsteq	r0, r6, lsl r0
    79cc:	004c0ba5 	subeq	r0, ip, r5, lsr #23
    79d0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    79d4:	dd160000 	ldcle	0, cr0, [r6, #-0]
    79d8:	01000024 	tsteq	r0, r4, lsr #32
    79dc:	004c0ba5 	subeq	r0, ip, r5, lsr #23
    79e0:	48240000 	stmdami	r4!, {}	; <UNPREDICTABLE>
    79e4:	20000000 	andcs	r0, r0, r0
    79e8:	00000316 	andeq	r0, r0, r6, lsl r3
    79ec:	900bcd01 	andls	ip, fp, r1, lsl #26
    79f0:	08080057 	stmdaeq	r8, {r0, r1, r2, r4, r6}
    79f4:	01000000 	mrseq	r0, (UNDEF: 0)
    79f8:	001f179c 	mulseq	pc, ip, r7	; <UNPREDICTABLE>
    79fc:	256c1400 	strbcs	r1, [ip, #-1024]!	; 0x400
    7a00:	cd010000 	stcgt	0, cr0, [r1, #-0]
    7a04:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    7a08:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7a0c:	00002c2f 	andeq	r2, r0, pc, lsr #24
    7a10:	4c0bcd01 	stcmi	13, cr12, [fp], {1}
    7a14:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    7a18:	00000048 	andeq	r0, r0, r8, asr #32
    7a1c:	001fd82f 	andseq	sp, pc, pc, lsr #16
    7a20:	01150500 	tsteq	r5, r0, lsl #10
    7a24:	00001f2e 	andeq	r1, r0, lr, lsr #30
    7a28:	00003a30 	andeq	r3, r0, r0, lsr sl
    7a2c:	00cf3000 	sbceq	r3, pc, r0
    7a30:	31000000 	mrscc	r0, (UNDEF: 0)
    7a34:	0000199e 	muleq	r0, lr, r9
    7a38:	30011405 	andcc	r1, r1, r5, lsl #8
    7a3c:	0000003a 	andeq	r0, r0, sl, lsr r0
    7a40:	0000cf30 	andeq	ip, r0, r0, lsr pc
    7a44:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7a48:	0400000a 	streq	r0, [r0], #-10
    7a4c:	0015c100 	andseq	ip, r5, r0, lsl #2
    7a50:	f5010400 			; <UNDEFINED> instruction: 0xf5010400
    7a54:	01000007 	tsteq	r0, r7
    7a58:	00002f5e 	andeq	r2, r0, lr, asr pc
    7a5c:	00001185 	andeq	r1, r0, r5, lsl #3
    7a60:	08005798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, lr}
    7a64:	00000342 	andeq	r0, r0, r2, asr #6
    7a68:	000013ca 	andeq	r1, r0, sl, asr #7
    7a6c:	7b070402 	blvc	1c8a7c <__Stack_Size+0x1c867c>
    7a70:	0200000a 	andeq	r0, r0, #10
    7a74:	09500504 	ldmdbeq	r0, {r2, r8, sl}^
    7a78:	02020000 	andeq	r0, r2, #0
    7a7c:	00091405 	andeq	r1, r9, r5, lsl #8
    7a80:	06010200 	streq	r0, [r1], -r0, lsl #4
    7a84:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    7a88:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    7a8c:	4c270200 	sfmmi	f0, 4, [r7], #-0
    7a90:	02000000 	andeq	r0, r0, #0
    7a94:	0a760704 	beq	1d896ac <__Stack_Size+0x1d892ac>
    7a98:	75030000 	strvc	r0, [r3, #-0]
    7a9c:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    7aa0:	00005e28 	andeq	r5, r0, r8, lsr #28
    7aa4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7aa8:	00000c68 	andeq	r0, r0, r8, ror #24
    7aac:	00387503 	eorseq	r7, r8, r3, lsl #10
    7ab0:	006f2902 	rsbeq	r2, pc, r2, lsl #18
    7ab4:	01020000 	mrseq	r0, (UNDEF: 2)
    7ab8:	000aaf08 	andeq	sl, sl, r8, lsl #30
    7abc:	04ba0400 	ldrteq	r0, [sl], #1024	; 0x400
    7ac0:	2f020000 	svccs	0x00020000
    7ac4:	00000081 	andeq	r0, r0, r1, lsl #1
    7ac8:	00004c05 	andeq	r4, r0, r5, lsl #24
    7acc:	02e80400 	rsceq	r0, r8, #0, 8
    7ad0:	30020000 	andcc	r0, r2, r0
    7ad4:	00000091 	muleq	r0, r1, r0
    7ad8:	00005e05 	andeq	r5, r0, r5, lsl #28
    7adc:	02010600 	andeq	r0, r1, #0, 12
    7ae0:	0000ab39 	andeq	sl, r0, r9, lsr fp
    7ae4:	18da0700 	ldmne	sl, {r8, r9, sl}^
    7ae8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7aec:	00544553 	subseq	r4, r4, r3, asr r5
    7af0:	98040001 	stmdals	r4, {r0}
    7af4:	02000008 	andeq	r0, r0, #8
    7af8:	00009639 	andeq	r9, r0, r9, lsr r6
    7afc:	20620400 	rsbcs	r0, r2, r0, lsl #8
    7b00:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    7b04:	00000096 	muleq	r0, r6, r0
    7b08:	3b020106 	blcc	87f28 <__Stack_Size+0x87b28>
    7b0c:	000000d6 	ldrdeq	r0, [r0], -r6
    7b10:	0005b307 	andeq	fp, r5, r7, lsl #6
    7b14:	4f070000 	svcmi	0x00070000
    7b18:	0100000a 	tsteq	r0, sl
    7b1c:	00f90400 	rscseq	r0, r9, r0, lsl #8
    7b20:	3b020000 	blcc	87b28 <__Stack_Size+0x87728>
    7b24:	000000c1 	andeq	r0, r0, r1, asr #1
    7b28:	6d070402 	cfstrsvs	mvf0, [r7, #-8]
    7b2c:	0900000a 	stmdbeq	r0, {r1, r3}
    7b30:	0238031c 	eorseq	r0, r8, #28, 6	; 0x70000000
    7b34:	000001a6 	andeq	r0, r0, r6, lsr #3
    7b38:	0052530a 	subseq	r5, r2, sl, lsl #6
    7b3c:	86023a03 	strhi	r3, [r2], -r3, lsl #20
    7b40:	00000000 	andeq	r0, r0, r0
    7b44:	0008ce0b 	andeq	ip, r8, fp, lsl #28
    7b48:	023b0300 	eorseq	r0, fp, #0, 6
    7b4c:	00000053 	andeq	r0, r0, r3, asr r0
    7b50:	52440a02 	subpl	r0, r4, #8192	; 0x2000
    7b54:	023c0300 	eorseq	r0, ip, #0, 6
    7b58:	00000086 	andeq	r0, r0, r6, lsl #1
    7b5c:	08d80b04 	ldmeq	r8, {r2, r8, r9, fp}^
    7b60:	3d030000 	stccc	0, cr0, [r3, #-0]
    7b64:	00005302 	andeq	r5, r0, r2, lsl #6
    7b68:	420a0600 	andmi	r0, sl, #0, 12
    7b6c:	03005252 	movweq	r5, #594	; 0x252
    7b70:	0086023e 	addeq	r0, r6, lr, lsr r2
    7b74:	0b080000 	bleq	207b7c <__Stack_Size+0x20777c>
    7b78:	000008e2 	andeq	r0, r0, r2, ror #17
    7b7c:	53023f03 	movwpl	r3, #12035	; 0x2f03
    7b80:	0a000000 	beq	7b88 <__Stack_Size+0x7788>
    7b84:	3152430a 	cmpcc	r2, sl, lsl #6
    7b88:	02400300 	subeq	r0, r0, #0, 6
    7b8c:	00000086 	andeq	r0, r0, r6, lsl #1
    7b90:	08ec0b0c 	stmiaeq	ip!, {r2, r3, r8, r9, fp}^
    7b94:	41030000 	mrsmi	r0, (UNDEF: 3)
    7b98:	00005302 	andeq	r5, r0, r2, lsl #6
    7b9c:	430a0e00 	movwmi	r0, #44544	; 0xae00
    7ba0:	03003252 	movweq	r3, #594	; 0x252
    7ba4:	00860242 	addeq	r0, r6, r2, asr #4
    7ba8:	0b100000 	bleq	407bb0 <__Stack_Size+0x4077b0>
    7bac:	000008f6 	strdeq	r0, [r0], -r6
    7bb0:	53024303 	movwpl	r4, #8963	; 0x2303
    7bb4:	12000000 	andne	r0, r0, #0
    7bb8:	3352430a 	cmpcc	r2, #671088640	; 0x28000000
    7bbc:	02440300 	subeq	r0, r4, #0, 6
    7bc0:	00000086 	andeq	r0, r0, r6, lsl #1
    7bc4:	09000b14 	stmdbeq	r0, {r2, r4, r8, r9, fp}
    7bc8:	45030000 	strmi	r0, [r3, #-0]
    7bcc:	00005302 	andeq	r5, r0, r2, lsl #6
    7bd0:	410b1600 	tstmi	fp, r0, lsl #12
    7bd4:	03000002 	movweq	r0, #2
    7bd8:	00860246 	addeq	r0, r6, r6, asr #4
    7bdc:	0b180000 	bleq	607be4 <__Stack_Size+0x6077e4>
    7be0:	0000090a 	andeq	r0, r0, sl, lsl #18
    7be4:	53024703 	movwpl	r4, #9987	; 0x2703
    7be8:	1a000000 	bne	7bf0 <__Stack_Size+0x77f0>
    7bec:	050b0c00 	streq	r0, [fp, #-3072]	; 0xc00
    7bf0:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
    7bf4:	0000e802 	andeq	lr, r0, r2, lsl #16
    7bf8:	04100d00 	ldreq	r0, [r0], #-3328	; 0xd00
    7bfc:	0002031a 	andeq	r0, r2, sl, lsl r3
    7c00:	028c0e00 	addeq	r0, ip, #0, 28
    7c04:	1c040000 	stcne	0, cr0, [r4], {-0}
    7c08:	00000041 	andeq	r0, r0, r1, asr #32
    7c0c:	01650e00 	cmneq	r5, r0, lsl #28
    7c10:	1d040000 	stcne	0, cr0, [r4, #-0]
    7c14:	00000053 	andeq	r0, r0, r3, asr r0
    7c18:	01a80e04 			; <UNDEFINED> instruction: 0x01a80e04
    7c1c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    7c20:	00000053 	andeq	r0, r0, r3, asr r0
    7c24:	0bed0e06 	bleq	ffb4b444 <SCS_BASE+0x1fb3d444>
    7c28:	1f040000 	svcne	0x00040000
    7c2c:	00000053 	andeq	r0, r0, r3, asr r0
    7c30:	060b0e08 	streq	r0, [fp], -r8, lsl #28
    7c34:	20040000 	andcs	r0, r4, r0
    7c38:	00000053 	andeq	r0, r0, r3, asr r0
    7c3c:	065d0e0a 	ldrbeq	r0, [sp], -sl, lsl #28
    7c40:	21040000 	mrscs	r0, (UNDEF: 4)
    7c44:	00000053 	andeq	r0, r0, r3, asr r0
    7c48:	ba04000c 	blt	107c80 <__Stack_Size+0x107880>
    7c4c:	0400000b 	streq	r0, [r0], #-11
    7c50:	0001b222 	andeq	fp, r1, r2, lsr #4
    7c54:	04080d00 	streq	r0, [r8], #-3328	; 0xd00
    7c58:	00024725 	andeq	r4, r2, r5, lsr #14
    7c5c:	2e900e00 	cdpcs	14, 9, cr0, cr0, cr0, {0}
    7c60:	27040000 	strcs	r0, [r4, -r0]
    7c64:	00000053 	andeq	r0, r0, r3, asr r0
    7c68:	2f3e0e00 	svccs	0x003e0e00
    7c6c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    7c70:	00000053 	andeq	r0, r0, r3, asr r0
    7c74:	2cc60e02 	stclcs	14, cr0, [r6], {2}
    7c78:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    7c7c:	00000053 	andeq	r0, r0, r3, asr r0
    7c80:	2f500e04 	svccs	0x00500e04
    7c84:	2a040000 	bcs	107c8c <__Stack_Size+0x10788c>
    7c88:	00000053 	andeq	r0, r0, r3, asr r0
    7c8c:	ff040006 			; <UNDEFINED> instruction: 0xff040006
    7c90:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    7c94:	00020e2b 	andeq	r0, r2, fp, lsr #28
    7c98:	05140d00 	ldreq	r0, [r4, #-3328]	; 0xd00
    7c9c:	00029719 	andeq	r9, r2, r9, lsl r7
    7ca0:	22030e00 	andcs	r0, r3, #0, 28
    7ca4:	1b050000 	blne	147cac <__Stack_Size+0x1478ac>
    7ca8:	00000041 	andeq	r0, r0, r1, asr #32
    7cac:	20c10e00 	sbccs	r0, r1, r0, lsl #28
    7cb0:	1c050000 	stcne	0, cr0, [r5], {-0}
    7cb4:	00000041 	andeq	r0, r0, r1, asr #32
    7cb8:	225b0e04 	subscs	r0, fp, #4, 28	; 0x40
    7cbc:	1d050000 	stcne	0, cr0, [r5, #-0]
    7cc0:	00000041 	andeq	r0, r0, r1, asr #32
    7cc4:	221f0e08 	andscs	r0, pc, #8, 28	; 0x80
    7cc8:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
    7ccc:	00000041 	andeq	r0, r0, r1, asr #32
    7cd0:	21960e0c 	orrscs	r0, r6, ip, lsl #28
    7cd4:	1f050000 	svcne	0x00050000
    7cd8:	00000041 	andeq	r0, r0, r1, asr #32
    7cdc:	89040010 	stmdbhi	r4, {r4}
    7ce0:	05000020 	streq	r0, [r0, #-32]
    7ce4:	00025220 	andeq	r5, r2, r0, lsr #4
    7ce8:	0b0b0f00 	bleq	2cb8f0 <__Stack_Size+0x2cb4f0>
    7cec:	5a010000 	bpl	47cf4 <__Stack_Size+0x478f4>
    7cf0:	08005798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, lr}
    7cf4:	00000094 	muleq	r0, r4, r0
    7cf8:	03729c01 	cmneq	r2, #256	; 0x100
    7cfc:	42100000 	andsmi	r0, r0, #0
    7d00:	0100002e 	tsteq	r0, lr, lsr #32
    7d04:	0003725a 	andeq	r7, r3, sl, asr r2
    7d08:	00486900 	subeq	r6, r8, r0, lsl #18
    7d0c:	57cc1100 	strbpl	r1, [ip, r0, lsl #2]
    7d10:	09e50800 	stmibeq	r5!, {fp}^
    7d14:	02e00000 	rsceq	r0, r0, #0
    7d18:	01120000 	tsteq	r2, r0
    7d1c:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    7d20:	0a035001 	beq	dbd2c <__Stack_Size+0xdb92c>
    7d24:	13004000 	movwne	r4, #0
    7d28:	080057da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip, lr}
    7d2c:	000009e5 	andeq	r0, r0, r5, ror #19
    7d30:	000002fa 	strdeq	r0, [r0], -sl
    7d34:	01510112 	cmpeq	r1, r2, lsl r1
    7d38:	50011230 	andpl	r1, r1, r0, lsr r2
    7d3c:	40000a03 	andmi	r0, r0, r3, lsl #20
    7d40:	57e41100 	strbpl	r1, [r4, r0, lsl #2]!
    7d44:	09fc0800 	ldmibeq	ip!, {fp}^
    7d48:	03140000 	tsteq	r4, #0
    7d4c:	01120000 	tsteq	r2, r0
    7d50:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    7d54:	40035001 	andmi	r5, r3, r1
    7d58:	1100243d 	tstne	r0, sp, lsr r4
    7d5c:	080057f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    7d60:	000009fc 	strdeq	r0, [r0], -ip
    7d64:	0000032e 	andeq	r0, r0, lr, lsr #6
    7d68:	01510112 	cmpeq	r1, r2, lsl r1
    7d6c:	50011231 	andpl	r1, r1, r1, lsr r2
    7d70:	243e4003 	ldrtcs	r4, [lr], #-3
    7d74:	58041100 	stmdapl	r4, {r8, ip}
    7d78:	09fc0800 	ldmibeq	ip!, {fp}^
    7d7c:	03480000 	movteq	r0, #32768	; 0x8000
    7d80:	01120000 	tsteq	r2, r0
    7d84:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    7d88:	40035001 	andmi	r5, r3, r1
    7d8c:	1100243f 	tstne	r0, pc, lsr r4
    7d90:	08005814 	stmdaeq	r0, {r2, r4, fp, ip, lr}
    7d94:	000009fc 	strdeq	r0, [r0], -ip
    7d98:	00000362 	andeq	r0, r0, r2, ror #6
    7d9c:	01510112 	cmpeq	r1, r2, lsl r1
    7da0:	50011231 	andpl	r1, r1, r1, lsr r2
    7da4:	24404003 	strbcs	r4, [r0], #-3
    7da8:	58221400 	stmdapl	r2!, {sl, ip}
    7dac:	09fc0800 	ldmibeq	ip!, {fp}^
    7db0:	01120000 	tsteq	r2, r0
    7db4:	00300151 	eorseq	r0, r0, r1, asr r1
    7db8:	a6041500 	strge	r1, [r4], -r0, lsl #10
    7dbc:	0f000001 	svceq	0x00000001
    7dc0:	00000126 	andeq	r0, r0, r6, lsr #2
    7dc4:	582c8c01 	stmdapl	ip!, {r0, sl, fp, pc}
    7dc8:	00880800 	addeq	r0, r8, r0, lsl #16
    7dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7dd0:	00000415 	andeq	r0, r0, r5, lsl r4
    7dd4:	002e4210 	eoreq	r4, lr, r0, lsl r2
    7dd8:	728c0100 	addvc	r0, ip, #0, 2
    7ddc:	f9000003 			; <UNDEFINED> instruction: 0xf9000003
    7de0:	10000048 	andne	r0, r0, r8, asr #32
    7de4:	00002e49 	andeq	r2, r0, r9, asr #28
    7de8:	04158c01 	ldreq	r8, [r5], #-3073	; 0xc01
    7dec:	49250000 	stmdbmi	r5!, {}	; <UNPREDICTABLE>
    7df0:	74160000 	ldrvc	r0, [r6], #-0
    7df4:	01000019 	tsteq	r0, r9, lsl r0
    7df8:	0000418e 	andeq	r4, r0, lr, lsl #3
    7dfc:	00495100 	subeq	r5, r9, r0, lsl #2
    7e00:	2d5c1600 	ldclcs	6, cr1, [ip, #-0]
    7e04:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    7e08:	00000041 	andeq	r0, r0, r1, asr #32
    7e0c:	00004a3e 	andeq	r4, r0, lr, lsr sl
    7e10:	002cb716 	eoreq	fp, ip, r6, lsl r7
    7e14:	418f0100 	orrmi	r0, pc, r0, lsl #2
    7e18:	b5000000 	strlt	r0, [r0, #-0]
    7e1c:	1600004a 	strne	r0, [r0], -sl, asr #32
    7e20:	00002ecf 	andeq	r2, r0, pc, asr #29
    7e24:	00419001 	subeq	r9, r1, r1
    7e28:	4b2e0000 	blmi	b87e30 <__Stack_Size+0xb87a30>
    7e2c:	f2160000 	vhadd.s16	d0, d6, d0
    7e30:	0100002d 	tsteq	r0, sp, lsr #32
    7e34:	00004191 	muleq	r0, r1, r1
    7e38:	0048f900 	subeq	pc, r8, r0, lsl #18
    7e3c:	2dfd1700 	ldclcs	7, cr1, [sp]
    7e40:	92010000 	andls	r0, r1, #0
    7e44:	00000297 	muleq	r0, r7, r2
    7e48:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
    7e4c:	08005872 	stmdaeq	r0, {r1, r4, r5, r6, fp, ip, lr}
    7e50:	00000a13 	andeq	r0, r0, r3, lsl sl
    7e54:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    7e58:	00005c91 	muleq	r0, r1, ip
    7e5c:	02030415 	andeq	r0, r3, #352321536	; 0x15000000
    7e60:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
    7e64:	01000004 	tsteq	r0, r4
    7e68:	0058b4e8 	subseq	fp, r8, r8, ror #9
    7e6c:	00001608 	andeq	r1, r0, r8, lsl #12
    7e70:	3e9c0100 	fmlcce	f0, f4, f0
    7e74:	19000004 	stmdbne	r0, {r2}
    7e78:	00002e49 	andeq	r2, r0, r9, asr #28
    7e7c:	0415e801 	ldreq	lr, [r5], #-2049	; 0x801
    7e80:	50010000 	andpl	r0, r1, r0
    7e84:	2f0b0f00 	svccs	0x000b0f00
    7e88:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    7e8c:	080058ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, ip, lr}
    7e90:	00000020 	andeq	r0, r0, r0, lsr #32
    7e94:	04809c01 	streq	r9, [r0], #3073	; 0xc01
    7e98:	42190000 	andsmi	r0, r9, #0
    7e9c:	0100002e 	tsteq	r0, lr, lsr #32
    7ea0:	000372ff 	strdeq	r7, [r3], -pc	; <UNPREDICTABLE>
    7ea4:	10500100 	subsne	r0, r0, r0, lsl #2
    7ea8:	00002db9 			; <UNDEFINED> instruction: 0x00002db9
    7eac:	0480ff01 	streq	pc, [r0], #3841	; 0xf01
    7eb0:	4bcc0000 	blmi	ff307eb8 <SCS_BASE+0x1f2f9eb8>
    7eb4:	741a0000 	ldrvc	r0, [sl], #-0
    7eb8:	01000019 	tsteq	r0, r9, lsl r0
    7ebc:	00410101 	subeq	r0, r1, r1, lsl #2
    7ec0:	4bed0000 	blmi	ffb47ec8 <SCS_BASE+0x1fb39ec8>
    7ec4:	15000000 	strne	r0, [r0, #-0]
    7ec8:	00024704 	andeq	r4, r2, r4, lsl #14
    7ecc:	2ddc1b00 	vldrcs	d17, [ip]
    7ed0:	23010000 	movwcs	r0, #4096	; 0x1000
    7ed4:	0058ea01 	subseq	lr, r8, r1, lsl #20
    7ed8:	00000c08 	andeq	r0, r0, r8, lsl #24
    7edc:	ab9c0100 	blge	fe7082e4 <SCS_BASE+0x1e6fa2e4>
    7ee0:	1c000004 	stcne	0, cr0, [r0], {4}
    7ee4:	00002db9 			; <UNDEFINED> instruction: 0x00002db9
    7ee8:	80012301 	andhi	r2, r1, r1, lsl #6
    7eec:	01000004 	tsteq	r0, r4
    7ef0:	321b0050 	andscc	r0, fp, #80	; 0x50
    7ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ef8:	58f60137 	ldmpl	r6!, {r0, r1, r2, r4, r5, r8}^
    7efc:	00180800 	andseq	r0, r8, r0, lsl #16
    7f00:	9c010000 	stcls	0, cr0, [r1], {-0}
    7f04:	000004de 	ldrdeq	r0, [r0], -lr
    7f08:	002e421c 	eoreq	r4, lr, ip, lsl r2
    7f0c:	01370100 	teqeq	r7, r0, lsl #2
    7f10:	00000372 	andeq	r0, r0, r2, ror r3
    7f14:	de1c5001 	cdple	0, 1, cr5, cr12, cr1, {0}
    7f18:	01000015 	tsteq	r0, r5, lsl r0
    7f1c:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    7f20:	51010000 	mrspl	r0, (UNDEF: 1)
    7f24:	09901b00 	ldmibeq	r0, {r8, r9, fp, ip}
    7f28:	62010000 	andvs	r0, r1, #0
    7f2c:	00590e01 	subseq	r0, r9, r1, lsl #28
    7f30:	00003208 	andeq	r3, r0, r8, lsl #4
    7f34:	639c0100 	orrsvs	r0, ip, #0, 2
    7f38:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    7f3c:	00002e42 	andeq	r2, r0, r2, asr #28
    7f40:	72016201 	andvc	r6, r1, #268435456	; 0x10000000
    7f44:	27000003 	strcs	r0, [r0, -r3]
    7f48:	1d00004c 	stcne	0, cr0, [r0, #-304]	; 0xfffffed0
    7f4c:	00002d44 	andeq	r2, r0, r4, asr #26
    7f50:	53016201 	movwpl	r6, #4609	; 0x1201
    7f54:	60000000 	andvs	r0, r0, r0
    7f58:	1d00004c 	stcne	0, cr0, [r0, #-304]	; 0xfffffed0
    7f5c:	000015de 	ldrdeq	r1, [r0], -lr
    7f60:	d6016201 	strle	r6, [r1], -r1, lsl #4
    7f64:	81000000 	mrshi	r0, (UNDEF: 0)
    7f68:	1a00004c 	bne	80a0 <__Stack_Size+0x7ca0>
    7f6c:	00002f82 	andeq	r2, r0, r2, lsl #31
    7f70:	41016401 	tstmi	r1, r1, lsl #8
    7f74:	bb000000 	bllt	7f7c <__Stack_Size+0x7b7c>
    7f78:	1a00004c 	bne	80b0 <__Stack_Size+0x7cb0>
    7f7c:	00002e69 	andeq	r2, r0, r9, ror #28
    7f80:	41016401 	tstmi	r1, r1, lsl #8
    7f84:	df000000 	svcle	0x00000000
    7f88:	1a00004c 	bne	80c0 <__Stack_Size+0x7cc0>
    7f8c:	00002f49 	andeq	r2, r0, r9, asr #30
    7f90:	41016401 	tstmi	r1, r1, lsl #8
    7f94:	1a000000 	bne	7f9c <__Stack_Size+0x7b9c>
    7f98:	1e00004d 	cdpne	0, 0, cr0, cr0, cr13, {2}
    7f9c:	00002df2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    7fa0:	41016501 	tstmi	r1, r1, lsl #10
    7fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    7fa8:	371b0050 			; <UNDEFINED> instruction: 0x371b0050
    7fac:	0100002d 	tsteq	r0, sp, lsr #32
    7fb0:	5940019d 	stmdbpl	r0, {r0, r2, r3, r4, r7, r8}^
    7fb4:	00120800 	andseq	r0, r2, r0, lsl #16
    7fb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fbc:	000005a6 	andeq	r0, r0, r6, lsr #11
    7fc0:	002e421c 	eoreq	r4, lr, ip, lsl r2
    7fc4:	019d0100 	orrseq	r0, sp, r0, lsl #2
    7fc8:	00000372 	andeq	r0, r0, r2, ror r3
    7fcc:	cf1d5001 	svcgt	0x001d5001
    7fd0:	0100002d 	tsteq	r0, sp, lsr #32
    7fd4:	0053019d 			; <UNDEFINED> instruction: 0x0053019d
    7fd8:	4d620000 	stclmi	0, cr0, [r2, #-0]
    7fdc:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    7fe0:	01000015 	tsteq	r0, r5, lsl r0
    7fe4:	00d6019d 	smullseq	r0, r6, sp, r1
    7fe8:	52010000 	andpl	r0, r1, #0
    7fec:	2e0e1b00 	vmlacs.f64	d1, d14, d0
    7ff0:	bc010000 	stclt	0, cr0, [r1], {-0}
    7ff4:	00595201 	subseq	r5, r9, r1, lsl #4
    7ff8:	00001608 	andeq	r1, r0, r8, lsl #12
    7ffc:	db9c0100 	blle	fe708404 <SCS_BASE+0x1e6fa404>
    8000:	1c000005 	stcne	0, cr0, [r0], {5}
    8004:	00002e42 	andeq	r2, r0, r2, asr #28
    8008:	7201bc01 	andvc	fp, r1, #256	; 0x100
    800c:	01000003 	tsteq	r0, r3
    8010:	2e5a1d50 	mrccs	13, 2, r1, cr10, cr0, {2}
    8014:	bc010000 	stclt	0, cr0, [r1], {-0}
    8018:	00006501 	andeq	r6, r0, r1, lsl #10
    801c:	004d9c00 	subeq	r9, sp, r0, lsl #24
    8020:	1b1b0000 	blne	6c8028 <__Stack_Size+0x6c7c28>
    8024:	0100002f 	tsteq	r0, pc, lsr #32
    8028:	596801d5 	stmdbpl	r8!, {r0, r2, r4, r6, r7, r8}^
    802c:	00160800 	andseq	r0, r6, r0, lsl #16
    8030:	9c010000 	stcls	0, cr0, [r1], {-0}
    8034:	00000610 	andeq	r0, r0, r0, lsl r6
    8038:	002e421c 	eoreq	r4, lr, ip, lsl r2
    803c:	01d50100 	bicseq	r0, r5, r0, lsl #2
    8040:	00000372 	andeq	r0, r0, r2, ror r3
    8044:	2a1d5001 	bcs	75c050 <__Stack_Size+0x75bc50>
    8048:	0100002d 	tsteq	r0, sp, lsr #32
    804c:	005301d5 	ldrsbeq	r0, [r3], #-21	; 0xffffffeb
    8050:	4dbd0000 	ldcmi	0, cr0, [sp]
    8054:	1b000000 	blne	805c <__Stack_Size+0x7c5c>
    8058:	00002e9c 	muleq	r0, ip, lr
    805c:	7e01ea01 	vmlavc.f32	s28, s2, s2
    8060:	18080059 	stmdane	r8, {r0, r3, r4, r6}
    8064:	01000000 	mrseq	r0, (UNDEF: 0)
    8068:	0006439c 	muleq	r6, ip, r3
    806c:	2e421c00 	cdpcs	12, 4, cr1, cr2, cr0, {0}
    8070:	ea010000 	b	48078 <__Stack_Size+0x47c78>
    8074:	00037201 	andeq	r7, r3, r1, lsl #4
    8078:	1c500100 	ldfnee	f0, [r0], {-0}
    807c:	000015de 	ldrdeq	r1, [r0], -lr
    8080:	d601ea01 	strle	lr, [r1], -r1, lsl #20
    8084:	01000000 	mrseq	r0, (UNDEF: 0)
    8088:	8d1b0051 	ldchi	0, cr0, [fp, #-324]	; 0xfffffebc
    808c:	0100002d 	tsteq	r0, sp, lsr #32
    8090:	5996020a 	ldmibpl	r6, {r1, r3, r9}
    8094:	00160800 	andseq	r0, r6, r0, lsl #16
    8098:	9c010000 	stcls	0, cr0, [r1], {-0}
    809c:	00000678 	andeq	r0, r0, r8, ror r6
    80a0:	002e421c 	eoreq	r4, lr, ip, lsl r2
    80a4:	020a0100 	andeq	r0, sl, #0, 2
    80a8:	00000372 	andeq	r0, r0, r2, ror r3
    80ac:	e41d5001 	ldr	r5, [sp], #-1
    80b0:	0100002c 	tsteq	r0, ip, lsr #32
    80b4:	0053020a 	subseq	r0, r3, sl, lsl #4
    80b8:	4dde0000 	ldclmi	0, cr0, [lr]
    80bc:	1b000000 	blne	80c4 <__Stack_Size+0x7cc4>
    80c0:	00002ec2 	andeq	r2, r0, r2, asr #29
    80c4:	ac021f01 	stcge	15, cr1, [r2], {1}
    80c8:	18080059 	stmdane	r8, {r0, r3, r4, r6}
    80cc:	01000000 	mrseq	r0, (UNDEF: 0)
    80d0:	0006ab9c 	muleq	r6, ip, fp
    80d4:	2e421c00 	cdpcs	12, 4, cr1, cr2, cr0, {0}
    80d8:	1f010000 	svcne	0x00010000
    80dc:	00037202 	andeq	r7, r3, r2, lsl #4
    80e0:	1c500100 	ldfnee	f0, [r0], {-0}
    80e4:	000015de 	ldrdeq	r1, [r0], -lr
    80e8:	d6021f01 	strle	r1, [r2], -r1, lsl #30
    80ec:	01000000 	mrseq	r0, (UNDEF: 0)
    80f0:	701b0051 	andsvc	r0, fp, r1, asr r0
    80f4:	01000003 	tsteq	r0, r3
    80f8:	59c4023b 	stmibpl	r4, {r0, r1, r3, r4, r5, r9}^
    80fc:	00080800 	andeq	r0, r8, r0, lsl #16
    8100:	9c010000 	stcls	0, cr0, [r1], {-0}
    8104:	000006e0 	andeq	r0, r0, r0, ror #13
    8108:	002e421c 	eoreq	r4, lr, ip, lsl r2
    810c:	023b0100 	eorseq	r0, fp, #0, 2
    8110:	00000372 	andeq	r0, r0, r2, ror r3
    8114:	591d5001 	ldmdbpl	sp, {r0, ip, lr}
    8118:	01000017 	tsteq	r0, r7, lsl r0
    811c:	0053023b 	subseq	r0, r3, fp, lsr r2
    8120:	4dff0000 	ldclmi	0, cr0, [pc]	; 8128 <__Stack_Size+0x7d28>
    8124:	1f000000 	svcne	0x00000000
    8128:	000002cb 	andeq	r0, r0, fp, asr #5
    812c:	53024e01 	movwpl	r4, #11777	; 0x2e01
    8130:	cc000000 	stcgt	0, cr0, [r0], {-0}
    8134:	08080059 	stmdaeq	r8, {r0, r3, r4, r6}
    8138:	01000000 	mrseq	r0, (UNDEF: 0)
    813c:	00070b9c 	muleq	r7, ip, fp
    8140:	2e421d00 	cdpcs	13, 4, cr1, cr2, cr0, {0}
    8144:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    8148:	00037202 	andeq	r7, r3, r2, lsl #4
    814c:	004e2000 	subeq	r2, lr, r0
    8150:	321b0000 	andscc	r0, fp, #0
    8154:	0100002e 	tsteq	r0, lr, lsr #32
    8158:	59d40260 	ldmibpl	r4, {r5, r6, r9}^
    815c:	000c0800 	andeq	r0, ip, r0, lsl #16
    8160:	9c010000 	stcls	0, cr0, [r1], {-0}
    8164:	00000730 	andeq	r0, r0, r0, lsr r7
    8168:	002e421c 	eoreq	r4, lr, ip, lsl r2
    816c:	02600100 	rsbeq	r0, r0, #0, 2
    8170:	00000372 	andeq	r0, r0, r2, ror r3
    8174:	1b005001 	blne	1c180 <__Stack_Size+0x1bd80>
    8178:	00002e1f 	andeq	r2, r0, pc, lsl lr
    817c:	e0027301 	and	r7, r2, r1, lsl #6
    8180:	12080059 	andne	r0, r8, #89	; 0x59
    8184:	01000000 	mrseq	r0, (UNDEF: 0)
    8188:	0007659c 	muleq	r7, ip, r5
    818c:	2e421c00 	cdpcs	12, 4, cr1, cr2, cr0, {0}
    8190:	73010000 	movwvc	r0, #4096	; 0x1000
    8194:	00037202 	andeq	r7, r3, r2, lsl #4
    8198:	1d500100 	ldfnee	f0, [r0, #-0]
    819c:	00002d7d 	andeq	r2, r0, sp, ror sp
    81a0:	65027301 	strvs	r7, [r2, #-769]	; 0x301
    81a4:	41000000 	mrsmi	r0, (UNDEF: 0)
    81a8:	0000004e 	andeq	r0, r0, lr, asr #32
    81ac:	002cd11b 	eoreq	sp, ip, fp, lsl r1
    81b0:	02890100 	addeq	r0, r9, #0, 2
    81b4:	080059f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip, lr}
    81b8:	00000012 	andeq	r0, r0, r2, lsl r0
    81bc:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    81c0:	421c0000 	andsmi	r0, ip, #0
    81c4:	0100002e 	tsteq	r0, lr, lsr #32
    81c8:	03720289 	cmneq	r2, #-1879048184	; 0x90000008
    81cc:	50010000 	andpl	r0, r1, r0
    81d0:	002f2e1d 	eoreq	r2, pc, sp, lsl lr	; <UNPREDICTABLE>
    81d4:	02890100 	addeq	r0, r9, #0, 2
    81d8:	00000065 	andeq	r0, r0, r5, rrx
    81dc:	00004e62 	andeq	r4, r0, r2, ror #28
    81e0:	2ef81b00 	vmovcs.f64	d17, #128	; 0x80
    81e4:	9f010000 	svcls	0x00010000
    81e8:	005a0402 	subseq	r0, sl, r2, lsl #8
    81ec:	00001808 	andeq	r1, r0, r8, lsl #16
    81f0:	cd9c0100 	ldfgts	f0, [ip]
    81f4:	1c000007 	stcne	0, cr0, [r0], {7}
    81f8:	00002e42 	andeq	r2, r0, r2, asr #28
    81fc:	72029f01 	andvc	r9, r2, #1, 30
    8200:	01000003 	tsteq	r0, r3
    8204:	15de1c50 	ldrbne	r1, [lr, #3152]	; 0xc50
    8208:	9f010000 	svcls	0x00010000
    820c:	0000d602 	andeq	sp, r0, r2, lsl #12
    8210:	00510100 	subseq	r0, r1, r0, lsl #2
    8214:	002ee11b 	eoreq	lr, lr, fp, lsl r1
    8218:	02bc0100 	adcseq	r0, ip, #0, 2
    821c:	08005a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, ip, lr}
    8220:	00000018 	andeq	r0, r0, r8, lsl r0
    8224:	08009c01 	stmdaeq	r0, {r0, sl, fp, ip, pc}
    8228:	421c0000 	andsmi	r0, ip, #0
    822c:	0100002e 	tsteq	r0, lr, lsr #32
    8230:	037202bc 	cmneq	r2, #188, 4	; 0xc000000b
    8234:	50010000 	andpl	r0, r1, r0
    8238:	0015de1c 	andseq	sp, r5, ip, lsl lr
    823c:	02bc0100 	adcseq	r0, ip, #0, 2
    8240:	000000d6 	ldrdeq	r0, [r0], -r6
    8244:	1b005101 	blne	1c650 <__Stack_Size+0x1c250>
    8248:	00002d16 	andeq	r2, r0, r6, lsl sp
    824c:	3402d901 	strcc	sp, [r2], #-2305	; 0x901
    8250:	1808005a 	stmdane	r8, {r1, r3, r4, r6}
    8254:	01000000 	mrseq	r0, (UNDEF: 0)
    8258:	0008339c 	muleq	r8, ip, r3
    825c:	2e421c00 	cdpcs	12, 4, cr1, cr2, cr0, {0}
    8260:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    8264:	00037202 	andeq	r7, r3, r2, lsl #4
    8268:	1c500100 	ldfnee	f0, [r0], {-0}
    826c:	000015de 	ldrdeq	r1, [r0], -lr
    8270:	d602d901 	strle	sp, [r2], -r1, lsl #18
    8274:	01000000 	mrseq	r0, (UNDEF: 0)
    8278:	7f1b0051 	svcvc	0x001b0051
    827c:	0100002e 	tsteq	r0, lr, lsr #32
    8280:	5a4c02f8 	bpl	1308e68 <__Stack_Size+0x1308a68>
    8284:	00160800 	andseq	r0, r6, r0, lsl #16
    8288:	9c010000 	stcls	0, cr0, [r1], {-0}
    828c:	00000868 	andeq	r0, r0, r8, ror #16
    8290:	002e421c 	eoreq	r4, lr, ip, lsl r2
    8294:	02f80100 	rscseq	r0, r8, #0, 2
    8298:	00000372 	andeq	r0, r0, r2, ror r3
    829c:	4d1d5001 	ldcmi	0, cr5, [sp, #-4]
    82a0:	0100002d 	tsteq	r0, sp, lsr #32
    82a4:	005302f8 	ldrsheq	r0, [r3], #-40	; 0xffffffd8
    82a8:	4e830000 	cdpmi	0, 8, cr0, cr3, cr0, {0}
    82ac:	1b000000 	blne	82b4 <__Stack_Size+0x7eb4>
    82b0:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
    82b4:	62030d01 	andvs	r0, r3, #1, 26	; 0x40
    82b8:	1808005a 	stmdane	r8, {r1, r3, r4, r6}
    82bc:	01000000 	mrseq	r0, (UNDEF: 0)
    82c0:	00089b9c 	muleq	r8, ip, fp
    82c4:	2e421c00 	cdpcs	12, 4, cr1, cr2, cr0, {0}
    82c8:	0d010000 	stceq	0, cr0, [r1, #-0]
    82cc:	00037203 	andeq	r7, r3, r3, lsl #4
    82d0:	1c500100 	ldfnee	f0, [r0], {-0}
    82d4:	000015de 	ldrdeq	r1, [r0], -lr
    82d8:	d6030d01 	strle	r0, [r3], -r1, lsl #26
    82dc:	01000000 	mrseq	r0, (UNDEF: 0)
    82e0:	801f0051 	andshi	r0, pc, r1, asr r0	; <UNPREDICTABLE>
    82e4:	01000007 	tsteq	r0, r7
    82e8:	00ab0335 	adceq	r0, fp, r5, lsr r3
    82ec:	5a7a0000 	bpl	1e882f4 <__Stack_Size+0x1e87ef4>
    82f0:	000c0800 	andeq	r0, ip, r0, lsl #16
    82f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    82f8:	000008e4 	andeq	r0, r0, r4, ror #17
    82fc:	002e421d 	eoreq	r4, lr, sp, lsl r2
    8300:	03350100 	teqeq	r5, #0, 2
    8304:	00000372 	andeq	r0, r0, r2, ror r3
    8308:	00004ea4 	andeq	r4, r0, r4, lsr #29
    830c:	002dae1c 	eoreq	sl, sp, ip, lsl lr
    8310:	03350100 	teqeq	r5, #0, 2
    8314:	00000053 	andeq	r0, r0, r3, asr r0
    8318:	6d1a5101 	ldfvss	f5, [sl, #-4]
    831c:	01000016 	tsteq	r0, r6, lsl r0
    8320:	00ab0337 	adceq	r0, fp, r7, lsr r3
    8324:	4ec50000 	cdpmi	0, 12, cr0, cr5, cr0, {0}
    8328:	1b000000 	blne	8330 <__Stack_Size+0x7f30>
    832c:	00002e6f 	andeq	r2, r0, pc, ror #28
    8330:	86036901 	strhi	r6, [r3], -r1, lsl #18
    8334:	0808005a 	stmdaeq	r8, {r1, r3, r4, r6}
    8338:	01000000 	mrseq	r0, (UNDEF: 0)
    833c:	0009199c 	muleq	r9, ip, r9
    8340:	2e421c00 	cdpcs	12, 4, cr1, cr2, cr0, {0}
    8344:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    8348:	00037203 	andeq	r7, r3, r3, lsl #4
    834c:	1d500100 	ldfnee	f0, [r0, #-0]
    8350:	00002dae 	andeq	r2, r0, lr, lsr #27
    8354:	53036901 	movwpl	r6, #14593	; 0x3901
    8358:	ed000000 	stc	0, cr0, [r0, #-0]
    835c:	0000004e 	andeq	r0, r0, lr, asr #32
    8360:	0000de1f 	andeq	sp, r0, pc, lsl lr
    8364:	038a0100 	orreq	r0, sl, #0, 2
    8368:	000000b6 	strheq	r0, [r0], -r6
    836c:	08005a8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, fp, ip, lr}
    8370:	0000003e 	andeq	r0, r0, lr, lsr r0
    8374:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    8378:	421d0000 	andsmi	r0, sp, #0
    837c:	0100002e 	tsteq	r0, lr, lsr #32
    8380:	0372038a 	cmneq	r2, #671088642	; 0x28000002
    8384:	4f0e0000 	svcmi	0x000e0000
    8388:	441d0000 	ldrmi	r0, [sp], #-0
    838c:	0100002d 	tsteq	r0, sp, lsr #32
    8390:	0053038a 	subseq	r0, r3, sl, lsl #7
    8394:	4f480000 	svcmi	0x00480000
    8398:	681a0000 	ldmdavs	sl, {}	; <UNPREDICTABLE>
    839c:	0100002e 	tsteq	r0, lr, lsr #32
    83a0:	0041038c 	subeq	r0, r1, ip, lsl #7
    83a4:	4f740000 	svcmi	0x00740000
    83a8:	491a0000 	ldmdbmi	sl, {}	; <UNPREDICTABLE>
    83ac:	0100002f 	tsteq	r0, pc, lsr #32
    83b0:	0041038c 	subeq	r0, r1, ip, lsl #7
    83b4:	4ff20000 	svcmi	0x00f20000
    83b8:	821a0000 	andshi	r0, sl, #0
    83bc:	0100002f 	tsteq	r0, pc, lsr #32
    83c0:	0041038c 	subeq	r0, r1, ip, lsl #7
    83c4:	503a0000 	eorspl	r0, sl, r0
    83c8:	6d1a0000 	ldcvs	0, cr0, [sl, #-0]
    83cc:	01000016 	tsteq	r0, r6, lsl r0
    83d0:	00b6038d 	adcseq	r0, r6, sp, lsl #7
    83d4:	505e0000 	subspl	r0, lr, r0
    83d8:	1b000000 	blne	83e0 <__Stack_Size+0x7fe0>
    83dc:	00002d65 	andeq	r2, r0, r5, ror #26
    83e0:	cc03da01 	stcgt	10, cr13, [r3], {1}
    83e4:	0e08005a 	mcreq	0, 0, r0, cr8, cr10, {2}
    83e8:	01000000 	mrseq	r0, (UNDEF: 0)
    83ec:	0009e59c 	muleq	r9, ip, r5
    83f0:	2e421c00 	cdpcs	12, 4, cr1, cr2, cr0, {0}
    83f4:	da010000 	ble	483fc <__Stack_Size+0x47ffc>
    83f8:	00037203 	andeq	r7, r3, r3, lsl #4
    83fc:	1d500100 	ldfnee	f0, [r0, #-0]
    8400:	00002d44 	andeq	r2, r0, r4, asr #26
    8404:	5303da01 	movwpl	sp, #14849	; 0x3a01
    8408:	7d000000 	stcvc	0, cr0, [r0, #-0]
    840c:	1a000050 	bne	8554 <__Stack_Size+0x8154>
    8410:	00002e68 	andeq	r2, r0, r8, ror #28
    8414:	5303dc01 	movwpl	sp, #15361	; 0x3c01
    8418:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    841c:	20000050 	andcs	r0, r0, r0, asr r0
    8420:	00002f49 	andeq	r2, r0, r9, asr #30
    8424:	5303dc01 	movwpl	sp, #15361	; 0x3c01
    8428:	00000000 	andeq	r0, r0, r0
    842c:	00199e21 	andseq	r9, r9, r1, lsr #28
    8430:	01140500 	tsteq	r4, r0, lsl #10
    8434:	000009fc 	strdeq	r0, [r0], -ip
    8438:	00004122 	andeq	r4, r0, r2, lsr #2
    843c:	00d62200 	sbcseq	r2, r6, r0, lsl #4
    8440:	21000000 	mrscs	r0, (UNDEF: 0)
    8444:	00001fd8 	ldrdeq	r1, [r0], -r8
    8448:	13011505 	movwne	r1, #5381	; 0x1505
    844c:	2200000a 	andcs	r0, r0, #10
    8450:	00000041 	andeq	r0, r0, r1, asr #32
    8454:	0000d622 	andeq	sp, r0, r2, lsr #12
    8458:	7c210000 	stcvc	0, cr0, [r1], #-0
    845c:	05000022 	streq	r0, [r0, #-34]	; 0x22
    8460:	0a250110 	beq	9488a8 <__Stack_Size+0x9484a8>
    8464:	25220000 	strcs	r0, [r2, #-0]!
    8468:	0000000a 	andeq	r0, r0, sl
    846c:	02970415 	addseq	r0, r7, #352321536	; 0x15000000
    8470:	80000000 	andhi	r0, r0, r0
    8474:	02000000 	andeq	r0, r0, #0
    8478:	0017ae00 	andseq	sl, r7, r0, lsl #28
    847c:	a4010400 	strge	r0, [r1], #-1024	; 0x400
    8480:	dc000015 	stcle	0, cr0, [r0], {21}
    8484:	4a08005a 	bmi	2085f4 <__Stack_Size+0x2081f4>
    8488:	7308005b 	movwvc	r0, #32859	; 0x805b
    848c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    8490:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    8494:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    8498:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    849c:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    84a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    84a4:	616d5f33 	cmnvs	sp, r3, lsr pc
    84a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    84ac:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    84b0:	2f656d6f 	svccs	0x00656d6f
    84b4:	72656970 	rsbvc	r6, r5, #112, 18	; 0x1c0000
    84b8:	652d6572 	strvs	r6, [sp, #-1394]!	; 0x572
    84bc:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
    84c0:	6f442f65 	svcvs	0x00442f65
    84c4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
    84c8:	2f73746e 	svccs	0x0073746e
    84cc:	30314f4d 	eorscc	r4, r1, sp, asr #30
    84d0:	6d632f33 	stclvs	15, cr2, [r3, #-204]!	; 0xffffff34
    84d4:	2f303335 	svccs	0x00303335
    84d8:	6d617865 	stclvs	8, cr7, [r1, #-404]!	; 0xfffffe6c
    84dc:	73656c70 	cmnvc	r5, #112, 24	; 0x7000
    84e0:	626f522f 	rsbvs	r5, pc, #-268435454	; 0xf0000002
    84e4:	4700746f 	strmi	r7, [r0, -pc, ror #8]
    84e8:	4120554e 			; <UNDEFINED> instruction: 0x4120554e
    84ec:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
    84f0:	302e3432 	eorcc	r3, lr, r2, lsr r4
    84f4:	0f800100 	svceq	0x00800100
    84f8:	04000001 	streq	r0, [r0], #-1
    84fc:	0017c200 	andseq	ip, r7, r0, lsl #4
    8500:	f5010400 			; <UNDEFINED> instruction: 0xf5010400
    8504:	01000007 	tsteq	r0, r7
    8508:	00002fc5 	andeq	r2, r0, r5, asr #31
    850c:	00001185 	andeq	r1, r0, r5, lsl #3
    8510:	08005b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, lr}
    8514:	00000050 	andeq	r0, r0, r0, asr r0
    8518:	00001648 	andeq	r1, r0, r8, asr #12
    851c:	50050402 	andpl	r0, r5, r2, lsl #8
    8520:	02000009 	andeq	r0, r0, #9
    8524:	09140502 	ldmdbeq	r4, {r1, r8, sl}
    8528:	01020000 	mrseq	r0, (UNDEF: 2)
    852c:	000ab106 	andeq	fp, sl, r6, lsl #2
    8530:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8534:	00000a76 	andeq	r0, r0, r6, ror sl
    8538:	68070202 	stmdavs	r7, {r1, r9}
    853c:	0200000c 	andeq	r0, r0, #12
    8540:	0aaf0801 	beq	febca54c <SCS_BASE+0x1ebbc54c>
    8544:	04020000 	streq	r0, [r2], #-0
    8548:	000a6d07 	andeq	r6, sl, r7, lsl #26
    854c:	2f9a0300 	svccs	0x009a0300
    8550:	91010000 	mrsls	r0, (UNDEF: 1)
    8554:	08005b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, lr}
    8558:	00000050 	andeq	r0, r0, r0, asr r0
    855c:	008f9c01 	addeq	r9, pc, r1, lsl #24
    8560:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    8564:	0100002f 	tsteq	r0, pc, lsr #32
    8568:	00008f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    856c:	2fa80500 	svccs	0x00a80500
    8570:	93010000 	movwls	r0, #4096	; 0x1000
    8574:	0000008f 	andeq	r0, r0, pc, lsl #1
    8578:	000050c5 	andeq	r5, r0, r5, asr #1
    857c:	005b7e06 	subseq	r7, fp, r6, lsl #28
    8580:	00010008 	andeq	r0, r1, r8
    8584:	04070000 	streq	r0, [r7], #-0
    8588:	0000003a 	andeq	r0, r0, sl, lsr r0
    858c:	002fb008 	eoreq	fp, pc, r8
    8590:	3a190100 	bcc	648998 <__Stack_Size+0x648598>
    8594:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8598:	00002f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    859c:	003a1b01 	eorseq	r1, sl, r1, lsl #22
    85a0:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    85a4:	0100002f 	tsteq	r0, pc, lsr #32
    85a8:	00003a1d 	andeq	r3, r0, sp, lsl sl
    85ac:	2ffe0800 	svccs	0x00fe0800
    85b0:	20010000 	andcs	r0, r1, r0
    85b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    85b8:	002fb808 	eoreq	fp, pc, r8, lsl #16
    85bc:	3a220100 	bcc	8889c4 <__Stack_Size+0x8885c4>
    85c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    85c4:	00002f8b 	andeq	r2, r0, fp, lsl #31
    85c8:	e30a2501 	movw	r2, #42241	; 0xa501
    85cc:	e3000000 	movw	r0, #0
    85d0:	0b000000 	bleq	85d8 <__Stack_Size+0x81d8>
    85d4:	0000004f 	andeq	r0, r0, pc, asr #32
    85d8:	0407004c 	streq	r0, [r7], #-76	; 0x4c
    85dc:	000000e9 	andeq	r0, r0, r9, ror #1
    85e0:	2fea0d0c 	svccs	0x00ea0d0c
    85e4:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    85e8:	000000fb 	strdeq	r0, [r0], -fp
    85ec:	30000305 	andcc	r0, r0, r5, lsl #6
    85f0:	d30e0800 	movwle	r0, #59392	; 0xe800
    85f4:	0f000000 	svceq	0x00000000
    85f8:	00000c94 	muleq	r0, r4, ip
    85fc:	010b2c01 	tsteq	fp, r1, lsl #24
    8600:	04100000 	ldreq	r0, [r0], #-0
    8604:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	08030016 	stmdaeq	r3, {r1, r2, r4}
      18:	0b3b0b3a 	bleq	ec2d08 <__Stack_Size+0xec2908>
      1c:	00001349 	andeq	r1, r0, r9, asr #6
      20:	0b002403 	bleq	9034 <__Stack_Size+0x8c34>
      24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      28:	0400000e 	streq	r0, [r0], #-14
      2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      30:	0b3b0b3a 	bleq	ec2d20 <__Stack_Size+0xec2920>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      40:	0b0b0104 	bleq	2c0458 <__Stack_Size+0x2c0058>
      44:	0b3b0b3a 	bleq	ec2d34 <__Stack_Size+0xec2934>
      48:	00001301 	andeq	r1, r0, r1, lsl #6
      4c:	03002807 	movweq	r2, #2055	; 0x807
      50:	000d1c0e 	andeq	r1, sp, lr, lsl #24
      54:	00280800 	eoreq	r0, r8, r0, lsl #16
      58:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
      5c:	13090000 	movwne	r0, #36864	; 0x9000
      60:	3a0b0b01 	bcc	2c2c6c <__Stack_Size+0x2c286c>
      64:	01053b0b 	tsteq	r5, fp, lsl #22
      68:	0a000013 	beq	bc <_Minimum_Stack_Size-0x44>
      6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      74:	0b381349 	bleq	e04da0 <__Stack_Size+0xe049a0>
      78:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      7c:	3a0e0300 	bcc	380c84 <__Stack_Size+0x380884>
      80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      84:	000b3813 	andeq	r3, fp, r3, lsl r8
      88:	00160c00 	andseq	r0, r6, r0, lsl #24
      8c:	0b3a0e03 	bleq	e838a0 <__Stack_Size+0xe834a0>
      90:	1349053b 	movtne	r0, #38203	; 0x953b
      94:	130d0000 	movwne	r0, #53248	; 0xd000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c28a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2998>
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe049d8>
      b0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
      b4:	03193f01 	tsteq	r9, #1, 30
      b8:	3b0b3a0e 	blcc	2ce8f8 <__Stack_Size+0x2ce4f8>
      bc:	11192705 	tstne	r9, r5, lsl #14
      c0:	40061201 	andmi	r1, r6, r1, lsl #4
      c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      c8:	00001301 	andeq	r1, r0, r1, lsl #6
      cc:	03000510 	movweq	r0, #1296	; 0x510
      d0:	3b0b3a0e 	blcc	2ce910 <__Stack_Size+0x2ce510>
      d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
      d8:	11000017 	tstne	r0, r7, lsl r0
      dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      e4:	00001349 	andeq	r1, r0, r9, asr #6
      e8:	01828912 	orreq	r8, r2, r2, lsl r9
      ec:	31011101 	tstcc	r1, r1, lsl #2
      f0:	00130113 	andseq	r0, r3, r3, lsl r1
      f4:	828a1300 	addhi	r1, sl, #0, 6
      f8:	18020001 	stmdane	r2, {r0}
      fc:	00184291 	mulseq	r8, r1, r2
     100:	82891400 	addhi	r1, r9, #0, 8
     104:	01110001 	tsteq	r1, r1
     108:	31194295 			; <UNDEFINED> instruction: 0x31194295
     10c:	15000013 	strne	r0, [r0, #-19]
     110:	0b0b000f 	bleq	2c0154 <__Stack_Size+0x2bfd54>
     114:	00001349 	andeq	r1, r0, r9, asr #6
     118:	0b002416 	bleq	9178 <__Stack_Size+0x8d78>
     11c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     120:	17000008 	strne	r0, [r0, -r8]
     124:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     128:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     12c:	17021349 	strne	r1, [r2, -r9, asr #6]
     130:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
     134:	11000182 	smlabbne	r0, r2, r1, r0
     138:	00133101 	andseq	r3, r3, r1, lsl #2
     13c:	82891900 	addhi	r1, r9, #0, 18
     140:	01110101 	tsteq	r1, r1, lsl #2
     144:	31194295 			; <UNDEFINED> instruction: 0x31194295
     148:	00130113 	andseq	r0, r3, r3, lsl r1
     14c:	00341a00 	eorseq	r1, r4, r0, lsl #20
     150:	0b3a0e03 	bleq	e83964 <__Stack_Size+0xe83564>
     154:	1349053b 	movtne	r0, #38203	; 0x953b
     158:	00001802 	andeq	r1, r0, r2, lsl #16
     15c:	0182891b 	orreq	r8, r2, fp, lsl r9
     160:	31011101 	tstcc	r1, r1, lsl #2
     164:	1c000013 	stcne	0, cr0, [r0], {19}
     168:	01018289 	smlabbeq	r1, r9, r2, r8
     16c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     170:	00133119 	andseq	r3, r3, r9, lsl r1
     174:	002e1d00 	eoreq	r1, lr, r0, lsl #26
     178:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     17c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     180:	01111927 	tsteq	r1, r7, lsr #18
     184:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     188:	00194297 	mulseq	r9, r7, r2
     18c:	002e1e00 	eoreq	r1, lr, r0, lsl #28
     190:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     194:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     198:	13491927 	movtne	r1, #39207	; 0x9927
     19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1a4:	1f000019 	svcne	0x00000019
     1a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1ac:	0b3a0e03 	bleq	e839c0 <__Stack_Size+0xe835c0>
     1b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     1b4:	01111349 	tsteq	r1, r9, asr #6
     1b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     1c0:	20000013 	andcs	r0, r0, r3, lsl r0
     1c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1c8:	0b3a0e03 	bleq	e839dc <__Stack_Size+0xe835dc>
     1cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1d8:	00130119 	andseq	r0, r3, r9, lsl r1
     1dc:	00052100 	andeq	r2, r5, r0, lsl #2
     1e0:	0b3a0803 	bleq	e821f4 <__Stack_Size+0xe81df4>
     1e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1e8:	00001702 	andeq	r1, r0, r2, lsl #14
     1ec:	03003422 	movweq	r3, #1058	; 0x422
     1f0:	3b0b3a0e 	blcc	2cea30 <__Stack_Size+0x2ce630>
     1f4:	0013490b 	andseq	r4, r3, fp, lsl #18
     1f8:	00052300 	andeq	r2, r5, r0, lsl #6
     1fc:	0b3a0e03 	bleq	e83a10 <__Stack_Size+0xe83610>
     200:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     204:	00001702 	andeq	r1, r0, r2, lsl #14
     208:	03003424 	movweq	r3, #1060	; 0x424
     20c:	3b0b3a0e 	blcc	2cea4c <__Stack_Size+0x2ce64c>
     210:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     214:	25000017 	strcs	r0, [r0, #-23]
     218:	08030034 	stmdaeq	r3, {r2, r4, r5}
     21c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     220:	17021349 	strne	r1, [r2, -r9, asr #6]
     224:	34260000 	strtcc	r0, [r6], #-0
     228:	3a0e0300 	bcc	380e30 <__Stack_Size+0x380a30>
     22c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     230:	000b1c13 	andeq	r1, fp, r3, lsl ip
     234:	00052700 	andeq	r2, r5, r0, lsl #14
     238:	0b3a0e03 	bleq	e83a4c <__Stack_Size+0xe8364c>
     23c:	1349053b 	movtne	r0, #38203	; 0x953b
     240:	00001802 	andeq	r1, r0, r2, lsl #16
     244:	49010128 	stmdbmi	r1, {r3, r5, r8}
     248:	00130113 	andseq	r0, r3, r3, lsl r1
     24c:	00212900 	eoreq	r2, r1, r0, lsl #18
     250:	0b2f1349 	bleq	bc4f7c <__Stack_Size+0xbc4b7c>
     254:	342a0000 	strtcc	r0, [sl], #-0
     258:	3a0e0300 	bcc	380e60 <__Stack_Size+0x380a60>
     25c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     260:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     264:	2b000018 	blcs	2cc <_Minimum_Stack_Size+0x1cc>
     268:	08030034 	stmdaeq	r3, {r2, r4, r5}
     26c:	0b3b0b3a 	bleq	ec2f5c <__Stack_Size+0xec2b5c>
     270:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     274:	00001802 	andeq	r1, r0, r2, lsl #16
     278:	3f012e2c 	svccc	0x00012e2c
     27c:	3a0e0319 	bcc	380ee8 <__Stack_Size+0x380ae8>
     280:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     284:	3c134919 	ldccc	9, cr4, [r3], {25}
     288:	00130119 	andseq	r0, r3, r9, lsl r1
     28c:	00052d00 	andeq	r2, r5, r0, lsl #26
     290:	00001349 	andeq	r1, r0, r9, asr #6
     294:	3f002e2e 	svccc	0x00002e2e
     298:	3a0e0319 	bcc	380f04 <__Stack_Size+0x380b04>
     29c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2a0:	3c134919 	ldccc	9, cr4, [r3], {25}
     2a4:	2f000019 	svccs	0x00000019
     2a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     2ac:	0b3a0e03 	bleq	e83ac0 <__Stack_Size+0xe836c0>
     2b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2b4:	0000193c 	andeq	r1, r0, ip, lsr r9
     2b8:	3f012e30 	svccc	0x00012e30
     2bc:	3a0e0319 	bcc	380f28 <__Stack_Size+0x380b28>
     2c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2c4:	01193c19 	tsteq	r9, r9, lsl ip
     2c8:	31000013 	tstcc	r0, r3, lsl r0
     2cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     2d0:	0b3a0e03 	bleq	e83ae4 <__Stack_Size+0xe836e4>
     2d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     2d8:	1301193c 	movwne	r1, #6460	; 0x193c
     2dc:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
     2e0:	03193f01 	tsteq	r9, #1, 30
     2e4:	3b0b3a0e 	blcc	2ceb24 <__Stack_Size+0x2ce724>
     2e8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     2ec:	01193c13 	tsteq	r9, r3, lsl ip
     2f0:	33000013 	movwcc	r0, #19
     2f4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     2f8:	0b3a0e03 	bleq	e83b0c <__Stack_Size+0xe8370c>
     2fc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     300:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     304:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
     308:	03193f01 	tsteq	r9, #1, 30
     30c:	3b0b3a0e 	blcc	2ceb4c <__Stack_Size+0x2ce74c>
     310:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     314:	00193c13 	andseq	r3, r9, r3, lsl ip
     318:	11010000 	mrsne	r0, (UNDEF: 1)
     31c:	130e2501 	movwne	r2, #58625	; 0xe501
     320:	1b0e030b 	blne	380f54 <__Stack_Size+0x380b54>
     324:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     328:	00171006 	andseq	r1, r7, r6
     32c:	002e0200 	eoreq	r0, lr, r0, lsl #4
     330:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     334:	0b3b0b3a 	bleq	ec3024 <__Stack_Size+0xec2c24>
     338:	01111927 	tsteq	r1, r7, lsr #18
     33c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     340:	00194297 	mulseq	r9, r7, r2
     344:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
     348:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     34c:	0b3b0b3a 	bleq	ec303c <__Stack_Size+0xec2c3c>
     350:	01111927 	tsteq	r1, r7, lsr #18
     354:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     358:	01194297 			; <UNDEFINED> instruction: 0x01194297
     35c:	04000013 	streq	r0, [r0], #-19
     360:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     364:	0b3a0e03 	bleq	e83b78 <__Stack_Size+0xe83778>
     368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     36c:	1301193c 	movwne	r1, #6460	; 0x193c
     370:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     374:	06000000 	streq	r0, [r0], -r0
     378:	00018289 	andeq	r8, r1, r9, lsl #5
     37c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     380:	00133119 	andseq	r3, r3, r9, lsl r1
     384:	00240700 	eoreq	r0, r4, r0, lsl #14
     388:	0b3e0b0b 	bleq	f82fbc <__Stack_Size+0xf82bbc>
     38c:	00000803 	andeq	r0, r0, r3, lsl #16
     390:	3f002e08 	svccc	0x00002e08
     394:	3a0e0319 	bcc	381000 <__Stack_Size+0x380c00>
     398:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     39c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3a0:	97184006 	ldrls	r4, [r8, -r6]
     3a4:	00001942 	andeq	r1, r0, r2, asr #18
     3a8:	3f012e09 	svccc	0x00012e09
     3ac:	3a0e0319 	bcc	381018 <__Stack_Size+0x380c18>
     3b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     3b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3b8:	97184006 	ldrls	r4, [r8, -r6]
     3bc:	13011942 	movwne	r1, #6466	; 0x1942
     3c0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     3c4:	03193f01 	tsteq	r9, #1, 30
     3c8:	3b0b3a0e 	blcc	2cec08 <__Stack_Size+0x2ce808>
     3cc:	3c134905 	ldccc	9, cr4, [r3], {5}
     3d0:	00130119 	andseq	r0, r3, r9, lsl r1
     3d4:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
     3d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3e0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     3e4:	01000000 	mrseq	r0, (UNDEF: 0)
     3e8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     3ec:	0e030b13 	vmoveq.32	d3[0], r0
     3f0:	01110e1b 	tsteq	r1, fp, lsl lr
     3f4:	17100612 			; <UNDEFINED> instruction: 0x17100612
     3f8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     3fc:	03193f01 	tsteq	r9, #1, 30
     400:	3b0b3a0e 	blcc	2cec40 <__Stack_Size+0x2ce840>
     404:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     408:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     40c:	97184006 	ldrls	r4, [r8, -r6]
     410:	13011942 	movwne	r1, #6466	; 0x1942
     414:	05030000 	streq	r0, [r3, #-0]
     418:	3a0e0300 	bcc	381020 <__Stack_Size+0x380c20>
     41c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     420:	00170213 	andseq	r0, r7, r3, lsl r2
     424:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
     428:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     42c:	0b3b0b3a 	bleq	ec311c <__Stack_Size+0xec2d1c>
     430:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     434:	00001301 	andeq	r1, r0, r1, lsl #6
     438:	00001805 	andeq	r1, r0, r5, lsl #16
     43c:	82890600 	addhi	r0, r9, #0, 12
     440:	01110101 	tsteq	r1, r1, lsl #2
     444:	00001331 	andeq	r1, r0, r1, lsr r3
     448:	01828a07 	orreq	r8, r2, r7, lsl #20
     44c:	91180200 	tstls	r8, r0, lsl #4
     450:	00001842 	andeq	r1, r0, r2, asr #16
     454:	0b002408 	bleq	947c <__Stack_Size+0x907c>
     458:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     45c:	09000008 	stmdbeq	r0, {r3}
     460:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     464:	0b3a0e03 	bleq	e83c78 <__Stack_Size+0xe83878>
     468:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     46c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     470:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     474:	00130119 	andseq	r0, r3, r9, lsl r1
     478:	82890a00 	addhi	r0, r9, #0, 20
     47c:	01110001 	tsteq	r1, r1
     480:	31194295 			; <UNDEFINED> instruction: 0x31194295
     484:	0b000013 	bleq	4d8 <__Stack_Size+0xd8>
     488:	08030034 	stmdaeq	r3, {r2, r4, r5}
     48c:	0b3b0b3a 	bleq	ec317c <__Stack_Size+0xec2d7c>
     490:	17021349 	strne	r1, [r2, -r9, asr #6]
     494:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     498:	11000182 	smlabbne	r0, r2, r1, r0
     49c:	00133101 	andseq	r3, r3, r1, lsl #2
     4a0:	000f0d00 	andeq	r0, pc, r0, lsl #26
     4a4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     4a8:	240e0000 	strcs	r0, [lr], #-0
     4ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     4b0:	000e030b 	andeq	r0, lr, fp, lsl #6
     4b4:	010b0f00 	tsteq	fp, r0, lsl #30
     4b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4bc:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
     4c0:	11010182 	smlabbne	r1, r2, r1, r0
     4c4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     4c8:	00001331 	andeq	r1, r0, r1, lsr r3
     4cc:	3f012e11 	svccc	0x00012e11
     4d0:	3a0e0319 	bcc	38113c <__Stack_Size+0x380d3c>
     4d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d8:	00193c13 	andseq	r3, r9, r3, lsl ip
     4dc:	11010000 	mrsne	r0, (UNDEF: 1)
     4e0:	130e2501 	movwne	r2, #58625	; 0xe501
     4e4:	1b0e030b 	blne	381118 <__Stack_Size+0x380d18>
     4e8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     4ec:	00171006 	andseq	r1, r7, r6
     4f0:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
     4f4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4f8:	0b3b0b3a 	bleq	ec31e8 <__Stack_Size+0xec2de8>
     4fc:	0b201927 	bleq	8069a0 <__Stack_Size+0x8065a0>
     500:	00001301 	andeq	r1, r0, r1, lsl #6
     504:	03003403 	movweq	r3, #1027	; 0x403
     508:	3b0b3a08 	blcc	2ced30 <__Stack_Size+0x2ce930>
     50c:	0013490b 	andseq	r4, r3, fp, lsl #18
     510:	00340400 	eorseq	r0, r4, r0, lsl #8
     514:	0b3a0e03 	bleq	e83d28 <__Stack_Size+0xe83928>
     518:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     51c:	24050000 	strcs	r0, [r5], #-0
     520:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     524:	000e030b 	andeq	r0, lr, fp, lsl #6
     528:	002e0600 	eoreq	r0, lr, r0, lsl #12
     52c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     530:	0b3b0b3a 	bleq	ec3220 <__Stack_Size+0xec2e20>
     534:	0b201927 	bleq	8069d8 <__Stack_Size+0x8065d8>
     538:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     53c:	03193f01 	tsteq	r9, #1, 30
     540:	3b0b3a0e 	blcc	2ced80 <__Stack_Size+0x2ce980>
     544:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     548:	010b2013 	tsteq	fp, r3, lsl r0
     54c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     550:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     554:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     558:	00001349 	andeq	r1, r0, r9, asr #6
     55c:	03003409 	movweq	r3, #1033	; 0x409
     560:	3b0b3a0e 	blcc	2ceda0 <__Stack_Size+0x2ce9a0>
     564:	00134905 	andseq	r4, r3, r5, lsl #18
     568:	00240a00 	eoreq	r0, r4, r0, lsl #20
     56c:	0b3e0b0b 	bleq	f831a0 <__Stack_Size+0xf82da0>
     570:	00000803 	andeq	r0, r0, r3, lsl #16
     574:	3f012e0b 	svccc	0x00012e0b
     578:	3a0e0319 	bcc	3811e4 <__Stack_Size+0x380de4>
     57c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     580:	11134919 	tstne	r3, r9, lsl r9
     584:	40061201 	andmi	r1, r6, r1, lsl #4
     588:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     58c:	00001301 	andeq	r1, r0, r1, lsl #6
     590:	0300050c 	movweq	r0, #1292	; 0x50c
     594:	3b0b3a0e 	blcc	2cedd4 <__Stack_Size+0x2ce9d4>
     598:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     59c:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
     5a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5a4:	0b3b0b3a 	bleq	ec3294 <__Stack_Size+0xec2e94>
     5a8:	17021349 	strne	r1, [r2, -r9, asr #6]
     5ac:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
     5b0:	11010182 	smlabbne	r1, r2, r1, r0
     5b4:	00133101 	andseq	r3, r3, r1, lsl #2
     5b8:	828a0f00 	addhi	r0, sl, #0, 30
     5bc:	18020001 	stmdane	r2, {r0}
     5c0:	00184291 	mulseq	r8, r1, r2
     5c4:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
     5c8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5cc:	0b3b0b3a 	bleq	ec32bc <__Stack_Size+0xec2ebc>
     5d0:	01111927 	tsteq	r1, r7, lsr #18
     5d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     5d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     5dc:	11000013 	tstne	r0, r3, lsl r0
     5e0:	00018289 	andeq	r8, r1, r9, lsl #5
     5e4:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     5e8:	00133119 	andseq	r3, r3, r9, lsl r1
     5ec:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
     5f0:	01111331 	tsteq	r1, r1, lsr r3
     5f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     5f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     5fc:	13000013 	movwne	r0, #19
     600:	13310034 	teqne	r1, #52	; 0x34
     604:	00001702 	andeq	r1, r0, r2, lsl #14
     608:	31003414 	tstcc	r0, r4, lsl r4
     60c:	15000013 	strne	r0, [r0, #-19]
     610:	0111010b 	tsteq	r1, fp, lsl #2
     614:	13010612 	movwne	r0, #5650	; 0x1612
     618:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     61c:	11010182 	smlabbne	r1, r2, r1, r0
     620:	01133101 	tsteq	r3, r1, lsl #2
     624:	17000013 	smladne	r0, r3, r0, r0
     628:	00018289 	andeq	r8, r1, r9, lsl #5
     62c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     630:	34180000 	ldrcc	r0, [r8], #-0
     634:	1c133100 	ldfnes	f3, [r3], {-0}
     638:	1900000b 	stmdbne	r0, {r0, r1, r3}
     63c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     640:	00001301 	andeq	r1, r0, r1, lsl #6
     644:	3f002e1a 	svccc	0x00002e1a
     648:	3a0e0319 	bcc	3812b4 <__Stack_Size+0x380eb4>
     64c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     650:	11134919 	tstne	r3, r9, lsl r9
     654:	40061201 	andmi	r1, r6, r1, lsl #4
     658:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     65c:	051b0000 	ldreq	r0, [fp, #-0]
     660:	3a080300 	bcc	201268 <__Stack_Size+0x200e68>
     664:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     668:	00180213 	andseq	r0, r8, r3, lsl r2
     66c:	00051c00 	andeq	r1, r5, r0, lsl #24
     670:	0b3a0e03 	bleq	e83e84 <__Stack_Size+0xe83a84>
     674:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     678:	00001802 	andeq	r1, r0, r2, lsl #16
     67c:	3f002e1d 	svccc	0x00002e1d
     680:	3a0e0319 	bcc	3812ec <__Stack_Size+0x380eec>
     684:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     688:	11134919 	tstne	r3, r9, lsl r9
     68c:	40061201 	andmi	r1, r6, r1, lsl #4
     690:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     694:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     698:	03193f01 	tsteq	r9, #1, 30
     69c:	3b0b3a0e 	blcc	2ceedc <__Stack_Size+0x2ceadc>
     6a0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     6a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6a8:	97184006 	ldrls	r4, [r8, -r6]
     6ac:	13011942 	movwne	r1, #6466	; 0x1942
     6b0:	051f0000 	ldreq	r0, [pc, #-0]	; 6b8 <__Stack_Size+0x2b8>
     6b4:	3a0e0300 	bcc	3812bc <__Stack_Size+0x380ebc>
     6b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6bc:	00170213 	andseq	r0, r7, r3, lsl r2
     6c0:	00052000 	andeq	r2, r5, r0
     6c4:	17021331 	smladxne	r2, r1, r3, r1
     6c8:	05210000 	streq	r0, [r1, #-0]!
     6cc:	02133100 	andseq	r3, r3, #0, 2
     6d0:	22000018 	andcs	r0, r0, #24
     6d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6d8:	0b3a0e03 	bleq	e83eec <__Stack_Size+0xe83aec>
     6dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6e8:	00130119 	andseq	r0, r3, r9, lsl r1
     6ec:	00052300 	andeq	r2, r5, r0, lsl #6
     6f0:	0b3a0803 	bleq	e82704 <__Stack_Size+0xe82304>
     6f4:	1349053b 	movtne	r0, #38203	; 0x953b
     6f8:	00001702 	andeq	r1, r0, r2, lsl #14
     6fc:	31011d24 	tstcc	r1, r4, lsr #26
     700:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     704:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     708:	00130105 	andseq	r0, r3, r5, lsl #2
     70c:	010b2500 	tsteq	fp, r0, lsl #10
     710:	06120111 			; <UNDEFINED> instruction: 0x06120111
     714:	05260000 	streq	r0, [r6, #-0]!
     718:	00133100 	andseq	r3, r3, r0, lsl #2
     71c:	01012700 	tsteq	r1, r0, lsl #14
     720:	13011349 	movwne	r1, #4937	; 0x1349
     724:	21280000 			; <UNDEFINED> instruction: 0x21280000
     728:	2f134900 	svccs	0x00134900
     72c:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     730:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     734:	0b3b0b3a 	bleq	ec3424 <__Stack_Size+0xec3024>
     738:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     73c:	00001802 	andeq	r1, r0, r2, lsl #16
     740:	3f012e2a 	svccc	0x00012e2a
     744:	3a0e0319 	bcc	3813b0 <__Stack_Size+0x380fb0>
     748:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     74c:	3c134919 	ldccc	9, cr4, [r3], {25}
     750:	00130119 	andseq	r0, r3, r9, lsl r1
     754:	00052b00 	andeq	r2, r5, r0, lsl #22
     758:	00001349 	andeq	r1, r0, r9, asr #6
     75c:	3f002e2c 	svccc	0x00002e2c
     760:	3a0e0319 	bcc	3813cc <__Stack_Size+0x380fcc>
     764:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     768:	00193c19 	andseq	r3, r9, r9, lsl ip
     76c:	000f2d00 	andeq	r2, pc, r0, lsl #26
     770:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     774:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     778:	03193f01 	tsteq	r9, #1, 30
     77c:	3b0b3a0e 	blcc	2cefbc <__Stack_Size+0x2cebbc>
     780:	3c19270b 	ldccc	7, cr2, [r9], {11}
     784:	00130119 	andseq	r0, r3, r9, lsl r1
     788:	002e2f00 	eoreq	r2, lr, r0, lsl #30
     78c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     790:	0b3b0b3a 	bleq	ec3480 <__Stack_Size+0xec3080>
     794:	13491927 	movtne	r1, #39207	; 0x9927
     798:	0000193c 	andeq	r1, r0, ip, lsr r9
     79c:	01110100 	tsteq	r1, r0, lsl #2
     7a0:	0b130e25 	bleq	4c403c <__Stack_Size+0x4c3c3c>
     7a4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     7a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7ac:	00001710 	andeq	r1, r0, r0, lsl r7
     7b0:	0b002402 	bleq	97c0 <__Stack_Size+0x93c0>
     7b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7b8:	0300000e 	movweq	r0, #14
     7bc:	08030016 	stmdaeq	r3, {r1, r2, r4}
     7c0:	0b3b0b3a 	bleq	ec34b0 <__Stack_Size+0xec30b0>
     7c4:	00001349 	andeq	r1, r0, r9, asr #6
     7c8:	03001604 	movweq	r1, #1540	; 0x604
     7cc:	3b0b3a0e 	blcc	2cf00c <__Stack_Size+0x2cec0c>
     7d0:	0013490b 	andseq	r4, r3, fp, lsl #18
     7d4:	00350500 	eorseq	r0, r5, r0, lsl #10
     7d8:	00001349 	andeq	r1, r0, r9, asr #6
     7dc:	0b010406 	bleq	417fc <__Stack_Size+0x413fc>
     7e0:	3b0b3a0b 	blcc	2cf014 <__Stack_Size+0x2cec14>
     7e4:	0013010b 	andseq	r0, r3, fp, lsl #2
     7e8:	00280700 	eoreq	r0, r8, r0, lsl #14
     7ec:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     7f0:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     7f4:	1c080300 	stcne	3, cr0, [r8], {-0}
     7f8:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     7fc:	0b0b0113 	bleq	2c0c50 <__Stack_Size+0x2c0850>
     800:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     804:	00001301 	andeq	r1, r0, r1, lsl #6
     808:	03000d0a 	movweq	r0, #3338	; 0xd0a
     80c:	3b0b3a08 	blcc	2cf034 <__Stack_Size+0x2cec34>
     810:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     814:	0b00000b 	bleq	848 <__Stack_Size+0x448>
     818:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     81c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     820:	0b381349 	bleq	e0554c <__Stack_Size+0xe0514c>
     824:	160c0000 	strne	r0, [ip], -r0
     828:	3a0e0300 	bcc	381430 <__Stack_Size+0x381030>
     82c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     830:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     834:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     838:	0b3a0e03 	bleq	e8404c <__Stack_Size+0xe83c4c>
     83c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     840:	0b201349 	bleq	80556c <__Stack_Size+0x80516c>
     844:	00001301 	andeq	r1, r0, r1, lsl #6
     848:	0300340e 	movweq	r3, #1038	; 0x40e
     84c:	3b0b3a0e 	blcc	2cf08c <__Stack_Size+0x2cec8c>
     850:	00134905 	andseq	r4, r3, r5, lsl #18
     854:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
     858:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     85c:	0b3b0b3a 	bleq	ec354c <__Stack_Size+0xec314c>
     860:	01111927 	tsteq	r1, r7, lsr #18
     864:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     868:	01194297 			; <UNDEFINED> instruction: 0x01194297
     86c:	10000013 	andne	r0, r0, r3, lsl r0
     870:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     874:	0b3b0b3a 	bleq	ec3564 <__Stack_Size+0xec3164>
     878:	17021349 	strne	r1, [r2, -r9, asr #6]
     87c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     880:	03193f00 	tsteq	r9, #0, 30
     884:	3b0b3a0e 	blcc	2cf0c4 <__Stack_Size+0x2cecc4>
     888:	1119270b 	tstne	r9, fp, lsl #14
     88c:	40061201 	andmi	r1, r6, r1, lsl #4
     890:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     894:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     898:	03193f00 	tsteq	r9, #0, 30
     89c:	3b0b3a0e 	blcc	2cf0dc <__Stack_Size+0x2cecdc>
     8a0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     8a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     8a8:	97184006 	ldrls	r4, [r8, -r6]
     8ac:	00001942 	andeq	r1, r0, r2, asr #18
     8b0:	3f012e13 	svccc	0x00012e13
     8b4:	3a0e0319 	bcc	381520 <__Stack_Size+0x381120>
     8b8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     8bc:	11134919 	tstne	r3, r9, lsl r9
     8c0:	40061201 	andmi	r1, r6, r1, lsl #4
     8c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8c8:	00001301 	andeq	r1, r0, r1, lsl #6
     8cc:	03003414 	movweq	r3, #1044	; 0x414
     8d0:	3b0b3a0e 	blcc	2cf110 <__Stack_Size+0x2ced10>
     8d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     8d8:	15000017 	strne	r0, [r0, #-23]
     8dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8e0:	0b3a0e03 	bleq	e840f4 <__Stack_Size+0xe83cf4>
     8e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8f0:	00130119 	andseq	r0, r3, r9, lsl r1
     8f4:	00051600 	andeq	r1, r5, r0, lsl #12
     8f8:	0b3a0e03 	bleq	e8410c <__Stack_Size+0xe83d0c>
     8fc:	1349053b 	movtne	r0, #38203	; 0x953b
     900:	00001702 	andeq	r1, r0, r2, lsl #14
     904:	03000517 	movweq	r0, #1303	; 0x517
     908:	3b0b3a0e 	blcc	2cf148 <__Stack_Size+0x2ced48>
     90c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     910:	18000018 	stmdane	r0, {r3, r4}
     914:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     918:	06120111 			; <UNDEFINED> instruction: 0x06120111
     91c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     920:	00130119 	andseq	r0, r3, r9, lsl r1
     924:	00341900 	eorseq	r1, r4, r0, lsl #18
     928:	17021331 	smladxne	r2, r1, r3, r1
     92c:	0b1a0000 	bleq	680934 <__Stack_Size+0x680534>
     930:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     934:	1b000006 	blne	954 <__Stack_Size+0x554>
     938:	13310034 	teqne	r1, #52	; 0x34
     93c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     940:	3a0e0301 	bcc	38154c <__Stack_Size+0x38114c>
     944:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     948:	010b2019 	tsteq	fp, r9, lsl r0
     94c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     950:	08030034 	stmdaeq	r3, {r2, r4, r5}
     954:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     958:	00001349 	andeq	r1, r0, r9, asr #6
     95c:	31011d1e 	tstcc	r1, lr, lsl sp
     960:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     964:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     968:	00130105 	andseq	r0, r3, r5, lsl #2
     96c:	00341f00 	eorseq	r1, r4, r0, lsl #30
     970:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     974:	89200000 	stmdbhi	r0!, {}	; <UNPREDICTABLE>
     978:	11000182 	smlabbne	r0, r2, r1, r0
     97c:	00133101 	andseq	r3, r3, r1, lsl #2
     980:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     984:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     988:	0b3b0b3a 	bleq	ec3678 <__Stack_Size+0xec3278>
     98c:	13491927 	movtne	r1, #39207	; 0x9927
     990:	06120111 			; <UNDEFINED> instruction: 0x06120111
     994:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     998:	00130119 	andseq	r0, r3, r9, lsl r1
     99c:	00342200 	eorseq	r2, r4, r0, lsl #4
     9a0:	0b3a0e03 	bleq	e841b4 <__Stack_Size+0xe83db4>
     9a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9a8:	00001702 	andeq	r1, r0, r2, lsl #14
     9ac:	01828923 	orreq	r8, r2, r3, lsr #18
     9b0:	31011101 	tstcc	r1, r1, lsl #2
     9b4:	00130113 	andseq	r0, r3, r3, lsl r1
     9b8:	828a2400 	addhi	r2, sl, #0, 8
     9bc:	18020001 	stmdane	r2, {r0}
     9c0:	00184291 	mulseq	r8, r1, r2
     9c4:	82892500 	addhi	r2, r9, #0, 10
     9c8:	01110101 	tsteq	r1, r1, lsl #2
     9cc:	00001331 	andeq	r1, r0, r1, lsr r3
     9d0:	3f012e26 	svccc	0x00012e26
     9d4:	3a0e0319 	bcc	381640 <__Stack_Size+0x381240>
     9d8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9dc:	11134919 	tstne	r3, r9, lsl r9
     9e0:	40061201 	andmi	r1, r6, r1, lsl #4
     9e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     9e8:	01000000 	mrseq	r0, (UNDEF: 0)
     9ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     9f0:	0e030b13 	vmoveq.32	d3[0], r0
     9f4:	01110e1b 	tsteq	r1, fp, lsl lr
     9f8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     9fc:	24020000 	strcs	r0, [r2], #-0
     a00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a04:	000e030b 	andeq	r0, lr, fp, lsl #6
     a08:	00160300 	andseq	r0, r6, r0, lsl #6
     a0c:	0b3a0803 	bleq	e82a20 <__Stack_Size+0xe82620>
     a10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a14:	16040000 	strne	r0, [r4], -r0
     a18:	3a0e0300 	bcc	381620 <__Stack_Size+0x381220>
     a1c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a20:	05000013 	streq	r0, [r0, #-19]
     a24:	13490035 	movtne	r0, #36917	; 0x9035
     a28:	04060000 	streq	r0, [r6], #-0
     a2c:	3a0b0b01 	bcc	2c3638 <__Stack_Size+0x2c3238>
     a30:	010b3b0b 	tsteq	fp, fp, lsl #22
     a34:	07000013 	smladeq	r0, r3, r0, r0
     a38:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     a3c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     a40:	0b011308 	bleq	45668 <__Stack_Size+0x45268>
     a44:	3b0b3a0b 	blcc	2cf278 <__Stack_Size+0x2cee78>
     a48:	00130105 	andseq	r0, r3, r5, lsl #2
     a4c:	000d0900 	andeq	r0, sp, r0, lsl #18
     a50:	0b3a0803 	bleq	e82a64 <__Stack_Size+0xe82664>
     a54:	1349053b 	movtne	r0, #38203	; 0x953b
     a58:	00000b38 	andeq	r0, r0, r8, lsr fp
     a5c:	03000d0a 	movweq	r0, #3338	; 0xd0a
     a60:	3b0b3a0e 	blcc	2cf2a0 <__Stack_Size+0x2ceea0>
     a64:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     a68:	0b00000b 	bleq	a9c <__Stack_Size+0x69c>
     a6c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     a70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a74:	00001349 	andeq	r1, r0, r9, asr #6
     a78:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     a7c:	00130113 	andseq	r0, r3, r3, lsl r1
     a80:	00210d00 	eoreq	r0, r1, r0, lsl #26
     a84:	0b2f1349 	bleq	bc57b0 <__Stack_Size+0xbc53b0>
     a88:	130e0000 	movwne	r0, #57344	; 0xe000
     a8c:	3a0b0b01 	bcc	2c3698 <__Stack_Size+0x2c3298>
     a90:	010b3b0b 	tsteq	fp, fp, lsl #22
     a94:	0f000013 	svceq	0x00000013
     a98:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a9c:	0b3b0b3a 	bleq	ec378c <__Stack_Size+0xec338c>
     aa0:	0b381349 	bleq	e057cc <__Stack_Size+0xe053cc>
     aa4:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     aa8:	03193f01 	tsteq	r9, #1, 30
     aac:	3b0b3a0e 	blcc	2cf2ec <__Stack_Size+0x2ceeec>
     ab0:	1119270b 	tstne	r9, fp, lsl #14
     ab4:	40061201 	andmi	r1, r6, r1, lsl #4
     ab8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     abc:	00001301 	andeq	r1, r0, r1, lsl #6
     ac0:	03000511 	movweq	r0, #1297	; 0x511
     ac4:	3b0b3a0e 	blcc	2cf304 <__Stack_Size+0x2cef04>
     ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     acc:	12000017 	andne	r0, r0, #23
     ad0:	01018289 	smlabbeq	r1, r9, r2, r8
     ad4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ad8:	00001301 	andeq	r1, r0, r1, lsl #6
     adc:	01828a13 	orreq	r8, r2, r3, lsl sl
     ae0:	91180200 	tstls	r8, r0, lsl #4
     ae4:	00001842 	andeq	r1, r0, r2, asr #16
     ae8:	01828914 	orreq	r8, r2, r4, lsl r9
     aec:	95011101 	strls	r1, [r1, #-257]	; 0x101
     af0:	13311942 	teqne	r1, #1081344	; 0x108000
     af4:	0f150000 	svceq	0x00150000
     af8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     afc:	16000013 			; <UNDEFINED> instruction: 0x16000013
     b00:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b04:	0b3b0b3a 	bleq	ec37f4 <__Stack_Size+0xec33f4>
     b08:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b0c:	34170000 	ldrcc	r0, [r7], #-0
     b10:	3a0e0300 	bcc	381718 <__Stack_Size+0x381318>
     b14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	00170213 	andseq	r0, r7, r3, lsl r2
     b1c:	00341800 	eorseq	r1, r4, r0, lsl #16
     b20:	0b3a0803 	bleq	e82b34 <__Stack_Size+0xe82734>
     b24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b28:	00001702 	andeq	r1, r0, r2, lsl #14
     b2c:	3f012e19 	svccc	0x00012e19
     b30:	3a0e0319 	bcc	38179c <__Stack_Size+0x38139c>
     b34:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b38:	11134919 	tstne	r3, r9, lsl r9
     b3c:	40061201 	andmi	r1, r6, r1, lsl #4
     b40:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b44:	00001301 	andeq	r1, r0, r1, lsl #6
     b48:	3f012e1a 	svccc	0x00012e1a
     b4c:	3a0e0319 	bcc	3817b8 <__Stack_Size+0x3813b8>
     b50:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     b54:	11134919 	tstne	r3, r9, lsl r9
     b58:	40061201 	andmi	r1, r6, r1, lsl #4
     b5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b60:	00001301 	andeq	r1, r0, r1, lsl #6
     b64:	0300051b 	movweq	r0, #1307	; 0x51b
     b68:	3b0b3a0e 	blcc	2cf3a8 <__Stack_Size+0x2cefa8>
     b6c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b70:	1c000017 	stcne	0, cr0, [r0], {23}
     b74:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b7c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b80:	341d0000 	ldrcc	r0, [sp], #-0
     b84:	3a0e0300 	bcc	38178c <__Stack_Size+0x38138c>
     b88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b8c:	00170213 	andseq	r0, r7, r3, lsl r2
     b90:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     b94:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b9c:	01111927 	tsteq	r1, r7, lsr #18
     ba0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ba4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ba8:	1f000013 	svcne	0x00000013
     bac:	08030034 	stmdaeq	r3, {r2, r4, r5}
     bb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     bb4:	17021349 	strne	r1, [r2, -r9, asr #6]
     bb8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     bbc:	03193f01 	tsteq	r9, #1, 30
     bc0:	3b0b3a0e 	blcc	2cf400 <__Stack_Size+0x2cf000>
     bc4:	3c192705 	ldccc	7, cr2, [r9], {5}
     bc8:	21000019 	tstcs	r0, r9, lsl r0
     bcc:	13490005 	movtne	r0, #36869	; 0x9005
     bd0:	01000000 	mrseq	r0, (UNDEF: 0)
     bd4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     bd8:	0e030b13 	vmoveq.32	d3[0], r0
     bdc:	01110e1b 	tsteq	r1, fp, lsl lr
     be0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     be4:	24020000 	strcs	r0, [r2], #-0
     be8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bec:	000e030b 	andeq	r0, lr, fp, lsl #6
     bf0:	00160300 	andseq	r0, r6, r0, lsl #6
     bf4:	0b3a0803 	bleq	e82c08 <__Stack_Size+0xe82808>
     bf8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bfc:	16040000 	strne	r0, [r4], -r0
     c00:	3a0e0300 	bcc	381808 <__Stack_Size+0x381408>
     c04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c08:	05000013 	streq	r0, [r0, #-19]
     c0c:	13490035 	movtne	r0, #36917	; 0x9035
     c10:	26060000 	strcs	r0, [r6], -r0
     c14:	00134900 	andseq	r4, r3, r0, lsl #18
     c18:	01040700 	tsteq	r4, r0, lsl #14
     c1c:	0b3a0b0b 	bleq	e83850 <__Stack_Size+0xe83450>
     c20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c24:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     c28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     c2c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     c30:	08030028 	stmdaeq	r3, {r3, r5}
     c34:	00000d1c 	andeq	r0, r0, ip, lsl sp
     c38:	0b01130a 	bleq	45868 <__Stack_Size+0x45468>
     c3c:	3b0b3a05 	blcc	2cf458 <__Stack_Size+0x2cf058>
     c40:	00130105 	andseq	r0, r3, r5, lsl #2
     c44:	000d0b00 	andeq	r0, sp, r0, lsl #22
     c48:	0b3a0e03 	bleq	e8445c <__Stack_Size+0xe8405c>
     c4c:	1349053b 	movtne	r0, #38203	; 0x953b
     c50:	00000b38 	andeq	r0, r0, r8, lsr fp
     c54:	03000d0c 	movweq	r0, #3340	; 0xd0c
     c58:	3b0b3a0e 	blcc	2cf498 <__Stack_Size+0x2cf098>
     c5c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     c60:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     c64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     c68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c6c:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     c70:	010e0000 	mrseq	r0, (UNDEF: 14)
     c74:	01134901 	tsteq	r3, r1, lsl #18
     c78:	0f000013 	svceq	0x00000013
     c7c:	13490021 	movtne	r0, #36897	; 0x9021
     c80:	00000b2f 	andeq	r0, r0, pc, lsr #22
     c84:	03001610 	movweq	r1, #1552	; 0x610
     c88:	3b0b3a0e 	blcc	2cf4c8 <__Stack_Size+0x2cf0c8>
     c8c:	00134905 	andseq	r4, r3, r5, lsl #18
     c90:	01131100 	tsteq	r3, r0, lsl #2
     c94:	0b3a0b0b 	bleq	e838c8 <__Stack_Size+0xe834c8>
     c98:	1301053b 	movwne	r0, #5435	; 0x153b
     c9c:	0d120000 	ldceq	0, cr0, [r2, #-0]
     ca0:	3a080300 	bcc	2018a8 <__Stack_Size+0x2014a8>
     ca4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ca8:	000b3813 	andeq	r3, fp, r3, lsl r8
     cac:	01131300 	tsteq	r3, r0, lsl #6
     cb0:	0b3a0b0b 	bleq	e838e4 <__Stack_Size+0xe834e4>
     cb4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     cb8:	0d140000 	ldceq	0, cr0, [r4, #-0]
     cbc:	3a0e0300 	bcc	3818c4 <__Stack_Size+0x3814c4>
     cc0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc4:	000b3813 	andeq	r3, fp, r3, lsl r8
     cc8:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     ccc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cd0:	0b3b0b3a 	bleq	ec39c0 <__Stack_Size+0xec35c0>
     cd4:	01111927 	tsteq	r1, r7, lsr #18
     cd8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     cdc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ce0:	16000013 			; <UNDEFINED> instruction: 0x16000013
     ce4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ce8:	0b3b0b3a 	bleq	ec39d8 <__Stack_Size+0xec35d8>
     cec:	17021349 	strne	r1, [r2, -r9, asr #6]
     cf0:	05170000 	ldreq	r0, [r7, #-0]
     cf4:	3a0e0300 	bcc	3818fc <__Stack_Size+0x3814fc>
     cf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cfc:	00170213 	andseq	r0, r7, r3, lsl r2
     d00:	00051800 	andeq	r1, r5, r0, lsl #16
     d04:	0b3a0e03 	bleq	e84518 <__Stack_Size+0xe84118>
     d08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d0c:	00001802 	andeq	r1, r0, r2, lsl #16
     d10:	0b000f19 	bleq	497c <__Stack_Size+0x457c>
     d14:	0013490b 	andseq	r4, r3, fp, lsl #18
     d18:	82891a00 	addhi	r1, r9, #0, 20
     d1c:	01110001 	tsteq	r1, r1
     d20:	31194295 			; <UNDEFINED> instruction: 0x31194295
     d24:	1b000013 	blne	d78 <__Stack_Size+0x978>
     d28:	01018289 	smlabbeq	r1, r9, r2, r8
     d2c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     d30:	00133119 	andseq	r3, r3, r9, lsl r1
     d34:	828a1c00 	addhi	r1, sl, #0, 24
     d38:	18020001 	stmdane	r2, {r0}
     d3c:	00184291 	mulseq	r8, r1, r2
     d40:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     d44:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d48:	0b3b0b3a 	bleq	ec3a38 <__Stack_Size+0xec3638>
     d4c:	13491927 	movtne	r1, #39207	; 0x9927
     d50:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d54:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d58:	00130119 	andseq	r0, r3, r9, lsl r1
     d5c:	002e1e00 	eoreq	r1, lr, r0, lsl #28
     d60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d68:	13491927 	movtne	r1, #39207	; 0x9927
     d6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d74:	1f000019 	svcne	0x00000019
     d78:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d7c:	0b3a0e03 	bleq	e84590 <__Stack_Size+0xe84190>
     d80:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     d84:	01111349 	tsteq	r1, r9, asr #6
     d88:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d8c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d90:	20000013 	andcs	r0, r0, r3, lsl r0
     d94:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d9c:	17021349 	strne	r1, [r2, -r9, asr #6]
     da0:	34210000 	strtcc	r0, [r1], #-0
     da4:	3a0e0300 	bcc	3819ac <__Stack_Size+0x3815ac>
     da8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     dac:	00170213 	andseq	r0, r7, r3, lsl r2
     db0:	00342200 	eorseq	r2, r4, r0, lsl #4
     db4:	0b3a0803 	bleq	e82dc8 <__Stack_Size+0xe829c8>
     db8:	1349053b 	movtne	r0, #38203	; 0x953b
     dbc:	00001702 	andeq	r1, r0, r2, lsl #14
     dc0:	3f012e23 	svccc	0x00012e23
     dc4:	3a0e0319 	bcc	381a30 <__Stack_Size+0x381630>
     dc8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     dcc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     dd0:	97184006 	ldrls	r4, [r8, -r6]
     dd4:	13011942 	movwne	r1, #6466	; 0x1942
     dd8:	05240000 	streq	r0, [r4, #-0]!
     ddc:	3a0e0300 	bcc	3819e4 <__Stack_Size+0x3815e4>
     de0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     de4:	00180213 	andseq	r0, r8, r3, lsl r2
     de8:	002e2500 	eoreq	r2, lr, r0, lsl #10
     dec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     df0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     df4:	01111927 	tsteq	r1, r7, lsr #18
     df8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dfc:	00194297 	mulseq	r9, r7, r2
     e00:	002e2600 	eoreq	r2, lr, r0, lsl #12
     e04:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e08:	0b3b0b3a 	bleq	ec3af8 <__Stack_Size+0xec36f8>
     e0c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     e10:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     e14:	03193f01 	tsteq	r9, #1, 30
     e18:	3b0b3a0e 	blcc	2cf658 <__Stack_Size+0x2cf258>
     e1c:	3c19270b 	ldccc	7, cr2, [r9], {11}
     e20:	00130119 	andseq	r0, r3, r9, lsl r1
     e24:	00052800 	andeq	r2, r5, r0, lsl #16
     e28:	00001349 	andeq	r1, r0, r9, asr #6
     e2c:	3f002e29 	svccc	0x00002e29
     e30:	3a0e0319 	bcc	381a9c <__Stack_Size+0x38169c>
     e34:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e38:	3c134919 	ldccc	9, cr4, [r3], {25}
     e3c:	00000019 	andeq	r0, r0, r9, lsl r0
     e40:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     e44:	030b130e 	movweq	r1, #45838	; 0xb30e
     e48:	110e1b0e 	tstne	lr, lr, lsl #22
     e4c:	10061201 	andne	r1, r6, r1, lsl #4
     e50:	02000017 	andeq	r0, r0, #23
     e54:	0b0b0024 	bleq	2c0eec <__Stack_Size+0x2c0aec>
     e58:	0e030b3e 	vmoveq.16	d3[0], r0
     e5c:	16030000 	strne	r0, [r3], -r0
     e60:	3a080300 	bcc	201a68 <__Stack_Size+0x201668>
     e64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e68:	04000013 	streq	r0, [r0], #-19
     e6c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e70:	0b3b0b3a 	bleq	ec3b60 <__Stack_Size+0xec3760>
     e74:	00001349 	andeq	r1, r0, r9, asr #6
     e78:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     e7c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     e80:	0b0b0104 	bleq	2c1298 <__Stack_Size+0x2c0e98>
     e84:	0b3b0b3a 	bleq	ec3b74 <__Stack_Size+0xec3774>
     e88:	00001301 	andeq	r1, r0, r1, lsl #6
     e8c:	03002807 	movweq	r2, #2055	; 0x807
     e90:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     e94:	00280800 	eoreq	r0, r8, r0, lsl #16
     e98:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     e9c:	13090000 	movwne	r0, #36864	; 0x9000
     ea0:	3a0b0b01 	bcc	2c3aac <__Stack_Size+0x2c36ac>
     ea4:	01053b0b 	tsteq	r5, fp, lsl #22
     ea8:	0a000013 	beq	efc <__Stack_Size+0xafc>
     eac:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     eb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     eb4:	0b381349 	bleq	e05be0 <__Stack_Size+0xe057e0>
     eb8:	160b0000 	strne	r0, [fp], -r0
     ebc:	3a0e0300 	bcc	381ac4 <__Stack_Size+0x3816c4>
     ec0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ec4:	0c000013 	stceq	0, cr0, [r0], {19}
     ec8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ecc:	0b3a0e03 	bleq	e846e0 <__Stack_Size+0xe842e0>
     ed0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ed4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ed8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     edc:	00130119 	andseq	r0, r3, r9, lsl r1
     ee0:	82890d00 	addhi	r0, r9, #0, 26
     ee4:	01110101 	tsteq	r1, r1, lsl #2
     ee8:	13011331 	movwne	r1, #4913	; 0x1331
     eec:	8a0e0000 	bhi	380ef4 <__Stack_Size+0x380af4>
     ef0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     ef4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ef8:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
     efc:	11010182 	smlabbne	r1, r2, r1, r0
     f00:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     f04:	00001331 	andeq	r1, r0, r1, lsr r3
     f08:	03000510 	movweq	r0, #1296	; 0x510
     f0c:	3b0b3a0e 	blcc	2cf74c <__Stack_Size+0x2cf34c>
     f10:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f14:	11000018 	tstne	r0, r8, lsl r0
     f18:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f1c:	0b3b0b3a 	bleq	ec3c0c <__Stack_Size+0xec380c>
     f20:	17021349 	strne	r1, [r2, -r9, asr #6]
     f24:	34120000 	ldrcc	r0, [r2], #-0
     f28:	3a0e0300 	bcc	381b30 <__Stack_Size+0x381730>
     f2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f30:	00170213 	andseq	r0, r7, r3, lsl r2
     f34:	82891300 	addhi	r1, r9, #0, 6
     f38:	01110001 	tsteq	r1, r1
     f3c:	31194295 			; <UNDEFINED> instruction: 0x31194295
     f40:	14000013 	strne	r0, [r0], #-19
     f44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f48:	0b3a0e03 	bleq	e8475c <__Stack_Size+0xe8435c>
     f4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f50:	01111349 	tsteq	r1, r9, asr #6
     f54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f58:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f5c:	15000013 	strne	r0, [r0, #-19]
     f60:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f64:	0b3a0e03 	bleq	e84778 <__Stack_Size+0xe84378>
     f68:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f74:	00130119 	andseq	r0, r3, r9, lsl r1
     f78:	00051600 	andeq	r1, r5, r0, lsl #12
     f7c:	0b3a0e03 	bleq	e84790 <__Stack_Size+0xe84390>
     f80:	1349053b 	movtne	r0, #38203	; 0x953b
     f84:	00001702 	andeq	r1, r0, r2, lsl #14
     f88:	3f012e17 	svccc	0x00012e17
     f8c:	3a0e0319 	bcc	381bf8 <__Stack_Size+0x3817f8>
     f90:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     f94:	01193c19 	tsteq	r9, r9, lsl ip
     f98:	18000013 	stmdane	r0, {r0, r1, r4}
     f9c:	13490005 	movtne	r0, #36869	; 0x9005
     fa0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     fa4:	03193f00 	tsteq	r9, #0, 30
     fa8:	3b0b3a0e 	blcc	2cf7e8 <__Stack_Size+0x2cf3e8>
     fac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     fb0:	00000019 	andeq	r0, r0, r9, lsl r0
     fb4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     fb8:	030b130e 	movweq	r1, #45838	; 0xb30e
     fbc:	110e1b0e 	tstne	lr, lr, lsl #22
     fc0:	10061201 	andne	r1, r6, r1, lsl #4
     fc4:	02000017 	andeq	r0, r0, #23
     fc8:	0b0b0024 	bleq	2c1060 <__Stack_Size+0x2c0c60>
     fcc:	0e030b3e 	vmoveq.16	d3[0], r0
     fd0:	16030000 	strne	r0, [r3], -r0
     fd4:	3a080300 	bcc	201bdc <__Stack_Size+0x2017dc>
     fd8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fdc:	04000013 	streq	r0, [r0], #-19
     fe0:	13490026 	movtne	r0, #36902	; 0x9026
     fe4:	16050000 	strne	r0, [r5], -r0
     fe8:	3a0e0300 	bcc	381bf0 <__Stack_Size+0x3817f0>
     fec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff0:	06000013 			; <UNDEFINED> instruction: 0x06000013
     ff4:	13490035 	movtne	r0, #36917	; 0x9035
     ff8:	04070000 	streq	r0, [r7], #-0
     ffc:	3a0b0b01 	bcc	2c3c08 <__Stack_Size+0x2c3808>
    1000:	010b3b0b 	tsteq	fp, fp, lsl #22
    1004:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1008:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    100c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1010:	03002809 	movweq	r2, #2057	; 0x809
    1014:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1018:	01130a00 	tsteq	r3, r0, lsl #20
    101c:	0b3a0b0b 	bleq	e83c50 <__Stack_Size+0xe83850>
    1020:	1301053b 	movwne	r0, #5435	; 0x153b
    1024:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1028:	3a080300 	bcc	201c30 <__Stack_Size+0x201830>
    102c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1030:	000b3813 	andeq	r3, fp, r3, lsl r8
    1034:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1038:	0b3a0e03 	bleq	e8484c <__Stack_Size+0xe8444c>
    103c:	1349053b 	movtne	r0, #38203	; 0x953b
    1040:	00000b38 	andeq	r0, r0, r8, lsr fp
    1044:	0300160d 	movweq	r1, #1549	; 0x60d
    1048:	3b0b3a0e 	blcc	2cf888 <__Stack_Size+0x2cf488>
    104c:	00134905 	andseq	r4, r3, r5, lsl #18
    1050:	01130e00 	tsteq	r3, r0, lsl #28
    1054:	0b3a0b0b 	bleq	e83c88 <__Stack_Size+0xe83888>
    1058:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    105c:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 1064 <__Stack_Size+0xc64>
    1060:	3a0e0300 	bcc	381c68 <__Stack_Size+0x381868>
    1064:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1068:	000b3813 	andeq	r3, fp, r3, lsl r8
    106c:	002e1000 	eoreq	r1, lr, r0
    1070:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1074:	0b3b0b3a 	bleq	ec3d64 <__Stack_Size+0xec3964>
    1078:	01111927 	tsteq	r1, r7, lsr #18
    107c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1080:	00194297 	mulseq	r9, r7, r2
    1084:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    1088:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    108c:	0b3b0b3a 	bleq	ec3d7c <__Stack_Size+0xec397c>
    1090:	01111927 	tsteq	r1, r7, lsr #18
    1094:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1098:	01194297 			; <UNDEFINED> instruction: 0x01194297
    109c:	12000013 	andne	r0, r0, #19
    10a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10a4:	0b3b0b3a 	bleq	ec3d94 <__Stack_Size+0xec3994>
    10a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10ac:	05130000 	ldreq	r0, [r3, #-0]
    10b0:	3a0e0300 	bcc	381cb8 <__Stack_Size+0x3818b8>
    10b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b8:	00170213 	andseq	r0, r7, r3, lsl r2
    10bc:	00341400 	eorseq	r1, r4, r0, lsl #8
    10c0:	0b3a0e03 	bleq	e848d4 <__Stack_Size+0xe844d4>
    10c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10c8:	00001702 	andeq	r1, r0, r2, lsl #14
    10cc:	3f012e15 	svccc	0x00012e15
    10d0:	3a0e0319 	bcc	381d3c <__Stack_Size+0x38193c>
    10d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    10d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10dc:	97184006 	ldrls	r4, [r8, -r6]
    10e0:	13011942 	movwne	r1, #6466	; 0x1942
    10e4:	05160000 	ldreq	r0, [r6, #-0]
    10e8:	3a0e0300 	bcc	381cf0 <__Stack_Size+0x3818f0>
    10ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10f0:	00180213 	andseq	r0, r8, r3, lsl r2
    10f4:	00051700 	andeq	r1, r5, r0, lsl #14
    10f8:	0b3a0e03 	bleq	e8490c <__Stack_Size+0xe8450c>
    10fc:	1349053b 	movtne	r0, #38203	; 0x953b
    1100:	00001702 	andeq	r1, r0, r2, lsl #14
    1104:	03003418 	movweq	r3, #1048	; 0x418
    1108:	3b0b3a0e 	blcc	2cf948 <__Stack_Size+0x2cf548>
    110c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1110:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1114:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1118:	0b3a0e03 	bleq	e8492c <__Stack_Size+0xe8452c>
    111c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1120:	01111349 	tsteq	r1, r9, asr #6
    1124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1128:	00194297 	mulseq	r9, r7, r2
    112c:	00341a00 	eorseq	r1, r4, r0, lsl #20
    1130:	0b3a0803 	bleq	e83144 <__Stack_Size+0xe82d44>
    1134:	1349053b 	movtne	r0, #38203	; 0x953b
    1138:	00001702 	andeq	r1, r0, r2, lsl #14
    113c:	0b000f1b 	bleq	4db0 <__Stack_Size+0x49b0>
    1140:	0013490b 	andseq	r4, r3, fp, lsl #18
    1144:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    1148:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    114c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1150:	13491927 	movtne	r1, #39207	; 0x9927
    1154:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1158:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    115c:	00130119 	andseq	r0, r3, r9, lsl r1
    1160:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
    1164:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1168:	0b3b0b3a 	bleq	ec3e58 <__Stack_Size+0xec3a58>
    116c:	13491927 	movtne	r1, #39207	; 0x9927
    1170:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1174:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1178:	00130119 	andseq	r0, r3, r9, lsl r1
    117c:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1180:	0b3a0e03 	bleq	e84994 <__Stack_Size+0xe84594>
    1184:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1188:	00001802 	andeq	r1, r0, r2, lsl #16
    118c:	0182891f 	orreq	r8, r2, pc, lsl r9
    1190:	31011101 	tstcc	r1, r1, lsl #2
    1194:	00130113 	andseq	r0, r3, r3, lsl r1
    1198:	828a2000 	addhi	r2, sl, #0
    119c:	18020001 	stmdane	r2, {r0}
    11a0:	00184291 	mulseq	r8, r1, r2
    11a4:	82892100 	addhi	r2, r9, #0, 2
    11a8:	01110101 	tsteq	r1, r1, lsl #2
    11ac:	00001331 	andeq	r1, r0, r1, lsr r3
    11b0:	3f002e22 	svccc	0x00002e22
    11b4:	3a0e0319 	bcc	381e20 <__Stack_Size+0x381a20>
    11b8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    11bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    11c0:	97184006 	ldrls	r4, [r8, -r6]
    11c4:	00001942 	andeq	r1, r0, r2, asr #18
    11c8:	49010123 	stmdbmi	r1, {r0, r1, r5, r8}
    11cc:	00130113 	andseq	r0, r3, r3, lsl r1
    11d0:	00212400 	eoreq	r2, r1, r0, lsl #8
    11d4:	0b2f1349 	bleq	bc5f00 <__Stack_Size+0xbc5b00>
    11d8:	01000000 	mrseq	r0, (UNDEF: 0)
    11dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    11e0:	0e030b13 	vmoveq.32	d3[0], r0
    11e4:	01110e1b 	tsteq	r1, fp, lsl lr
    11e8:	17100612 			; <UNDEFINED> instruction: 0x17100612
    11ec:	24020000 	strcs	r0, [r2], #-0
    11f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11f4:	000e030b 	andeq	r0, lr, fp, lsl #6
    11f8:	00160300 	andseq	r0, r6, r0, lsl #6
    11fc:	0b3a0803 	bleq	e83210 <__Stack_Size+0xe82e10>
    1200:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1204:	16040000 	strne	r0, [r4], -r0
    1208:	3a0e0300 	bcc	381e10 <__Stack_Size+0x381a10>
    120c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1210:	05000013 	streq	r0, [r0, #-19]
    1214:	13490035 	movtne	r0, #36917	; 0x9035
    1218:	26060000 	strcs	r0, [r6], -r0
    121c:	00134900 	andseq	r4, r3, r0, lsl #18
    1220:	01040700 	tsteq	r4, r0, lsl #14
    1224:	0b3a0b0b 	bleq	e83e58 <__Stack_Size+0xe83a58>
    1228:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    122c:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1230:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1234:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1238:	08030028 	stmdaeq	r3, {r3, r5}
    123c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1240:	0b01130a 	bleq	45e70 <__Stack_Size+0x45a70>
    1244:	3b0b3a0b 	blcc	2cfa78 <__Stack_Size+0x2cf678>
    1248:	00130105 	andseq	r0, r3, r5, lsl #2
    124c:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1250:	0b3a0e03 	bleq	e84a64 <__Stack_Size+0xe84664>
    1254:	1349053b 	movtne	r0, #38203	; 0x953b
    1258:	00000b38 	andeq	r0, r0, r8, lsr fp
    125c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1260:	3b0b3a08 	blcc	2cfa88 <__Stack_Size+0x2cf688>
    1264:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1268:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    126c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1270:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1274:	00001349 	andeq	r1, r0, r9, asr #6
    1278:	3f012e0e 	svccc	0x00012e0e
    127c:	3a0e0319 	bcc	381ee8 <__Stack_Size+0x381ae8>
    1280:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1284:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1288:	97184006 	ldrls	r4, [r8, -r6]
    128c:	13011942 	movwne	r1, #6466	; 0x1942
    1290:	050f0000 	streq	r0, [pc, #-0]	; 1298 <__Stack_Size+0xe98>
    1294:	3a0e0300 	bcc	381e9c <__Stack_Size+0x381a9c>
    1298:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    129c:	00180213 	andseq	r0, r8, r3, lsl r2
    12a0:	00051000 	andeq	r1, r5, r0
    12a4:	0b3a0e03 	bleq	e84ab8 <__Stack_Size+0xe846b8>
    12a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12ac:	00001702 	andeq	r1, r0, r2, lsl #14
    12b0:	3f002e11 	svccc	0x00002e11
    12b4:	3a0e0319 	bcc	381f20 <__Stack_Size+0x381b20>
    12b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    12bc:	11134919 	tstne	r3, r9, lsl r9
    12c0:	40061201 	andmi	r1, r6, r1, lsl #4
    12c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    12c8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    12cc:	03193f01 	tsteq	r9, #1, 30
    12d0:	3b0b3a0e 	blcc	2cfb10 <__Stack_Size+0x2cf710>
    12d4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    12d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12dc:	97184006 	ldrls	r4, [r8, -r6]
    12e0:	00001942 	andeq	r1, r0, r2, asr #18
    12e4:	03003413 	movweq	r3, #1043	; 0x413
    12e8:	3b0b3a0e 	blcc	2cfb28 <__Stack_Size+0x2cf728>
    12ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12f0:	14000017 	strne	r0, [r0], #-23
    12f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    12f8:	0b3b0b3a 	bleq	ec3fe8 <__Stack_Size+0xec3be8>
    12fc:	17021349 	strne	r1, [r2, -r9, asr #6]
    1300:	01000000 	mrseq	r0, (UNDEF: 0)
    1304:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1308:	0e030b13 	vmoveq.32	d3[0], r0
    130c:	01110e1b 	tsteq	r1, fp, lsl lr
    1310:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1314:	24020000 	strcs	r0, [r2], #-0
    1318:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    131c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1320:	00160300 	andseq	r0, r6, r0, lsl #6
    1324:	0b3a0803 	bleq	e83338 <__Stack_Size+0xe82f38>
    1328:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    132c:	16040000 	strne	r0, [r4], -r0
    1330:	3a0e0300 	bcc	381f38 <__Stack_Size+0x381b38>
    1334:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1338:	05000013 	streq	r0, [r0, #-19]
    133c:	13490035 	movtne	r0, #36917	; 0x9035
    1340:	04060000 	streq	r0, [r6], #-0
    1344:	3a0b0b01 	bcc	2c3f50 <__Stack_Size+0x2c3b50>
    1348:	010b3b0b 	tsteq	fp, fp, lsl #22
    134c:	07000013 	smladeq	r0, r3, r0, r0
    1350:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1354:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1358:	03002808 	movweq	r2, #2056	; 0x808
    135c:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1360:	01130900 	tsteq	r3, r0, lsl #18
    1364:	0b3a0b0b 	bleq	e83f98 <__Stack_Size+0xe83b98>
    1368:	1301053b 	movwne	r0, #5435	; 0x153b
    136c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    1370:	3a080300 	bcc	201f78 <__Stack_Size+0x201b78>
    1374:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1378:	000b3813 	andeq	r3, fp, r3, lsl r8
    137c:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1380:	0b3a0e03 	bleq	e84b94 <__Stack_Size+0xe84794>
    1384:	1349053b 	movtne	r0, #38203	; 0x953b
    1388:	00000b38 	andeq	r0, r0, r8, lsr fp
    138c:	0300160c 	movweq	r1, #1548	; 0x60c
    1390:	3b0b3a0e 	blcc	2cfbd0 <__Stack_Size+0x2cf7d0>
    1394:	00134905 	andseq	r4, r3, r5, lsl #18
    1398:	01130d00 	tsteq	r3, r0, lsl #26
    139c:	0b3a0b0b 	bleq	e83fd0 <__Stack_Size+0xe83bd0>
    13a0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    13a4:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    13a8:	3a0e0300 	bcc	381fb0 <__Stack_Size+0x381bb0>
    13ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13b0:	000b3813 	andeq	r3, fp, r3, lsl r8
    13b4:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    13b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13c0:	0b201927 	bleq	807864 <__Stack_Size+0x807464>
    13c4:	00001301 	andeq	r1, r0, r1, lsl #6
    13c8:	03000510 	movweq	r0, #1296	; 0x510
    13cc:	3b0b3a0e 	blcc	2cfc0c <__Stack_Size+0x2cf80c>
    13d0:	00134905 	andseq	r4, r3, r5, lsl #18
    13d4:	00341100 	eorseq	r1, r4, r0, lsl #2
    13d8:	0b3a0e03 	bleq	e84bec <__Stack_Size+0xe847ec>
    13dc:	1349053b 	movtne	r0, #38203	; 0x953b
    13e0:	0f120000 	svceq	0x00120000
    13e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    13e8:	13000013 	movwne	r0, #19
    13ec:	0e03012e 	adfeqsp	f0, f3, #0.5
    13f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13f4:	01111927 	tsteq	r1, r7, lsr #18
    13f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1400:	14000013 	strne	r0, [r0], #-19
    1404:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1408:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    140c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1410:	05150000 	ldreq	r0, [r5, #-0]
    1414:	3a0e0300 	bcc	38201c <__Stack_Size+0x381c1c>
    1418:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    141c:	00170213 	andseq	r0, r7, r3, lsl r2
    1420:	00341600 	eorseq	r1, r4, r0, lsl #12
    1424:	0b3a0e03 	bleq	e84c38 <__Stack_Size+0xe84838>
    1428:	1349053b 	movtne	r0, #38203	; 0x953b
    142c:	00001702 	andeq	r1, r0, r2, lsl #14
    1430:	03003417 	movweq	r3, #1047	; 0x417
    1434:	3b0b3a08 	blcc	2cfc5c <__Stack_Size+0x2cf85c>
    1438:	02134905 	andseq	r4, r3, #81920	; 0x14000
    143c:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    1440:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1444:	0b3a0e03 	bleq	e84c58 <__Stack_Size+0xe84858>
    1448:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    144c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1450:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1454:	00130119 	andseq	r0, r3, r9, lsl r1
    1458:	00051900 	andeq	r1, r5, r0, lsl #18
    145c:	0b3a0e03 	bleq	e84c70 <__Stack_Size+0xe84870>
    1460:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1464:	00001702 	andeq	r1, r0, r2, lsl #14
    1468:	0182891a 	orreq	r8, r2, sl, lsl r9
    146c:	31011101 	tstcc	r1, r1, lsl #2
    1470:	00130113 	andseq	r0, r3, r3, lsl r1
    1474:	828a1b00 	addhi	r1, sl, #0, 22
    1478:	18020001 	stmdane	r2, {r0}
    147c:	00184291 	mulseq	r8, r1, r2
    1480:	82891c00 	addhi	r1, r9, #0, 24
    1484:	01110101 	tsteq	r1, r1, lsl #2
    1488:	31194295 			; <UNDEFINED> instruction: 0x31194295
    148c:	00130113 	andseq	r0, r3, r3, lsl r1
    1490:	82891d00 	addhi	r1, r9, #0, 26
    1494:	01110101 	tsteq	r1, r1, lsl #2
    1498:	31194295 			; <UNDEFINED> instruction: 0x31194295
    149c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    14a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    14a4:	0b3b0b3a 	bleq	ec4194 <__Stack_Size+0xec3d94>
    14a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    14ac:	341f0000 	ldrcc	r0, [pc], #-0	; 14b4 <__Stack_Size+0x10b4>
    14b0:	3a0e0300 	bcc	3820b8 <__Stack_Size+0x381cb8>
    14b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14b8:	00170213 	andseq	r0, r7, r3, lsl r2
    14bc:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    14c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    14c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14c8:	01111927 	tsteq	r1, r7, lsr #18
    14cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    14d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    14d4:	21000013 	tstcs	r0, r3, lsl r0
    14d8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    14dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14e0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    14e4:	05220000 	streq	r0, [r2, #-0]!
    14e8:	02133100 	andseq	r3, r3, #0, 2
    14ec:	23000017 	movwcs	r0, #23
    14f0:	13310005 	teqne	r1, #5
    14f4:	00001802 	andeq	r1, r0, r2, lsl #16
    14f8:	11010b24 	tstne	r1, r4, lsr #22
    14fc:	00061201 	andeq	r1, r6, r1, lsl #4
    1500:	00342500 	eorseq	r2, r4, r0, lsl #10
    1504:	17021331 	smladxne	r2, r1, r3, r1
    1508:	1d260000 	stcne	0, cr0, [r6, #-0]
    150c:	11133101 	tstne	r3, r1, lsl #2
    1510:	58061201 	stmdapl	r6, {r0, r9, ip}
    1514:	0105590b 	tsteq	r5, fp, lsl #18
    1518:	27000013 	smladcs	r0, r3, r0, r0
    151c:	00018289 	andeq	r8, r1, r9, lsl #5
    1520:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1524:	89280000 	stmdbhi	r8!, {}	; <UNPREDICTABLE>
    1528:	11010182 	smlabbne	r1, r2, r1, r0
    152c:	00133101 	andseq	r3, r3, r1, lsl #2
    1530:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    1534:	01111331 	tsteq	r1, r1, lsr r3
    1538:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    153c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1540:	2a000013 	bcs	1594 <__Stack_Size+0x1194>
    1544:	0e03012e 	adfeqsp	f0, f3, #0.5
    1548:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    154c:	0b201927 	bleq	8079f0 <__Stack_Size+0x8075f0>
    1550:	00001301 	andeq	r1, r0, r1, lsl #6
    1554:	0300342b 	movweq	r3, #1067	; 0x42b
    1558:	3b0b3a08 	blcc	2cfd80 <__Stack_Size+0x2cf980>
    155c:	00134905 	andseq	r4, r3, r5, lsl #18
    1560:	011d2c00 	tsteq	sp, r0, lsl #24
    1564:	01521331 	cmpeq	r2, r1, lsr r3
    1568:	0b581755 	bleq	16072c4 <__Stack_Size+0x1606ec4>
    156c:	13010559 	movwne	r0, #5465	; 0x1559
    1570:	0b2d0000 	bleq	b41578 <__Stack_Size+0xb41178>
    1574:	00175501 	andseq	r5, r7, r1, lsl #10
    1578:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
    157c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1580:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1584:	13491927 	movtne	r1, #39207	; 0x9927
    1588:	06120111 			; <UNDEFINED> instruction: 0x06120111
    158c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1590:	00130119 	andseq	r0, r3, r9, lsl r1
    1594:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    1598:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    159c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    15a0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    15a4:	00001301 	andeq	r1, r0, r1, lsl #6
    15a8:	49000530 	stmdbmi	r0, {r4, r5, r8, sl}
    15ac:	31000013 	tstcc	r0, r3, lsl r0
    15b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15b4:	0b3a0e03 	bleq	e84dc8 <__Stack_Size+0xe849c8>
    15b8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    15bc:	0000193c 	andeq	r1, r0, ip, lsr r9
    15c0:	01110100 	tsteq	r1, r0, lsl #2
    15c4:	0b130e25 	bleq	4c4e60 <__Stack_Size+0x4c4a60>
    15c8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    15cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    15d0:	00001710 	andeq	r1, r0, r0, lsl r7
    15d4:	0b002402 	bleq	a5e4 <__Stack_Size+0xa1e4>
    15d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    15dc:	0300000e 	movweq	r0, #14
    15e0:	08030016 	stmdaeq	r3, {r1, r2, r4}
    15e4:	0b3b0b3a 	bleq	ec42d4 <__Stack_Size+0xec3ed4>
    15e8:	00001349 	andeq	r1, r0, r9, asr #6
    15ec:	03001604 	movweq	r1, #1540	; 0x604
    15f0:	3b0b3a0e 	blcc	2cfe30 <__Stack_Size+0x2cfa30>
    15f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    15f8:	00350500 	eorseq	r0, r5, r0, lsl #10
    15fc:	00001349 	andeq	r1, r0, r9, asr #6
    1600:	0b010406 	bleq	42620 <__Stack_Size+0x42220>
    1604:	3b0b3a0b 	blcc	2cfe38 <__Stack_Size+0x2cfa38>
    1608:	0013010b 	andseq	r0, r3, fp, lsl #2
    160c:	00280700 	eoreq	r0, r8, r0, lsl #14
    1610:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1614:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1618:	1c080300 	stcne	3, cr0, [r8], {-0}
    161c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1620:	0b0b0113 	bleq	2c1a74 <__Stack_Size+0x2c1674>
    1624:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1628:	00001301 	andeq	r1, r0, r1, lsl #6
    162c:	03000d0a 	movweq	r0, #3338	; 0xd0a
    1630:	3b0b3a08 	blcc	2cfe58 <__Stack_Size+0x2cfa58>
    1634:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1638:	0b00000b 	bleq	166c <__Stack_Size+0x126c>
    163c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1640:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1644:	0b381349 	bleq	e06370 <__Stack_Size+0xe05f70>
    1648:	160c0000 	strne	r0, [ip], -r0
    164c:	3a0e0300 	bcc	382254 <__Stack_Size+0x381e54>
    1650:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1654:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1658:	0b0b0113 	bleq	2c1aac <__Stack_Size+0x2c16ac>
    165c:	0b3b0b3a 	bleq	ec434c <__Stack_Size+0xec3f4c>
    1660:	00001301 	andeq	r1, r0, r1, lsl #6
    1664:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1668:	3b0b3a0e 	blcc	2cfea8 <__Stack_Size+0x2cfaa8>
    166c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1670:	0f00000b 	svceq	0x0000000b
    1674:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1678:	0b3a0e03 	bleq	e84e8c <__Stack_Size+0xe84a8c>
    167c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1680:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1684:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1688:	00130119 	andseq	r0, r3, r9, lsl r1
    168c:	00051000 	andeq	r1, r5, r0
    1690:	0b3a0e03 	bleq	e84ea4 <__Stack_Size+0xe84aa4>
    1694:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1698:	00001702 	andeq	r1, r0, r2, lsl #14
    169c:	01828911 	orreq	r8, r2, r1, lsl r9
    16a0:	31011101 	tstcc	r1, r1, lsl #2
    16a4:	00130113 	andseq	r0, r3, r3, lsl r1
    16a8:	828a1200 	addhi	r1, sl, #0, 4
    16ac:	18020001 	stmdane	r2, {r0}
    16b0:	00184291 	mulseq	r8, r1, r2
    16b4:	82891300 	addhi	r1, r9, #0, 6
    16b8:	01110101 	tsteq	r1, r1, lsl #2
    16bc:	31194295 			; <UNDEFINED> instruction: 0x31194295
    16c0:	00130113 	andseq	r0, r3, r3, lsl r1
    16c4:	82891400 	addhi	r1, r9, #0, 8
    16c8:	01110101 	tsteq	r1, r1, lsl #2
    16cc:	31194295 			; <UNDEFINED> instruction: 0x31194295
    16d0:	15000013 	strne	r0, [r0, #-19]
    16d4:	0b0b000f 	bleq	2c1718 <__Stack_Size+0x2c1318>
    16d8:	00001349 	andeq	r1, r0, r9, asr #6
    16dc:	03003416 	movweq	r3, #1046	; 0x416
    16e0:	3b0b3a0e 	blcc	2cff20 <__Stack_Size+0x2cfb20>
    16e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16e8:	17000017 	smladne	r0, r7, r0, r0
    16ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16f0:	0b3b0b3a 	bleq	ec43e0 <__Stack_Size+0xec3fe0>
    16f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    16f8:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    16fc:	11010182 	smlabbne	r1, r2, r1, r0
    1700:	00133101 	andseq	r3, r3, r1, lsl #2
    1704:	00051900 	andeq	r1, r5, r0, lsl #18
    1708:	0b3a0e03 	bleq	e84f1c <__Stack_Size+0xe84b1c>
    170c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1710:	00001802 	andeq	r1, r0, r2, lsl #16
    1714:	0300341a 	movweq	r3, #1050	; 0x41a
    1718:	3b0b3a0e 	blcc	2cff58 <__Stack_Size+0x2cfb58>
    171c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1720:	1b000017 	blne	1784 <__Stack_Size+0x1384>
    1724:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1728:	0b3a0e03 	bleq	e84f3c <__Stack_Size+0xe84b3c>
    172c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1730:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1734:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1738:	00130119 	andseq	r0, r3, r9, lsl r1
    173c:	00051c00 	andeq	r1, r5, r0, lsl #24
    1740:	0b3a0e03 	bleq	e84f54 <__Stack_Size+0xe84b54>
    1744:	1349053b 	movtne	r0, #38203	; 0x953b
    1748:	00001802 	andeq	r1, r0, r2, lsl #16
    174c:	0300051d 	movweq	r0, #1309	; 0x51d
    1750:	3b0b3a0e 	blcc	2cff90 <__Stack_Size+0x2cfb90>
    1754:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1758:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    175c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1760:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1764:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1768:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    176c:	03193f01 	tsteq	r9, #1, 30
    1770:	3b0b3a0e 	blcc	2cffb0 <__Stack_Size+0x2cfbb0>
    1774:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1778:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    177c:	97184006 	ldrls	r4, [r8, -r6]
    1780:	13011942 	movwne	r1, #6466	; 0x1942
    1784:	34200000 	strtcc	r0, [r0], #-0
    1788:	3a0e0300 	bcc	382390 <__Stack_Size+0x381f90>
    178c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1790:	21000013 	tstcs	r0, r3, lsl r0
    1794:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1798:	0b3a0e03 	bleq	e84fac <__Stack_Size+0xe84bac>
    179c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    17a0:	1301193c 	movwne	r1, #6460	; 0x193c
    17a4:	05220000 	streq	r0, [r2, #-0]!
    17a8:	00134900 	andseq	r4, r3, r0, lsl #18
    17ac:	11010000 	mrsne	r0, (UNDEF: 1)
    17b0:	11061000 	mrsne	r1, (UNDEF: 6)
    17b4:	03011201 	movweq	r1, #4609	; 0x1201
    17b8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    17bc:	00051308 	andeq	r1, r5, r8, lsl #6
    17c0:	11010000 	mrsne	r0, (UNDEF: 1)
    17c4:	130e2501 	movwne	r2, #58625	; 0xe501
    17c8:	1b0e030b 	blne	3823fc <__Stack_Size+0x381ffc>
    17cc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    17d0:	00171006 	andseq	r1, r7, r6
    17d4:	00240200 	eoreq	r0, r4, r0, lsl #4
    17d8:	0b3e0b0b 	bleq	f8440c <__Stack_Size+0xf8400c>
    17dc:	00000e03 	andeq	r0, r0, r3, lsl #28
    17e0:	3f012e03 	svccc	0x00012e03
    17e4:	3a0e0319 	bcc	382450 <__Stack_Size+0x382050>
    17e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    17ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    17f0:	97184006 	ldrls	r4, [r8, -r6]
    17f4:	13011942 	movwne	r1, #6466	; 0x1942
    17f8:	34040000 	strcc	r0, [r4], #-0
    17fc:	3a0e0300 	bcc	382404 <__Stack_Size+0x382004>
    1800:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1804:	05000013 	streq	r0, [r0, #-19]
    1808:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    180c:	0b3b0b3a 	bleq	ec44fc <__Stack_Size+0xec40fc>
    1810:	17021349 	strne	r1, [r2, -r9, asr #6]
    1814:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    1818:	11000182 	smlabbne	r0, r2, r1, r0
    181c:	00133101 	andseq	r3, r3, r1, lsl #2
    1820:	000f0700 	andeq	r0, pc, r0, lsl #14
    1824:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1828:	34080000 	strcc	r0, [r8], #-0
    182c:	3a0e0300 	bcc	382434 <__Stack_Size+0x382034>
    1830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1834:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1838:	09000019 	stmdbeq	r0, {r0, r3, r4}
    183c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1840:	0b3b0b3a 	bleq	ec4530 <__Stack_Size+0xec4130>
    1844:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1848:	010a0000 	mrseq	r0, (UNDEF: 10)
    184c:	01134901 	tsteq	r3, r1, lsl #18
    1850:	0b000013 	bleq	18a4 <__Stack_Size+0x14a4>
    1854:	13490021 	movtne	r0, #36897	; 0x9021
    1858:	00000b2f 	andeq	r0, r0, pc, lsr #22
    185c:	2700150c 	strcs	r1, [r0, -ip, lsl #10]
    1860:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    1864:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1868:	0b3b0b3a 	bleq	ec4558 <__Stack_Size+0xec4158>
    186c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1870:	00001802 	andeq	r1, r0, r2, lsl #16
    1874:	4900260e 	stmdbmi	r0, {r1, r2, r3, r9, sl, sp}
    1878:	0f000013 	svceq	0x00000013
    187c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1880:	0b3a0e03 	bleq	e85094 <__Stack_Size+0xe84c94>
    1884:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1888:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    188c:	24100000 	ldrcs	r0, [r0], #-0
    1890:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1894:	0008030b 	andeq	r0, r8, fp, lsl #6
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000366 	andeq	r0, r0, r6, ror #6
       4:	01170002 	tsteq	r7, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	41010000 	mrsmi	r0, (UNDEF: 1)
      1c:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
      20:	73006372 	movwvc	r6, #882	; 0x372
      24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      28:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      2c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      30:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      34:	50504100 	subspl	r4, r0, r0, lsl #2
      38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      3c:	616d0000 	cmnvs	sp, r0
      40:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
      44:	00000100 	andeq	r0, r0, r0, lsl #2
      48:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      4c:	30316632 	eorscc	r6, r1, r2, lsr r6
      50:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      54:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
      58:	00000200 	andeq	r0, r0, r0, lsl #4
      5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      60:	30316632 	eorscc	r6, r1, r2, lsr r6
      64:	616d5f78 	smcvs	54776	; 0xd5f8
      68:	00682e70 	rsbeq	r2, r8, r0, ror lr
      6c:	73000002 	movwvc	r0, #2
      70:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      74:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      78:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
      7c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
      80:	73000002 	movwvc	r0, #2
      84:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      88:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      8c:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
      90:	00682e63 	rsbeq	r2, r8, r3, ror #28
      94:	73000002 	movwvc	r0, #2
      98:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      9c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      a0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
      a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      a8:	74730000 	ldrbtvc	r0, [r3], #-0
      ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      b0:	5f783031 	svcpl	0x00783031
      b4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
      b8:	00682e74 	rsbeq	r2, r8, r4, ror lr
      bc:	64000002 	strvs	r0, [r0], #-2
      c0:	6d616e79 	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
      c4:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
      c8:	0300682e 	movweq	r6, #2094	; 0x82e
      cc:	74730000 	ldrbtvc	r0, [r3], #-0
      d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      d4:	5f783031 	svcpl	0x00783031
      d8:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
      dc:	00020068 	andeq	r0, r2, r8, rrx
      e0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
      e4:	31663233 	cmncc	r6, r3, lsr r2
      e8:	705f7830 	subsvc	r7, pc, r0, lsr r8	; <UNPREDICTABLE>
      ec:	682e7277 	stmdavs	lr!, {r0, r1, r2, r4, r5, r6, r9, ip, sp, lr}
      f0:	00000200 	andeq	r0, r0, r0, lsl #4
      f4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      f8:	30316632 	eorscc	r6, r1, r2, lsr r6
      fc:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     100:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     104:	00020068 	andeq	r0, r2, r8, rrx
     108:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     10c:	31663233 	cmncc	r6, r3, lsr r2
     110:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
     114:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     118:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     11c:	00000200 	andeq	r0, r0, r0, lsl #4
     120:	02050000 	andeq	r0, r5, #0
     124:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     128:	0102b703 	tsteq	r2, r3, lsl #14
     12c:	03522120 	cmpeq	r2, #32, 2
     130:	29032e79 	stmdbcs	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
     134:	5221202e 	eorpl	r2, r1, #46	; 0x2e
     138:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
     13c:	232e019d 			; <UNDEFINED> instruction: 0x232e019d
     140:	1e304d31 	mrcne	13, 1, r4, cr0, cr1, {1}
     144:	20280322 	eorcs	r0, r8, r2, lsr #6
     148:	032d4d5b 			; <UNDEFINED> instruction: 0x032d4d5b
     14c:	3f3f3c56 	svccc	0x003f3c56
     150:	694d3f3f 	stmdbvs	sp, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}^
     154:	01040200 	mrseq	r0, R12_usr
     158:	02005d3f 	andeq	r5, r0, #4032	; 0xfc0
     15c:	033f0104 	teqeq	pc, #4, 2
     160:	6a287418 	bvs	a1d1c8 <__Stack_Size+0xa1cdc8>
     164:	241d224e 	ldrcs	r2, [sp], #-590	; 0x24e
     168:	2f2f2f1c 	svccs	0x002f2f1c
     16c:	1c24312f 	stfnes	f3, [r4], #-188	; 0xffffff44
     170:	2f2f2f2f 	svccs	0x002f2f2f
     174:	2e0a032f 	cdpcs	3, 0, cr0, cr10, cr15, {1}
     178:	207a0328 	rsbscs	r0, sl, r8, lsr #6
     17c:	033c0903 	teqeq	ip, #49152	; 0xc000
     180:	2121207a 			; <UNDEFINED> instruction: 0x2121207a
     184:	2f2f2b21 	svccs	0x002f2b21
     188:	3a30302f 	bcc	c0c24c <__Stack_Size+0xc0be4c>
     18c:	4d302f2f 	ldcmi	15, cr2, [r0, #-188]!	; 0xffffff44
     190:	2d2d211f 	stfcss	f2, [sp, #-124]!	; 0xffffff84
     194:	4c4b3030 	mcrrmi	0, 3, r3, fp, cr0
     198:	37034b4b 	strcc	r4, [r3, -fp, asr #22]
     19c:	136a1374 	cmnne	sl, #116, 6	; 0xd0000001
     1a0:	77401386 	strbvc	r1, [r0, -r6, lsl #7]
     1a4:	4c4b2120 	stfmie	f2, [fp], {32}
     1a8:	01040200 	mrseq	r0, R12_usr
     1ac:	2d4c684b 	stclcs	8, cr6, [ip, #-300]	; 0xfffffed4
     1b0:	3d5b1786 	ldclcc	7, cr1, [fp, #-536]	; 0xfffffde8
     1b4:	00da034d 	sbcseq	r0, sl, sp, asr #6
     1b8:	211f134a 	tstcs	pc, sl, asr #6
     1bc:	01040200 	mrseq	r0, R12_usr
     1c0:	6303673d 	movwvs	r6, #14141	; 0x373d
     1c4:	3d3d2f3c 	ldccc	15, cr2, [sp, #-240]!	; 0xffffff10
     1c8:	207ae403 	rsbscs	lr, sl, r3, lsl #8
     1cc:	2f4b2120 	svccs	0x004b2120
     1d0:	6c2d3059 	stcvs	0, cr3, [sp], #-356	; 0xfffffe9c
     1d4:	2f4b2120 	svccs	0x004b2120
     1d8:	032d3067 			; <UNDEFINED> instruction: 0x032d3067
     1dc:	136604ce 	cmnne	r6, #-838860800	; 0xce000000
     1e0:	32323285 	eorscc	r3, r2, #1342177288	; 0x50000008
     1e4:	08323232 	ldmdaeq	r2!, {r1, r4, r5, r9, ip, sp}
     1e8:	3e592127 	rdfccep	f2, f1, f7
     1ec:	3e593e59 	mrccc	14, 2, r3, cr9, cr9, {2}
     1f0:	3e593e59 	mrccc	14, 2, r3, cr9, cr9, {2}
     1f4:	2d5a3e59 	ldclcs	14, cr3, [sl, #-356]	; 0xfffffe9c
     1f8:	20081003 	andcs	r1, r8, r3
     1fc:	213d2320 	teqcs	sp, r0, lsr #6
     200:	2f2f2d3e 	svccs	0x002f2d3e
     204:	032d3e21 			; <UNDEFINED> instruction: 0x032d3e21
     208:	21202e70 			; <UNDEFINED> instruction: 0x21202e70
     20c:	032d213d 			; <UNDEFINED> instruction: 0x032d213d
     210:	142e7af8 	strtne	r7, [lr], #-2808	; 0xaf8
     214:	3d3d251e 	cfldr32cc	mvfx2, [sp, #-120]!	; 0xffffff88
     218:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     21c:	8a2c3f3d 	bhi	b0ff18 <__Stack_Size+0xb0fb18>
     220:	243f2f20 	ldrtcs	r2, [pc], #-3872	; 228 <_Minimum_Stack_Size+0x128>
     224:	1f2f593e 	svcne	0x002f593e
     228:	3f3d2221 	svccc	0x003d2221
     22c:	4b21892c 	blmi	8626e4 <__Stack_Size+0x8622e4>
     230:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     234:	882c3f3d 	stmdahi	ip!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
     238:	1f2f4b21 	svcne	0x002f4b21
     23c:	3f3d2221 	svccc	0x003d2221
     240:	21208a2c 			; <UNDEFINED> instruction: 0x21208a2c
     244:	211f2f4b 	tstcs	pc, fp, asr #30
     248:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 1c8 <_Minimum_Stack_Size+0xc8>
     24c:	20900903 	addscs	r0, r0, r3, lsl #18
     250:	1f2f4b21 	svcne	0x002f4b21
     254:	3f3d2221 	svccc	0x003d2221
     258:	900b032c 	andls	r0, fp, ip, lsr #6
     25c:	2f4b2120 	svccs	0x004b2120
     260:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     264:	09032b40 	stmdbeq	r3, {r6, r8, r9, fp, sp}
     268:	4b212090 	blmi	8484b0 <__Stack_Size+0x8480b0>
     26c:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     270:	972b403d 			; <UNDEFINED> instruction: 0x972b403d
     274:	2f4b2120 	svccs	0x004b2120
     278:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     27c:	15032c3f 	strne	r2, [r3, #-3135]	; 0xc3f
     280:	4b212090 	blmi	8484c8 <__Stack_Size+0x8480c8>
     284:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     288:	982c3f3d 	stmdals	ip!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
     28c:	2f4b2120 	svccs	0x004b2120
     290:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     294:	15032c3f 	strne	r2, [r3, #-3135]	; 0xc3f
     298:	4b212090 	blmi	8484e0 <__Stack_Size+0x8480e0>
     29c:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     2a0:	972c3f3d 			; <UNDEFINED> instruction: 0x972c3f3d
     2a4:	2f4b2120 	svccs	0x004b2120
     2a8:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     2ac:	20962c3f 	addscs	r2, r6, pc, lsr ip
     2b0:	1f2f3d21 	svcne	0x002f3d21
     2b4:	3f3d2221 	svccc	0x003d2221
     2b8:	5940872c 	stmdbpl	r0, {r2, r3, r5, r8, r9, sl, pc}^
     2bc:	2e0b032b 	cdpcs	3, 0, cr0, cr11, cr11, {1}
     2c0:	20039e03 	andcs	r9, r3, r3, lsl #28
     2c4:	4d3e3d32 	ldcmi	13, cr3, [lr, #-200]!	; 0xffffff38
     2c8:	2f37242f 	svccs	0x0037242f
     2cc:	31302f2f 	teqcc	r0, pc, lsr #30
     2d0:	221e227a 	andscs	r2, lr, #-1610612729	; 0xa0000007
     2d4:	2f2f2b2c 	svccs	0x002f2b2c
     2d8:	695b2f31 	ldmdbvs	fp, {r0, r4, r5, r8, r9, sl, fp, sp}^
     2dc:	68215b59 	stmdavs	r1!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}
     2e0:	2f1f595a 	svccs	0x001f595a
     2e4:	21a43d92 			; <UNDEFINED> instruction: 0x21a43d92
     2e8:	22160867 	andscs	r0, r6, #6750208	; 0x670000
     2ec:	13402d4e 	movtne	r2, #3406	; 0xd4e
     2f0:	2220864b 	eorcs	r8, r0, #78643200	; 0x4b00000
     2f4:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     2f8:	4c4d3e01 	mcrrmi	14, 0, r3, sp, cr1
     2fc:	92032d21 	andls	r2, r3, #2112	; 0x840
     300:	3120587c 			; <UNDEFINED> instruction: 0x3120587c
     304:	4c2f231d 	stcmi	3, cr2, [pc], #-116	; 298 <_Minimum_Stack_Size+0x198>
     308:	01040200 	mrseq	r0, R12_usr
     30c:	02002006 	andeq	r2, r0, #6
     310:	2f060304 	svccs	0x00060304
     314:	03040200 	movweq	r0, #16896	; 0x4200
     318:	2b23333b 	blcs	8cd00c <__Stack_Size+0x8ccc0c>
     31c:	3c01d603 	stccc	6, cr13, [r1], {3}
     320:	2f3d404e 	svccs	0x003d404e
     324:	251b2f2f 	ldrcs	r2, [fp, #-3887]	; 0xf2f
     328:	3e3d2231 	mrccc	2, 1, r2, cr13, cr1, {1}
     32c:	30316a4d 	eorscc	r6, r1, sp, asr #20
     330:	4c513e3d 	mrrcmi	14, 3, r3, r1, cr13
     334:	01664f03 	cmneq	r6, r3, lsl #30
     338:	02950321 	addseq	r0, r5, #-2080374784	; 0x84000000
     33c:	166a133c 			; <UNDEFINED> instruction: 0x166a133c
     340:	00070240 	andeq	r0, r7, r0, asr #4
     344:	05000101 	streq	r0, [r0, #-257]	; 0x101
     348:	005b9c02 	subseq	r9, fp, r2, lsl #24
     34c:	03be0308 			; <UNDEFINED> instruction: 0x03be0308
     350:	31312501 	teqcc	r1, r1, lsl #10
     354:	4b303030 	blmi	c0c41c <__Stack_Size+0xc0c01c>
     358:	4b580e03 	blmi	1603b6c <__Stack_Size+0x160376c>
     35c:	5a4d3d5a 	bpl	134f8cc <__Stack_Size+0x134f4cc>
     360:	3d5a4c3d 	ldclcc	12, cr4, [sl, #-244]	; 0xffffff0c
     364:	000e024b 	andeq	r0, lr, fp, asr #4
     368:	01250101 			; <UNDEFINED> instruction: 0x01250101
     36c:	00020000 	andeq	r0, r2, r0
     370:	0000002d 	andeq	r0, r0, sp, lsr #32
     374:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     378:	0101000d 	tsteq	r1, sp
     37c:	00000101 	andeq	r0, r0, r1, lsl #2
     380:	00000100 	andeq	r0, r0, r0, lsl #2
     384:	50504101 	subspl	r4, r0, r1, lsl #2
     388:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     38c:	74730000 	ldrbtvc	r0, [r3], #-0
     390:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     394:	5f783031 	svcpl	0x00783031
     398:	632e7469 			; <UNDEFINED> instruction: 0x632e7469
     39c:	00000100 	andeq	r0, r0, r0, lsl #2
     3a0:	02050000 	andeq	r0, r5, #0
     3a4:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
     3a8:	03012303 	movweq	r2, #4867	; 0x1303
     3ac:	0200200b 	andeq	r2, r0, #11
     3b0:	03160104 	tsteq	r6, #4, 2
     3b4:	0200200b 	andeq	r2, r0, #11
     3b8:	03160104 	tsteq	r6, #4, 2
     3bc:	0200200b 	andeq	r2, r0, #11
     3c0:	03160104 	tsteq	r6, #4, 2
     3c4:	0200200b 	andeq	r2, r0, #11
     3c8:	03160104 	tsteq	r6, #4, 2
     3cc:	0b03200b 	bleq	c8400 <__Stack_Size+0xc8000>
     3d0:	200b0320 	andcs	r0, fp, r0, lsr #6
     3d4:	13200b03 			; <UNDEFINED> instruction: 0x13200b03
     3d8:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
     3dc:	0b03200b 	bleq	c8410 <__Stack_Size+0xc8010>
     3e0:	200b0320 	andcs	r0, fp, r0, lsr #6
     3e4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     3e8:	0b03200b 	bleq	c841c <__Stack_Size+0xc801c>
     3ec:	200b0320 	andcs	r0, fp, r0, lsr #6
     3f0:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     3f4:	0b03200b 	bleq	c8428 <__Stack_Size+0xc8028>
     3f8:	200b0320 	andcs	r0, fp, r0, lsr #6
     3fc:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     400:	0b03200b 	bleq	c8434 <__Stack_Size+0xc8034>
     404:	200b0320 	andcs	r0, fp, r0, lsr #6
     408:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     40c:	0c03200b 	stceq	0, cr2, [r3], {11}
     410:	200c0320 	andcs	r0, ip, r0, lsr #6
     414:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
     418:	0b03200b 	bleq	c844c <__Stack_Size+0xc804c>
     41c:	200b0320 	andcs	r0, fp, r0, lsr #6
     420:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     424:	0c03200c 	stceq	0, cr2, [r3], {12}
     428:	200b0320 	andcs	r0, fp, r0, lsr #6
     42c:	13200b03 			; <UNDEFINED> instruction: 0x13200b03
     430:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
     434:	0b03200b 	bleq	c8468 <__Stack_Size+0xc8068>
     438:	200b0320 	andcs	r0, fp, r0, lsr #6
     43c:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     440:	0b03200b 	bleq	c8474 <__Stack_Size+0xc8074>
     444:	200b0320 	andcs	r0, fp, r0, lsr #6
     448:	13200b03 			; <UNDEFINED> instruction: 0x13200b03
     44c:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
     450:	0b03200b 	bleq	c8484 <__Stack_Size+0xc8084>
     454:	200b0320 	andcs	r0, fp, r0, lsr #6
     458:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     45c:	0c03200b 	stceq	0, cr2, [r3], {11}
     460:	200c0320 	andcs	r0, ip, r0, lsr #6
     464:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     468:	0b03200b 	bleq	c849c <__Stack_Size+0xc809c>
     46c:	200b0320 	andcs	r0, fp, r0, lsr #6
     470:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     474:	0b03200b 	bleq	c84a8 <__Stack_Size+0xc80a8>
     478:	200b0320 	andcs	r0, fp, r0, lsr #6
     47c:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     480:	0b03200b 	bleq	c84b4 <__Stack_Size+0xc80b4>
     484:	200b0320 	andcs	r0, fp, r0, lsr #6
     488:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     48c:	0102200c 	tsteq	r2, ip
     490:	62010100 	andvs	r0, r1, #0, 2
     494:	02000000 	andeq	r0, r0, #0
     498:	00002800 	andeq	r2, r0, r0, lsl #16
     49c:	fb010200 	blx	40ca6 <__Stack_Size+0x408a6>
     4a0:	01000d0e 	tsteq	r0, lr, lsl #26
     4a4:	00010101 	andeq	r0, r1, r1, lsl #2
     4a8:	00010000 	andeq	r0, r1, r0
     4ac:	50410100 	subpl	r0, r1, r0, lsl #2
     4b0:	72732f50 	rsbsvc	r2, r3, #80, 30	; 0x140
     4b4:	64000063 	strvs	r0, [r0], #-99	; 0x63
     4b8:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     4bc:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
     4c0:	00000100 	andeq	r0, r0, r0, lsl #2
     4c4:	02050000 	andeq	r0, r5, #0
     4c8:	08003af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip, sp}
     4cc:	313e2616 	teqcc	lr, r6, lsl r6
     4d0:	32153216 	andscc	r3, r5, #1610612737	; 0x60000001
     4d4:	02003520 	andeq	r3, r0, #32, 10	; 0x8000000
     4d8:	3c060104 	stfccs	f0, [r6], {4}
     4dc:	03040200 	movweq	r0, #16896	; 0x4200
     4e0:	315b2f06 	cmpcc	fp, r6, lsl #30
     4e4:	02003520 	andeq	r3, r0, #32, 10	; 0x8000000
     4e8:	2e060104 	adfcss	f0, f6, f4
     4ec:	5d4b3006 	stclpl	0, cr3, [fp, #-24]	; 0xffffffe8
     4f0:	164e1731 			; <UNDEFINED> instruction: 0x164e1731
     4f4:	01000202 	tsteq	r0, r2, lsl #4
     4f8:	00015401 	andeq	r5, r1, r1, lsl #8
     4fc:	3f000200 	svccc	0x00000200
     500:	02000000 	andeq	r0, r0, #0
     504:	0d0efb01 	vstreq	d15, [lr, #-4]
     508:	01010100 	mrseq	r0, (UNDEF: 17)
     50c:	00000001 	andeq	r0, r0, r1
     510:	01000001 	tsteq	r0, r1
     514:	2f505041 	svccs	0x00505041
     518:	00637273 	rsbeq	r7, r3, r3, ror r2
     51c:	2f505041 	svccs	0x00505041
     520:	00636e69 	rsbeq	r6, r3, r9, ror #28
     524:	6e796400 	cdpvs	4, 7, cr6, cr9, cr0, {0}
     528:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
     52c:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
     530:	00000100 	andeq	r0, r0, r0, lsl #2
     534:	5f6c7864 	svcpl	0x006c7864
     538:	2e6c6168 	powcsez	f6, f4, #0.0
     53c:	00020068 	andeq	r0, r2, r8, rrx
     540:	05000000 	streq	r0, [r0, #-0]
     544:	003b5c02 	eorseq	r5, fp, r2, lsl #24
     548:	01130308 	tsteq	r3, r8, lsl #6
     54c:	5b221e24 	blpl	887de4 <__Stack_Size+0x8879e4>
     550:	1385413d 	orrne	r4, r5, #1073741839	; 0x4000000f
     554:	1e512532 	mrcne	5, 2, r2, cr1, cr2, {1}
     558:	22221e22 	eorcs	r1, r2, #544	; 0x220
     55c:	50232f3d 	eorpl	r2, r3, sp, lsr pc
     560:	211e2235 	tstcs	lr, r5, lsr r2
     564:	00206203 	eoreq	r6, r0, r3, lsl #4
     568:	03010402 	movweq	r0, #5122	; 0x1402
     56c:	02002e1f 	andeq	r2, r0, #496	; 0x1f0
     570:	594b0304 	stmdbpl	fp, {r2, r8, r9}^
     574:	50301e22 	eorspl	r1, r0, r2, lsr #28
     578:	3f4c4b31 	svccc	0x004c4b31
     57c:	302f402f 	eorcc	r4, pc, pc, lsr #32
     580:	7830221e 	ldmdavc	r0!, {r1, r2, r3, r4, r9, sp}
     584:	334c5b24 	movtcc	r5, #52004	; 0xcb24
     588:	b23f2f30 	eorslt	r2, pc, #48, 30	; 0xc0
     58c:	1f212d3d 	svcne	0x00212d3d
     590:	3d4e222f 	sfmcc	f2, 2, [lr, #-188]	; 0xffffff44
     594:	312e1903 			; <UNDEFINED> instruction: 0x312e1903
     598:	585e037c 	ldmdapl	lr, {r2, r3, r4, r5, r6, r8, r9}^
     59c:	34252f2f 	strtcc	r2, [r5], #-3887	; 0xf2f
     5a0:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
     5a4:	303c7a03 	eorscc	r7, ip, r3, lsl #20
     5a8:	459e0903 	ldrmi	r0, [lr, #2307]	; 0x903
     5ac:	140359a5 	strne	r5, [r3], #-2469	; 0x9a5
     5b0:	2f1f4b82 	svccs	0x001f4b82
     5b4:	2d3d4b22 	vldmdbcs	sp!, {d4-d20}
     5b8:	032f1f21 			; <UNDEFINED> instruction: 0x032f1f21
     5bc:	1a03206e 	bne	c877c <__Stack_Size+0xc837c>
     5c0:	2267913c 	rsbcs	r9, r7, #60, 2
     5c4:	22c80c03 	sbccs	r0, r8, #768	; 0x300
     5c8:	7a304f30 	bvc	c14290 <__Stack_Size+0xc13e90>
     5cc:	6a136914 	bvs	4daa24 <__Stack_Size+0x4da624>
     5d0:	6a136a13 	bvs	4dae24 <__Stack_Size+0x4daa24>
     5d4:	4e136a13 	mrcmi	10, 0, r6, cr3, cr3, {0}
     5d8:	13691469 	cmnne	r9, #1761607680	; 0x69000000
     5dc:	3017692f 	andscc	r6, r7, pc, lsr #18
     5e0:	18311731 	ldmdane	r1!, {r0, r4, r5, r8, r9, sl, ip}
     5e4:	0200133f 	andeq	r1, r0, #-67108864	; 0xfc000000
     5e8:	2e060104 	adfcss	f0, f6, f4
     5ec:	1e2f3106 	sufnee	f3, f7, f6
     5f0:	214e2222 	cmpcs	lr, r2, lsr #4
     5f4:	01040200 	mrseq	r0, R12_usr
     5f8:	31062e06 	tstcc	r6, r6, lsl #28
     5fc:	221c2f30 	andscs	r2, ip, #48, 30	; 0xc0
     600:	5b312222 	blpl	c48e90 <__Stack_Size+0xc48a90>
     604:	00211f13 	eoreq	r1, r1, r3, lsl pc
     608:	06010402 	streq	r0, [r1], -r2, lsl #8
     60c:	23300620 	teqcs	r0, #32, 12	; 0x2000000
     610:	211d231e 	tstcs	sp, lr, lsl r3
     614:	4e2d2322 	cdpmi	3, 2, cr2, cr13, cr2, {1}
     618:	04020021 	streq	r0, [r2], #-33	; 0x21
     61c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     620:	1c213031 	stcne	0, cr3, [r1], #-196	; 0xffffff3c
     624:	03271e24 			; <UNDEFINED> instruction: 0x03271e24
     628:	302e7fb5 	strhtcc	r7, [lr], -r5
     62c:	4a00cc03 	bmi	33640 <__Stack_Size+0x33240>
     630:	211f134d 	tstcs	pc, sp, asr #6
     634:	01040200 	mrseq	r0, R12_usr
     638:	33062006 	movwcc	r2, #24582	; 0x6006
     63c:	207fbc03 	rsbscs	fp, pc, r3, lsl #24
     640:	2e00c103 	mvfcss	f4, f3
     644:	1c241d24 	stcne	13, cr1, [r4], #-144	; 0xffffff70
     648:	2d232321 	stccs	3, cr2, [r3, #-132]!	; 0xffffff7c
     64c:	01000502 	tsteq	r0, r2, lsl #10
     650:	00020601 	andeq	r0, r2, r1, lsl #12
     654:	88000200 	stmdahi	r0, {r9}
     658:	02000000 	andeq	r0, r0, #0
     65c:	0d0efb01 	vstreq	d15, [lr, #-4]
     660:	01010100 	mrseq	r0, (UNDEF: 17)
     664:	00000001 	andeq	r0, r0, r1
     668:	01000001 	tsteq	r0, r1
     66c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     670:	30316632 	eorscc	r6, r1, r2, lsr r6
     674:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     678:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     67c:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     680:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     684:	5f783031 	svcpl	0x00783031
     688:	2f62696c 	svccs	0x0062696c
     68c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     690:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     694:	31663233 	cmncc	r6, r3, lsr r2
     698:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
     69c:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     6a0:	0100632e 	tsteq	r0, lr, lsr #6
     6a4:	74730000 	ldrbtvc	r0, [r3], #-0
     6a8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     6ac:	5f783031 	svcpl	0x00783031
     6b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     6b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     6b8:	74730000 	ldrbtvc	r0, [r3], #-0
     6bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     6c0:	5f783031 	svcpl	0x00783031
     6c4:	2e70616d 	rpwcssz	f6, f0, #5.0
     6c8:	00020068 	andeq	r0, r2, r8, rrx
     6cc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     6d0:	31663233 	cmncc	r6, r3, lsr r2
     6d4:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
     6d8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     6dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	3ed80205 	cdpcc	2, 13, cr0, cr8, cr5, {0}
     6e8:	d6030800 	strle	r0, [r3], -r0, lsl #16
     6ec:	59170100 	ldmdbpl	r7, {r8}
     6f0:	17740e03 	ldrbne	r0, [r4, -r3, lsl #28]!
     6f4:	740e0359 	strvc	r0, [lr], #-857	; 0x359
     6f8:	0c035917 	stceq	9, cr5, [r3], {23}
     6fc:	033d1474 	teqeq	sp, #116, 8	; 0x74000000
     700:	0314900b 	tsteq	r4, #11
     704:	148203f6 	strne	r0, [r2], #1014	; 0x3f6
     708:	4a0a032f 	bmi	2813cc <__Stack_Size+0x280fcc>
     70c:	0b032f14 	bleq	cc364 <__Stack_Size+0xcbf64>
     710:	0903154a 	stmdbeq	r3, {r1, r3, r6, r8, sl, ip}
     714:	660a032e 	strvs	r0, [sl], -lr, lsr #6
     718:	2e0a0315 	mcrcs	3, 0, r0, cr10, cr5, {0}
     71c:	28660e03 	stmdacs	r6!, {r0, r1, r9, sl, fp}^
     720:	0333231d 	teqeq	r3, #1946157056	; 0x74000000
     724:	3e187412 	cfmvrdlcc	r7, mvd8
     728:	03294126 			; <UNDEFINED> instruction: 0x03294126
     72c:	0f033c10 	svceq	0x00033c10
     730:	0c03174a 	stceq	7, cr1, [r3], {74}	; 0x4a
     734:	42501566 	subsmi	r1, r0, #427819008	; 0x19800000
     738:	4a700342 	bmi	1c01448 <__Stack_Size+0x1c01048>
     73c:	20100334 	andscs	r0, r0, r4, lsr r3
     740:	203c0c03 	eorscs	r0, ip, r3, lsl #24
     744:	02003124 	andeq	r3, r0, #36, 2
     748:	2e060104 	adfcss	f0, f6, f4
     74c:	20190306 	andscs	r0, r9, r6, lsl #6
     750:	74680330 	strbtvc	r0, [r8], #-816	; 0x330
     754:	035d332f 	cmpeq	sp, #-1140850688	; 0xbc000000
     758:	202e7ab2 	strhtcs	r7, [lr], -r2
     75c:	25314c27 	ldrcs	r4, [r1, #-3111]!	; 0xc27
     760:	4d214b29 	fstmdbxmi	r1!, {d4-d23}	;@ Deprecated
     764:	036b2330 	cmneq	fp, #48, 6	; 0xc0000000
     768:	4c244a0c 	stcmi	10, cr4, [r4], #-48	; 0xffffffd0
     76c:	4b2a2431 	blmi	a89838 <__Stack_Size+0xa89438>
     770:	6b23304d 	blvs	8cc8ac <__Stack_Size+0x8cc4ac>
     774:	243c0c03 	ldrtcs	r0, [ip], #-3075	; 0xc03
     778:	0336314c 	teqeq	r6, #76, 2
     77c:	3f212e78 	svccc	0x00212e78
     780:	31304d4b 	teqcc	r0, fp, asr #26
     784:	033c0903 	teqeq	ip, #49152	; 0xc000
     788:	23312077 	teqcs	r1, #119	; 0x77
     78c:	03313f1d 	teqeq	r1, #29, 30	; 0x74
     790:	6c232e0a 	stcvs	14, cr2, [r3], #-40	; 0xffffffd8
     794:	20740d03 	rsbscs	r0, r4, r3, lsl #26
     798:	20790327 	rsbscs	r0, r9, r7, lsr #6
     79c:	25323027 	ldrcs	r3, [r2, #-39]!	; 0x27
     7a0:	30314c1b 	eorscc	r4, r1, fp, lsl ip
     7a4:	0a033132 	beq	ccc74 <__Stack_Size+0xcc874>
     7a8:	036c233c 	cmneq	ip, #60, 6	; 0xf0000000
     7ac:	27204a0d 	strcs	r4, [r0, -sp, lsl #20]!
     7b0:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
     7b4:	1c243130 	stfnes	f3, [r4], #-192	; 0xffffff40
     7b8:	2330224c 	teqcs	r0, #76, 4	; 0xc0000004
     7bc:	4a0e036b 	bmi	381570 <__Stack_Size+0x381170>
     7c0:	7a032620 	bvc	ca048 <__Stack_Size+0xc9c48>
     7c4:	31302620 	teqcc	r0, r0, lsr #12
     7c8:	3f211b33 	svccc	0x00211b33
     7cc:	233d1c24 	teqcs	sp, #36, 24	; 0x2400
     7d0:	036b2330 	cmneq	fp, #48, 6	; 0xc0000000
     7d4:	03206614 			; <UNDEFINED> instruction: 0x03206614
     7d8:	033e200f 	teqeq	lr, #15
     7dc:	0c032e77 	stceq	14, cr2, [r3], {119}	; 0x77
     7e0:	2e750320 	cdpcs	3, 7, cr0, cr5, cr0, {1}
     7e4:	21200b03 			; <UNDEFINED> instruction: 0x21200b03
     7e8:	3e1e223d 	mrccc	2, 0, r2, cr14, cr13, {1}
     7ec:	03207203 			; <UNDEFINED> instruction: 0x03207203
     7f0:	23372e15 	teqcs	r7, #336	; 0x150
     7f4:	3e30231d 	mrccc	3, 1, r2, cr0, cr13, {0}
     7f8:	03206903 			; <UNDEFINED> instruction: 0x03206903
     7fc:	3f232017 	svccc	0x00232017
     800:	032e6403 			; <UNDEFINED> instruction: 0x032e6403
     804:	03302e1c 	teqeq	r0, #28, 28	; 0x1c0
     808:	1e032062 	cdpne	0, 0, cr2, cr3, cr2, {3}
     80c:	033f2320 	teqeq	pc, #32, 6	; 0x80000000
     810:	23032e5d 	movwcs	r2, #15965	; 0x3e5d
     814:	5b034c20 	blpl	d389c <__Stack_Size+0xd349c>
     818:	20250320 	eorcs	r0, r5, r0, lsr #6
     81c:	6b313f23 	blvs	c504b0 <__Stack_Size+0xc500b0>
     820:	20741003 	rsbscs	r1, r4, r3
     824:	35314c26 	ldrcc	r4, [r1, #-3110]!	; 0xc26
     828:	212e7903 			; <UNDEFINED> instruction: 0x212e7903
     82c:	304d4b3e 	subcc	r4, sp, lr, lsr fp
     830:	225a5b31 	subscs	r5, sl, #50176	; 0xc400
     834:	314c3232 	cmpcc	ip, r2, lsr r2
     838:	036c2379 	cmneq	ip, #-469762047	; 0xe4000001
     83c:	09037418 	stmdbeq	r3, {r3, r4, sl, ip, sp, lr}
     840:	2e770320 	cdpcs	3, 7, cr0, cr7, cr0, {1}
     844:	21200903 			; <UNDEFINED> instruction: 0x21200903
     848:	2073033f 	rsbscs	r0, r3, pc, lsr r3
     84c:	302e0d03 	eorcc	r0, lr, r3, lsl #26
     850:	3e3f7631 	mrccc	6, 1, r7, cr15, cr1, {1}
     854:	07026b23 	streq	r6, [r2, -r3, lsr #22]
     858:	7e010100 	adfvcs	f0, f1, f0
     85c:	02000001 	andeq	r0, r0, #1
     860:	00009900 	andeq	r9, r0, r0, lsl #18
     864:	fb010200 	blx	4106e <__Stack_Size+0x40c6e>
     868:	01000d0e 	tsteq	r0, lr, lsl #26
     86c:	00010101 	andeq	r0, r1, r1, lsl #2
     870:	00010000 	andeq	r0, r1, r0
     874:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
     878:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     87c:	5f783031 	svcpl	0x00783031
     880:	2f62696c 	svccs	0x0062696c
     884:	00637273 	rsbeq	r7, r3, r3, ror r2
     888:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     88c:	30316632 	eorscc	r6, r1, r2, lsr r6
     890:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     894:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     898:	73000063 	movwvc	r0, #99	; 0x63
     89c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8a0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     8a4:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     8a8:	00632e6f 	rsbeq	r2, r3, pc, ror #28
     8ac:	73000001 	movwvc	r0, #1
     8b0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8b4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     8b8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     8bc:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8c0:	73000002 	movwvc	r0, #2
     8c4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8c8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     8cc:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     8d0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8d4:	74730000 	ldrbtvc	r0, [r3], #-0
     8d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8dc:	5f783031 	svcpl	0x00783031
     8e0:	6f697067 	svcvs	0x00697067
     8e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8e8:	74730000 	ldrbtvc	r0, [r3], #-0
     8ec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8f0:	5f783031 	svcpl	0x00783031
     8f4:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     8f8:	00020068 	andeq	r0, r2, r8, rrx
     8fc:	05000000 	streq	r0, [r0, #-0]
     900:	00435802 	subeq	r5, r3, r2, lsl #16
     904:	01330308 	teqeq	r3, r8, lsl #6
     908:	2a4bf524 	bcs	12fdda0 <__Stack_Size+0x12fd9a0>
     90c:	4bac1703 	blmi	feb06520 <SCS_BASE+0x1eaf8520>
     910:	4b2e7003 	blmi	b9c924 <__Stack_Size+0xb9c524>
     914:	4b324b32 	blmi	c935e4 <__Stack_Size+0xc931e4>
     918:	4b2e0903 	blmi	b82d2c <__Stack_Size+0xb8292c>
     91c:	03425932 	movteq	r5, #10546	; 0x2932
     920:	12032e7a 	andne	r2, r3, #1952	; 0x7a0
     924:	2d4c2182 	stfcse	f2, [ip, #-520]	; 0xfffffdf8
     928:	034a0f03 	movteq	r0, #44803	; 0xaf03
     92c:	7603010a 	strvc	r0, [r3], -sl, lsl #2
     930:	200c0320 	andcs	r0, ip, r0, lsr #6
     934:	74033325 	strvc	r3, [r3], #-805	; 0x325
     938:	3e333520 	cfabs64cc	mvdx3, mvdx3
     93c:	30302222 	eorscc	r2, r0, r2, lsr #4
     940:	343d3030 	ldrtcc	r3, [sp], #-48	; 0x30
     944:	33224d1d 			; <UNDEFINED> instruction: 0x33224d1d
     948:	04020022 	streq	r0, [r2], #-34	; 0x22
     94c:	2e660302 	cdpcs	3, 6, cr0, cr6, cr2, {0}
     950:	253c1f03 	ldrcs	r1, [ip, #-3843]!	; 0xf03
     954:	303e2130 	eorscc	r2, lr, r0, lsr r1
     958:	3d30302f 	ldccc	0, cr3, [r0, #-188]!	; 0xffffff44
     95c:	224d1d34 	subcs	r1, sp, #52, 26	; 0xd00
     960:	02002231 	andeq	r2, r0, #268435459	; 0x10000003
     964:	69030204 	stmdbvs	r3, {r2, r9}
     968:	3c1b032e 	ldccc	3, cr0, [fp], {46}	; 0x2e
     96c:	142e0d03 	strtne	r0, [lr], #-3331	; 0xd03
     970:	0d032f3d 	stceq	15, cr2, [r3, #-244]	; 0xffffff0c
     974:	0903193c 	stmdbeq	r3, {r2, r3, r4, r5, r8, fp, ip}
     978:	4a0a032e 	bmi	281638 <__Stack_Size+0x281238>
     97c:	0c032116 	stfeqs	f2, [r3], {22}
     980:	0903192e 	stmdbeq	r3, {r1, r2, r3, r5, r8, fp, ip}
     984:	4a0a032e 	bmi	281644 <__Stack_Size+0x281244>
     988:	0d032116 	stfeqs	f2, [r3, #-88]	; 0xffffffa8
     98c:	0e03172e 	cdpeq	7, 0, cr1, cr3, cr14, {1}
     990:	1103172e 	tstne	r3, lr, lsr #14
     994:	3222182e 	eorcc	r1, r2, #3014656	; 0x2e0000
     998:	162e0e03 	strtne	r0, [lr], -r3, lsl #28
     99c:	192e0e03 	stmdbne	lr!, {r0, r1, r9, sl, fp}
     9a0:	22222230 	eorcs	r2, r2, #48, 4
     9a4:	2e100322 	cdpcs	3, 1, cr0, cr0, cr2, {1}
     9a8:	305a3019 	subscc	r3, sl, r9, lsl r0
     9ac:	16580c03 	ldrbne	r0, [r8], -r3, lsl #24
     9b0:	27662703 	strbcs	r2, [r6, -r3, lsl #14]!
     9b4:	22234525 	eorcs	r4, r3, #155189248	; 0x9400000
     9b8:	4c2f1f23 	stcmi	15, cr1, [pc], #-140	; 934 <__Stack_Size+0x534>
     9bc:	2e7a0328 	cdpcs	3, 7, cr0, cr10, cr8, {1}
     9c0:	20700326 	rsbscs	r0, r0, r6, lsr #6
     9c4:	342e0a03 	strtcc	r0, [lr], #-2563	; 0xa03
     9c8:	4d22314b 	stfmis	f3, [r2, #-300]!	; 0xfffffed4
     9cc:	19661003 	stmdbne	r6!, {r0, r1, ip}^
     9d0:	27827903 	strcs	r7, [r2, r3, lsl #18]
     9d4:	3d301e22 	ldccc	14, cr1, [r0, #-136]!	; 0xffffff78
     9d8:	01000502 	tsteq	r0, r2, lsl #10
     9dc:	0001ce01 	andeq	ip, r1, r1, lsl #28
     9e0:	9a000200 	bls	11e8 <__Stack_Size+0xde8>
     9e4:	02000000 	andeq	r0, r0, #0
     9e8:	0d0efb01 	vstreq	d15, [lr, #-4]
     9ec:	01010100 	mrseq	r0, (UNDEF: 17)
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	01000001 	tsteq	r0, r1
     9f8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     9fc:	30316632 	eorscc	r6, r1, r2, lsr r6
     a00:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a04:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     a08:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     a0c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a10:	5f783031 	svcpl	0x00783031
     a14:	2f62696c 	svccs	0x0062696c
     a18:	00636e69 	rsbeq	r6, r3, r9, ror #28
     a1c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a20:	31663233 	cmncc	r6, r3, lsr r2
     a24:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
     a28:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
     a2c:	00010063 	andeq	r0, r1, r3, rrx
     a30:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a34:	31663233 	cmncc	r6, r3, lsr r2
     a38:	745f7830 	ldrbvc	r7, [pc], #-2096	; a40 <__Stack_Size+0x640>
     a3c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     a40:	00020068 	andeq	r0, r2, r8, rrx
     a44:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a48:	31663233 	cmncc	r6, r3, lsr r2
     a4c:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 994 <__Stack_Size+0x594>
     a50:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     a54:	00000200 	andeq	r0, r0, r0, lsl #4
     a58:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a5c:	30316632 	eorscc	r6, r1, r2, lsr r6
     a60:	766e5f78 	uqsub16vc	r5, lr, r8
     a64:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
     a68:	00000200 	andeq	r0, r0, r0, lsl #4
     a6c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     a70:	336d7865 	cmncc	sp, #6619136	; 0x650000
     a74:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
     a78:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     a7c:	00000200 	andeq	r0, r0, r0, lsl #4
     a80:	02050000 	andeq	r0, r5, #0
     a84:	080045b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, lr}
     a88:	15012403 	strne	r2, [r1, #-1027]	; 0x403
     a8c:	2f4b2d21 	svccs	0x004b2d21
     a90:	0200302f 	andeq	r3, r0, #47	; 0x2f
     a94:	00220304 	eoreq	r0, r2, r4, lsl #6
     a98:	2c030402 	cfstrscs	mvf0, [r3], {2}
     a9c:	03040200 	movweq	r0, #16896	; 0x4200
     aa0:	04020022 	streq	r0, [r2], #-34	; 0x22
     aa4:	02001e03 	andeq	r1, r0, #3, 28	; 0x30
     aa8:	00220304 	eoreq	r0, r2, r4, lsl #6
     aac:	2c030402 	cfstrscs	mvf0, [r3], {2}
     ab0:	4a0b0324 	bmi	2c1748 <__Stack_Size+0x2c1348>
     ab4:	211e3e15 	tstcs	lr, r5, lsl lr
     ab8:	2321212f 			; <UNDEFINED> instruction: 0x2321212f
     abc:	213d213e 	teqcs	sp, lr, lsr r1
     ac0:	17661703 	strbne	r1, [r6, -r3, lsl #14]!
     ac4:	039e0e03 	orrseq	r0, lr, #3, 28	; 0x30
     ac8:	7603010a 	strvc	r0, [r3], -sl, lsl #2
     acc:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
     ad0:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
     ad4:	3d1c242e 	cfldrscc	mvf2, [ip, #-184]	; 0xffffff48
     ad8:	95312c31 	ldrls	r2, [r1, #-3121]!	; 0xc31
     adc:	2b241f2c 	blcs	908794 <__Stack_Size+0x908394>
     ae0:	22212f24 	eorcs	r2, r1, #36, 30	; 0x90
     ae4:	211f2131 	tstcs	pc, r1, lsr r1	; <UNPREDICTABLE>
     ae8:	49215049 	stmdbmi	r1!, {r0, r3, r6, ip, lr}
     aec:	149e0e03 	ldrne	r0, [lr], #3587	; 0xe03
     af0:	0321212f 			; <UNDEFINED> instruction: 0x0321212f
     af4:	03132e0b 	tsteq	r3, #11, 28	; 0xb0
     af8:	03132e0b 	tsteq	r3, #11, 28	; 0xb0
     afc:	03132e0b 	tsteq	r3, #11, 28	; 0xb0
     b00:	03132e0b 	tsteq	r3, #11, 28	; 0xb0
     b04:	03162e0d 	tsteq	r6, #13, 28	; 0xd0
     b08:	03133c0b 	tsteq	r3, #2816	; 0xb00
     b0c:	2f132e0b 	svccs	0x00132e0b
     b10:	19580b03 	ldmdbne	r8, {r0, r1, r8, r9, fp}^
     b14:	6609034c 	strvs	r0, [r9], -ip, asr #6
     b18:	16660a03 	strbtne	r0, [r6], -r3, lsl #20
     b1c:	16660b03 	strbtne	r0, [r6], -r3, lsl #22
     b20:	13ba0c03 			; <UNDEFINED> instruction: 0x13ba0c03
     b24:	660b032f 	strvs	r0, [fp], -pc, lsr #6
     b28:	09034c19 	stmdbeq	r3, {r0, r3, r4, sl, fp, lr}
     b2c:	660b0366 	strvs	r0, [fp], -r6, ror #6
     b30:	10032f13 	andne	r2, r3, r3, lsl pc
     b34:	0b03174a 	bleq	c6864 <__Stack_Size+0xc6464>
     b38:	0b03139e 	bleq	c59b8 <__Stack_Size+0xc55b8>
     b3c:	12031382 	andne	r1, r3, #134217730	; 0x8000002
     b40:	221e2782 	andscs	r2, lr, #34078720	; 0x2080000
     b44:	74130332 	ldrvc	r0, [r3], #-818	; 0x332
     b48:	40225a19 	eormi	r5, r2, r9, lsl sl
     b4c:	03741a03 	cmneq	r4, #12288	; 0x3000
     b50:	77030109 	strvc	r0, [r3, -r9, lsl #2]
     b54:	20090320 	andcs	r0, r9, r0, lsr #6
     b58:	3f1e314b 	svccc	0x001e314b
     b5c:	26702d25 	ldrbtcs	r2, [r0], -r5, lsr #26
     b60:	3d221e23 	stccc	14, cr1, [r2, #-140]!	; 0xffffff74
     b64:	24207803 	strtcs	r7, [r0], #-2051	; 0x803
     b68:	66110324 	ldrvs	r0, [r1], -r4, lsr #6
     b6c:	1c010c03 	stcne	12, cr0, [r1], {3}
     b70:	0b033030 	bleq	ccc38 <__Stack_Size+0xcc838>
     b74:	740f032e 	strvc	r0, [pc], #-814	; b7c <__Stack_Size+0x77c>
     b78:	1e010903 	cdpne	9, 0, cr0, cr1, cr3, {0}
     b7c:	900f0330 	andls	r0, pc, r0, lsr r3	; <UNPREDICTABLE>
     b80:	1e010903 	cdpne	9, 0, cr0, cr1, cr3, {0}
     b84:	90150330 	andsls	r0, r5, r0, lsr r3
     b88:	1c010c03 	stcne	12, cr0, [r1], {3}
     b8c:	0b033030 	bleq	ccc54 <__Stack_Size+0xcc854>
     b90:	7411032e 	ldrvc	r0, [r1], #-814	; 0x32e
     b94:	30223f19 	eorcc	r3, r2, r9, lsl pc
     b98:	362e7a03 	strtcc	r7, [lr], -r3, lsl #20
     b9c:	3340223d 	movtcc	r2, #573	; 0x23d
     ba0:	4a0f0323 	bmi	3c1834 <__Stack_Size+0x3c1434>
     ba4:	30200903 	eorcc	r0, r0, r3, lsl #18
     ba8:	04022332 	streq	r2, [r2], #-818	; 0x332
     bac:	e7010100 	str	r0, [r1, -r0, lsl #2]
     bb0:	02000000 	andeq	r0, r0, #0
     bb4:	00009800 	andeq	r9, r0, r0, lsl #16
     bb8:	fb010200 	blx	413c2 <__Stack_Size+0x40fc2>
     bbc:	01000d0e 	tsteq	r0, lr, lsl #26
     bc0:	00010101 	andeq	r0, r1, r1, lsl #2
     bc4:	00010000 	andeq	r0, r1, r0
     bc8:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
     bcc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     bd0:	5f783031 	svcpl	0x00783031
     bd4:	2f62696c 	svccs	0x0062696c
     bd8:	00637273 	rsbeq	r7, r3, r3, ror r2
     bdc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     be0:	30316632 	eorscc	r6, r1, r2, lsr r6
     be4:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     be8:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     bec:	73000063 	movwvc	r0, #99	; 0x63
     bf0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     bf4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     bf8:	7277705f 	rsbsvc	r7, r7, #95	; 0x5f
     bfc:	0100632e 	tsteq	r0, lr, lsr #6
     c00:	74730000 	ldrbtvc	r0, [r3], #-0
     c04:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c08:	5f783031 	svcpl	0x00783031
     c0c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     c10:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     c14:	74730000 	ldrbtvc	r0, [r3], #-0
     c18:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c1c:	5f783031 	svcpl	0x00783031
     c20:	2e70616d 	rpwcssz	f6, f0, #5.0
     c24:	00020068 	andeq	r0, r2, r8, rrx
     c28:	726f6300 	rsbvc	r6, pc, #0, 6
     c2c:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
     c30:	616d5f33 	cmnvs	sp, r3, lsr pc
     c34:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     c38:	00020068 	andeq	r0, r2, r8, rrx
     c3c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     c40:	31663233 	cmncc	r6, r3, lsr r2
     c44:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
     c48:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     c4c:	00000200 	andeq	r0, r0, r0, lsl #4
     c50:	02050000 	andeq	r0, r5, #0
     c54:	080048c4 	stmdaeq	r0, {r2, r6, r7, fp, lr}
     c58:	0100c303 	tsteq	r0, r3, lsl #6
     c5c:	032d5a21 			; <UNDEFINED> instruction: 0x032d5a21
     c60:	0316580c 	tsteq	r6, #12, 16	; 0xc0000
     c64:	0316580c 	tsteq	r6, #12, 16	; 0xc0000
     c68:	31186615 	tstcc	r8, r5, lsl r6
     c6c:	0c032331 	stceq	3, cr2, [r3], {49}	; 0x31
     c70:	14031658 	strne	r1, [r3], #-1624	; 0x658
     c74:	0f031a66 	svceq	0x00031a66
     c78:	20710320 	rsbscs	r0, r1, r0, lsr #6
     c7c:	23313123 	teqcs	r1, #-1073741816	; 0xc0000008
     c80:	0333235b 	teqeq	r3, #1811939329	; 0x6c000001
     c84:	5b14660c 	blpl	51a4bc <__Stack_Size+0x51a0bc>
     c88:	0f035b4d 	svceq	0x00035b4d
     c8c:	0b031866 	bleq	c6e2c <__Stack_Size+0xc6a2c>
     c90:	740d033c 	strvc	r0, [sp], #-828	; 0x33c
     c94:	00080216 	andeq	r0, r8, r6, lsl r2
     c98:	019c0101 	orrseq	r0, ip, r1, lsl #2
     c9c:	00020000 	andeq	r0, r2, r0
     ca0:	00000084 	andeq	r0, r0, r4, lsl #1
     ca4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ca8:	0101000d 	tsteq	r1, sp
     cac:	00000101 	andeq	r0, r0, r1, lsl #2
     cb0:	00000100 	andeq	r0, r0, r0, lsl #2
     cb4:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     cb8:	31663233 	cmncc	r6, r3, lsr r2
     cbc:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     cc0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     cc4:	73006372 	movwvc	r6, #882	; 0x372
     cc8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     ccc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     cd0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     cd4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     cd8:	74730000 	ldrbtvc	r0, [r3], #-0
     cdc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     ce0:	5f783031 	svcpl	0x00783031
     ce4:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     ce8:	00010063 	andeq	r0, r1, r3, rrx
     cec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     cf0:	31663233 	cmncc	r6, r3, lsr r2
     cf4:	745f7830 	ldrbvc	r7, [pc], #-2096	; cfc <__Stack_Size+0x8fc>
     cf8:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     cfc:	00020068 	andeq	r0, r2, r8, rrx
     d00:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     d04:	31663233 	cmncc	r6, r3, lsr r2
     d08:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; c50 <__Stack_Size+0x850>
     d0c:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     d10:	00000200 	andeq	r0, r0, r0, lsl #4
     d14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d18:	30316632 	eorscc	r6, r1, r2, lsr r6
     d1c:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     d20:	00682e63 	rsbeq	r2, r8, r3, ror #28
     d24:	00000002 	andeq	r0, r0, r2
     d28:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     d2c:	03080049 	movweq	r0, #32841	; 0x8049
     d30:	140100fc 	strne	r0, [r1], #-252	; 0xfc
     d34:	4d694d5b 	stclmi	13, cr4, [r9, #-364]!	; 0xfffffe94
     d38:	7412034d 	ldrvc	r0, [r2], #-845	; 0x34d
     d3c:	7a032618 	bvc	ca5a4 <__Stack_Size+0xca1a4>
     d40:	5c4d4d2e 	mcrrpl	13, 2, r4, sp, cr14
     d44:	8235034f 	eorshi	r0, r5, #1006632961	; 0x3c000001
     d48:	31313118 	teqcc	r1, r8, lsl r1
     d4c:	164a0e03 	strbne	r0, [sl], -r3, lsl #28
     d50:	19661503 	stmdbne	r6!, {r0, r1, r8, sl, ip}^
     d54:	03233f31 			; <UNDEFINED> instruction: 0x03233f31
     d58:	03164a0d 	tsteq	r6, #53248	; 0xd000
     d5c:	3118660f 	tstcc	r8, pc, lsl #12
     d60:	0f032331 	svceq	0x00032331
     d64:	032f1358 			; <UNDEFINED> instruction: 0x032f1358
     d68:	31186615 	tstcc	r8, r5, lsl r6
     d6c:	12032331 	andne	r2, r3, #-1006632960	; 0xc4000000
     d70:	31311858 	teqcc	r1, r8, asr r8
     d74:	58120323 	ldmdapl	r2, {r0, r1, r5, r8, r9}
     d78:	31313118 	teqcc	r1, r8, lsl r1
     d7c:	284a1403 	stmdacs	sl, {r0, r1, sl, ip}^
     d80:	0333231d 	teqeq	r3, #1946157056	; 0x74000000
     d84:	03167412 	tsteq	r6, #301989888	; 0x12000000
     d88:	31186611 	tstcc	r8, r1, lsl r6
     d8c:	10032331 	andne	r2, r3, r1, lsr r3
     d90:	03341858 	teqeq	r4, #88, 16	; 0x580000
     d94:	2323207a 			; <UNDEFINED> instruction: 0x2323207a
     d98:	0324214e 			; <UNDEFINED> instruction: 0x0324214e
     d9c:	03165812 	tsteq	r6, #1179648	; 0x120000
     da0:	03176612 	tsteq	r7, #18874368	; 0x1200000
     da4:	0316820e 	tsteq	r6, #-536870912	; 0xe0000000
     da8:	1c16660c 	ldcne	6, cr6, [r6], {12}
     dac:	33513e24 	cmpcc	r1, #36, 28	; 0x240
     db0:	1c321e23 	ldcne	14, cr1, [r2], #-140	; 0xffffff74
     db4:	323f2732 	eorscc	r2, pc, #13107200	; 0xc80000
     db8:	223c0c03 	eorscs	r0, ip, #768	; 0x300
     dbc:	214d321f 	cmpcs	sp, pc, lsl r2
     dc0:	32214d32 	eorcc	r4, r1, #3200	; 0xc80
     dc4:	312f213f 			; <UNDEFINED> instruction: 0x312f213f
     dc8:	27c81603 	strbcs	r1, [r8, r3, lsl #12]
     dcc:	0332221e 	teqeq	r2, #-536870911	; 0xe0000001
     dd0:	1e277416 	mcrne	4, 1, r7, cr7, cr6, {0}
     dd4:	17033222 	strne	r3, [r3, -r2, lsr #4]
     dd8:	221e2774 	andscs	r2, lr, #116, 14	; 0x1d00000
     ddc:	74150332 	ldrvc	r0, [r5], #-818	; 0x332
     de0:	32221e27 	eorcc	r1, r2, #624	; 0x270
     de4:	27741603 	ldrbcs	r1, [r4, -r3, lsl #12]!
     de8:	0332221e 	teqeq	r2, #-536870911	; 0xe0000001
     dec:	0316740d 	tsteq	r6, #218103808	; 0xd000000
     df0:	0316660c 	tsteq	r6, #12, 12	; 0xc00000
     df4:	03176611 	tsteq	r7, #17825792	; 0x1100000
     df8:	09036617 	stmdbeq	r3, {r0, r1, r2, r4, r9, sl, sp, lr}
     dfc:	303e2201 	eorscc	r2, lr, r1, lsl #4
     e00:	03263222 			; <UNDEFINED> instruction: 0x03263222
     e04:	c3034a0b 	movwgt	r4, #14859	; 0x3a0b
     e08:	00216679 	eoreq	r6, r1, r9, ror r6
     e0c:	35020402 	strcc	r0, [r2, #-1026]	; 0x402
     e10:	02040200 	andeq	r0, r4, #0, 4
     e14:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     e18:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
     e1c:	20060104 	andcs	r0, r6, r4, lsl #2
     e20:	0a034d06 	beq	d4240 <__Stack_Size+0xd3e40>
     e24:	06b3033c 			; <UNDEFINED> instruction: 0x06b3033c
     e28:	12031466 	andne	r1, r3, #1711276032	; 0x66000000
     e2c:	0b031990 	bleq	c7474 <__Stack_Size+0xc7074>
     e30:	7411033c 	ldrvc	r0, [r1], #-828	; 0x33c
     e34:	00060218 	andeq	r0, r6, r8, lsl r2
     e38:	00b10101 	adcseq	r0, r1, r1, lsl #2
     e3c:	00020000 	andeq	r0, r2, r0
     e40:	00000075 	andeq	r0, r0, r5, ror r0
     e44:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     e48:	0101000d 	tsteq	r1, sp
     e4c:	00000101 	andeq	r0, r0, r1, lsl #2
     e50:	00000100 	andeq	r0, r0, r0, lsl #2
     e54:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     e58:	31663233 	cmncc	r6, r3, lsr r2
     e5c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     e60:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     e64:	73006372 	movwvc	r6, #882	; 0x372
     e68:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     e6c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e70:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     e74:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     e78:	74730000 	ldrbtvc	r0, [r3], #-0
     e7c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e80:	5f783031 	svcpl	0x00783031
     e84:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     e88:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
     e8c:	00010063 	andeq	r0, r1, r3, rrx
     e90:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     e94:	31663233 	cmncc	r6, r3, lsr r2
     e98:	745f7830 	ldrbvc	r7, [pc], #-2096	; ea0 <__Stack_Size+0xaa0>
     e9c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     ea0:	00020068 	andeq	r0, r2, r8, rrx
     ea4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     ea8:	31663233 	cmncc	r6, r3, lsr r2
     eac:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; df4 <__Stack_Size+0x9f4>
     eb0:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     eb4:	00000200 	andeq	r0, r0, r0, lsl #4
     eb8:	02050000 	andeq	r0, r5, #0
     ebc:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
     ec0:	24012b03 	strcs	r2, [r1], #-2819	; 0xb03
     ec4:	0d034e22 	stceq	14, cr4, [r3, #-136]	; 0xffffff78
     ec8:	0f031666 	svceq	0x00031666
     ecc:	4c3e1666 	ldcmi	6, cr1, [lr], #-408	; 0xfffffe68
     ed0:	0d035c30 	stceq	12, cr5, [r3, #-192]	; 0xffffff40
     ed4:	221e2666 	andscs	r2, lr, #106954752	; 0x6600000
     ed8:	660c0340 	strvs	r0, [ip], -r0, asr #6
     edc:	0e032f13 	mcreq	15, 0, r2, cr3, cr3, {0}
     ee0:	010a034a 	tsteq	sl, sl, asr #6
     ee4:	0323323e 			; <UNDEFINED> instruction: 0x0323323e
     ee8:	06022e09 	streq	r2, [r2], -r9, lsl #28
     eec:	d7010100 	strle	r0, [r1, -r0, lsl #2]
     ef0:	02000004 	andeq	r0, r0, #4
     ef4:	00009700 	andeq	r9, r0, r0, lsl #14
     ef8:	fb010200 	blx	41702 <__Stack_Size+0x41302>
     efc:	01000d0e 	tsteq	r0, lr, lsl #26
     f00:	00010101 	andeq	r0, r1, r1, lsl #2
     f04:	00010000 	andeq	r0, r1, r0
     f08:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
     f0c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f10:	5f783031 	svcpl	0x00783031
     f14:	2f62696c 	svccs	0x0062696c
     f18:	00637273 	rsbeq	r7, r3, r3, ror r2
     f1c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f20:	30316632 	eorscc	r6, r1, r2, lsr r6
     f24:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f28:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     f2c:	73000063 	movwvc	r0, #99	; 0x63
     f30:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     f34:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     f38:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     f3c:	0100632e 	tsteq	r0, lr, lsr #6
     f40:	74730000 	ldrbtvc	r0, [r3], #-0
     f44:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f48:	5f783031 	svcpl	0x00783031
     f4c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     f50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f54:	74730000 	ldrbtvc	r0, [r3], #-0
     f58:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f5c:	5f783031 	svcpl	0x00783031
     f60:	2e70616d 	rpwcssz	f6, f0, #5.0
     f64:	00020068 	andeq	r0, r2, r8, rrx
     f68:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     f6c:	31663233 	cmncc	r6, r3, lsr r2
     f70:	745f7830 	ldrbvc	r7, [pc], #-2096	; f78 <__Stack_Size+0xb78>
     f74:	682e6d69 	stmdavs	lr!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}
     f78:	00000200 	andeq	r0, r0, r0, lsl #4
     f7c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f80:	30316632 	eorscc	r6, r1, r2, lsr r6
     f84:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     f88:	00682e63 	rsbeq	r2, r8, r3, ror #28
     f8c:	00000002 	andeq	r0, r0, r2
     f90:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     f94:	0308004d 	movweq	r0, #32845	; 0x804d
     f98:	240117ee 	strcs	r1, [r1], #-2030	; 0x7ee
     f9c:	211f2168 	tstcs	pc, r8, ror #2
     fa0:	5c2b4023 	stcpl	0, cr4, [fp], #-140	; 0xffffff74
     fa4:	1b032123 	blne	c9438 <__Stack_Size+0xc9038>
     fa8:	2168242e 	cmncs	r8, lr, lsr #8
     fac:	33242a24 			; <UNDEFINED> instruction: 0x33242a24
     fb0:	242a3263 	strtcs	r3, [sl], #-611	; 0x263
     fb4:	d5032123 	strle	r2, [r3, #-291]	; 0x123
     fb8:	ec242e68 	stc	14, cr2, [r4], #-416	; 0xfffffe60
     fbc:	2e77034b 	cdpcs	3, 7, cr0, cr7, cr11, {2}
     fc0:	03591508 	cmpeq	r9, #8, 10	; 0x2000000
     fc4:	034b3c09 	movteq	r3, #48137	; 0xbc09
     fc8:	61032e1f 	tstvs	r3, pc, lsl lr
     fcc:	324b322e 	subcc	r3, fp, #-536870910	; 0xe0000002
     fd0:	324b324b 	subcc	r3, fp, #-1342177276	; 0xb0000004
     fd4:	4259324b 	subsmi	r3, r9, #-1342177276	; 0xb0000004
     fd8:	032e7a03 			; <UNDEFINED> instruction: 0x032e7a03
     fdc:	59199015 	ldmdbpl	r9, {r0, r2, r4, ip, pc}
     fe0:	30313177 	eorscc	r3, r1, r7, ror r1
     fe4:	01040200 	mrseq	r0, R12_usr
     fe8:	4d063c06 	stcmi	12, cr3, [r6, #-24]	; 0xffffffe8
     fec:	03581103 	cmpeq	r8, #-1073741824	; 0xc0000000
     ff0:	7603010a 	strvc	r0, [r3], -sl, lsl #2
     ff4:	200a0320 	andcs	r0, sl, r0, lsr #6
     ff8:	2623235b 			; <UNDEFINED> instruction: 0x2623235b
     ffc:	3f2b501d 	svccc	0x002b501d
    1000:	032e0903 			; <UNDEFINED> instruction: 0x032e0903
    1004:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    1008:	251b2220 	ldrcs	r2, [fp, #-544]	; 0x220
    100c:	03206903 			; <UNDEFINED> instruction: 0x03206903
    1010:	00252012 	eoreq	r2, r5, r2, lsl r0
    1014:	06010402 	streq	r0, [r1], -r2, lsl #8
    1018:	15030620 	strne	r0, [r3, #-1568]	; 0x620
    101c:	2e76034a 	cdpcs	3, 7, cr0, cr6, cr10, {2}
    1020:	1d26311d 	stfnes	f3, [r6, #-116]!	; 0xffffff8c
    1024:	0a031c35 	beq	c8100 <__Stack_Size+0xc7d00>
    1028:	2323314a 			; <UNDEFINED> instruction: 0x2323314a
    102c:	03581003 	cmpeq	r8, #3
    1030:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    1034:	200a0320 	andcs	r0, sl, r0, lsr #6
    1038:	2623235b 			; <UNDEFINED> instruction: 0x2623235b
    103c:	2b314d1d 	blcs	c544b8 <__Stack_Size+0xc540b8>
    1040:	231d2323 	tstcs	sp, #-1946157056	; 0x8c000000
    1044:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    1048:	31201203 			; <UNDEFINED> instruction: 0x31201203
    104c:	0022231d 	eoreq	r2, r2, sp, lsl r3
    1050:	06010402 	streq	r0, [r1], -r2, lsl #8
    1054:	3152063c 	cmpcc	r2, ip, lsr r6
    1058:	3f31231d 	svccc	0x0031231d
    105c:	79033f40 	stmdbvc	r3, {r6, r8, r9, sl, fp, ip, sp}
    1060:	4e312720 	cdpmi	7, 3, cr2, cr1, cr0, {1}
    1064:	10032323 	andne	r2, r3, r3, lsr #6
    1068:	010a034a 	tsteq	sl, sl, asr #6
    106c:	03207603 			; <UNDEFINED> instruction: 0x03207603
    1070:	235b200a 	cmpcs	fp, #10
    1074:	501d2623 	andspl	r2, sp, r3, lsr #12
    1078:	1d23232b 	stcne	3, cr2, [r3, #-172]!	; 0xffffff54
    107c:	6e033123 	adfvssp	f3, f3, f3
    1080:	20120320 	andscs	r0, r2, r0, lsr #6
    1084:	22231d31 	eorcs	r1, r3, #3136	; 0xc40
    1088:	01040200 	mrseq	r0, R12_usr
    108c:	52063c06 	andpl	r3, r6, #1536	; 0x600
    1090:	200a0331 	andcs	r0, sl, r1, lsr r3
    1094:	232e7303 			; <UNDEFINED> instruction: 0x232e7303
    1098:	03233531 			; <UNDEFINED> instruction: 0x03233531
    109c:	0a032076 	beq	c927c <__Stack_Size+0xc8e7c>
    10a0:	2e790320 	cdpcs	3, 7, cr0, cr9, cr0, {1}
    10a4:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    10a8:	0a032076 	beq	c9288 <__Stack_Size+0xc8e88>
    10ac:	2e76032e 	cdpcs	3, 7, cr0, cr6, cr14, {1}
    10b0:	24200a03 	strtcs	r0, [r0], #-2563	; 0xa03
    10b4:	10032323 	andne	r2, r3, r3, lsr #6
    10b8:	010a034a 	tsteq	sl, sl, asr #6
    10bc:	03207603 			; <UNDEFINED> instruction: 0x03207603
    10c0:	235b200a 	cmpcs	fp, #10
    10c4:	501d2623 	andspl	r2, sp, r3, lsr #12
    10c8:	1d23312b 	stfnes	f3, [r3, #-172]!	; 0xffffff54
    10cc:	6e033123 	adfvssp	f3, f3, f3
    10d0:	20120320 	andscs	r0, r2, r0, lsr #6
    10d4:	20740331 	rsbscs	r0, r4, r1, lsr r3
    10d8:	30200c03 	eorcc	r0, r0, r3, lsl #24
    10dc:	0200251b 	andeq	r2, r0, #113246208	; 0x6c00000
    10e0:	2e060104 	adfcss	f0, f6, f4
    10e4:	311d5206 	tstcc	sp, r6, lsl #4
    10e8:	03232340 			; <UNDEFINED> instruction: 0x03232340
    10ec:	034a0198 	movteq	r0, #41368	; 0xa198
    10f0:	1003010d 	andne	r0, r3, sp, lsl #2
    10f4:	3d141208 	lfmcc	f1, 4, [r4, #-32]	; 0xffffffe0
    10f8:	0321212f 			; <UNDEFINED> instruction: 0x0321212f
    10fc:	2f142e0c 	svccs	0x00142e0c
    1100:	21212121 			; <UNDEFINED> instruction: 0x21212121
    1104:	0c032121 	stfeqs	f2, [r3], {33}	; 0x21
    1108:	1e22142e 	cdpne	4, 2, cr1, cr2, cr14, {1}
    110c:	21212121 			; <UNDEFINED> instruction: 0x21212121
    1110:	142e0c03 	strtne	r0, [lr], #-3075	; 0xc03
    1114:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    1118:	0d032121 	stfeqs	f2, [r3, #-132]	; 0xffffff7c
    111c:	231d1a2e 	tstcs	sp, #188416	; 0x2e000
    1120:	660e034f 	strvs	r0, [lr], -pc, asr #6
    1124:	6b232b1a 	blvs	8cbd94 <__Stack_Size+0x8cb994>
    1128:	03581903 	cmpeq	r8, #49152	; 0xc000
    112c:	232b010a 			; <UNDEFINED> instruction: 0x232b010a
    1130:	4a140333 	bmi	501e04 <__Stack_Size+0x501a04>
    1134:	2e180319 	mrccs	3, 0, r0, cr8, cr9, {0}
    1138:	4a160319 	bmi	581da4 <__Stack_Size+0x5819a4>
    113c:	2b010a03 	blcs	43950 <__Stack_Size+0x43550>
    1140:	0d033323 	stceq	3, cr3, [r3, #-140]	; 0xffffff74
    1144:	1103174a 	tstne	r3, sl, asr #14
    1148:	02920374 	addseq	r0, r2, #116, 6	; 0xd0000001
    114c:	234d2301 	movtcs	r2, #54017	; 0xd301
    1150:	207dee03 	rsbscs	lr, sp, r3, lsl #28
    1154:	20661703 	rsbcs	r1, r6, r3, lsl #14
    1158:	20780328 	rsbscs	r0, r8, r8, lsr #6
    115c:	2c2e0a03 	stccs	10, cr0, [lr], #-12
    1160:	e4034022 	str	r4, [r3], #-34	; 0x22
    1164:	4d232e01 	stcmi	14, cr2, [r3, #-4]!
    1168:	7e9a0323 	cdpvc	3, 9, cr0, cr10, cr3, {1}
    116c:	00ef0320 	rsceq	r0, pc, r0, lsr #6
    1170:	20090366 	andcs	r0, r9, r6, ror #6
    1174:	03233f3f 			; <UNDEFINED> instruction: 0x03233f3f
    1178:	202e7f98 	mlacs	lr, r8, pc, r7	; <UNPREDICTABLE>
    117c:	31200a03 			; <UNDEFINED> instruction: 0x31200a03
    1180:	03314b28 	teqeq	r1, #40, 22	; 0xa000
    1184:	28202e19 	stmdacs	r0!, {r0, r3, r4, r9, sl, fp, sp}
    1188:	663d0331 			; <UNDEFINED> instruction: 0x663d0331
    118c:	13032318 	movwne	r2, #13080	; 0x3318
    1190:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    1194:	2e160323 	cdpcs	3, 1, cr0, cr6, cr3, {1}
    1198:	234d231a 	movtcs	r2, #54042	; 0xd31a
    119c:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    11a0:	2323200c 			; <UNDEFINED> instruction: 0x2323200c
    11a4:	2e790327 	cdpcs	3, 7, cr0, cr9, cr7, {1}
    11a8:	78033227 	stmdavc	r3, {r0, r1, r2, r5, r9, ip, sp}
    11ac:	242a322e 	strtcs	r3, [sl], #-558	; 0x22e
    11b0:	0332251c 	teqeq	r2, #28, 10	; 0x7000000
    11b4:	32242e78 	eorcc	r2, r4, #120, 28	; 0x780
    11b8:	03232323 			; <UNDEFINED> instruction: 0x03232323
    11bc:	23192e12 	tstcs	r9, #288	; 0x120
    11c0:	1203234d 	andne	r2, r3, #872415233	; 0x34000001
    11c4:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    11c8:	2e12033f 	mrccs	3, 0, r0, cr2, cr15, {1}
    11cc:	234d2319 	movtcs	r2, #54041	; 0xd319
    11d0:	182e1203 	stmdane	lr!, {r0, r1, r9, ip}
    11d4:	033f4d23 	teqeq	pc, #2240	; 0x8c0
    11d8:	1d1a2e0e 	ldcne	14, cr2, [sl, #-56]	; 0xffffffc8
    11dc:	0e034f23 	cdpeq	15, 0, cr4, cr3, cr3, {1}
    11e0:	231d1a66 	tstcs	sp, #417792	; 0x66000
    11e4:	660f034f 	strvs	r0, [pc], -pc, asr #6
    11e8:	4f231d1a 	svcmi	0x00231d1a
    11ec:	1a660f03 	bne	1984e00 <__Stack_Size+0x1984a00>
    11f0:	034f231d 	movteq	r2, #62237	; 0xf31d
    11f4:	23196612 	tstcs	r9, #18874368	; 0x1200000
    11f8:	1103234d 	tstne	r3, sp, asr #6
    11fc:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    1200:	2e11033f 	mrccs	3, 0, r0, cr1, cr15, {1}
    1204:	234d2319 	movtcs	r2, #54041	; 0xd319
    1208:	192e1103 	stmdbne	lr!, {r0, r1, r8, ip}
    120c:	033f4d23 	teqeq	pc, #2240	; 0x8c0
    1210:	231a2e10 	tstcs	sl, #16, 28	; 0x100
    1214:	1003234d 	andne	r2, r3, sp, asr #6
    1218:	4d231a2e 	vstmdbmi	r3!, {s2-s47}
    121c:	2e10033f 	mrccs	3, 0, r0, cr0, cr15, {1}
    1220:	234d231a 	movtcs	r2, #54042	; 0xd31a
    1224:	1a2e1003 	bne	b85238 <__Stack_Size+0xb84e38>
    1228:	033f4d23 	teqeq	pc, #2240	; 0x8c0
    122c:	23192e10 	tstcs	r9, #16, 28	; 0x100
    1230:	1003234d 	andne	r2, r3, sp, asr #6
    1234:	3123192e 			; <UNDEFINED> instruction: 0x3123192e
    1238:	2e10033f 	mrccs	3, 0, r0, cr0, cr15, {1}
    123c:	234d2319 	movtcs	r2, #54041	; 0xd319
    1240:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    1244:	033f3123 	teqeq	pc, #-1073741816	; 0xc0000008
    1248:	23192e10 	tstcs	r9, #16, 28	; 0x100
    124c:	0f03234b 	svceq	0x0003234b
    1250:	4b23192e 	blmi	8c7710 <__Stack_Size+0x8c7310>
    1254:	2e100323 	cdpcs	3, 1, cr0, cr0, cr3, {1}
    1258:	3f4b2319 	svccc	0x004b2319
    125c:	192e0f03 	stmdbne	lr!, {r0, r1, r8, r9, sl, fp}
    1260:	033f4b23 	teqeq	pc, #35840	; 0x8c00
    1264:	23192e10 	tstcs	r9, #16, 28	; 0x100
    1268:	0f033f4b 	svceq	0x00033f4b
    126c:	4b23192e 	blmi	8c772c <__Stack_Size+0x8c732c>
    1270:	2e10033f 	mrccs	3, 0, r0, cr0, cr15, {1}
    1274:	3f4b2319 	svccc	0x004b2319
    1278:	192e1403 	stmdbne	lr!, {r0, r1, sl, ip}
    127c:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    1280:	66120369 	ldrvs	r0, [r2], -r9, ror #6
    1284:	20790319 	rsbscs	r0, r9, r9, lsl r3
    1288:	1e036927 	cdpne	9, 0, cr6, cr3, cr7, {1}
    128c:	79031966 	stmdbvc	r3, {r1, r2, r5, r6, r8, fp, ip}
    1290:	4d682720 	stclmi	7, cr2, [r8, #-128]!	; 0xffffff80
    1294:	1d693469 	cfstrdne	mvd3, [r9, #-420]!	; 0xfffffe5c
    1298:	580e0331 	stmdapl	lr, {r0, r4, r5, r8, r9}
    129c:	4f231d1a 	svcmi	0x00231d1a
    12a0:	1a661003 	bne	19852b4 <__Stack_Size+0x1984eb4>
    12a4:	034f231d 	movteq	r2, #62237	; 0xf31d
    12a8:	1d1a660e 	ldcne	6, cr6, [sl, #-56]	; 0xffffffc8
    12ac:	10034f23 	andne	r4, r3, r3, lsr #30
    12b0:	03691866 	cmneq	r9, #6684672	; 0x660000
    12b4:	69195818 	ldmdbvs	r9, {r3, r4, fp, ip, lr}
    12b8:	18581203 	ldmdane	r8, {r0, r1, r9, ip}^
    12bc:	58110369 	ldmdapl	r1, {r0, r3, r5, r6, r8, r9}
    12c0:	0c036918 	stceq	9, cr6, [r3], {24}
    12c4:	0c031758 	stceq	7, cr1, [r3], {88}	; 0x58
    12c8:	0d03172e 	stceq	7, cr1, [r3, #-184]	; 0xffffff48
    12cc:	0d03172e 	stceq	7, cr1, [r3, #-184]	; 0xffffff48
    12d0:	0d03172e 	stceq	7, cr1, [r3, #-184]	; 0xffffff48
    12d4:	0d03172e 	stceq	7, cr1, [r3, #-184]	; 0xffffff48
    12d8:	1303172e 	movwne	r1, #14126	; 0x372e
    12dc:	0369183c 	cmneq	r9, #60, 16	; 0x3c0000
    12e0:	69185813 	ldmdbvs	r8, {r0, r1, r4, fp, ip, lr}
    12e4:	746ffb03 	strbtvc	pc, [pc], #-2819	; 12ec <__Stack_Size+0xeec>	; <UNPREDICTABLE>
    12e8:	0a032820 	beq	cb370 <__Stack_Size+0xcaf70>
    12ec:	20760320 	rsbscs	r0, r6, r0, lsr #6
    12f0:	03201303 			; <UNDEFINED> instruction: 0x03201303
    12f4:	03402e73 	movteq	r2, #3699	; 0xe73
    12f8:	1803206e 	stmdane	r3, {r1, r2, r3, r5, r6, sp}
    12fc:	323f4d20 	eorscc	r4, pc, #32, 26	; 0x800
    1300:	1103694d 	tstne	r3, sp, asr #18
    1304:	2e6f032e 	cdpcs	3, 6, cr0, cr15, cr14, {1}
    1308:	694d3233 	stmdbvs	sp, {r0, r1, r4, r5, r9, ip, sp}^
    130c:	e1032c30 	tst	r3, r0, lsr ip
    1310:	69182e0f 	ldmdbvs	r8, {r0, r1, r2, r3, r9, sl, fp, sp}
    1314:	18581303 	ldmdane	r8, {r0, r1, r8, r9, ip}^
    1318:	6f820369 	svcvs	0x00820369
    131c:	09032074 	stmdbeq	r3, {r2, r4, r5, r6, sp}
    1320:	20770320 	rsbscs	r0, r7, r0, lsr #6
    1324:	234a0903 	movtcs	r0, #43267	; 0xa903
    1328:	2e200333 	mcrcs	3, 1, r0, cr0, cr3, {1}
    132c:	302e6003 	eorcc	r6, lr, r3
    1330:	16033331 			; <UNDEFINED> instruction: 0x16033331
    1334:	2e6a032e 	cdpcs	3, 6, cr0, cr10, cr14, {1}
    1338:	13ea0330 	mvnne	r0, #48, 6	; 0xc0000000
    133c:	6c96033c 	ldcvs	3, cr0, [r6], {60}	; 0x3c
    1340:	13ea0320 	mvnne	r0, #32, 6	; 0x80000000
    1344:	1f215a20 	svcne	0x00215a20
    1348:	4b322421 	blmi	c8a3d4 <__Stack_Size+0xc89fd4>
    134c:	03312446 	teqeq	r1, #1174405120	; 0x46000000
    1350:	03206c8f 			; <UNDEFINED> instruction: 0x03206c8f
    1354:	032013f2 			; <UNDEFINED> instruction: 0x032013f2
    1358:	03206c9a 			; <UNDEFINED> instruction: 0x03206c9a
    135c:	91032e74 	tstls	r3, r4, ror lr
    1360:	215a2e14 	cmpcs	sl, r4, lsl lr
    1364:	40243824 	eormi	r3, r4, r4, lsr #16
    1368:	1c322a2f 	ldcne	10, cr2, [r2], #-188	; 0xffffff44
    136c:	ea033124 	b	cd804 <__Stack_Size+0xcd404>
    1370:	0322206b 			; <UNDEFINED> instruction: 0x0322206b
    1374:	032e1495 			; <UNDEFINED> instruction: 0x032e1495
    1378:	03206be9 			; <UNDEFINED> instruction: 0x03206be9
    137c:	182e10e0 	stmdane	lr!, {r5, r6, r7, ip}
    1380:	580b033f 	stmdapl	fp, {r0, r1, r2, r3, r4, r5, r8, r9}
    1384:	0b032117 	bleq	c97e8 <__Stack_Size+0xc93e8>
    1388:	0321172e 			; <UNDEFINED> instruction: 0x0321172e
    138c:	21172e0b 	tstcs	r7, fp, lsl #28
    1390:	172e0b03 	strne	r0, [lr, -r3, lsl #22]!
    1394:	2e0a032f 	cdpcs	3, 0, cr0, cr10, cr15, {1}
    1398:	0a032117 	beq	c97fc <__Stack_Size+0xc93fc>
    139c:	0321172e 			; <UNDEFINED> instruction: 0x0321172e
    13a0:	031a2e18 	tsteq	sl, #24, 28	; 0x180
    13a4:	18032e09 	stmdane	r3, {r0, r3, r9, sl, fp, sp}
    13a8:	1603184a 	strne	r1, [r3], -sl, asr #16
    13ac:	0109034a 	tsteq	r9, sl, asr #6
    13b0:	222c2222 	eorcs	r2, ip, #536870914	; 0x20000002
    13b4:	01040200 	mrseq	r0, R12_usr
    13b8:	02002006 	andeq	r2, r0, #6
    13bc:	22060104 	andcs	r0, r6, #4, 2
    13c0:	20150343 	andscs	r0, r5, r3, asr #6
    13c4:	00040218 	andeq	r0, r4, r8, lsl r2
    13c8:	01d60101 	bicseq	r0, r6, r1, lsl #2
    13cc:	00020000 	andeq	r0, r2, r0
    13d0:	0000009b 	muleq	r0, fp, r0
    13d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    13d8:	0101000d 	tsteq	r1, sp
    13dc:	00000101 	andeq	r0, r0, r1, lsl #2
    13e0:	00000100 	andeq	r0, r0, r0, lsl #2
    13e4:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    13e8:	31663233 	cmncc	r6, r3, lsr r2
    13ec:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    13f0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    13f4:	73006372 	movwvc	r6, #882	; 0x372
    13f8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    13fc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1400:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1404:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1408:	74730000 	ldrbtvc	r0, [r3], #-0
    140c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1410:	5f783031 	svcpl	0x00783031
    1414:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1418:	00632e74 	rsbeq	r2, r3, r4, ror lr
    141c:	73000001 	movwvc	r0, #1
    1420:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1424:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1428:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    142c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1430:	73000002 	movwvc	r0, #2
    1434:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1438:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    143c:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    1440:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1444:	74730000 	ldrbtvc	r0, [r3], #-0
    1448:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    144c:	5f783031 	svcpl	0x00783031
    1450:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1454:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1458:	73000002 	movwvc	r0, #2
    145c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1460:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1464:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1468:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    146c:	00000000 	andeq	r0, r0, r0
    1470:	57980205 	ldrpl	r0, [r8, r5, lsl #4]
    1474:	da030800 	ble	c347c <__Stack_Size+0xc307c>
    1478:	08240100 	stmdaeq	r4!, {r8}
    147c:	581b033f 	ldmdapl	fp, {r0, r1, r2, r3, r4, r5, r8, r9}
    1480:	5c2e6603 	stcpl	6, cr6, [lr], #-12
    1484:	40594059 	subsmi	r4, r9, r9, asr r0
    1488:	42594059 	subsmi	r4, r9, #89	; 0x59
    148c:	032e7a03 			; <UNDEFINED> instruction: 0x032e7a03
    1490:	15037416 	strne	r7, [r3, #-1046]	; 0x416
    1494:	7a03263c 	bvc	cad8c <__Stack_Size+0xca98c>
    1498:	23322220 	teqcs	r2, #32, 4
    149c:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    14a0:	7a03282e 	bvc	cb560 <__Stack_Size+0xcb160>
    14a4:	7a03342e 	bvc	ce564 <__Stack_Size+0xce164>
    14a8:	23323420 	teqcs	r2, #32, 8	; 0x20000000
    14ac:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    14b0:	2e4e0322 	cdpcs	3, 4, cr0, cr14, cr2, {1}
    14b4:	23203603 			; <UNDEFINED> instruction: 0x23203603
    14b8:	241c4324 	ldrcs	r4, [ip], #-804	; 0x324
    14bc:	3d4d674e 	stclcc	7, cr6, [sp, #-312]	; 0xfffffec8
    14c0:	0b032f77 	bleq	cd2a4 <__Stack_Size+0xccea4>
    14c4:	1d401458 	cfstrdne	mvd1, [r0, #-352]	; 0xfffffea0
    14c8:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    14cc:	032e1003 			; <UNDEFINED> instruction: 0x032e1003
    14d0:	6b030115 	blvs	c192c <__Stack_Size+0xc152c>
    14d4:	20150320 	andscs	r0, r5, r0, lsr #6
    14d8:	03207603 			; <UNDEFINED> instruction: 0x03207603
    14dc:	7603200a 	strvc	r2, [r3], -sl
    14e0:	200a033c 	andcs	r0, sl, ip, lsr r3
    14e4:	352e7803 	strcc	r7, [lr, #-2051]!	; 0x803
    14e8:	2e0c0332 	mcrcs	3, 0, r0, cr12, cr2, {1}
    14ec:	21212f14 			; <UNDEFINED> instruction: 0x21212f14
    14f0:	1a2e0f03 	bne	b85104 <__Stack_Size+0xb84d04>
    14f4:	034f231d 	movteq	r2, #62237	; 0xf31d
    14f8:	0d03661e 	stceq	6, cr6, [r3, #-120]	; 0xffffff88
    14fc:	1e3e3320 	cdpne	3, 3, cr3, cr14, cr0, {1}
    1500:	22302230 	eorscs	r2, r0, #48, 4
    1504:	40222232 	eormi	r2, r2, r2, lsr r2
    1508:	03581503 	cmpeq	r8, #12582912	; 0xc00000
    150c:	242a010a 	strtcs	r0, [sl], #-266	; 0x10a
    1510:	4a0f0334 	bmi	3c21e8 <__Stack_Size+0x3c1de8>
    1514:	11036818 	tstne	r3, r8, lsl r8
    1518:	03671758 	cmneq	r7, #88, 14	; 0x1600000
    151c:	1d1a580f 	ldcne	8, cr5, [sl, #-60]	; 0xffffffc4
    1520:	13034f23 	movwne	r4, #16163	; 0x3f23
    1524:	03671766 	cmneq	r7, #26738688	; 0x1980000
    1528:	1d1a580f 	ldcne	8, cr5, [sl, #-60]	; 0xffffffc4
    152c:	0f034f23 	svceq	0x00034f23
    1530:	0d031866 	stceq	8, cr1, [r3, #-408]	; 0xfffffe68
    1534:	0321174a 			; <UNDEFINED> instruction: 0x0321174a
    1538:	03173c0c 	tsteq	r7, #12, 24	; 0xc00
    153c:	3e17660e 	cfmsub32cc	mvax0, mvfx6, mvfx7, mvfx14
    1540:	17660f03 	strbne	r0, [r6, -r3, lsl #30]!
    1544:	580f034c 	stmdapl	pc, {r2, r3, r6, r8, r9}	; <UNPREDICTABLE>
    1548:	4f231d1a 	svcmi	0x00231d1a
    154c:	1a661003 	bne	1985560 <__Stack_Size+0x1985160>
    1550:	034f231d 	movteq	r2, #62237	; 0xf31d
    1554:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    1558:	12034f23 	andne	r4, r3, #35, 30	; 0x8c
    155c:	03671766 	cmneq	r7, #26738688	; 0x1980000
    1560:	1d1a580f 	ldcne	8, cr5, [sl, #-60]	; 0xffffffc4
    1564:	1b034f23 	blne	d51f8 <__Stack_Size+0xd4df8>
    1568:	09031a66 	stmdbeq	r3, {r1, r2, r5, r6, r9, fp, ip}
    156c:	4a23032e 	bmi	8c222c <__Stack_Size+0x8c1e2c>
    1570:	4a1b0318 	bmi	6c21d8 <__Stack_Size+0x6c1dd8>
    1574:	03010f03 	movweq	r0, #7939	; 0x1f03
    1578:	0a032071 	beq	c9744 <__Stack_Size+0xc9344>
    157c:	1e303320 	cdpne	3, 3, cr3, cr0, cr0, {1}
    1580:	22302230 	eorscs	r2, r0, #48, 4
    1584:	00304232 	eorseq	r4, r0, r2, lsr r2
    1588:	1d010402 	cfstrsne	mvf0, [r1, #-8]
    158c:	01040200 	mrseq	r0, R12_usr
    1590:	0402003f 	streq	r0, [r2], #-63	; 0x3f
    1594:	244e2201 	strbcs	r2, [lr], #-513	; 0x201
    1598:	03202303 			; <UNDEFINED> instruction: 0x03202303
    159c:	023d010a 	eorseq	r0, sp, #-2147483646	; 0x80000002
    15a0:	01010004 	tsteq	r1, r4
    15a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    15a8:	00390002 	eorseq	r0, r9, r2
    15ac:	01020000 	mrseq	r0, (UNDEF: 2)
    15b0:	000d0efb 	strdeq	r0, [sp], -fp
    15b4:	01010101 	tsteq	r1, r1, lsl #2
    15b8:	01000000 	mrseq	r0, (UNDEF: 0)
    15bc:	73010000 	movwvc	r0, #4096	; 0x1000
    15c0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    15c4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    15c8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    15cc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    15d0:	6f630000 	svcvs	0x00630000
    15d4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    15d8:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]	; 142c <__Stack_Size+0x102c>
    15dc:	6f726361 	svcvs	0x00726361
    15e0:	0100732e 	tsteq	r0, lr, lsr #6
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	5adc0205 	bpl	ff701e04 <SCS_BASE+0x1f6f3e04>
    15ec:	34030800 	strcc	r0, [r3], #-2048	; 0x800
    15f0:	0b032101 	bleq	c99fc <__Stack_Size+0xc95fc>
    15f4:	0b032120 	bleq	c9a7c <__Stack_Size+0xc967c>
    15f8:	0b032120 	bleq	c9a80 <__Stack_Size+0xc9680>
    15fc:	0b032f20 	bleq	cd284 <__Stack_Size+0xcce84>
    1600:	0b032f20 	bleq	cd288 <__Stack_Size+0xcce88>
    1604:	0b032f20 	bleq	cd28c <__Stack_Size+0xcce8c>
    1608:	0b032120 	bleq	c9a90 <__Stack_Size+0xc9690>
    160c:	0b032f20 	bleq	cd294 <__Stack_Size+0xcce94>
    1610:	032f2f20 			; <UNDEFINED> instruction: 0x032f2f20
    1614:	032f200a 			; <UNDEFINED> instruction: 0x032f200a
    1618:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    161c:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    1620:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    1624:	0321200a 			; <UNDEFINED> instruction: 0x0321200a
    1628:	0321200b 			; <UNDEFINED> instruction: 0x0321200b
    162c:	0321200b 			; <UNDEFINED> instruction: 0x0321200b
    1630:	0321200b 			; <UNDEFINED> instruction: 0x0321200b
    1634:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    1638:	032f200b 			; <UNDEFINED> instruction: 0x032f200b
    163c:	0321200a 			; <UNDEFINED> instruction: 0x0321200a
    1640:	0221200b 	eoreq	r2, r1, #11
    1644:	01010001 	tsteq	r1, r1
    1648:	0000005f 	andeq	r0, r0, pc, asr r0
    164c:	003b0002 	eorseq	r0, fp, r2
    1650:	01020000 	mrseq	r0, (UNDEF: 2)
    1654:	000d0efb 	strdeq	r0, [sp], -fp
    1658:	01010101 	tsteq	r1, r1, lsl #2
    165c:	01000000 	mrseq	r0, (UNDEF: 0)
    1660:	73010000 	movwvc	r0, #4096	; 0x1000
    1664:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1668:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    166c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1670:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1674:	74730000 	ldrbtvc	r0, [r3], #-0
    1678:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    167c:	5f783031 	svcpl	0x00783031
    1680:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
    1684:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    1688:	00000100 	andeq	r0, r0, r0, lsl #2
    168c:	02050000 	andeq	r0, r5, #0
    1690:	08005b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, lr}
    1694:	01019103 	tsteq	r1, r3, lsl #2
    1698:	01040200 	mrseq	r0, R12_usr
    169c:	02003e7b 	andeq	r3, r0, #1968	; 0x7b0
    16a0:	3e6c0104 	powcce	f0, f4, f4
    16a4:	0f022f50 	svceq	0x00022f50
    16a8:	Address 0x000016a8 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000014 	andeq	r0, r0, r4, lsl r0
      20:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      24:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
      28:	000ec4ce 	andeq	ip, lr, lr, asr #9
      2c:	00000018 	andeq	r0, r0, r8, lsl r0
      30:	00000000 	andeq	r0, r0, r0
      34:	08003148 	stmdaeq	r0, {r3, r6, r8, ip, sp}
      38:	00000014 	andeq	r0, r0, r4, lsl r0
      3c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      40:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
      44:	000ec4ce 	andeq	ip, lr, lr, asr #9
      48:	0000001c 	andeq	r0, r0, ip, lsl r0
      4c:	00000000 	andeq	r0, r0, r0
      50:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
      54:	00000084 	andeq	r0, r0, r4, lsl #1
      58:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      5c:	56018e02 	strpl	r8, [r1], -r2, lsl #28
      60:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
      64:	000b4300 	andeq	r4, fp, r0, lsl #6
      68:	00000018 	andeq	r0, r0, r8, lsl r0
      6c:	00000000 	andeq	r0, r0, r0
      70:	080031e0 	stmdaeq	r0, {r5, r6, r7, r8, ip, sp}
      74:	0000004e 	andeq	r0, r0, lr, asr #32
      78:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
      7c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      80:	0c0e6501 	cfstr32eq	mvfx6, [lr], {1}
      84:	0000001c 	andeq	r0, r0, ip, lsl r0
      88:	00000000 	andeq	r0, r0, r0
      8c:	0800322e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip, sp}
      90:	00000086 	andeq	r0, r0, r6, lsl #1
      94:	84200e41 	strthi	r0, [r0], #-3649	; 0xe41
      98:	86048505 	strhi	r8, [r4], -r5, lsl #10
      9c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      a0:	140e7c01 	strne	r7, [lr], #-3073	; 0xc01
      a4:	0000000c 	andeq	r0, r0, ip
      a8:	00000000 	andeq	r0, r0, r0
      ac:	080032b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, sp}
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	0000000c 	andeq	r0, r0, ip
      b8:	00000000 	andeq	r0, r0, r0
      bc:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
      c0:	00000010 	andeq	r0, r0, r0, lsl r0
      c4:	0000000c 	andeq	r0, r0, ip
      c8:	00000000 	andeq	r0, r0, r0
      cc:	080032d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, sp}
      d0:	00000014 	andeq	r0, r0, r4, lsl r0
      d4:	00000018 	andeq	r0, r0, r8, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
      e0:	00000044 	andeq	r0, r0, r4, asr #32
      e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      e8:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
      ec:	000ec4ce 	andeq	ip, lr, lr, asr #9
      f0:	0000000c 	andeq	r0, r0, ip
      f4:	00000000 	andeq	r0, r0, r0
      f8:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
      fc:	00000020 	andeq	r0, r0, r0, lsr #32
     100:	00000014 	andeq	r0, r0, r4, lsl r0
     104:	00000000 	andeq	r0, r0, r0
     108:	08003348 	stmdaeq	r0, {r3, r6, r8, r9, ip, sp}
     10c:	0000001c 	andeq	r0, r0, ip, lsl r0
     110:	83080e42 	movwhi	r0, #36418	; 0x8e42
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000014 	andeq	r0, r0, r4, lsl r0
     11c:	00000000 	andeq	r0, r0, r0
     120:	08003364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp}
     124:	00000012 	andeq	r0, r0, r2, lsl r0
     128:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
     130:	00000018 	andeq	r0, r0, r8, lsl r0
     134:	00000000 	andeq	r0, r0, r0
     138:	08003376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
     13c:	0000002e 	andeq	r0, r0, lr, lsr #32
     140:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     144:	50018e02 	andpl	r8, r1, r2, lsl #28
     148:	000ec4ce 	andeq	ip, lr, lr, asr #9
     14c:	00000018 	andeq	r0, r0, r8, lsl r0
     150:	00000000 	andeq	r0, r0, r0
     154:	080033a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, sp}
     158:	00000030 	andeq	r0, r0, r0, lsr r0
     15c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     160:	51018e02 	tstpl	r1, r2, lsl #28
     164:	000ec4ce 	andeq	ip, lr, lr, asr #9
     168:	0000000c 	andeq	r0, r0, ip
     16c:	00000000 	andeq	r0, r0, r0
     170:	080033d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, ip, sp}
     174:	0000004c 	andeq	r0, r0, ip, asr #32
     178:	0000001c 	andeq	r0, r0, ip, lsl r0
     17c:	00000000 	andeq	r0, r0, r0
     180:	08003420 	stmdaeq	r0, {r5, sl, ip, sp}
     184:	00000094 	muleq	r0, r4, r0
     188:	83080e41 	movwhi	r0, #36417	; 0x8e41
     18c:	77018e02 	strvc	r8, [r1, -r2, lsl #28]
     190:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     194:	000b4300 	andeq	r4, fp, r0, lsl #6
     198:	00000018 	andeq	r0, r0, r8, lsl r0
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	080034b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip, sp}
     1a4:	0000002e 	andeq	r0, r0, lr, lsr #32
     1a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     1ac:	54018e02 	strpl	r8, [r1], #-3586	; 0xe02
     1b0:	000ec4ce 	andeq	ip, lr, lr, asr #9
     1b4:	00000018 	andeq	r0, r0, r8, lsl r0
     1b8:	00000000 	andeq	r0, r0, r0
     1bc:	080034e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip, sp}
     1c0:	00000014 	andeq	r0, r0, r4, lsl r0
     1c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     1c8:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     1cc:	000ec4ce 	andeq	ip, lr, lr, asr #9
     1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d4:	00000000 	andeq	r0, r0, r0
     1d8:	080034f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, ip, sp}
     1dc:	0000003a 	andeq	r0, r0, sl, lsr r0
     1e0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     1e4:	53018e02 	movwpl	r8, #7682	; 0x1e02
     1e8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     1ec:	000b4300 	andeq	r4, fp, r0, lsl #6
     1f0:	00000024 	andeq	r0, r0, r4, lsr #32
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	08003530 	stmdaeq	r0, {r4, r5, r8, sl, ip, sp}
     1fc:	00000048 	andeq	r0, r0, r8, asr #32
     200:	83100e41 	tsthi	r0, #1040	; 0x410
     204:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     208:	5b018e02 	blpl	63a18 <__Stack_Size+0x63618>
     20c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
     210:	43000ec3 	movwmi	r0, #3779	; 0xec3
     214:	0000000b 	andeq	r0, r0, fp
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	00000000 	andeq	r0, r0, r0
     220:	08003578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, sp}
     224:	00000034 	andeq	r0, r0, r4, lsr r0
     228:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     22c:	51018e02 	tstpl	r1, r2, lsl #28
     230:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     234:	000b4300 	andeq	r4, fp, r0, lsl #6
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	00000000 	andeq	r0, r0, r0
     240:	080035ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, sp}
     244:	00000034 	andeq	r0, r0, r4, lsr r0
     248:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     24c:	51018e02 	tstpl	r1, r2, lsl #28
     250:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     254:	000b4300 	andeq	r4, fp, r0, lsl #6
     258:	0000001c 	andeq	r0, r0, ip, lsl r0
     25c:	00000000 	andeq	r0, r0, r0
     260:	080035e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, sp}
     264:	00000038 	andeq	r0, r0, r8, lsr r0
     268:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     26c:	52018e02 	andpl	r8, r1, #2, 28
     270:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     274:	000b4300 	andeq	r4, fp, r0, lsl #6
     278:	0000001c 	andeq	r0, r0, ip, lsl r0
     27c:	00000000 	andeq	r0, r0, r0
     280:	08003618 	stmdaeq	r0, {r3, r4, r9, sl, ip, sp}
     284:	00000038 	andeq	r0, r0, r8, lsr r0
     288:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     28c:	52018e02 	andpl	r8, r1, #2, 28
     290:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     294:	000b4300 	andeq	r4, fp, r0, lsl #6
     298:	0000001c 	andeq	r0, r0, ip, lsl r0
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
     2a4:	00000038 	andeq	r0, r0, r8, lsr r0
     2a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2ac:	52018e02 	andpl	r8, r1, #2, 28
     2b0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2b4:	000b4300 	andeq	r4, fp, r0, lsl #6
     2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	08003688 	stmdaeq	r0, {r3, r7, r9, sl, ip, sp}
     2c4:	00000038 	andeq	r0, r0, r8, lsr r0
     2c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2cc:	52018e02 	andpl	r8, r1, #2, 28
     2d0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2d4:	000b4300 	andeq	r4, fp, r0, lsl #6
     2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2dc:	00000000 	andeq	r0, r0, r0
     2e0:	080036c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, sp}
     2e4:	00000038 	andeq	r0, r0, r8, lsr r0
     2e8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2ec:	52018e02 	andpl	r8, r1, #2, 28
     2f0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2f4:	000b4300 	andeq	r4, fp, r0, lsl #6
     2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2fc:	00000000 	andeq	r0, r0, r0
     300:	080036f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip, sp}
     304:	00000038 	andeq	r0, r0, r8, lsr r0
     308:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     30c:	52018e02 	andpl	r8, r1, #2, 28
     310:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     314:	000b4300 	andeq	r4, fp, r0, lsl #6
     318:	0000001c 	andeq	r0, r0, ip, lsl r0
     31c:	00000000 	andeq	r0, r0, r0
     320:	08003730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, sp}
     324:	00000038 	andeq	r0, r0, r8, lsr r0
     328:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     32c:	52018e02 	andpl	r8, r1, #2, 28
     330:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     334:	000b4300 	andeq	r4, fp, r0, lsl #6
     338:	0000001c 	andeq	r0, r0, ip, lsl r0
     33c:	00000000 	andeq	r0, r0, r0
     340:	08003768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, sp}
     344:	00000038 	andeq	r0, r0, r8, lsr r0
     348:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     34c:	52018e02 	andpl	r8, r1, #2, 28
     350:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     354:	000b4300 	andeq	r4, fp, r0, lsl #6
     358:	0000001c 	andeq	r0, r0, ip, lsl r0
     35c:	00000000 	andeq	r0, r0, r0
     360:	080037a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip, sp}
     364:	00000038 	andeq	r0, r0, r8, lsr r0
     368:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     36c:	52018e02 	andpl	r8, r1, #2, 28
     370:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     374:	000b4300 	andeq	r4, fp, r0, lsl #6
     378:	0000001c 	andeq	r0, r0, ip, lsl r0
     37c:	00000000 	andeq	r0, r0, r0
     380:	080037d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, sp}
     384:	00000034 	andeq	r0, r0, r4, lsr r0
     388:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     38c:	51018e02 	tstpl	r1, r2, lsl #28
     390:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     394:	000b4300 	andeq	r4, fp, r0, lsl #6
     398:	00000018 	andeq	r0, r0, r8, lsl r0
     39c:	00000000 	andeq	r0, r0, r0
     3a0:	0800380c 	stmdaeq	r0, {r2, r3, fp, ip, sp}
     3a4:	0000001a 	andeq	r0, r0, sl, lsl r0
     3a8:	83100e41 	tsthi	r0, #1040	; 0x410
     3ac:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	08003826 	stmdaeq	r0, {r1, r2, r5, fp, ip, sp}
     3c0:	0000008e 	andeq	r0, r0, lr, lsl #1
     3c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3c8:	41018e02 	tstmi	r1, r2, lsl #28
     3cc:	4102280e 	tstmi	r2, lr, lsl #16
     3d0:	0000080e 	andeq	r0, r0, lr, lsl #16
     3d4:	00000014 	andeq	r0, r0, r4, lsl r0
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	080038b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, ip, sp}
     3e0:	00000054 	andeq	r0, r0, r4, asr r0
     3e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3ec:	00000018 	andeq	r0, r0, r8, lsl r0
     3f0:	00000000 	andeq	r0, r0, r0
     3f4:	08003908 	stmdaeq	r0, {r3, r8, fp, ip, sp}
     3f8:	00000030 	andeq	r0, r0, r0, lsr r0
     3fc:	83100e41 	tsthi	r0, #1040	; 0x410
     400:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     404:	00018e02 	andeq	r8, r1, r2, lsl #28
     408:	00000018 	andeq	r0, r0, r8, lsl r0
     40c:	00000000 	andeq	r0, r0, r0
     410:	08003938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp}
     414:	00000014 	andeq	r0, r0, r4, lsl r0
     418:	83080e41 	movwhi	r0, #36417	; 0x8e41
     41c:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     420:	000ec3ce 	andeq	ip, lr, lr, asr #7
     424:	0000000c 	andeq	r0, r0, ip
     428:	00000000 	andeq	r0, r0, r0
     42c:	0800394c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, sp}
     430:	00000018 	andeq	r0, r0, r8, lsl r0
     434:	00000018 	andeq	r0, r0, r8, lsl r0
     438:	00000000 	andeq	r0, r0, r0
     43c:	08003964 	stmdaeq	r0, {r2, r5, r6, r8, fp, ip, sp}
     440:	00000030 	andeq	r0, r0, r0, lsr r0
     444:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     448:	52018e02 	andpl	r8, r1, #2, 28
     44c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     450:	00000020 	andeq	r0, r0, r0, lsr #32
     454:	00000000 	andeq	r0, r0, r0
     458:	08003994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp}
     45c:	00000032 	andeq	r0, r0, r2, lsr r0
     460:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     464:	86038504 	strhi	r8, [r3], -r4, lsl #10
     468:	55018e02 	strpl	r8, [r1, #-3586]	; 0xe02
     46c:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     470:	0000000e 	andeq	r0, r0, lr
     474:	0000001c 	andeq	r0, r0, ip, lsl r0
     478:	00000000 	andeq	r0, r0, r0
     47c:	080039c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip, sp}
     480:	0000007a 	andeq	r0, r0, sl, ror r0
     484:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     488:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     48c:	200e4301 	andcs	r4, lr, r1, lsl #6
     490:	000c0e74 	andeq	r0, ip, r4, ror lr
     494:	0000000c 	andeq	r0, r0, ip
     498:	00000000 	andeq	r0, r0, r0
     49c:	08003a40 	stmdaeq	r0, {r6, r9, fp, ip, sp}
     4a0:	00000008 	andeq	r0, r0, r8
     4a4:	00000014 	andeq	r0, r0, r4, lsl r0
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	08005b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, lr}
     4b0:	00000094 	muleq	r0, r4, r0
     4b4:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
     4b8:	00000001 	andeq	r0, r0, r1
     4bc:	0000000c 	andeq	r0, r0, ip
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
     4c8:	0000000c 	andeq	r0, r0, ip
     4cc:	0000000c 	andeq	r0, r0, ip
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	08003a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, ip, sp}
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
     4dc:	0000000c 	andeq	r0, r0, ip
     4e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     4e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4ec:	0000000c 	andeq	r0, r0, ip
     4f0:	000004dc 	ldrdeq	r0, [r0], -ip
     4f4:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
     4f8:	00000002 	andeq	r0, r0, r2
     4fc:	0000000c 	andeq	r0, r0, ip
     500:	000004dc 	ldrdeq	r0, [r0], -ip
     504:	08003a6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, fp, ip, sp}
     508:	00000002 	andeq	r0, r0, r2
     50c:	0000000c 	andeq	r0, r0, ip
     510:	000004dc 	ldrdeq	r0, [r0], -ip
     514:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
     518:	00000002 	andeq	r0, r0, r2
     51c:	0000000c 	andeq	r0, r0, ip
     520:	000004dc 	ldrdeq	r0, [r0], -ip
     524:	08003a6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, fp, ip, sp}
     528:	00000002 	andeq	r0, r0, r2
     52c:	0000000c 	andeq	r0, r0, ip
     530:	000004dc 	ldrdeq	r0, [r0], -ip
     534:	08003a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp}
     538:	00000002 	andeq	r0, r0, r2
     53c:	0000000c 	andeq	r0, r0, ip
     540:	000004dc 	ldrdeq	r0, [r0], -ip
     544:	08003a72 	stmdaeq	r0, {r1, r4, r5, r6, r9, fp, ip, sp}
     548:	00000002 	andeq	r0, r0, r2
     54c:	0000000c 	andeq	r0, r0, ip
     550:	000004dc 	ldrdeq	r0, [r0], -ip
     554:	08003a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, sp}
     558:	00000002 	andeq	r0, r0, r2
     55c:	0000000c 	andeq	r0, r0, ip
     560:	000004dc 	ldrdeq	r0, [r0], -ip
     564:	08003a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp, ip, sp}
     568:	00000002 	andeq	r0, r0, r2
     56c:	0000000c 	andeq	r0, r0, ip
     570:	000004dc 	ldrdeq	r0, [r0], -ip
     574:	08003a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, sp}
     578:	00000004 	andeq	r0, r0, r4
     57c:	0000000c 	andeq	r0, r0, ip
     580:	000004dc 	ldrdeq	r0, [r0], -ip
     584:	08003a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, ip, sp}
     588:	00000002 	andeq	r0, r0, r2
     58c:	0000000c 	andeq	r0, r0, ip
     590:	000004dc 	ldrdeq	r0, [r0], -ip
     594:	08003a7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, fp, ip, sp}
     598:	00000002 	andeq	r0, r0, r2
     59c:	0000000c 	andeq	r0, r0, ip
     5a0:	000004dc 	ldrdeq	r0, [r0], -ip
     5a4:	08003a80 	stmdaeq	r0, {r7, r9, fp, ip, sp}
     5a8:	00000002 	andeq	r0, r0, r2
     5ac:	0000000c 	andeq	r0, r0, ip
     5b0:	000004dc 	ldrdeq	r0, [r0], -ip
     5b4:	08003a82 	stmdaeq	r0, {r1, r7, r9, fp, ip, sp}
     5b8:	00000002 	andeq	r0, r0, r2
     5bc:	0000000c 	andeq	r0, r0, ip
     5c0:	000004dc 	ldrdeq	r0, [r0], -ip
     5c4:	08003a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp}
     5c8:	00000002 	andeq	r0, r0, r2
     5cc:	0000000c 	andeq	r0, r0, ip
     5d0:	000004dc 	ldrdeq	r0, [r0], -ip
     5d4:	08003a86 	stmdaeq	r0, {r1, r2, r7, r9, fp, ip, sp}
     5d8:	00000002 	andeq	r0, r0, r2
     5dc:	0000000c 	andeq	r0, r0, ip
     5e0:	000004dc 	ldrdeq	r0, [r0], -ip
     5e4:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
     5e8:	00000002 	andeq	r0, r0, r2
     5ec:	0000000c 	andeq	r0, r0, ip
     5f0:	000004dc 	ldrdeq	r0, [r0], -ip
     5f4:	08003a8a 	stmdaeq	r0, {r1, r3, r7, r9, fp, ip, sp}
     5f8:	00000002 	andeq	r0, r0, r2
     5fc:	0000000c 	andeq	r0, r0, ip
     600:	000004dc 	ldrdeq	r0, [r0], -ip
     604:	08003a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, sp}
     608:	00000002 	andeq	r0, r0, r2
     60c:	0000000c 	andeq	r0, r0, ip
     610:	000004dc 	ldrdeq	r0, [r0], -ip
     614:	08003a8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, fp, ip, sp}
     618:	00000002 	andeq	r0, r0, r2
     61c:	0000000c 	andeq	r0, r0, ip
     620:	000004dc 	ldrdeq	r0, [r0], -ip
     624:	08003a90 	stmdaeq	r0, {r4, r7, r9, fp, ip, sp}
     628:	00000002 	andeq	r0, r0, r2
     62c:	0000000c 	andeq	r0, r0, ip
     630:	000004dc 	ldrdeq	r0, [r0], -ip
     634:	08003a92 	stmdaeq	r0, {r1, r4, r7, r9, fp, ip, sp}
     638:	00000002 	andeq	r0, r0, r2
     63c:	0000000c 	andeq	r0, r0, ip
     640:	000004dc 	ldrdeq	r0, [r0], -ip
     644:	08003a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, ip, sp}
     648:	00000002 	andeq	r0, r0, r2
     64c:	0000000c 	andeq	r0, r0, ip
     650:	000004dc 	ldrdeq	r0, [r0], -ip
     654:	08003a96 	stmdaeq	r0, {r1, r2, r4, r7, r9, fp, ip, sp}
     658:	00000002 	andeq	r0, r0, r2
     65c:	0000000c 	andeq	r0, r0, ip
     660:	000004dc 	ldrdeq	r0, [r0], -ip
     664:	08003a98 	stmdaeq	r0, {r3, r4, r7, r9, fp, ip, sp}
     668:	00000002 	andeq	r0, r0, r2
     66c:	0000000c 	andeq	r0, r0, ip
     670:	000004dc 	ldrdeq	r0, [r0], -ip
     674:	08003a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp, ip, sp}
     678:	00000002 	andeq	r0, r0, r2
     67c:	0000000c 	andeq	r0, r0, ip
     680:	000004dc 	ldrdeq	r0, [r0], -ip
     684:	08003a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, sp}
     688:	00000002 	andeq	r0, r0, r2
     68c:	0000000c 	andeq	r0, r0, ip
     690:	000004dc 	ldrdeq	r0, [r0], -ip
     694:	08003a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, ip, sp}
     698:	00000002 	andeq	r0, r0, r2
     69c:	0000000c 	andeq	r0, r0, ip
     6a0:	000004dc 	ldrdeq	r0, [r0], -ip
     6a4:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
     6a8:	00000002 	andeq	r0, r0, r2
     6ac:	0000000c 	andeq	r0, r0, ip
     6b0:	000004dc 	ldrdeq	r0, [r0], -ip
     6b4:	08003aa2 	stmdaeq	r0, {r1, r5, r7, r9, fp, ip, sp}
     6b8:	00000002 	andeq	r0, r0, r2
     6bc:	0000000c 	andeq	r0, r0, ip
     6c0:	000004dc 	ldrdeq	r0, [r0], -ip
     6c4:	08003aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip, sp}
     6c8:	00000002 	andeq	r0, r0, r2
     6cc:	0000000c 	andeq	r0, r0, ip
     6d0:	000004dc 	ldrdeq	r0, [r0], -ip
     6d4:	08003aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, sp}
     6d8:	00000002 	andeq	r0, r0, r2
     6dc:	0000000c 	andeq	r0, r0, ip
     6e0:	000004dc 	ldrdeq	r0, [r0], -ip
     6e4:	08003aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip, sp}
     6e8:	00000002 	andeq	r0, r0, r2
     6ec:	0000000c 	andeq	r0, r0, ip
     6f0:	000004dc 	ldrdeq	r0, [r0], -ip
     6f4:	08003aaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, fp, ip, sp}
     6f8:	00000002 	andeq	r0, r0, r2
     6fc:	0000000c 	andeq	r0, r0, ip
     700:	000004dc 	ldrdeq	r0, [r0], -ip
     704:	08003aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp}
     708:	00000002 	andeq	r0, r0, r2
     70c:	0000000c 	andeq	r0, r0, ip
     710:	000004dc 	ldrdeq	r0, [r0], -ip
     714:	08003aae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp, ip, sp}
     718:	00000002 	andeq	r0, r0, r2
     71c:	0000000c 	andeq	r0, r0, ip
     720:	000004dc 	ldrdeq	r0, [r0], -ip
     724:	08003ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip, sp}
     728:	00000002 	andeq	r0, r0, r2
     72c:	0000000c 	andeq	r0, r0, ip
     730:	000004dc 	ldrdeq	r0, [r0], -ip
     734:	08003ab2 	stmdaeq	r0, {r1, r4, r5, r7, r9, fp, ip, sp}
     738:	00000002 	andeq	r0, r0, r2
     73c:	0000000c 	andeq	r0, r0, ip
     740:	000004dc 	ldrdeq	r0, [r0], -ip
     744:	08003ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, ip, sp}
     748:	00000004 	andeq	r0, r0, r4
     74c:	0000000c 	andeq	r0, r0, ip
     750:	000004dc 	ldrdeq	r0, [r0], -ip
     754:	08003ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip, sp}
     758:	00000002 	andeq	r0, r0, r2
     75c:	0000000c 	andeq	r0, r0, ip
     760:	000004dc 	ldrdeq	r0, [r0], -ip
     764:	08003aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, ip, sp}
     768:	00000002 	andeq	r0, r0, r2
     76c:	0000000c 	andeq	r0, r0, ip
     770:	000004dc 	ldrdeq	r0, [r0], -ip
     774:	08003abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, ip, sp}
     778:	00000002 	andeq	r0, r0, r2
     77c:	0000000c 	andeq	r0, r0, ip
     780:	000004dc 	ldrdeq	r0, [r0], -ip
     784:	08003abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp, ip, sp}
     788:	00000002 	andeq	r0, r0, r2
     78c:	0000000c 	andeq	r0, r0, ip
     790:	000004dc 	ldrdeq	r0, [r0], -ip
     794:	08003ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, sp}
     798:	00000002 	andeq	r0, r0, r2
     79c:	0000000c 	andeq	r0, r0, ip
     7a0:	000004dc 	ldrdeq	r0, [r0], -ip
     7a4:	08003ac2 	stmdaeq	r0, {r1, r6, r7, r9, fp, ip, sp}
     7a8:	00000002 	andeq	r0, r0, r2
     7ac:	0000000c 	andeq	r0, r0, ip
     7b0:	000004dc 	ldrdeq	r0, [r0], -ip
     7b4:	08003ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, ip, sp}
     7b8:	00000002 	andeq	r0, r0, r2
     7bc:	0000000c 	andeq	r0, r0, ip
     7c0:	000004dc 	ldrdeq	r0, [r0], -ip
     7c4:	08003ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, ip, sp}
     7c8:	00000002 	andeq	r0, r0, r2
     7cc:	0000000c 	andeq	r0, r0, ip
     7d0:	000004dc 	ldrdeq	r0, [r0], -ip
     7d4:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
     7d8:	00000004 	andeq	r0, r0, r4
     7dc:	0000000c 	andeq	r0, r0, ip
     7e0:	000004dc 	ldrdeq	r0, [r0], -ip
     7e4:	08003acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip, sp}
     7e8:	00000002 	andeq	r0, r0, r2
     7ec:	0000000c 	andeq	r0, r0, ip
     7f0:	000004dc 	ldrdeq	r0, [r0], -ip
     7f4:	08003ace 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, fp, ip, sp}
     7f8:	00000002 	andeq	r0, r0, r2
     7fc:	0000000c 	andeq	r0, r0, ip
     800:	000004dc 	ldrdeq	r0, [r0], -ip
     804:	08003ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, sp}
     808:	00000002 	andeq	r0, r0, r2
     80c:	0000000c 	andeq	r0, r0, ip
     810:	000004dc 	ldrdeq	r0, [r0], -ip
     814:	08003ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, ip, sp}
     818:	00000002 	andeq	r0, r0, r2
     81c:	0000000c 	andeq	r0, r0, ip
     820:	000004dc 	ldrdeq	r0, [r0], -ip
     824:	08003ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, sp}
     828:	00000002 	andeq	r0, r0, r2
     82c:	0000000c 	andeq	r0, r0, ip
     830:	000004dc 	ldrdeq	r0, [r0], -ip
     834:	08003ad6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, fp, ip, sp}
     838:	00000002 	andeq	r0, r0, r2
     83c:	0000000c 	andeq	r0, r0, ip
     840:	000004dc 	ldrdeq	r0, [r0], -ip
     844:	08003ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, ip, sp}
     848:	00000002 	andeq	r0, r0, r2
     84c:	0000000c 	andeq	r0, r0, ip
     850:	000004dc 	ldrdeq	r0, [r0], -ip
     854:	08003ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, sp}
     858:	00000002 	andeq	r0, r0, r2
     85c:	0000000c 	andeq	r0, r0, ip
     860:	000004dc 	ldrdeq	r0, [r0], -ip
     864:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
     868:	00000002 	andeq	r0, r0, r2
     86c:	0000000c 	andeq	r0, r0, ip
     870:	000004dc 	ldrdeq	r0, [r0], -ip
     874:	08003ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, ip, sp}
     878:	00000002 	andeq	r0, r0, r2
     87c:	0000000c 	andeq	r0, r0, ip
     880:	000004dc 	ldrdeq	r0, [r0], -ip
     884:	08003ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, sp}
     888:	00000002 	andeq	r0, r0, r2
     88c:	0000000c 	andeq	r0, r0, ip
     890:	000004dc 	ldrdeq	r0, [r0], -ip
     894:	08003ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, ip, sp}
     898:	00000002 	andeq	r0, r0, r2
     89c:	0000000c 	andeq	r0, r0, ip
     8a0:	000004dc 	ldrdeq	r0, [r0], -ip
     8a4:	08003ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, sp}
     8a8:	00000002 	andeq	r0, r0, r2
     8ac:	0000000c 	andeq	r0, r0, ip
     8b0:	000004dc 	ldrdeq	r0, [r0], -ip
     8b4:	08003ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip, sp}
     8b8:	00000002 	andeq	r0, r0, r2
     8bc:	0000000c 	andeq	r0, r0, ip
     8c0:	000004dc 	ldrdeq	r0, [r0], -ip
     8c4:	08003ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip, sp}
     8c8:	00000002 	andeq	r0, r0, r2
     8cc:	0000000c 	andeq	r0, r0, ip
     8d0:	000004dc 	ldrdeq	r0, [r0], -ip
     8d4:	08003aea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, fp, ip, sp}
     8d8:	00000002 	andeq	r0, r0, r2
     8dc:	0000000c 	andeq	r0, r0, ip
     8e0:	000004dc 	ldrdeq	r0, [r0], -ip
     8e4:	08003aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, ip, sp}
     8e8:	00000002 	andeq	r0, r0, r2
     8ec:	0000000c 	andeq	r0, r0, ip
     8f0:	000004dc 	ldrdeq	r0, [r0], -ip
     8f4:	08003aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, ip, sp}
     8f8:	00000002 	andeq	r0, r0, r2
     8fc:	0000000c 	andeq	r0, r0, ip
     900:	000004dc 	ldrdeq	r0, [r0], -ip
     904:	08003af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip, sp}
     908:	00000002 	andeq	r0, r0, r2
     90c:	0000000c 	andeq	r0, r0, ip
     910:	000004dc 	ldrdeq	r0, [r0], -ip
     914:	08003af2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, fp, ip, sp}
     918:	00000002 	andeq	r0, r0, r2
     91c:	0000000c 	andeq	r0, r0, ip
     920:	000004dc 	ldrdeq	r0, [r0], -ip
     924:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
     928:	00000002 	andeq	r0, r0, r2
     92c:	0000000c 	andeq	r0, r0, ip
     930:	000004dc 	ldrdeq	r0, [r0], -ip
     934:	08003af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, ip, sp}
     938:	00000002 	andeq	r0, r0, r2
     93c:	0000000c 	andeq	r0, r0, ip
     940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     944:	7c020001 	stcvc	0, cr0, [r2], {1}
     948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     94c:	00000014 	andeq	r0, r0, r4, lsl r0
     950:	0000093c 	andeq	r0, r0, ip, lsr r9
     954:	08003af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip, sp}
     958:	0000000c 	andeq	r0, r0, ip
     95c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     960:	00018e02 	andeq	r8, r1, r2, lsl #28
     964:	0000000c 	andeq	r0, r0, ip
     968:	0000093c 	andeq	r0, r0, ip, lsr r9
     96c:	08003b04 	stmdaeq	r0, {r2, r8, r9, fp, ip, sp}
     970:	00000004 	andeq	r0, r0, r4
     974:	0000000c 	andeq	r0, r0, ip
     978:	0000093c 	andeq	r0, r0, ip, lsr r9
     97c:	08003b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, sp}
     980:	00000004 	andeq	r0, r0, r4
     984:	00000018 	andeq	r0, r0, r8, lsl r0
     988:	0000093c 	andeq	r0, r0, ip, lsr r9
     98c:	08003b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip, sp}
     990:	0000001e 	andeq	r0, r0, lr, lsl r0
     994:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     998:	86038504 	strhi	r8, [r3], -r4, lsl #10
     99c:	00018e02 	andeq	r8, r1, r2, lsl #28
     9a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a4:	0000093c 	andeq	r0, r0, ip, lsr r9
     9a8:	08003b2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, fp, ip, sp}
     9ac:	00000024 	andeq	r0, r0, r4, lsr #32
     9b0:	83180e41 	tsthi	r8, #1040	; 0x410
     9b4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     9b8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     9bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     9c0:	0000000c 	andeq	r0, r0, ip
     9c4:	0000093c 	andeq	r0, r0, ip, lsr r9
     9c8:	08003b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, ip, sp}
     9cc:	00000008 	andeq	r0, r0, r8
     9d0:	0000000c 	andeq	r0, r0, ip
     9d4:	0000093c 	andeq	r0, r0, ip, lsr r9
     9d8:	08003b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, ip, sp}
     9dc:	00000004 	andeq	r0, r0, r4
     9e0:	0000000c 	andeq	r0, r0, ip
     9e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     9e8:	7c020001 	stcvc	0, cr0, [r2], {1}
     9ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9f0:	00000014 	andeq	r0, r0, r4, lsl r0
     9f4:	000009e0 	andeq	r0, r0, r0, ror #19
     9f8:	08003b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, sp}
     9fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     a00:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a04:	00018e02 	andeq	r8, r1, r2, lsl #28
     a08:	0000000c 	andeq	r0, r0, ip
     a0c:	000009e0 	andeq	r0, r0, r0, ror #19
     a10:	08003b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, sp}
     a14:	00000004 	andeq	r0, r0, r4
     a18:	00000018 	andeq	r0, r0, r8, lsl r0
     a1c:	000009e0 	andeq	r0, r0, r0, ror #19
     a20:	08003b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip, sp}
     a24:	0000009c 	muleq	r0, ip, r0
     a28:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     a2c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     a30:	00018e02 	andeq	r8, r1, r2, lsl #28
     a34:	0000001c 	andeq	r0, r0, ip, lsl r0
     a38:	000009e0 	andeq	r0, r0, r0, ror #19
     a3c:	08003c28 	stmdaeq	r0, {r3, r5, sl, fp, ip, sp}
     a40:	00000150 	andeq	r0, r0, r0, asr r1
     a44:	83180e41 	tsthi	r8, #1040	; 0x410
     a48:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     a4c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a50:	00018e02 	andeq	r8, r1, r2, lsl #28
     a54:	00000014 	andeq	r0, r0, r4, lsl r0
     a58:	000009e0 	andeq	r0, r0, r0, ror #19
     a5c:	08003d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, sp}
     a60:	00000020 	andeq	r0, r0, r0, lsr #32
     a64:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     a68:	00018e02 	andeq	r8, r1, r2, lsl #28
     a6c:	0000000c 	andeq	r0, r0, ip
     a70:	000009e0 	andeq	r0, r0, r0, ror #19
     a74:	08003d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, sp}
     a78:	0000000c 	andeq	r0, r0, ip
     a7c:	0000000c 	andeq	r0, r0, ip
     a80:	000009e0 	andeq	r0, r0, r0, ror #19
     a84:	08003da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, sp}
     a88:	0000000c 	andeq	r0, r0, ip
     a8c:	0000000c 	andeq	r0, r0, ip
     a90:	000009e0 	andeq	r0, r0, r0, ror #19
     a94:	08003db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, ip, sp}
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	0000000c 	andeq	r0, r0, ip
     aa0:	000009e0 	andeq	r0, r0, r0, ror #19
     aa4:	08003dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip, sp}
     aa8:	0000000c 	andeq	r0, r0, ip
     aac:	0000000c 	andeq	r0, r0, ip
     ab0:	000009e0 	andeq	r0, r0, r0, ror #19
     ab4:	08003dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, ip, sp}
     ab8:	0000000c 	andeq	r0, r0, ip
     abc:	0000000c 	andeq	r0, r0, ip
     ac0:	000009e0 	andeq	r0, r0, r0, ror #19
     ac4:	08003dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp}
     ac8:	00000014 	andeq	r0, r0, r4, lsl r0
     acc:	0000000c 	andeq	r0, r0, ip
     ad0:	000009e0 	andeq	r0, r0, r0, ror #19
     ad4:	08003de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, ip, sp}
     ad8:	0000000c 	andeq	r0, r0, ip
     adc:	0000000c 	andeq	r0, r0, ip
     ae0:	000009e0 	andeq	r0, r0, r0, ror #19
     ae4:	08003df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, sp}
     ae8:	00000010 	andeq	r0, r0, r0, lsl r0
     aec:	0000000c 	andeq	r0, r0, ip
     af0:	000009e0 	andeq	r0, r0, r0, ror #19
     af4:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
     af8:	00000008 	andeq	r0, r0, r8
     afc:	0000000c 	andeq	r0, r0, ip
     b00:	000009e0 	andeq	r0, r0, r0, ror #19
     b04:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
     b08:	00000004 	andeq	r0, r0, r4
     b0c:	0000000c 	andeq	r0, r0, ip
     b10:	000009e0 	andeq	r0, r0, r0, ror #19
     b14:	08003e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, sp}
     b18:	00000006 	andeq	r0, r0, r6
     b1c:	0000000c 	andeq	r0, r0, ip
     b20:	000009e0 	andeq	r0, r0, r0, ror #19
     b24:	08003e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp, ip, sp}
     b28:	0000001a 	andeq	r0, r0, sl, lsl r0
     b2c:	00000014 	andeq	r0, r0, r4, lsl r0
     b30:	000009e0 	andeq	r0, r0, r0, ror #19
     b34:	08003e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp}
     b38:	00000028 	andeq	r0, r0, r8, lsr #32
     b3c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     b40:	00018e02 	andeq	r8, r1, r2, lsl #28
     b44:	00000018 	andeq	r0, r0, r8, lsl r0
     b48:	000009e0 	andeq	r0, r0, r0, ror #19
     b4c:	08003e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, sp}
     b50:	00000024 	andeq	r0, r0, r4, lsr #32
     b54:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     b58:	4c018e02 	stcmi	14, cr8, [r1], {2}
     b5c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     b60:	00000014 	andeq	r0, r0, r4, lsl r0
     b64:	000009e0 	andeq	r0, r0, r0, ror #19
     b68:	08003e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
     b6c:	00000030 	andeq	r0, r0, r0, lsr r0
     b70:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     b74:	00018e02 	andeq	r8, r1, r2, lsl #28
     b78:	00000018 	andeq	r0, r0, r8, lsl r0
     b7c:	000009e0 	andeq	r0, r0, r0, ror #19
     b80:	08003eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, sp}
     b84:	0000002c 	andeq	r0, r0, ip, lsr #32
     b88:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     b8c:	4f018e02 	svcmi	0x00018e02
     b90:	000ec4ce 	andeq	ip, lr, lr, asr #9
     b94:	0000000c 	andeq	r0, r0, ip
     b98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     ba0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ba4:	0000000c 	andeq	r0, r0, ip
     ba8:	00000b94 	muleq	r0, r4, fp
     bac:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
     bb0:	00000018 	andeq	r0, r0, r8, lsl r0
     bb4:	0000000c 	andeq	r0, r0, ip
     bb8:	00000b94 	muleq	r0, r4, fp
     bbc:	08003ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip, sp}
     bc0:	00000018 	andeq	r0, r0, r8, lsl r0
     bc4:	0000000c 	andeq	r0, r0, ip
     bc8:	00000b94 	muleq	r0, r4, fp
     bcc:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
     bd0:	00000018 	andeq	r0, r0, r8, lsl r0
     bd4:	0000000c 	andeq	r0, r0, ip
     bd8:	00000b94 	muleq	r0, r4, fp
     bdc:	08003f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, sp}
     be0:	00000018 	andeq	r0, r0, r8, lsl r0
     be4:	0000000c 	andeq	r0, r0, ip
     be8:	00000b94 	muleq	r0, r4, fp
     bec:	08003f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp}
     bf0:	00000010 	andeq	r0, r0, r0, lsl r0
     bf4:	0000000c 	andeq	r0, r0, ip
     bf8:	00000b94 	muleq	r0, r4, fp
     bfc:	08003f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, sp}
     c00:	0000000c 	andeq	r0, r0, ip
     c04:	0000000c 	andeq	r0, r0, ip
     c08:	00000b94 	muleq	r0, r4, fp
     c0c:	08003f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, sp}
     c10:	0000000c 	andeq	r0, r0, ip
     c14:	0000000c 	andeq	r0, r0, ip
     c18:	00000b94 	muleq	r0, r4, fp
     c1c:	08003f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, sp}
     c20:	00000010 	andeq	r0, r0, r0, lsl r0
     c24:	0000000c 	andeq	r0, r0, ip
     c28:	00000b94 	muleq	r0, r4, fp
     c2c:	08003f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip, sp}
     c30:	00000010 	andeq	r0, r0, r0, lsl r0
     c34:	0000000c 	andeq	r0, r0, ip
     c38:	00000b94 	muleq	r0, r4, fp
     c3c:	08003f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, sp}
     c40:	00000018 	andeq	r0, r0, r8, lsl r0
     c44:	0000000c 	andeq	r0, r0, ip
     c48:	00000b94 	muleq	r0, r4, fp
     c4c:	08003f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, ip, sp}
     c50:	00000020 	andeq	r0, r0, r0, lsr #32
     c54:	0000000c 	andeq	r0, r0, ip
     c58:	00000b94 	muleq	r0, r4, fp
     c5c:	08003fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
     c60:	0000000c 	andeq	r0, r0, ip
     c64:	0000000c 	andeq	r0, r0, ip
     c68:	00000b94 	muleq	r0, r4, fp
     c6c:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
     c70:	00000028 	andeq	r0, r0, r8, lsr #32
     c74:	00000018 	andeq	r0, r0, r8, lsl r0
     c78:	00000b94 	muleq	r0, r4, fp
     c7c:	08003fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp}
     c80:	00000036 	andeq	r0, r0, r6, lsr r0
     c84:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     c88:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
     c8c:	0000080e 	andeq	r0, r0, lr, lsl #16
     c90:	00000018 	andeq	r0, r0, r8, lsl r0
     c94:	00000b94 	muleq	r0, r4, fp
     c98:	08004022 	stmdaeq	r0, {r1, r5, lr}
     c9c:	00000042 	andeq	r0, r0, r2, asr #32
     ca0:	83100e41 	tsthi	r0, #1040	; 0x410
     ca4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     ca8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cac:	00000014 	andeq	r0, r0, r4, lsl r0
     cb0:	00000b94 	muleq	r0, r4, fp
     cb4:	08004064 	stmdaeq	r0, {r2, r5, r6, lr}
     cb8:	0000003c 	andeq	r0, r0, ip, lsr r0
     cbc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     cc0:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc4:	00000014 	andeq	r0, r0, r4, lsl r0
     cc8:	00000b94 	muleq	r0, r4, fp
     ccc:	080040a0 	stmdaeq	r0, {r5, r7, lr}
     cd0:	00000070 	andeq	r0, r0, r0, ror r0
     cd4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     cd8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cdc:	00000018 	andeq	r0, r0, r8, lsl r0
     ce0:	00000b94 	muleq	r0, r4, fp
     ce4:	08004110 	stmdaeq	r0, {r4, r8, lr}
     ce8:	00000048 	andeq	r0, r0, r8, asr #32
     cec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     cf0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     cf4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cf8:	00000018 	andeq	r0, r0, r8, lsl r0
     cfc:	00000b94 	muleq	r0, r4, fp
     d00:	08004158 	stmdaeq	r0, {r3, r4, r6, r8, lr}
     d04:	00000038 	andeq	r0, r0, r8, lsr r0
     d08:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     d0c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     d10:	00018e02 	andeq	r8, r1, r2, lsl #28
     d14:	00000018 	andeq	r0, r0, r8, lsl r0
     d18:	00000b94 	muleq	r0, r4, fp
     d1c:	08004190 	stmdaeq	r0, {r4, r7, r8, lr}
     d20:	00000048 	andeq	r0, r0, r8, asr #32
     d24:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     d28:	86038504 	strhi	r8, [r3], -r4, lsl #10
     d2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d30:	00000014 	andeq	r0, r0, r4, lsl r0
     d34:	00000b94 	muleq	r0, r4, fp
     d38:	080041d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, lr}
     d3c:	000000a0 	andeq	r0, r0, r0, lsr #1
     d40:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d44:	00018e02 	andeq	r8, r1, r2, lsl #28
     d48:	00000018 	andeq	r0, r0, r8, lsl r0
     d4c:	00000b94 	muleq	r0, r4, fp
     d50:	08004278 	stmdaeq	r0, {r3, r4, r5, r6, r9, lr}
     d54:	0000008c 	andeq	r0, r0, ip, lsl #1
     d58:	83100e41 	tsthi	r0, #1040	; 0x410
     d5c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     d60:	00018e02 	andeq	r8, r1, r2, lsl #28
     d64:	0000001c 	andeq	r0, r0, ip, lsl r0
     d68:	00000b94 	muleq	r0, r4, fp
     d6c:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
     d70:	00000054 	andeq	r0, r0, r4, asr r0
     d74:	83180e41 	tsthi	r8, #1040	; 0x410
     d78:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     d7c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d80:	00018e02 	andeq	r8, r1, r2, lsl #28
     d84:	0000000c 	andeq	r0, r0, ip
     d88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d94:	0000001c 	andeq	r0, r0, ip, lsl r0
     d98:	00000d84 	andeq	r0, r0, r4, lsl #27
     d9c:	08004358 	stmdaeq	r0, {r3, r4, r6, r8, r9, lr}
     da0:	000000a4 	andeq	r0, r0, r4, lsr #1
     da4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     da8:	02018e02 	andeq	r8, r1, #2, 28
     dac:	c3ce0a49 	bicgt	r0, lr, #299008	; 0x49000
     db0:	0b42000e 	bleq	1080df0 <__Stack_Size+0x10809f0>
     db4:	00000018 	andeq	r0, r0, r8, lsl r0
     db8:	00000d84 	andeq	r0, r0, r4, lsl #27
     dbc:	080043fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, lr}
     dc0:	00000016 	andeq	r0, r0, r6, lsl r0
     dc4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     dc8:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     dcc:	000ec3ce 	andeq	ip, lr, lr, asr #7
     dd0:	0000001c 	andeq	r0, r0, ip, lsl r0
     dd4:	00000d84 	andeq	r0, r0, r4, lsl #27
     dd8:	08004412 	stmdaeq	r0, {r1, r4, sl, lr}
     ddc:	0000009c 	muleq	r0, ip, r0
     de0:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
     de4:	86048505 	strhi	r8, [r4], -r5, lsl #10
     de8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     dec:	00000001 	andeq	r0, r0, r1
     df0:	0000000c 	andeq	r0, r0, ip
     df4:	00000d84 	andeq	r0, r0, r4, lsl #27
     df8:	080044ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, lr}
     dfc:	00000010 	andeq	r0, r0, r0, lsl r0
     e00:	0000000c 	andeq	r0, r0, ip
     e04:	00000d84 	andeq	r0, r0, r4, lsl #27
     e08:	080044be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, lr}
     e0c:	0000000c 	andeq	r0, r0, ip
     e10:	0000000c 	andeq	r0, r0, ip
     e14:	00000d84 	andeq	r0, r0, r4, lsl #27
     e18:	080044ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, lr}
     e1c:	00000006 	andeq	r0, r0, r6
     e20:	0000000c 	andeq	r0, r0, ip
     e24:	00000d84 	andeq	r0, r0, r4, lsl #27
     e28:	080044d0 	stmdaeq	r0, {r4, r6, r7, sl, lr}
     e2c:	0000000c 	andeq	r0, r0, ip
     e30:	0000000c 	andeq	r0, r0, ip
     e34:	00000d84 	andeq	r0, r0, r4, lsl #27
     e38:	080044dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, lr}
     e3c:	00000006 	andeq	r0, r0, r6
     e40:	0000000c 	andeq	r0, r0, ip
     e44:	00000d84 	andeq	r0, r0, r4, lsl #27
     e48:	080044e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, lr}
     e4c:	00000004 	andeq	r0, r0, r4
     e50:	0000000c 	andeq	r0, r0, ip
     e54:	00000d84 	andeq	r0, r0, r4, lsl #27
     e58:	080044e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, lr}
     e5c:	00000004 	andeq	r0, r0, r4
     e60:	0000000c 	andeq	r0, r0, ip
     e64:	00000d84 	andeq	r0, r0, r4, lsl #27
     e68:	080044ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, lr}
     e6c:	0000000a 	andeq	r0, r0, sl
     e70:	0000000c 	andeq	r0, r0, ip
     e74:	00000d84 	andeq	r0, r0, r4, lsl #27
     e78:	080044f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, lr}
     e7c:	00000004 	andeq	r0, r0, r4
     e80:	0000000c 	andeq	r0, r0, ip
     e84:	00000d84 	andeq	r0, r0, r4, lsl #27
     e88:	080044f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, lr}
     e8c:	00000010 	andeq	r0, r0, r0, lsl r0
     e90:	0000000c 	andeq	r0, r0, ip
     e94:	00000d84 	andeq	r0, r0, r4, lsl #27
     e98:	08004508 	stmdaeq	r0, {r3, r8, sl, lr}
     e9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea0:	0000000c 	andeq	r0, r0, ip
     ea4:	00000d84 	andeq	r0, r0, r4, lsl #27
     ea8:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
     eac:	0000000c 	andeq	r0, r0, ip
     eb0:	00000018 	andeq	r0, r0, r8, lsl r0
     eb4:	00000d84 	andeq	r0, r0, r4, lsl #27
     eb8:	08004530 	stmdaeq	r0, {r4, r5, r8, sl, lr}
     ebc:	00000054 	andeq	r0, r0, r4, asr r0
     ec0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     ec4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     ec8:	00000001 	andeq	r0, r0, r1
     ecc:	00000014 	andeq	r0, r0, r4, lsl r0
     ed0:	00000d84 	andeq	r0, r0, r4, lsl #27
     ed4:	08004584 	stmdaeq	r0, {r2, r7, r8, sl, lr}
     ed8:	0000002a 	andeq	r0, r0, sl, lsr #32
     edc:	84080e49 	strhi	r0, [r8], #-3657	; 0xe49
     ee0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ee4:	0000000c 	andeq	r0, r0, ip
     ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eec:	7c020001 	stcvc	0, cr0, [r2], {1}
     ef0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ef4:	0000000c 	andeq	r0, r0, ip
     ef8:	00000ee4 	andeq	r0, r0, r4, ror #29
     efc:	080045b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, lr}
     f00:	00000034 	andeq	r0, r0, r4, lsr r0
     f04:	0000000c 	andeq	r0, r0, ip
     f08:	00000ee4 	andeq	r0, r0, r4, ror #29
     f0c:	080045e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, lr}
     f10:	00000030 	andeq	r0, r0, r0, lsr r0
     f14:	0000000c 	andeq	r0, r0, ip
     f18:	00000ee4 	andeq	r0, r0, r4, ror #29
     f1c:	08004614 	stmdaeq	r0, {r2, r4, r9, sl, lr}
     f20:	00000014 	andeq	r0, r0, r4, lsl r0
     f24:	00000018 	andeq	r0, r0, r8, lsl r0
     f28:	00000ee4 	andeq	r0, r0, r4, ror #29
     f2c:	08004628 	stmdaeq	r0, {r3, r5, r9, sl, lr}
     f30:	00000084 	andeq	r0, r0, r4, lsl #1
     f34:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
     f38:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	0000000c 	andeq	r0, r0, ip
     f44:	00000ee4 	andeq	r0, r0, r4, ror #29
     f48:	080046ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr}
     f4c:	0000000c 	andeq	r0, r0, ip
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	00000ee4 	andeq	r0, r0, r4, ror #29
     f58:	080046b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, lr}
     f5c:	00000004 	andeq	r0, r0, r4
     f60:	0000000c 	andeq	r0, r0, ip
     f64:	00000ee4 	andeq	r0, r0, r4, ror #29
     f68:	080046bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, lr}
     f6c:	00000004 	andeq	r0, r0, r4
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	00000ee4 	andeq	r0, r0, r4, ror #29
     f78:	080046c0 	stmdaeq	r0, {r6, r7, r9, sl, lr}
     f7c:	00000004 	andeq	r0, r0, r4
     f80:	0000000c 	andeq	r0, r0, ip
     f84:	00000ee4 	andeq	r0, r0, r4, ror #29
     f88:	080046c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, lr}
     f8c:	00000004 	andeq	r0, r0, r4
     f90:	0000000c 	andeq	r0, r0, ip
     f94:	00000ee4 	andeq	r0, r0, r4, ror #29
     f98:	080046c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, lr}
     f9c:	00000006 	andeq	r0, r0, r6
     fa0:	0000000c 	andeq	r0, r0, ip
     fa4:	00000ee4 	andeq	r0, r0, r4, ror #29
     fa8:	080046ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, lr}
     fac:	00000004 	andeq	r0, r0, r4
     fb0:	0000000c 	andeq	r0, r0, ip
     fb4:	00000ee4 	andeq	r0, r0, r4, ror #29
     fb8:	080046d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, lr}
     fbc:	0000000e 	andeq	r0, r0, lr
     fc0:	0000000c 	andeq	r0, r0, ip
     fc4:	00000ee4 	andeq	r0, r0, r4, ror #29
     fc8:	080046e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, lr}
     fcc:	00000020 	andeq	r0, r0, r0, lsr #32
     fd0:	0000000c 	andeq	r0, r0, ip
     fd4:	00000ee4 	andeq	r0, r0, r4, ror #29
     fd8:	08004700 	stmdaeq	r0, {r8, r9, sl, lr}
     fdc:	0000000c 	andeq	r0, r0, ip
     fe0:	0000000c 	andeq	r0, r0, ip
     fe4:	00000ee4 	andeq	r0, r0, r4, ror #29
     fe8:	0800470c 	stmdaeq	r0, {r2, r3, r8, r9, sl, lr}
     fec:	00000018 	andeq	r0, r0, r8, lsl r0
     ff0:	0000000c 	andeq	r0, r0, ip
     ff4:	00000ee4 	andeq	r0, r0, r4, ror #29
     ff8:	08004724 	stmdaeq	r0, {r2, r5, r8, r9, sl, lr}
     ffc:	00000010 	andeq	r0, r0, r0, lsl r0
    1000:	0000000c 	andeq	r0, r0, ip
    1004:	00000ee4 	andeq	r0, r0, r4, ror #29
    1008:	08004734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, lr}
    100c:	00000020 	andeq	r0, r0, r0, lsr #32
    1010:	0000000c 	andeq	r0, r0, ip
    1014:	00000ee4 	andeq	r0, r0, r4, ror #29
    1018:	08004754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, lr}
    101c:	0000000c 	andeq	r0, r0, ip
    1020:	0000000c 	andeq	r0, r0, ip
    1024:	00000ee4 	andeq	r0, r0, r4, ror #29
    1028:	08004760 	stmdaeq	r0, {r5, r6, r8, r9, sl, lr}
    102c:	00000014 	andeq	r0, r0, r4, lsl r0
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000ee4 	andeq	r0, r0, r4, ror #29
    1038:	08004774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr}
    103c:	00000010 	andeq	r0, r0, r0, lsl r0
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00000ee4 	andeq	r0, r0, r4, ror #29
    1048:	08004784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr}
    104c:	00000010 	andeq	r0, r0, r0, lsl r0
    1050:	0000000c 	andeq	r0, r0, ip
    1054:	00000ee4 	andeq	r0, r0, r4, ror #29
    1058:	08004794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, lr}
    105c:	00000018 	andeq	r0, r0, r8, lsl r0
    1060:	0000000c 	andeq	r0, r0, ip
    1064:	00000ee4 	andeq	r0, r0, r4, ror #29
    1068:	080047ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, lr}
    106c:	00000020 	andeq	r0, r0, r0, lsr #32
    1070:	00000014 	andeq	r0, r0, r4, lsl r0
    1074:	00000ee4 	andeq	r0, r0, r4, ror #29
    1078:	080047cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, lr}
    107c:	0000004c 	andeq	r0, r0, ip, asr #32
    1080:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1084:	00018e02 	andeq	r8, r1, r2, lsl #28
    1088:	0000000c 	andeq	r0, r0, ip
    108c:	00000ee4 	andeq	r0, r0, r4, ror #29
    1090:	08004818 	stmdaeq	r0, {r3, r4, fp, lr}
    1094:	0000001c 	andeq	r0, r0, ip, lsl r0
    1098:	0000000c 	andeq	r0, r0, ip
    109c:	00000ee4 	andeq	r0, r0, r4, ror #29
    10a0:	08004834 	stmdaeq	r0, {r2, r4, r5, fp, lr}
    10a4:	00000018 	andeq	r0, r0, r8, lsl r0
    10a8:	0000000c 	andeq	r0, r0, ip
    10ac:	00000ee4 	andeq	r0, r0, r4, ror #29
    10b0:	0800484c 	stmdaeq	r0, {r2, r3, r6, fp, lr}
    10b4:	00000018 	andeq	r0, r0, r8, lsl r0
    10b8:	0000000c 	andeq	r0, r0, ip
    10bc:	00000ee4 	andeq	r0, r0, r4, ror #29
    10c0:	08004864 	stmdaeq	r0, {r2, r5, r6, fp, lr}
    10c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10c8:	0000000c 	andeq	r0, r0, ip
    10cc:	00000ee4 	andeq	r0, r0, r4, ror #29
    10d0:	08004880 	stmdaeq	r0, {r7, fp, lr}
    10d4:	00000030 	andeq	r0, r0, r0, lsr r0
    10d8:	0000000c 	andeq	r0, r0, ip
    10dc:	00000ee4 	andeq	r0, r0, r4, ror #29
    10e0:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    10e4:	00000014 	andeq	r0, r0, r4, lsl r0
    10e8:	0000000c 	andeq	r0, r0, ip
    10ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    10f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10f8:	00000018 	andeq	r0, r0, r8, lsl r0
    10fc:	000010e8 	andeq	r1, r0, r8, ror #1
    1100:	080048c4 	stmdaeq	r0, {r2, r6, r7, fp, lr}
    1104:	0000001a 	andeq	r0, r0, sl, lsl r0
    1108:	83080e41 	movwhi	r0, #36417	; 0x8e41
    110c:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
    1110:	000ec3ce 	andeq	ip, lr, lr, asr #7
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	000010e8 	andeq	r1, r0, r8, ror #1
    111c:	080048de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, lr}
    1120:	0000000a 	andeq	r0, r0, sl
    1124:	0000000c 	andeq	r0, r0, ip
    1128:	000010e8 	andeq	r1, r0, r8, ror #1
    112c:	080048e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, lr}
    1130:	0000000c 	andeq	r0, r0, ip
    1134:	0000000c 	andeq	r0, r0, ip
    1138:	000010e8 	andeq	r1, r0, r8, ror #1
    113c:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
    1140:	00000014 	andeq	r0, r0, r4, lsl r0
    1144:	0000000c 	andeq	r0, r0, ip
    1148:	000010e8 	andeq	r1, r0, r8, ror #1
    114c:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
    1150:	0000000c 	andeq	r0, r0, ip
    1154:	0000000c 	andeq	r0, r0, ip
    1158:	000010e8 	andeq	r1, r0, r8, ror #1
    115c:	08004914 	stmdaeq	r0, {r2, r4, r8, fp, lr}
    1160:	0000002c 	andeq	r0, r0, ip, lsr #32
    1164:	0000000c 	andeq	r0, r0, ip
    1168:	000010e8 	andeq	r1, r0, r8, ror #1
    116c:	08004940 	stmdaeq	r0, {r6, r8, fp, lr}
    1170:	00000028 	andeq	r0, r0, r8, lsr #32
    1174:	0000000c 	andeq	r0, r0, ip
    1178:	000010e8 	andeq	r1, r0, r8, ror #1
    117c:	08004968 	stmdaeq	r0, {r3, r5, r6, r8, fp, lr}
    1180:	00000014 	andeq	r0, r0, r4, lsl r0
    1184:	0000000c 	andeq	r0, r0, ip
    1188:	000010e8 	andeq	r1, r0, r8, ror #1
    118c:	0800497c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, lr}
    1190:	00000010 	andeq	r0, r0, r0, lsl r0
    1194:	0000000c 	andeq	r0, r0, ip
    1198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    119c:	7c020001 	stcvc	0, cr0, [r2], {1}
    11a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11a4:	0000000c 	andeq	r0, r0, ip
    11a8:	00001194 	muleq	r0, r4, r1
    11ac:	0800498c 	stmdaeq	r0, {r2, r3, r7, r8, fp, lr}
    11b0:	0000003c 	andeq	r0, r0, ip, lsr r0
    11b4:	0000000c 	andeq	r0, r0, ip
    11b8:	00001194 	muleq	r0, r4, r1
    11bc:	080049c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, lr}
    11c0:	00000038 	andeq	r0, r0, r8, lsr r0
    11c4:	0000000c 	andeq	r0, r0, ip
    11c8:	00001194 	muleq	r0, r4, r1
    11cc:	08004a00 	stmdaeq	r0, {r9, fp, lr}
    11d0:	00000014 	andeq	r0, r0, r4, lsl r0
    11d4:	0000000c 	andeq	r0, r0, ip
    11d8:	00001194 	muleq	r0, r4, r1
    11dc:	08004a14 	stmdaeq	r0, {r2, r4, r9, fp, lr}
    11e0:	0000000c 	andeq	r0, r0, ip
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	00001194 	muleq	r0, r4, r1
    11ec:	08004a20 	stmdaeq	r0, {r5, r9, fp, lr}
    11f0:	00000014 	andeq	r0, r0, r4, lsl r0
    11f4:	0000000c 	andeq	r0, r0, ip
    11f8:	00001194 	muleq	r0, r4, r1
    11fc:	08004a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, lr}
    1200:	0000000c 	andeq	r0, r0, ip
    1204:	0000000c 	andeq	r0, r0, ip
    1208:	00001194 	muleq	r0, r4, r1
    120c:	08004a40 	stmdaeq	r0, {r6, r9, fp, lr}
    1210:	00000014 	andeq	r0, r0, r4, lsl r0
    1214:	0000000c 	andeq	r0, r0, ip
    1218:	00001194 	muleq	r0, r4, r1
    121c:	08004a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, lr}
    1220:	00000010 	andeq	r0, r0, r0, lsl r0
    1224:	0000000c 	andeq	r0, r0, ip
    1228:	00001194 	muleq	r0, r4, r1
    122c:	08004a64 	stmdaeq	r0, {r2, r5, r6, r9, fp, lr}
    1230:	00000014 	andeq	r0, r0, r4, lsl r0
    1234:	0000000c 	andeq	r0, r0, ip
    1238:	00001194 	muleq	r0, r4, r1
    123c:	08004a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, lr}
    1240:	00000014 	andeq	r0, r0, r4, lsl r0
    1244:	0000000c 	andeq	r0, r0, ip
    1248:	00001194 	muleq	r0, r4, r1
    124c:	08004a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, lr}
    1250:	00000014 	andeq	r0, r0, r4, lsl r0
    1254:	0000000c 	andeq	r0, r0, ip
    1258:	00001194 	muleq	r0, r4, r1
    125c:	08004aa0 	stmdaeq	r0, {r5, r7, r9, fp, lr}
    1260:	00000018 	andeq	r0, r0, r8, lsl r0
    1264:	0000000c 	andeq	r0, r0, ip
    1268:	00001194 	muleq	r0, r4, r1
    126c:	08004ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, lr}
    1270:	0000000c 	andeq	r0, r0, ip
    1274:	0000000c 	andeq	r0, r0, ip
    1278:	00001194 	muleq	r0, r4, r1
    127c:	08004ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, lr}
    1280:	00000014 	andeq	r0, r0, r4, lsl r0
    1284:	0000000c 	andeq	r0, r0, ip
    1288:	00001194 	muleq	r0, r4, r1
    128c:	08004ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, lr}
    1290:	00000020 	andeq	r0, r0, r0, lsr #32
    1294:	0000000c 	andeq	r0, r0, ip
    1298:	00001194 	muleq	r0, r4, r1
    129c:	08004af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, lr}
    12a0:	0000000c 	andeq	r0, r0, ip
    12a4:	0000000c 	andeq	r0, r0, ip
    12a8:	00001194 	muleq	r0, r4, r1
    12ac:	08004b04 	stmdaeq	r0, {r2, r8, r9, fp, lr}
    12b0:	00000010 	andeq	r0, r0, r0, lsl r0
    12b4:	0000000c 	andeq	r0, r0, ip
    12b8:	00001194 	muleq	r0, r4, r1
    12bc:	08004b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, lr}
    12c0:	0000000c 	andeq	r0, r0, ip
    12c4:	00000014 	andeq	r0, r0, r4, lsl r0
    12c8:	00001194 	muleq	r0, r4, r1
    12cc:	08004b20 	stmdaeq	r0, {r5, r8, r9, fp, lr}
    12d0:	00000084 	andeq	r0, r0, r4, lsl #1
    12d4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    12d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    12dc:	0000000c 	andeq	r0, r0, ip
    12e0:	00001194 	muleq	r0, r4, r1
    12e4:	08004ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, lr}
    12e8:	00000018 	andeq	r0, r0, r8, lsl r0
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	00001194 	muleq	r0, r4, r1
    12f4:	08004bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, lr}
    12f8:	00000018 	andeq	r0, r0, r8, lsl r0
    12fc:	0000000c 	andeq	r0, r0, ip
    1300:	00001194 	muleq	r0, r4, r1
    1304:	08004bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp, lr}
    1308:	00000018 	andeq	r0, r0, r8, lsl r0
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	00001194 	muleq	r0, r4, r1
    1314:	08004bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, lr}
    1318:	00000018 	andeq	r0, r0, r8, lsl r0
    131c:	0000000c 	andeq	r0, r0, ip
    1320:	00001194 	muleq	r0, r4, r1
    1324:	08004c04 	stmdaeq	r0, {r2, sl, fp, lr}
    1328:	00000018 	andeq	r0, r0, r8, lsl r0
    132c:	0000000c 	andeq	r0, r0, ip
    1330:	00001194 	muleq	r0, r4, r1
    1334:	08004c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, lr}
    1338:	0000000c 	andeq	r0, r0, ip
    133c:	0000000c 	andeq	r0, r0, ip
    1340:	00001194 	muleq	r0, r4, r1
    1344:	08004c28 	stmdaeq	r0, {r3, r5, sl, fp, lr}
    1348:	0000000c 	andeq	r0, r0, ip
    134c:	0000000c 	andeq	r0, r0, ip
    1350:	00001194 	muleq	r0, r4, r1
    1354:	08004c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, lr}
    1358:	0000000c 	andeq	r0, r0, ip
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	00001194 	muleq	r0, r4, r1
    1364:	08004c40 	stmdaeq	r0, {r6, sl, fp, lr}
    1368:	00000028 	andeq	r0, r0, r8, lsr #32
    136c:	00000014 	andeq	r0, r0, r4, lsl r0
    1370:	00001194 	muleq	r0, r4, r1
    1374:	08004c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, lr}
    1378:	0000002e 	andeq	r0, r0, lr, lsr #32
    137c:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    1380:	040e5401 	streq	r5, [lr], #-1025	; 0x401
    1384:	0000000c 	andeq	r0, r0, ip
    1388:	00001194 	muleq	r0, r4, r1
    138c:	08004c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, lr}
    1390:	00000012 	andeq	r0, r0, r2, lsl r0
    1394:	0000000c 	andeq	r0, r0, ip
    1398:	00001194 	muleq	r0, r4, r1
    139c:	08004ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, lr}
    13a0:	00000014 	andeq	r0, r0, r4, lsl r0
    13a4:	0000000c 	andeq	r0, r0, ip
    13a8:	00001194 	muleq	r0, r4, r1
    13ac:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    13b0:	0000000c 	andeq	r0, r0, ip
    13b4:	0000000c 	andeq	r0, r0, ip
    13b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13bc:	7c020001 	stcvc	0, cr0, [r2], {1}
    13c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13c4:	0000000c 	andeq	r0, r0, ip
    13c8:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    13cc:	08004cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, lr}
    13d0:	00000018 	andeq	r0, r0, r8, lsl r0
    13d4:	0000000c 	andeq	r0, r0, ip
    13d8:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    13dc:	08004ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, lr}
    13e0:	0000000c 	andeq	r0, r0, ip
    13e4:	0000000c 	andeq	r0, r0, ip
    13e8:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    13ec:	08004cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, lr}
    13f0:	00000028 	andeq	r0, r0, r8, lsr #32
    13f4:	0000000c 	andeq	r0, r0, ip
    13f8:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    13fc:	08004d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, lr}
    1400:	00000018 	andeq	r0, r0, r8, lsl r0
    1404:	0000000c 	andeq	r0, r0, ip
    1408:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    140c:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    1410:	0000000c 	andeq	r0, r0, ip
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    141c:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
    1420:	0000001c 	andeq	r0, r0, ip, lsl r0
    1424:	0000000c 	andeq	r0, r0, ip
    1428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    142c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1430:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1434:	00000018 	andeq	r0, r0, r8, lsl r0
    1438:	00001424 	andeq	r1, r0, r4, lsr #8
    143c:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    1440:	00000032 	andeq	r0, r0, r2, lsr r0
    1444:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1448:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    144c:	00000001 	andeq	r0, r0, r1
    1450:	00000018 	andeq	r0, r0, r8, lsl r0
    1454:	00001424 	andeq	r1, r0, r4, lsr #8
    1458:	08004d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp, lr}
    145c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1460:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1464:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1468:	00000001 	andeq	r0, r0, r1
    146c:	00000024 	andeq	r0, r0, r4, lsr #32
    1470:	00001424 	andeq	r1, r0, r4, lsr #8
    1474:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    1478:	000000c8 	andeq	r0, r0, r8, asr #1
    147c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1480:	76018e02 	strvc	r8, [r1], -r2, lsl #28
    1484:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1488:	620b4200 	andvs	r4, fp, #0, 4
    148c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1490:	000b4200 	andeq	r4, fp, r0, lsl #4
    1494:	0000000c 	andeq	r0, r0, ip
    1498:	00001424 	andeq	r1, r0, r4, lsr #8
    149c:	08004e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, lr}
    14a0:	0000003c 	andeq	r0, r0, ip, lsr r0
    14a4:	00000018 	andeq	r0, r0, r8, lsl r0
    14a8:	00001424 	andeq	r1, r0, r4, lsr #8
    14ac:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
    14b0:	00000074 	andeq	r0, r0, r4, ror r0
    14b4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    14b8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    14bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    14c0:	00000018 	andeq	r0, r0, r8, lsl r0
    14c4:	00001424 	andeq	r1, r0, r4, lsr #8
    14c8:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    14cc:	00000088 	andeq	r0, r0, r8, lsl #1
    14d0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    14d4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    14d8:	00000001 	andeq	r0, r0, r1
    14dc:	00000018 	andeq	r0, r0, r8, lsl r0
    14e0:	00001424 	andeq	r1, r0, r4, lsr #8
    14e4:	08004fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, lr}
    14e8:	00000084 	andeq	r0, r0, r4, lsl #1
    14ec:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    14f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    14f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    14f8:	00000018 	andeq	r0, r0, r8, lsl r0
    14fc:	00001424 	andeq	r1, r0, r4, lsr #8
    1500:	08005044 	stmdaeq	r0, {r2, r6, ip, lr}
    1504:	00000068 	andeq	r0, r0, r8, rrx
    1508:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    150c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1510:	00000001 	andeq	r0, r0, r1
    1514:	0000000c 	andeq	r0, r0, ip
    1518:	00001424 	andeq	r1, r0, r4, lsr #8
    151c:	080050ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, lr}
    1520:	00000022 	andeq	r0, r0, r2, lsr #32
    1524:	0000000c 	andeq	r0, r0, ip
    1528:	00001424 	andeq	r1, r0, r4, lsr #8
    152c:	080050ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, ip, lr}
    1530:	00000012 	andeq	r0, r0, r2, lsl r0
    1534:	0000000c 	andeq	r0, r0, ip
    1538:	00001424 	andeq	r1, r0, r4, lsr #8
    153c:	080050e0 	stmdaeq	r0, {r5, r6, r7, ip, lr}
    1540:	00000014 	andeq	r0, r0, r4, lsl r0
    1544:	0000000c 	andeq	r0, r0, ip
    1548:	00001424 	andeq	r1, r0, r4, lsr #8
    154c:	080050f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip, lr}
    1550:	00000010 	andeq	r0, r0, r0, lsl r0
    1554:	0000000c 	andeq	r0, r0, ip
    1558:	00001424 	andeq	r1, r0, r4, lsr #8
    155c:	08005104 	stmdaeq	r0, {r2, r8, ip, lr}
    1560:	00000012 	andeq	r0, r0, r2, lsl r0
    1564:	0000000c 	andeq	r0, r0, ip
    1568:	00001424 	andeq	r1, r0, r4, lsr #8
    156c:	08005116 	stmdaeq	r0, {r1, r2, r4, r8, ip, lr}
    1570:	00000018 	andeq	r0, r0, r8, lsl r0
    1574:	0000000c 	andeq	r0, r0, ip
    1578:	00001424 	andeq	r1, r0, r4, lsr #8
    157c:	0800512e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip, lr}
    1580:	0000001c 	andeq	r0, r0, ip, lsl r0
    1584:	0000000c 	andeq	r0, r0, ip
    1588:	00001424 	andeq	r1, r0, r4, lsr #8
    158c:	0800514a 	stmdaeq	r0, {r1, r3, r6, r8, ip, lr}
    1590:	00000012 	andeq	r0, r0, r2, lsl r0
    1594:	0000000c 	andeq	r0, r0, ip
    1598:	00001424 	andeq	r1, r0, r4, lsr #8
    159c:	0800515c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, lr}
    15a0:	00000004 	andeq	r0, r0, r4
    15a4:	0000000c 	andeq	r0, r0, ip
    15a8:	00001424 	andeq	r1, r0, r4, lsr #8
    15ac:	08005160 	stmdaeq	r0, {r5, r6, r8, ip, lr}
    15b0:	00000008 	andeq	r0, r0, r8
    15b4:	0000000c 	andeq	r0, r0, ip
    15b8:	00001424 	andeq	r1, r0, r4, lsr #8
    15bc:	08005168 	stmdaeq	r0, {r3, r5, r6, r8, ip, lr}
    15c0:	00000012 	andeq	r0, r0, r2, lsl r0
    15c4:	0000000c 	andeq	r0, r0, ip
    15c8:	00001424 	andeq	r1, r0, r4, lsr #8
    15cc:	0800517a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, lr}
    15d0:	0000000e 	andeq	r0, r0, lr
    15d4:	0000000c 	andeq	r0, r0, ip
    15d8:	00001424 	andeq	r1, r0, r4, lsr #8
    15dc:	08005188 	stmdaeq	r0, {r3, r7, r8, ip, lr}
    15e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    15e4:	00000018 	andeq	r0, r0, r8, lsl r0
    15e8:	00001424 	andeq	r1, r0, r4, lsr #8
    15ec:	080051a2 	stmdaeq	r0, {r1, r5, r7, r8, ip, lr}
    15f0:	00000034 	andeq	r0, r0, r4, lsr r0
    15f4:	83100e41 	tsthi	r0, #1040	; 0x410
    15f8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    15fc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1600:	00000014 	andeq	r0, r0, r4, lsl r0
    1604:	00001424 	andeq	r1, r0, r4, lsr #8
    1608:	080051d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, ip, lr}
    160c:	00000014 	andeq	r0, r0, r4, lsl r0
    1610:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1614:	00018e02 	andeq	r8, r1, r2, lsl #28
    1618:	00000014 	andeq	r0, r0, r4, lsl r0
    161c:	00001424 	andeq	r1, r0, r4, lsr #8
    1620:	080051ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, ip, lr}
    1624:	0000001a 	andeq	r0, r0, sl, lsl r0
    1628:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    162c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1630:	00000014 	andeq	r0, r0, r4, lsl r0
    1634:	00001424 	andeq	r1, r0, r4, lsr #8
    1638:	08005204 	stmdaeq	r0, {r2, r9, ip, lr}
    163c:	00000014 	andeq	r0, r0, r4, lsl r0
    1640:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1644:	00018e02 	andeq	r8, r1, r2, lsl #28
    1648:	0000000c 	andeq	r0, r0, ip
    164c:	00001424 	andeq	r1, r0, r4, lsr #8
    1650:	08005218 	stmdaeq	r0, {r3, r4, r9, ip, lr}
    1654:	00000006 	andeq	r0, r0, r6
    1658:	0000000c 	andeq	r0, r0, ip
    165c:	00001424 	andeq	r1, r0, r4, lsr #8
    1660:	0800521e 	stmdaeq	r0, {r1, r2, r3, r4, r9, ip, lr}
    1664:	00000010 	andeq	r0, r0, r0, lsl r0
    1668:	0000000c 	andeq	r0, r0, ip
    166c:	00001424 	andeq	r1, r0, r4, lsr #8
    1670:	0800522e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip, lr}
    1674:	00000010 	andeq	r0, r0, r0, lsl r0
    1678:	00000018 	andeq	r0, r0, r8, lsl r0
    167c:	00001424 	andeq	r1, r0, r4, lsr #8
    1680:	0800523e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, ip, lr}
    1684:	0000003c 	andeq	r0, r0, ip, lsr r0
    1688:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    168c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1690:	00018e02 	andeq	r8, r1, r2, lsl #28
    1694:	0000000c 	andeq	r0, r0, ip
    1698:	00001424 	andeq	r1, r0, r4, lsr #8
    169c:	0800527a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, lr}
    16a0:	00000010 	andeq	r0, r0, r0, lsl r0
    16a4:	0000000c 	andeq	r0, r0, ip
    16a8:	00001424 	andeq	r1, r0, r4, lsr #8
    16ac:	0800528a 	stmdaeq	r0, {r1, r3, r7, r9, ip, lr}
    16b0:	00000014 	andeq	r0, r0, r4, lsl r0
    16b4:	0000000c 	andeq	r0, r0, ip
    16b8:	00001424 	andeq	r1, r0, r4, lsr #8
    16bc:	0800529e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, ip, lr}
    16c0:	00000010 	andeq	r0, r0, r0, lsl r0
    16c4:	0000000c 	andeq	r0, r0, ip
    16c8:	00001424 	andeq	r1, r0, r4, lsr #8
    16cc:	080052ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, ip, lr}
    16d0:	00000014 	andeq	r0, r0, r4, lsl r0
    16d4:	0000000c 	andeq	r0, r0, ip
    16d8:	00001424 	andeq	r1, r0, r4, lsr #8
    16dc:	080052c2 	stmdaeq	r0, {r1, r6, r7, r9, ip, lr}
    16e0:	00000018 	andeq	r0, r0, r8, lsl r0
    16e4:	0000000c 	andeq	r0, r0, ip
    16e8:	00001424 	andeq	r1, r0, r4, lsr #8
    16ec:	080052da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, ip, lr}
    16f0:	00000018 	andeq	r0, r0, r8, lsl r0
    16f4:	0000000c 	andeq	r0, r0, ip
    16f8:	00001424 	andeq	r1, r0, r4, lsr #8
    16fc:	080052f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, ip, lr}
    1700:	00000018 	andeq	r0, r0, r8, lsl r0
    1704:	0000000c 	andeq	r0, r0, ip
    1708:	00001424 	andeq	r1, r0, r4, lsr #8
    170c:	0800530a 	stmdaeq	r0, {r1, r3, r8, r9, ip, lr}
    1710:	00000018 	andeq	r0, r0, r8, lsl r0
    1714:	0000000c 	andeq	r0, r0, ip
    1718:	00001424 	andeq	r1, r0, r4, lsr #8
    171c:	08005322 	stmdaeq	r0, {r1, r5, r8, r9, ip, lr}
    1720:	00000010 	andeq	r0, r0, r0, lsl r0
    1724:	0000000c 	andeq	r0, r0, ip
    1728:	00001424 	andeq	r1, r0, r4, lsr #8
    172c:	08005332 	stmdaeq	r0, {r1, r4, r5, r8, r9, ip, lr}
    1730:	00000014 	andeq	r0, r0, r4, lsl r0
    1734:	0000000c 	andeq	r0, r0, ip
    1738:	00001424 	andeq	r1, r0, r4, lsr #8
    173c:	08005346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, lr}
    1740:	00000010 	andeq	r0, r0, r0, lsl r0
    1744:	0000000c 	andeq	r0, r0, ip
    1748:	00001424 	andeq	r1, r0, r4, lsr #8
    174c:	08005356 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, ip, lr}
    1750:	00000014 	andeq	r0, r0, r4, lsl r0
    1754:	0000000c 	andeq	r0, r0, ip
    1758:	00001424 	andeq	r1, r0, r4, lsr #8
    175c:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    1760:	00000010 	andeq	r0, r0, r0, lsl r0
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	00001424 	andeq	r1, r0, r4, lsr #8
    176c:	0800537a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, ip, lr}
    1770:	00000014 	andeq	r0, r0, r4, lsl r0
    1774:	0000000c 	andeq	r0, r0, ip
    1778:	00001424 	andeq	r1, r0, r4, lsr #8
    177c:	0800538e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip, lr}
    1780:	00000010 	andeq	r0, r0, r0, lsl r0
    1784:	0000000c 	andeq	r0, r0, ip
    1788:	00001424 	andeq	r1, r0, r4, lsr #8
    178c:	0800539e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, ip, lr}
    1790:	00000014 	andeq	r0, r0, r4, lsl r0
    1794:	0000000c 	andeq	r0, r0, ip
    1798:	00001424 	andeq	r1, r0, r4, lsr #8
    179c:	080053b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, ip, lr}
    17a0:	00000010 	andeq	r0, r0, r0, lsl r0
    17a4:	0000000c 	andeq	r0, r0, ip
    17a8:	00001424 	andeq	r1, r0, r4, lsr #8
    17ac:	080053c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, ip, lr}
    17b0:	00000010 	andeq	r0, r0, r0, lsl r0
    17b4:	0000000c 	andeq	r0, r0, ip
    17b8:	00001424 	andeq	r1, r0, r4, lsr #8
    17bc:	080053d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, lr}
    17c0:	00000010 	andeq	r0, r0, r0, lsl r0
    17c4:	0000000c 	andeq	r0, r0, ip
    17c8:	00001424 	andeq	r1, r0, r4, lsr #8
    17cc:	080053e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, ip, lr}
    17d0:	00000010 	andeq	r0, r0, r0, lsl r0
    17d4:	0000000c 	andeq	r0, r0, ip
    17d8:	00001424 	andeq	r1, r0, r4, lsr #8
    17dc:	080053f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, ip, lr}
    17e0:	00000010 	andeq	r0, r0, r0, lsl r0
    17e4:	0000000c 	andeq	r0, r0, ip
    17e8:	00001424 	andeq	r1, r0, r4, lsr #8
    17ec:	08005402 	stmdaeq	r0, {r1, sl, ip, lr}
    17f0:	00000010 	andeq	r0, r0, r0, lsl r0
    17f4:	0000000c 	andeq	r0, r0, ip
    17f8:	00001424 	andeq	r1, r0, r4, lsr #8
    17fc:	08005412 	stmdaeq	r0, {r1, r4, sl, ip, lr}
    1800:	00000014 	andeq	r0, r0, r4, lsl r0
    1804:	0000000c 	andeq	r0, r0, ip
    1808:	00001424 	andeq	r1, r0, r4, lsr #8
    180c:	08005426 	stmdaeq	r0, {r1, r2, r5, sl, ip, lr}
    1810:	00000014 	andeq	r0, r0, r4, lsl r0
    1814:	0000000c 	andeq	r0, r0, ip
    1818:	00001424 	andeq	r1, r0, r4, lsr #8
    181c:	0800543a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, lr}
    1820:	00000014 	andeq	r0, r0, r4, lsl r0
    1824:	0000000c 	andeq	r0, r0, ip
    1828:	00001424 	andeq	r1, r0, r4, lsr #8
    182c:	0800544e 	stmdaeq	r0, {r1, r2, r3, r6, sl, ip, lr}
    1830:	00000014 	andeq	r0, r0, r4, lsl r0
    1834:	0000000c 	andeq	r0, r0, ip
    1838:	00001424 	andeq	r1, r0, r4, lsr #8
    183c:	08005462 	stmdaeq	r0, {r1, r5, r6, sl, ip, lr}
    1840:	00000014 	andeq	r0, r0, r4, lsl r0
    1844:	00000014 	andeq	r0, r0, r4, lsl r0
    1848:	00001424 	andeq	r1, r0, r4, lsr #8
    184c:	08005476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, ip, lr}
    1850:	0000001c 	andeq	r0, r0, ip, lsl r0
    1854:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1858:	00018e02 	andeq	r8, r1, r2, lsl #28
    185c:	00000014 	andeq	r0, r0, r4, lsl r0
    1860:	00001424 	andeq	r1, r0, r4, lsr #8
    1864:	08005492 	stmdaeq	r0, {r1, r4, r7, sl, ip, lr}
    1868:	0000001c 	andeq	r0, r0, ip, lsl r0
    186c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1870:	00018e02 	andeq	r8, r1, r2, lsl #28
    1874:	00000014 	andeq	r0, r0, r4, lsl r0
    1878:	00001424 	andeq	r1, r0, r4, lsr #8
    187c:	080054ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, ip, lr}
    1880:	00000044 	andeq	r0, r0, r4, asr #32
    1884:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1888:	00018e02 	andeq	r8, r1, r2, lsl #28
    188c:	0000000c 	andeq	r0, r0, ip
    1890:	00001424 	andeq	r1, r0, r4, lsr #8
    1894:	080054f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, ip, lr}
    1898:	00000018 	andeq	r0, r0, r8, lsl r0
    189c:	0000000c 	andeq	r0, r0, ip
    18a0:	00001424 	andeq	r1, r0, r4, lsr #8
    18a4:	0800550a 	stmdaeq	r0, {r1, r3, r8, sl, ip, lr}
    18a8:	00000018 	andeq	r0, r0, r8, lsl r0
    18ac:	0000000c 	andeq	r0, r0, ip
    18b0:	00001424 	andeq	r1, r0, r4, lsr #8
    18b4:	08005522 	stmdaeq	r0, {r1, r5, r8, sl, ip, lr}
    18b8:	00000018 	andeq	r0, r0, r8, lsl r0
    18bc:	0000000c 	andeq	r0, r0, ip
    18c0:	00001424 	andeq	r1, r0, r4, lsr #8
    18c4:	0800553a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, ip, lr}
    18c8:	00000016 	andeq	r0, r0, r6, lsl r0
    18cc:	0000000c 	andeq	r0, r0, ip
    18d0:	00001424 	andeq	r1, r0, r4, lsr #8
    18d4:	08005550 	stmdaeq	r0, {r4, r6, r8, sl, ip, lr}
    18d8:	00000016 	andeq	r0, r0, r6, lsl r0
    18dc:	0000000c 	andeq	r0, r0, ip
    18e0:	00001424 	andeq	r1, r0, r4, lsr #8
    18e4:	08005566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, lr}
    18e8:	00000016 	andeq	r0, r0, r6, lsl r0
    18ec:	0000000c 	andeq	r0, r0, ip
    18f0:	00001424 	andeq	r1, r0, r4, lsr #8
    18f4:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
    18f8:	00000016 	andeq	r0, r0, r6, lsl r0
    18fc:	0000000c 	andeq	r0, r0, ip
    1900:	00001424 	andeq	r1, r0, r4, lsr #8
    1904:	08005592 	stmdaeq	r0, {r1, r4, r7, r8, sl, ip, lr}
    1908:	00000004 	andeq	r0, r0, r4
    190c:	0000000c 	andeq	r0, r0, ip
    1910:	00001424 	andeq	r1, r0, r4, lsr #8
    1914:	08005596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, ip, lr}
    1918:	00000004 	andeq	r0, r0, r4
    191c:	0000000c 	andeq	r0, r0, ip
    1920:	00001424 	andeq	r1, r0, r4, lsr #8
    1924:	0800559a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, ip, lr}
    1928:	00000004 	andeq	r0, r0, r4
    192c:	0000000c 	andeq	r0, r0, ip
    1930:	00001424 	andeq	r1, r0, r4, lsr #8
    1934:	0800559e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, ip, lr}
    1938:	00000004 	andeq	r0, r0, r4
    193c:	0000000c 	andeq	r0, r0, ip
    1940:	00001424 	andeq	r1, r0, r4, lsr #8
    1944:	080055a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, ip, lr}
    1948:	00000004 	andeq	r0, r0, r4
    194c:	0000000c 	andeq	r0, r0, ip
    1950:	00001424 	andeq	r1, r0, r4, lsr #8
    1954:	080055a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, lr}
    1958:	00000006 	andeq	r0, r0, r6
    195c:	0000000c 	andeq	r0, r0, ip
    1960:	00001424 	andeq	r1, r0, r4, lsr #8
    1964:	080055ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, lr}
    1968:	00000016 	andeq	r0, r0, r6, lsl r0
    196c:	0000000c 	andeq	r0, r0, ip
    1970:	00001424 	andeq	r1, r0, r4, lsr #8
    1974:	080055c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, lr}
    1978:	0000001a 	andeq	r0, r0, sl, lsl r0
    197c:	00000030 	andeq	r0, r0, r0, lsr r0
    1980:	00001424 	andeq	r1, r0, r4, lsr #8
    1984:	080055dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, lr}
    1988:	0000006e 	andeq	r0, r0, lr, rrx
    198c:	83180e41 	tsthi	r8, #1040	; 0x410
    1990:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1994:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1998:	62018e02 	andvs	r8, r1, #2, 28
    199c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    19a0:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    19a4:	500b4200 	andpl	r4, fp, r0, lsl #4
    19a8:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    19ac:	000ec3c4 	andeq	ip, lr, r4, asr #7
    19b0:	0000000c 	andeq	r0, r0, ip
    19b4:	00001424 	andeq	r1, r0, r4, lsr #8
    19b8:	0800564a 	stmdaeq	r0, {r1, r3, r6, r9, sl, ip, lr}
    19bc:	00000016 	andeq	r0, r0, r6, lsl r0
    19c0:	0000000c 	andeq	r0, r0, ip
    19c4:	00001424 	andeq	r1, r0, r4, lsr #8
    19c8:	08005660 	stmdaeq	r0, {r5, r6, r9, sl, ip, lr}
    19cc:	0000001a 	andeq	r0, r0, sl, lsl r0
    19d0:	00000048 	andeq	r0, r0, r8, asr #32
    19d4:	00001424 	andeq	r1, r0, r4, lsr #8
    19d8:	0800567a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, ip, lr}
    19dc:	000000b6 	strheq	r0, [r0], -r6
    19e0:	83180e41 	tsthi	r8, #1040	; 0x410
    19e4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    19e8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    19ec:	4d018e02 	stcmi	14, cr8, [r1, #-8]
    19f0:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    19f4:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    19f8:	480b4200 	stmdami	fp, {r9, lr}
    19fc:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1a00:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1a04:	600b4200 	andvs	r4, fp, r0, lsl #4
    1a08:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1a0c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1a10:	5c0b4200 	sfmpl	f4, 4, [fp], {-0}
    1a14:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1a18:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1a1c:	0000000c 	andeq	r0, r0, ip
    1a20:	00001424 	andeq	r1, r0, r4, lsr #8
    1a24:	08005730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, lr}
    1a28:	00000010 	andeq	r0, r0, r0, lsl r0
    1a2c:	0000000c 	andeq	r0, r0, ip
    1a30:	00001424 	andeq	r1, r0, r4, lsr #8
    1a34:	08005740 	stmdaeq	r0, {r6, r8, r9, sl, ip, lr}
    1a38:	00000006 	andeq	r0, r0, r6
    1a3c:	0000000c 	andeq	r0, r0, ip
    1a40:	00001424 	andeq	r1, r0, r4, lsr #8
    1a44:	08005746 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, ip, lr}
    1a48:	00000006 	andeq	r0, r0, r6
    1a4c:	0000000c 	andeq	r0, r0, ip
    1a50:	00001424 	andeq	r1, r0, r4, lsr #8
    1a54:	0800574c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, lr}
    1a58:	00000006 	andeq	r0, r0, r6
    1a5c:	0000000c 	andeq	r0, r0, ip
    1a60:	00001424 	andeq	r1, r0, r4, lsr #8
    1a64:	08005752 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, ip, lr}
    1a68:	00000008 	andeq	r0, r0, r8
    1a6c:	0000000c 	andeq	r0, r0, ip
    1a70:	00001424 	andeq	r1, r0, r4, lsr #8
    1a74:	0800575a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, ip, lr}
    1a78:	00000006 	andeq	r0, r0, r6
    1a7c:	0000000c 	andeq	r0, r0, ip
    1a80:	00001424 	andeq	r1, r0, r4, lsr #8
    1a84:	08005760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, lr}
    1a88:	00000006 	andeq	r0, r0, r6
    1a8c:	0000000c 	andeq	r0, r0, ip
    1a90:	00001424 	andeq	r1, r0, r4, lsr #8
    1a94:	08005766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, ip, lr}
    1a98:	0000000c 	andeq	r0, r0, ip
    1a9c:	0000000c 	andeq	r0, r0, ip
    1aa0:	00001424 	andeq	r1, r0, r4, lsr #8
    1aa4:	08005772 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, ip, lr}
    1aa8:	00000008 	andeq	r0, r0, r8
    1aac:	0000000c 	andeq	r0, r0, ip
    1ab0:	00001424 	andeq	r1, r0, r4, lsr #8
    1ab4:	0800577a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr}
    1ab8:	00000016 	andeq	r0, r0, r6, lsl r0
    1abc:	0000000c 	andeq	r0, r0, ip
    1ac0:	00001424 	andeq	r1, r0, r4, lsr #8
    1ac4:	08005790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip, lr}
    1ac8:	00000008 	andeq	r0, r0, r8
    1acc:	0000000c 	andeq	r0, r0, ip
    1ad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ad4:	7c020001 	stcvc	0, cr0, [r2], {1}
    1ad8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1adc:	00000024 	andeq	r0, r0, r4, lsr #32
    1ae0:	00001acc 	andeq	r1, r0, ip, asr #21
    1ae4:	08005798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, lr}
    1ae8:	00000094 	muleq	r0, r4, r0
    1aec:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1af0:	5b018e02 	blpl	65300 <__Stack_Size+0x64f00>
    1af4:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1af8:	620b4500 	andvs	r4, fp, #0, 10
    1afc:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1b00:	000b4200 	andeq	r4, fp, r0, lsl #4
    1b04:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b08:	00001acc 	andeq	r1, r0, ip, asr #21
    1b0c:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    1b10:	00000088 	andeq	r0, r0, r8, lsl #1
    1b14:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1b18:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1b1c:	280e5d01 	stmdacs	lr, {r0, r8, sl, fp, ip, lr}
    1b20:	000c0e62 	andeq	r0, ip, r2, ror #28
    1b24:	0000000c 	andeq	r0, r0, ip
    1b28:	00001acc 	andeq	r1, r0, ip, asr #21
    1b2c:	080058b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, ip, lr}
    1b30:	00000016 	andeq	r0, r0, r6, lsl r0
    1b34:	00000014 	andeq	r0, r0, r4, lsl r0
    1b38:	00001acc 	andeq	r1, r0, ip, asr #21
    1b3c:	080058ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, ip, lr}
    1b40:	00000020 	andeq	r0, r0, r0, lsr #32
    1b44:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1b48:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b4c:	0000000c 	andeq	r0, r0, ip
    1b50:	00001acc 	andeq	r1, r0, ip, asr #21
    1b54:	080058ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, lr}
    1b58:	0000000c 	andeq	r0, r0, ip
    1b5c:	0000000c 	andeq	r0, r0, ip
    1b60:	00001acc 	andeq	r1, r0, ip, asr #21
    1b64:	080058f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, ip, lr}
    1b68:	00000018 	andeq	r0, r0, r8, lsl r0
    1b6c:	00000014 	andeq	r0, r0, r4, lsl r0
    1b70:	00001acc 	andeq	r1, r0, ip, asr #21
    1b74:	0800590e 	stmdaeq	r0, {r1, r2, r3, r8, fp, ip, lr}
    1b78:	00000032 	andeq	r0, r0, r2, lsr r0
    1b7c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1b80:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b84:	0000000c 	andeq	r0, r0, ip
    1b88:	00001acc 	andeq	r1, r0, ip, asr #21
    1b8c:	08005940 	stmdaeq	r0, {r6, r8, fp, ip, lr}
    1b90:	00000012 	andeq	r0, r0, r2, lsl r0
    1b94:	0000000c 	andeq	r0, r0, ip
    1b98:	00001acc 	andeq	r1, r0, ip, asr #21
    1b9c:	08005952 	stmdaeq	r0, {r1, r4, r6, r8, fp, ip, lr}
    1ba0:	00000016 	andeq	r0, r0, r6, lsl r0
    1ba4:	0000000c 	andeq	r0, r0, ip
    1ba8:	00001acc 	andeq	r1, r0, ip, asr #21
    1bac:	08005968 	stmdaeq	r0, {r3, r5, r6, r8, fp, ip, lr}
    1bb0:	00000016 	andeq	r0, r0, r6, lsl r0
    1bb4:	0000000c 	andeq	r0, r0, ip
    1bb8:	00001acc 	andeq	r1, r0, ip, asr #21
    1bbc:	0800597e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, ip, lr}
    1bc0:	00000018 	andeq	r0, r0, r8, lsl r0
    1bc4:	0000000c 	andeq	r0, r0, ip
    1bc8:	00001acc 	andeq	r1, r0, ip, asr #21
    1bcc:	08005996 	stmdaeq	r0, {r1, r2, r4, r7, r8, fp, ip, lr}
    1bd0:	00000016 	andeq	r0, r0, r6, lsl r0
    1bd4:	0000000c 	andeq	r0, r0, ip
    1bd8:	00001acc 	andeq	r1, r0, ip, asr #21
    1bdc:	080059ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, ip, lr}
    1be0:	00000018 	andeq	r0, r0, r8, lsl r0
    1be4:	0000000c 	andeq	r0, r0, ip
    1be8:	00001acc 	andeq	r1, r0, ip, asr #21
    1bec:	080059c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, ip, lr}
    1bf0:	00000008 	andeq	r0, r0, r8
    1bf4:	0000000c 	andeq	r0, r0, ip
    1bf8:	00001acc 	andeq	r1, r0, ip, asr #21
    1bfc:	080059cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, ip, lr}
    1c00:	00000008 	andeq	r0, r0, r8
    1c04:	0000000c 	andeq	r0, r0, ip
    1c08:	00001acc 	andeq	r1, r0, ip, asr #21
    1c0c:	080059d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, lr}
    1c10:	0000000c 	andeq	r0, r0, ip
    1c14:	0000000c 	andeq	r0, r0, ip
    1c18:	00001acc 	andeq	r1, r0, ip, asr #21
    1c1c:	080059e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, lr}
    1c20:	00000012 	andeq	r0, r0, r2, lsl r0
    1c24:	0000000c 	andeq	r0, r0, ip
    1c28:	00001acc 	andeq	r1, r0, ip, asr #21
    1c2c:	080059f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip, lr}
    1c30:	00000012 	andeq	r0, r0, r2, lsl r0
    1c34:	0000000c 	andeq	r0, r0, ip
    1c38:	00001acc 	andeq	r1, r0, ip, asr #21
    1c3c:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
    1c40:	00000018 	andeq	r0, r0, r8, lsl r0
    1c44:	0000000c 	andeq	r0, r0, ip
    1c48:	00001acc 	andeq	r1, r0, ip, asr #21
    1c4c:	08005a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, ip, lr}
    1c50:	00000018 	andeq	r0, r0, r8, lsl r0
    1c54:	0000000c 	andeq	r0, r0, ip
    1c58:	00001acc 	andeq	r1, r0, ip, asr #21
    1c5c:	08005a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, lr}
    1c60:	00000018 	andeq	r0, r0, r8, lsl r0
    1c64:	0000000c 	andeq	r0, r0, ip
    1c68:	00001acc 	andeq	r1, r0, ip, asr #21
    1c6c:	08005a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, ip, lr}
    1c70:	00000016 	andeq	r0, r0, r6, lsl r0
    1c74:	0000000c 	andeq	r0, r0, ip
    1c78:	00001acc 	andeq	r1, r0, ip, asr #21
    1c7c:	08005a62 	stmdaeq	r0, {r1, r5, r6, r9, fp, ip, lr}
    1c80:	00000018 	andeq	r0, r0, r8, lsl r0
    1c84:	0000000c 	andeq	r0, r0, ip
    1c88:	00001acc 	andeq	r1, r0, ip, asr #21
    1c8c:	08005a7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, fp, ip, lr}
    1c90:	0000000c 	andeq	r0, r0, ip
    1c94:	0000000c 	andeq	r0, r0, ip
    1c98:	00001acc 	andeq	r1, r0, ip, asr #21
    1c9c:	08005a86 	stmdaeq	r0, {r1, r2, r7, r9, fp, ip, lr}
    1ca0:	00000008 	andeq	r0, r0, r8
    1ca4:	00000014 	andeq	r0, r0, r4, lsl r0
    1ca8:	00001acc 	andeq	r1, r0, ip, asr #21
    1cac:	08005a8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, fp, ip, lr}
    1cb0:	0000003e 	andeq	r0, r0, lr, lsr r0
    1cb4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1cb8:	00018e02 	andeq	r8, r1, r2, lsl #28
    1cbc:	0000000c 	andeq	r0, r0, ip
    1cc0:	00001acc 	andeq	r1, r0, ip, asr #21
    1cc4:	08005acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip, lr}
    1cc8:	0000000e 	andeq	r0, r0, lr
    1ccc:	0000000c 	andeq	r0, r0, ip
    1cd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1cd4:	7c020001 	stcvc	0, cr0, [r2], {1}
    1cd8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1cdc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1ce0:	00001ccc 	andeq	r1, r0, ip, asr #25
    1ce4:	08005b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, lr}
    1ce8:	00000050 	andeq	r0, r0, r0, asr r0
    1cec:	000d0941 	andeq	r0, sp, r1, asr #18
    1cf0:	8d080e44 	stchi	14, cr0, [r8, #-272]	; 0xfffffef0
    1cf4:	56018e02 	strpl	r8, [r1], -r2, lsl #28
    1cf8:	000ec0ce 	andeq	ip, lr, lr, asr #1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; c <_Minimum_Stack_Size-0xf4>
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	52524500 	subspl	r4, r2, #0, 10
      14:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
      18:	535f4343 	cmppl	pc, #201326593	; 0xc000001
      1c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
      20:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      24:	00676966 	rsbeq	r6, r7, r6, ror #18
      28:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
      2c:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
      30:	53550065 	cmppl	r5, #101	; 0x65
      34:	5f545241 	svcpl	0x00545241
      38:	00646d43 	rsbeq	r6, r4, r3, asr #26
      3c:	5f434352 	svcpl	0x00434352
      40:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
      44:	47007469 	strmi	r7, [r0, -r9, ror #8]
      48:	5f4f4950 	svcpl	0x004f4950
      4c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
      50:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
      54:	63007469 	movwvs	r7, #1129	; 0x469
      58:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
      5c:	6d754c72 	ldclvs	12, cr4, [r5, #-456]!	; 0xfffffe38
      60:	736f6e69 	cmnvc	pc, #1680	; 0x690
      64:	00797469 	rsbseq	r7, r9, r9, ror #8
      68:	5f4d4954 	svcpl	0x004d4954
      6c:	73657250 	cmnvc	r5, #80, 4
      70:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
      74:	53420072 	movtpl	r0, #8306	; 0x2072
      78:	43005252 	movwmi	r5, #594	; 0x252
      7c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
      80:	66667542 	strbtvs	r7, [r6], -r2, asr #10
      84:	35327265 	ldrcc	r7, [r2, #-613]!	; 0x265
      88:	49540036 	ldmdbmi	r4, {r1, r2, r4, r5}^
      8c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
      90:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
      94:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
      98:	00666544 	rsbeq	r6, r6, r4, asr #10
      9c:	78526267 	ldmdavc	r2, {r0, r1, r2, r5, r6, r9, sp, lr}^
      a0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
      a4:	72577265 	subsvc	r7, r7, #1342177286	; 0x50000006
      a8:	50657469 	rsbpl	r7, r5, r9, ror #8
      ac:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
      b0:	47007265 	strmi	r7, [r0, -r5, ror #4]
      b4:	5f4f4950 	svcpl	0x004f4950
      b8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
      bc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
      c0:	50434f5f 	subpl	r4, r3, pc, asr pc
      c4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
      c8:	00797469 	rsbseq	r7, r9, r9, ror #8
      cc:	4f495047 	svcmi	0x00495047
      d0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
      d4:	75616200 	strbvc	r6, [r1, #-512]!	; 0x200
      d8:	74617264 	strbtvc	r7, [r1], #-612	; 0x264
      dc:	53550065 	cmppl	r5, #101	; 0x65
      e0:	5f545241 	svcpl	0x00545241
      e4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
      e8:	61745354 	cmnvs	r4, r4, asr r3
      ec:	00737574 	rsbseq	r7, r3, r4, ror r5
      f0:	6f666e69 	svcvs	0x00666e69
      f4:	7473624f 	ldrbtvc	r6, [r3], #-591	; 0x24f
      f8:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
      fc:	6f697463 	svcvs	0x00697463
     100:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     104:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     108:	75614200 	strbvc	r4, [r1, #-512]!	; 0x200
     10c:	74617264 	strbtvc	r7, [r1], #-612	; 0x264
     110:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     114:	6972004c 	ldmdbvs	r2!, {r2, r3, r6}^
     118:	4c746867 	ldclmi	8, cr6, [r4], #-412	; 0xfffffe64
     11c:	6e696d75 	mcrvs	13, 3, r6, cr9, cr5, {3}
     120:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
     124:	53550079 	cmppl	r5, #121	; 0x79
     128:	5f545241 	svcpl	0x00545241
     12c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     130:	72724500 	rsbsvc	r4, r2, #0, 10
     134:	7453726f 	ldrbvc	r7, [r3], #-623	; 0x26f
     138:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     13c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     140:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
     144:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     148:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     14c:	54620074 	strbtpl	r0, [r2], #-116	; 0x74
     150:	61446478 	hvcvs	17992	; 0x4648
     154:	52006174 	andpl	r6, r0, #116, 2
     158:	505f4343 	subspl	r4, pc, r3, asr #6
     15c:	6f434c4c 	svcvs	0x00434c4c
     160:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     164:	41535500 	cmpmi	r3, r0, lsl #10
     168:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
     16c:	4c64726f 	sfmmi	f7, 2, [r4], #-444	; 0xfffffe44
     170:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     174:	756f0068 	strbvc	r0, [pc, #-104]!	; 114 <_Minimum_Stack_Size+0x14>
     178:	676e4174 			; <UNDEFINED> instruction: 0x676e4174
     17c:	6200656c 	andvs	r6, r0, #108, 10	; 0x1b000000
     180:	69766f4d 	ldmdbvs	r6!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     184:	5400676e 	strpl	r6, [r0], #-1902	; 0x76e
     188:	4f5f4d49 	svcmi	0x005f4d49
     18c:	6e493143 	dvfvsem	f3, f1, f3
     190:	54007469 	strpl	r7, [r0], #-1129	; 0x469
     194:	4f5f4d49 	svcmi	0x005f4d49
     198:	72503143 	subsvc	r3, r0, #-1073741808	; 0xc0000010
     19c:	616f6c65 	cmnvs	pc, r5, ror #24
     1a0:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
     1a4:	00676966 	rsbeq	r6, r7, r6, ror #18
     1a8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     1ac:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
     1b0:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     1b4:	46007374 			; <UNDEFINED> instruction: 0x46007374
     1b8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     1bc:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0x5f
     1c0:	63746566 	cmnvs	r4, #427819008	; 0x19800000
     1c4:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
     1c8:	43726566 	cmnmi	r2, #427819008	; 0x19800000
     1cc:	5400646d 	strpl	r6, [r0], #-1133	; 0x46d
     1d0:	4f5f4d49 	svcmi	0x005f4d49
     1d4:	6c644943 	stclvs	9, cr4, [r4], #-268	; 0xfffffef4
     1d8:	61745365 	cmnvs	r4, r5, ror #6
     1dc:	53006574 	movwpl	r6, #1396	; 0x574
     1e0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     1e4:	535f6b63 	cmppl	pc, #101376	; 0x18c00
     1e8:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0x465
     1ec:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     1f0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     1f4:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     1f8:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     1fc:	505f4343 	subspl	r4, pc, r3, asr #6
     200:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     204:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     208:	43006769 	movwmi	r6, #1897	; 0x769
     20c:	5f315243 	svcpl	0x00315243
     210:	006c6156 	rsbeq	r6, ip, r6, asr r1
     214:	65657073 	strbvs	r7, [r5, #-115]!	; 0x73
     218:	61640064 	cmnvs	r4, r4, rrx
     21c:	6f536174 	svcvs	0x00536174
     220:	00646e75 	rsbeq	r6, r4, r5, ror lr
     224:	4f495047 	svcmi	0x00495047
     228:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     22c:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
     230:	007a484d 	rsbseq	r4, sl, sp, asr #16
     234:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
     238:	72666e49 	rsbvc	r6, r6, #1168	; 0x490
     23c:	64655261 	strbtvs	r5, [r5], #-609	; 0x261
     240:	50544700 	subspl	r4, r4, r0, lsl #14
     244:	78540052 	ldmdavc	r4, {r1, r4, r6}^
     248:	72745344 	rsbsvc	r5, r4, #68, 6	; 0x10000001
     24c:	00676e69 	rsbeq	r6, r7, r9, ror #28
     250:	5f434352 	svcpl	0x00434352
     254:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     258:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     25c:	74534553 	ldrbvc	r4, [r3], #-1363	; 0x553
     260:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
     264:	49540070 	ldmdbmi	r4, {r4, r5, r6}^
     268:	79545f4d 	ldmdbvc	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     26c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     270:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     274:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
     278:	70614374 	rsbvc	r4, r1, r4, ror r3
     27c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     280:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
     284:	75505f4d 	ldrbvc	r5, [r0, #-3917]	; 0xf4d
     288:	0065736c 	rsbeq	r7, r5, ip, ror #6
     28c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     290:	61425f54 	cmpvs	r2, r4, asr pc
     294:	61526475 	cmpvs	r2, r5, ror r4
     298:	54006574 	strpl	r6, [r0], #-1396	; 0x574
     29c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     2a0:	6b636f6c 	blvs	18dc058 <__Stack_Size+0x18dbc58>
     2a4:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
     2a8:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     2ac:	44785200 	ldrbtmi	r5, [r8], #-512	; 0x200
     2b0:	746e4930 	strbtvc	r4, [lr], #-2352	; 0x930
     2b4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     2b8:	54007470 	strpl	r7, [r0], #-1136	; 0x470
     2bc:	4f5f4d49 	svcmi	0x005f4d49
     2c0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
     2c4:	61745374 	cmnvs	r4, r4, ror r3
     2c8:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
     2cc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     2d0:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
     2d4:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
     2d8:	61746144 	cmnvs	r4, r4, asr #2
     2dc:	54444200 	strbpl	r4, [r4], #-512	; 0x200
     2e0:	44620052 	strbtmi	r0, [r2], #-82	; 0x52
     2e4:	00617461 	rsbeq	r7, r1, r1, ror #8
     2e8:	36317576 			; <UNDEFINED> instruction: 0x36317576
     2ec:	7a756200 	bvc	1d58af4 <__Stack_Size+0x1d586f4>
     2f0:	7469577a 	strbtvc	r5, [r9], #-1914	; 0x77a
     2f4:	6c654468 	cfstrdvs	mvd4, [r5], #-416	; 0xfffffe60
     2f8:	4e007961 	cdpmi	9, 0, cr7, cr0, cr1, {3}
     2fc:	5f434956 	svcpl	0x00434956
     300:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     304:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     308:	00666544 	rsbeq	r6, r6, r4, asr #10
     30c:	6e655362 	cdpvs	3, 6, cr5, cr5, cr2, {3}
     310:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
     314:	49540061 	ldmdbmi	r4, {r0, r5, r6}^
     318:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
     31c:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     320:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
     324:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     328:	00746942 	rsbseq	r6, r4, r2, asr #18
     32c:	31524343 	cmpcc	r2, r3, asr #6
     330:	52434300 	subpl	r4, r3, #0, 6
     334:	43430032 	movtmi	r0, #12338	; 0x3032
     338:	43003352 	movwmi	r3, #850	; 0x352
     33c:	00345243 	eorseq	r5, r4, r3, asr #4
     340:	524d4343 	subpl	r4, sp, #201326593	; 0xc000001
     344:	43430031 	movtmi	r0, #12337	; 0x3031
     348:	0032524d 	eorseq	r5, r2, sp, asr #4
     34c:	4f495047 	svcmi	0x00495047
     350:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     354:	315f6465 	cmpcc	pc, r5, ror #8
     358:	7a484d30 	bvc	1213820 <__Stack_Size+0x1213420>
     35c:	44785400 	ldrbtmi	r5, [r8], #-1024	; 0x400
     360:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
     364:	0043505f 	subeq	r5, r3, pc, asr r0
     368:	74706163 	ldrbtvc	r6, [r0], #-355	; 0x163
     36c:	00657275 	rsbeq	r7, r5, r5, ror r2
     370:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     374:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
     378:	6144646e 	cmpvs	r4, lr, ror #8
     37c:	77006174 	smlsdxvc	r0, r4, r1, r6
     380:	746e6553 	strbtvc	r6, [lr], #-1363	; 0x553
     384:	61746144 	cmnvs	r4, r4, asr #2
     388:	50504100 	subspl	r4, r0, r0, lsl #2
     38c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     390:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
     394:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     398:	4f495047 	svcmi	0x00495047
     39c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     3a0:	73746942 	cmnvc	r4, #1081344	; 0x108000
     3a4:	6c6f5600 	stclvs	6, cr5, [pc], #-0	; 3ac <_Minimum_Stack_Size+0x2ac>
     3a8:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
     3ac:	666e6900 	strbtvs	r6, [lr], -r0, lsl #18
     3b0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     3b4:	72755465 	rsbsvc	r5, r5, #1694498816	; 0x65000000
     3b8:	5047006e 	subpl	r0, r7, lr, rrx
     3bc:	505f4f49 	subspl	r4, pc, r9, asr #30
     3c0:	65526e69 	ldrbvs	r6, [r2, #-3689]	; 0xe69
     3c4:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
     3c8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     3cc:	78640067 	stmdavc	r4!, {r0, r1, r2, r5, r6}^
     3d0:	72775f6c 	rsbsvc	r5, r7, #108, 30	; 0x1b0
     3d4:	5f657469 	svcpl	0x00657469
     3d8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
     3dc:	6f682f00 	svcvs	0x00682f00
     3e0:	702f656d 	eorvc	r6, pc, sp, ror #10
     3e4:	72726569 	rsbsvc	r6, r2, #440401920	; 0x1a400000
     3e8:	6c652d65 	stclvs	13, cr2, [r5], #-404	; 0xfffffe6c
     3ec:	65657369 	strbvs	r7, [r5, #-873]!	; 0x369
     3f0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     3f4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     3f8:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 230 <_Minimum_Stack_Size+0x130>
     3fc:	3330314f 	teqcc	r0, #-1073741805	; 0xc0000013
     400:	356d632f 	strbcc	r6, [sp, #-815]!	; 0x32f
     404:	652f3033 	strvs	r3, [pc, #-51]!	; 3d9 <_Minimum_Stack_Size+0x2d9>
     408:	706d6178 	rsbvc	r6, sp, r8, ror r1
     40c:	2f73656c 	svccs	0x0073656c
     410:	74706143 	ldrbtvc	r6, [r0], #-323	; 0x143
     414:	00727565 	rsbseq	r7, r2, r5, ror #10
     418:	5f525750 	svcpl	0x00525750
     41c:	6b636142 	blvs	18d892c <__Stack_Size+0x18d852c>
     420:	63417075 	movtvs	r7, #4213	; 0x1075
     424:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     428:	00646d43 	rsbeq	r6, r4, r3, asr #26
     42c:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
     430:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 268 <_Minimum_Stack_Size+0x168>
     434:	6174536d 	cmnvs	r4, sp, ror #6
     438:	00737574 	rsbseq	r7, r3, r4, ror r5
     43c:	4f495047 	svcmi	0x00495047
     440:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 448 <__Stack_Size+0x48>
     444:	50495f65 	subpl	r5, r9, r5, ror #30
     448:	69740044 	ldmdbvs	r4!, {r2, r6}^
     44c:	6400656d 	strvs	r6, [r0], #-1389	; 0x56d
     450:	775f6c78 			; <UNDEFINED> instruction: 0x775f6c78
     454:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     458:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
     45c:	50470064 	subpl	r0, r7, r4, rrx
     460:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 344 <_Minimum_Stack_Size+0x244>
     464:	5f65646f 	svcpl	0x0065646f
     468:	00555049 	subseq	r5, r5, r9, asr #32
     46c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     470:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
     474:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     478:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     47c:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
     480:	6c676e41 	stclvs	14, cr6, [r7], #-260	; 0xfffffefc
     484:	78540065 	ldmdavc	r4, {r0, r2, r5, r6}^
     488:	74794244 	ldrbtvc	r4, [r9], #-580	; 0x244
     48c:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     490:	5047004c 	subpl	r0, r7, ip, asr #32
     494:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 378 <_Minimum_Stack_Size+0x278>
     498:	5f65646f 	svcpl	0x0065646f
     49c:	5f74754f 	svcpl	0x0074754f
     4a0:	5400444f 	strpl	r4, [r0], #-1103	; 0x44f
     4a4:	6f574478 	svcvs	0x00574478
     4a8:	36316472 			; <UNDEFINED> instruction: 0x36316472
     4ac:	31776700 	cmncc	r7, r0, lsl #14
     4b0:	6f43736d 	svcvs	0x0043736d
     4b4:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
     4b8:	75760072 	ldrbvc	r0, [r6, #-114]!	; 0x72
     4bc:	52003233 	andpl	r3, r0, #805306371	; 0x30000003
     4c0:	415f4343 	cmpmi	pc, r3, asr #6
     4c4:	50324250 	eorspl	r4, r2, r0, asr r2
     4c8:	70697265 	rsbvc	r7, r9, r5, ror #4
     4cc:	6f6c4368 	svcvs	0x006c4368
     4d0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     4d4:	564e0064 	strbpl	r0, [lr], -r4, rrx
     4d8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     4dc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     4e0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     4e4:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     4e8:	45494400 	strbmi	r4, [r9, #-1024]	; 0x400
     4ec:	656c0052 	strbvs	r0, [ip, #-82]!	; 0x52
     4f0:	754c7466 	strbvc	r7, [ip, #-1126]	; 0x466
     4f4:	6f6e696d 	svcvs	0x006e696d
     4f8:	79746973 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     4fc:	54776700 	ldrbtpl	r6, [r7], #-1792	; 0x700
     500:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
     504:	6c654467 	cfstrdvs	mvd4, [r5], #-412	; 0xfffffe64
     508:	55007961 	strpl	r7, [r0, #-2401]	; 0x961
     50c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     510:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     514:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     518:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     51c:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     520:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     524:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     528:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     52c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     530:	7065525f 	rsbvc	r5, r5, pc, asr r2
     534:	74697465 	strbtvc	r7, [r9], #-1125	; 0x465
     538:	436e6f69 	cmnmi	lr, #420	; 0x1a4
     53c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     540:	73007265 	movwvc	r7, #613	; 0x265
     544:	6f736e65 	svcvs	0x00736e65
     548:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     54c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
     550:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 420 <__Stack_Size+0x20>
     554:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
     558:	446d0079 	strbtmi	r0, [sp], #-121	; 0x79
     55c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     560:	41535500 	cmpmi	r3, r0, lsl #10
     564:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     568:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     56c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     570:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     574:	67696c00 	strbvs	r6, [r9, -r0, lsl #24]!
     578:	664f7468 	strbvs	r7, [pc], -r8, ror #8
     57c:	43430066 	movtmi	r0, #12390	; 0x3066
     580:	50005245 	andpl	r5, r0, r5, asr #4
     584:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
     588:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     58c:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
     590:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
     594:	0043505f 	subeq	r5, r3, pc, asr r0
     598:	43435553 	movtmi	r5, #13651	; 0x3553
     59c:	00535345 	subseq	r5, r3, r5, asr #6
     5a0:	4349564e 	movtmi	r5, #38478	; 0x964e
     5a4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     5a8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     5ac:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     5b0:	44006572 	strmi	r6, [r0], #-1394	; 0x572
     5b4:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     5b8:	5200454c 	andpl	r4, r0, #76, 10	; 0x13000000
     5bc:	415f4343 	cmpmi	pc, r3, asr #6
     5c0:	50314250 	eorspl	r4, r1, r0, asr r2
     5c4:	70697265 	rsbvc	r7, r9, r5, ror #4
     5c8:	6f6c4368 	svcvs	0x006c4368
     5cc:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     5d0:	68430064 	stmdavs	r3, {r2, r5, r6}^
     5d4:	4e6b6365 	cdpmi	3, 6, cr6, cr11, cr5, {3}
     5d8:	72417765 	subvc	r7, r1, #26476544	; 0x1940000
     5dc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     5e0:	64726f00 	ldrbtvs	r6, [r2], #-3840	; 0xf00
     5e4:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
     5e8:	5f434956 	svcpl	0x00434956
     5ec:	56746553 			; <UNDEFINED> instruction: 0x56746553
     5f0:	6f746365 	svcvs	0x00746365
     5f4:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
     5f8:	5400656c 	strpl	r6, [r0], #-1388	; 0x56c
     5fc:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     600:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     604:	6f4d7265 	svcvs	0x004d7265
     608:	55006564 	strpl	r6, [r0, #-1380]	; 0x564
     60c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     610:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 618 <__Stack_Size+0x218>
     614:	53550065 	cmppl	r5, #101	; 0x65
     618:	31545241 	cmpcc	r4, r1, asr #4
     61c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     620:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     624:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     628:	77006e6f 	strvc	r6, [r0, -pc, ror #28]
     62c:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0x968
     630:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
     634:	4e490065 	cdpmi	0, 4, cr0, cr9, cr5, {3}
     638:	00584544 	subseq	r4, r8, r4, asr #10
     63c:	63656863 	cmnvs	r5, #6488064	; 0x630000
     640:	73624f6b 	cmnvc	r2, #428	; 0x1ac
     644:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
     648:	4d530065 	ldclmi	0, cr0, [r3, #-404]	; 0xfffffe6c
     64c:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     650:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     654:	6f434553 	svcvs	0x00434553
     658:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     65c:	41535500 	cmpmi	r3, r0, lsl #10
     660:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     664:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     668:	46657261 	strbtmi	r7, [r5], -r1, ror #4
     66c:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
     670:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     674:	61006c6f 	tstvs	r0, pc, ror #24
     678:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     67c:	726f6e5f 	rsbvc	r6, pc, #1520	; 0x5f0
     680:	6954006d 	ldmdbvs	r4, {r0, r2, r3, r5, r6}^
     684:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
     688:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     68c:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     690:	736d315f 	cmnvc	sp, #-1073741801	; 0xc0000017
     694:	69726200 	ldmdbvs	r2!, {r9, sp, lr}^
     698:	6e746867 	cdpvs	8, 7, cr6, cr4, cr7, {3}
     69c:	00737365 	rsbseq	r7, r3, r5, ror #6
     6a0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     6a4:	5f6b6369 	svcpl	0x006b6369
     6a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6ac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     6b0:	6f697461 	svcvs	0x00697461
     6b4:	4f50006e 	svcmi	0x0050006e
     6b8:	74005452 	strvc	r5, [r0], #-1106	; 0x452
     6bc:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
     6c0:	007a7a75 	rsbseq	r7, sl, r5, ror sl
     6c4:	52706267 	rsbspl	r6, r0, #1879048198	; 0x70000006
     6c8:	746e4978 	strbtvc	r4, [lr], #-2424	; 0x978
     6cc:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     6d0:	75427470 	strbvc	r7, [r2, #-1136]	; 0x470
     6d4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     6d8:	43435200 	movtmi	r5, #12800	; 0x3200
     6dc:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     6e0:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     6e4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     6e8:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
     6ec:	4f5f4d49 	svcmi	0x005f4d49
     6f0:	64494e43 	strbvs	r4, [r9], #-3651	; 0xe43
     6f4:	7453656c 	ldrbvc	r6, [r3], #-1388	; 0x56c
     6f8:	00657461 	rsbeq	r7, r5, r1, ror #8
     6fc:	5f4d4954 	svcpl	0x004d4954
     700:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     704:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
     708:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     70c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     710:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     714:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     718:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     71c:	00657275 	rsbeq	r7, r5, r5, ror r2
     720:	65725077 	ldrbvs	r5, [r2, #-119]!	; 0x77
     724:	746e6573 	strbtvc	r6, [lr], #-1395	; 0x573
     728:	00736f50 	rsbseq	r6, r3, r0, asr pc
     72c:	6f666e69 	svcvs	0x00666e69
     730:	43435200 	movtmi	r5, #12800	; 0x3200
     734:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
     738:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     73c:	00676966 	rsbeq	r6, r7, r6, ror #18
     740:	5f6c7864 	svcpl	0x006c7864
     744:	5f746567 	svcpl	0x00746567
     748:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0x572
     74c:	6200746c 	andvs	r7, r0, #108, 8	; 0x6c000000
     750:	706d6554 	rsbvc	r6, sp, r4, asr r5
     754:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     758:	52495f43 	subpl	r5, r9, #268	; 0x10c
     75c:	61684351 	cmnvs	r8, r1, asr r3
     760:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     764:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     768:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
     76c:	00646f69 	rsbeq	r6, r4, r9, ror #30
     770:	5f434352 	svcpl	0x00434352
     774:	4b4c4350 	blmi	13114bc <__Stack_Size+0x13110bc>
     778:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     77c:	00676966 	rsbeq	r6, r7, r6, ror #18
     780:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     784:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
     788:	616c4674 	smcvs	50276	; 0xc464
     78c:	61745367 	cmnvs	r4, r7, ror #6
     790:	00737574 	rsbseq	r7, r3, r4, ror r5
     794:	41746573 	cmnmi	r4, r3, ror r5
     798:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     79c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     7a0:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     7a4:	47007469 	strmi	r7, [r0, -r9, ror #8]
     7a8:	5f4f4950 	svcpl	0x004f4950
     7ac:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     7b0:	5f46415f 	svcpl	0x0046415f
     7b4:	5400444f 	strpl	r4, [r0], #-1103	; 0x44f
     7b8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     7bc:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     7c0:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     7c4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     7c8:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
     7cc:	5f4f4950 	svcpl	0x004f4950
     7d0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     7d4:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     7d8:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     7dc:	5f485341 	svcpl	0x00485341
     7e0:	4c746553 	cfldr64mi	mvdx6, [r4], #-332	; 0xfffffeb4
     7e4:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
     7e8:	54007963 	strpl	r7, [r0], #-2403	; 0x963
     7ec:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
     7f0:	36316574 			; <UNDEFINED> instruction: 0x36316574
     7f4:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
     7f8:	34204320 	strtcc	r4, [r0], #-800	; 0x320
     7fc:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
     800:	31303220 	teqcc	r0, r0, lsr #4
     804:	32353035 	eorscc	r3, r5, #53	; 0x35
     808:	72282039 	eorvc	r2, r8, #57	; 0x39
     80c:	61656c65 	cmnvs	r5, r5, ror #24
     810:	20296573 	eorcs	r6, r9, r3, ror r5
     814:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     818:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     81c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     820:	5f342d64 	svcpl	0x00342d64
     824:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
     828:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     82c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     830:	6f697369 	svcvs	0x00697369
     834:	3232206e 	eorscc	r2, r2, #110	; 0x6e
     838:	37373937 			; <UNDEFINED> instruction: 0x37373937
     83c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     840:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     844:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     848:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     84c:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
     850:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     854:	672d2062 	strvs	r2, [sp, -r2, rrx]!
     858:	734f2d20 	movtvc	r2, #64800	; 0xfd20
     85c:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     860:	6f632d6f 	svcvs	0x00632d6f
     864:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
     868:	73795300 	cmnvc	r9, #0, 6
     86c:	6b636954 	blvs	18dadc4 <__Stack_Size+0x18da9c4>
     870:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     874:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     878:	65730067 	ldrbvs	r0, [r3, #-103]!	; 0x67
     87c:	65705374 	ldrbvs	r5, [r0, #-884]!	; 0x374
     880:	6c006465 	cfstrsvs	mvf6, [r0], {101}	; 0x65
     884:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
     888:	61006e4f 	tstvs	r0, pc, asr #28
     88c:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     890:	43435200 	movtmi	r5, #12800	; 0x3200
     894:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     898:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     89c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     8a0:	47007375 	smlsdxmi	r0, r5, r3, r7
     8a4:	534f4950 	movtpl	r4, #63824	; 0xf950
     8a8:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     8ac:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     8b0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     8b4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     8b8:	4d434f5f 	stclmi	15, cr4, [r3, #-380]	; 0xfffffe84
     8bc:	0065646f 	rsbeq	r6, r5, pc, ror #8
     8c0:	4f495047 	svcmi	0x00495047
     8c4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 8cc <__Stack_Size+0x4cc>
     8c8:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     8cc:	4552004e 	ldrbmi	r0, [r2, #-78]	; 0x4e
     8d0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8d4:	00304445 	eorseq	r4, r0, r5, asr #8
     8d8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     8dc:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     8e0:	45520031 	ldrbmi	r0, [r2, #-49]	; 0x31
     8e4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8e8:	00324445 	eorseq	r4, r2, r5, asr #8
     8ec:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     8f0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     8f4:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     8f8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8fc:	00344445 	eorseq	r4, r4, r5, asr #8
     900:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     904:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     908:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     90c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     910:	00364445 	eorseq	r4, r6, r5, asr #8
     914:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     918:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     91c:	45520074 	ldrbmi	r0, [r2, #-116]	; 0x74
     920:	56524553 			; <UNDEFINED> instruction: 0x56524553
     924:	00384445 	eorseq	r4, r8, r5, asr #8
     928:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     92c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     930:	69720039 	ldmdbvs	r2!, {r0, r3, r4, r5}^
     934:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
     938:	6172666e 	cmnvs	r2, lr, ror #12
     93c:	00646552 	rsbeq	r6, r4, r2, asr r5
     940:	4f495047 	svcmi	0x00495047
     944:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 94c <__Stack_Size+0x54c>
     948:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     94c:	0050505f 	subseq	r5, r0, pc, asr r0
     950:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     954:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     958:	414d4400 	cmpmi	sp, r0, lsl #8
     95c:	50470052 	subpl	r0, r7, r2, asr r0
     960:	535f4f49 	cmppl	pc, #292	; 0x124
     964:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     968:	65684300 	strbvs	r4, [r8, #-768]!	; 0x300
     96c:	69546b63 	ldmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     970:	754f656d 	strbvc	r6, [pc, #-1389]	; 40b <__Stack_Size+0xb>
     974:	78520074 	ldmdavc	r2, {r2, r4, r5, r6}^
     978:	74794244 	ldrbtvc	r4, [r9], #-580	; 0x244
     97c:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     980:	6944004c 	stmdbvs	r4, {r2, r3, r6}^
     984:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     988:	41535565 	cmpmi	r3, r5, ror #10
     98c:	00315452 	eorseq	r5, r1, r2, asr r4
     990:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     994:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
     998:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     99c:	74006769 	strvc	r6, [r0], #-1897	; 0x769
     9a0:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
     9a4:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xf68
     9a8:	72666e49 	rsbvc	r6, r6, #1168	; 0x490
     9ac:	64657261 	strbtvs	r7, [r5], #-609	; 0x261
     9b0:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
     9b4:	754c6b63 	strbvc	r6, [ip, #-2915]	; 0xb63
     9b8:	6f6e696d 	svcvs	0x006e696d
     9bc:	79746973 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     9c0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     9c4:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     9c8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     9cc:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
     9d0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     9d4:	6f435f6b 	svcvs	0x00435f6b
     9d8:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
     9dc:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
     9e0:	61745300 	cmnvs	r4, r0, lsl #6
     9e4:	69447472 	stmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
     9e8:	756f6373 	strbvc	r6, [pc, #-883]!	; 67d <__Stack_Size+0x27d>
     9ec:	6f00746e 	svcvs	0x0000746e
     9f0:	70537475 	subsvc	r7, r3, r5, ror r4
     9f4:	00646565 	rsbeq	r6, r4, r5, ror #10
     9f8:	4f495047 	svcmi	0x00495047
     9fc:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a00:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     a04:	6e656300 	cdpvs	3, 6, cr6, cr5, cr0, {0}
     a08:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     a0c:	6172666e 	cmnvs	r2, lr, ror #12
     a10:	00646552 	rsbeq	r6, r4, r2, asr r5
     a14:	4f495047 	svcmi	0x00495047
     a18:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     a1c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a20:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     a24:	746f6e00 	strbtvc	r6, [pc], #-3584	; a2c <__Stack_Size+0x62c>
     a28:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     a2c:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffffae7 <SCS_BASE+0x1fff1ae7>
     a30:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     a34:	6174534e 	cmnvs	r4, lr, asr #6
     a38:	52006574 	andpl	r6, r0, #116, 10	; 0x1d000000
     a3c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     a40:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     a44:	4b4c4353 	blmi	1311798 <__Stack_Size+0x1311398>
     a48:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     a4c:	45006563 	strmi	r6, [r0, #-1379]	; 0x563
     a50:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     a54:	49540045 	ldmdbmi	r4, {r0, r2, r6}^
     a58:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a5c:	6142656d 	cmpvs	r2, sp, ror #10
     a60:	74536573 	ldrbvc	r6, [r3], #-1395	; 0x573
     a64:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     a68:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     a6c:	7a697300 	bvc	1a5d674 <__Stack_Size+0x1a5d274>
     a70:	70797465 	rsbsvc	r7, r9, r5, ror #8
     a74:	6f6c0065 	svcvs	0x006c0065
     a78:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     a7c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     a80:	2064656e 	rsbcs	r6, r4, lr, ror #10
     a84:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a88:	5f4d4954 	svcpl	0x004d4954
     a8c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     a90:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
     a94:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     a98:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     a9c:	50470065 	subpl	r0, r7, r5, rrx
     aa0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     aa4:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     aa8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     aac:	75006665 	strvc	r6, [r0, #-1637]	; 0x665
     ab0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     ab4:	2064656e 	rsbcs	r6, r4, lr, ror #10
     ab8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     abc:	6d546200 	lfmvs	f6, 2, [r4, #-0]
     ac0:	49540070 	ldmdbmi	r4, {r4, r5, r6}^
     ac4:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xf4d
     ac8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     acc:	726f6e00 	rsbvc	r6, pc, #0, 28
     ad0:	546c616d 	strbtpl	r6, [ip], #-365	; 0x16d
     ad4:	006e7275 	rsbeq	r7, lr, r5, ror r2
     ad8:	4f495047 	svcmi	0x00495047
     adc:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     ae0:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 683 <__Stack_Size+0x283>
     ae4:	7a484d30 	bvc	1213fac <__Stack_Size+0x1213bac>
     ae8:	41535500 	cmpmi	r3, r0, lsl #10
     aec:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     af0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     af4:	61727567 	cmnvs	r2, r7, ror #10
     af8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     afc:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     b00:	6165725f 	cmnvs	r5, pc, asr r2
     b04:	79625f64 	stmdbvc	r2!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     b08:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
     b0c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     b10:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     b14:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b18:	4349564e 	movtmi	r5, #38478	; 0x964e
     b1c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     b20:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     b24:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     b28:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     b2c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b30:	31444556 	cmpcc	r4, r6, asr r5
     b34:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     b38:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b3c:	31314445 	teqcc	r1, r5, asr #8
     b40:	53455200 	movtpl	r5, #20992	; 0x5200
     b44:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     b48:	00323144 	eorseq	r3, r2, r4, asr #2
     b4c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     b50:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     b54:	52003331 	andpl	r3, r0, #-1006632960	; 0xc4000000
     b58:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b5c:	31444556 	cmpcc	r4, r6, asr r5
     b60:	45520034 	ldrbmi	r0, [r2, #-52]	; 0x34
     b64:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b68:	35314445 	ldrcc	r4, [r1, #-1093]!	; 0x445
     b6c:	53455200 	movtpl	r5, #20992	; 0x5200
     b70:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     b74:	00363144 	eorseq	r3, r6, r4, asr #2
     b78:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     b7c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     b80:	52003731 	andpl	r3, r0, #12845056	; 0xc40000
     b84:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b88:	31444556 	cmpcc	r4, r6, asr r5
     b8c:	45520038 	ldrbmi	r0, [r2, #-56]	; 0x38
     b90:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b94:	39314445 	ldmdbcc	r1!, {r0, r2, r6, sl, lr}
     b98:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b9c:	6f435f4f 	svcvs	0x00435f4f
     ba0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ba4:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     ba8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     bac:	5f6c7864 	svcpl	0x006c7864
     bb0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     bb4:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
     bb8:	53550064 	cmppl	r5, #100	; 0x64
     bbc:	5f545241 	svcpl	0x00545241
     bc0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     bc4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     bc8:	00666544 	rsbeq	r6, r6, r4, asr #10
     bcc:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     bd0:	564e0065 	strbpl	r0, [lr], -r5, rrx
     bd4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     bd8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     bdc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     be0:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     be4:	6f697250 	svcvs	0x00697250
     be8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     bec:	41535500 	cmpmi	r3, r0, lsl #10
     bf0:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
     bf4:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
     bf8:	5f5f0079 	svcpl	0x005f0079
     bfc:	5f525349 	svcpl	0x00525349
     c00:	414c4544 	cmpmi	ip, r4, asr #10
     c04:	43520059 	cmpmi	r2, #89	; 0x59
     c08:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     c0c:	646d434c 	strbtvs	r4, [sp], #-844	; 0x34c
     c10:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     c14:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
     c18:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
     c1c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     c20:	70795474 	rsbsvc	r5, r9, r4, ror r4
     c24:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     c28:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     c2c:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     c30:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c34:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     c38:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
     c3c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c40:	62670067 	rsbvs	r0, r7, #103	; 0x67
     c44:	75427852 	strbvc	r7, [r2, #-2130]	; 0x852
     c48:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     c4c:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     c50:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     c54:	00726574 	rsbseq	r6, r2, r4, ror r5
     c58:	5f4d4954 	svcpl	0x004d4954
     c5c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     c60:	61745354 	cmnvs	r4, r4, asr r3
     c64:	00737574 	rsbseq	r7, r3, r4, ror r5
     c68:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     c6c:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     c70:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     c74:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     c78:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
     c7c:	4265746f 	rsbmi	r7, r5, #1862270976	; 0x6f000000
     c80:	007a7a75 	rsbseq	r7, sl, r5, ror sl
     c84:	5f4d4954 	svcpl	0x004d4954
     c88:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
     c8c:	61706d6f 	cmnvs	r0, pc, ror #26
     c90:	00316572 	eorseq	r6, r1, r2, ror r5
     c94:	6e69616d 	powvsez	f6, f1, #5.0
     c98:	616f4700 	cmnvs	pc, r0, lsl #14
     c9c:	736f506c 	cmnvc	pc, #108	; 0x6c
     ca0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     ca4:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
     ca8:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
     cac:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     cb0:	564e0064 	strbpl	r0, [lr], -r4, rrx
     cb4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     cb8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     cbc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     cc0:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0x6c
     cc4:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     cc8:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     ccc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cd0:	00797469 	rsbseq	r7, r9, r9, ror #8
     cd4:	5f6c7864 	svcpl	0x006c7864
     cd8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     cdc:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     ce0:	4700657a 	smlsdxmi	r0, sl, r5, r6
     ce4:	5f4f4950 	svcpl	0x004f4950
     ce8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     cec:	5f4e495f 	svcpl	0x004e495f
     cf0:	414f4c46 	cmpmi	pc, r6, asr #24
     cf4:	474e4954 	smlsldmi	r4, lr, r4, r9
     cf8:	53455200 	movtpl	r5, #20992	; 0x5200
     cfc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     d00:	54003744 	strpl	r3, [r0], #-1860	; 0x744
     d04:	505f4d49 	subspl	r4, pc, r9, asr #26
     d08:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     d0c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     d10:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d14:	6e006769 	cdpvs	7, 0, cr6, cr0, cr9, {3}
     d18:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     d1c:	69725000 	ldmdbvs	r2!, {ip, lr}^
     d20:	7245746e 	subvc	r7, r5, #1845493760	; 0x6e000000
     d24:	43726f72 	cmnmi	r2, #456	; 0x1c8
     d28:	0065646f 	rsbeq	r6, r5, pc, ror #8
     d2c:	53455348 	movtpl	r5, #21320	; 0x5348
     d30:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     d34:	74537055 	ldrbvc	r7, [r3], #-85	; 0x55
     d38:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     d3c:	4b434c00 	blmi	10d3d44 <__Stack_Size+0x10d3944>
     d40:	78640052 	stmdavc	r4!, {r1, r4, r6}^
     d44:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
     d48:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d4c:	6b636170 	blvs	18d9314 <__Stack_Size+0x18d8f14>
     d50:	655f7465 	ldrbvs	r7, [pc, #-1125]	; 8f3 <__Stack_Size+0x4f3>
     d54:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     d58:	65696600 	strbvs	r6, [r9, #-1536]!	; 0x600
     d5c:	4200646c 	andmi	r6, r0, #108, 8	; 0x6c000000
     d60:	61467375 	hvcvs	26421	; 0x6735
     d64:	45746c75 	ldrbmi	r6, [r4, #-3189]!	; 0xc75
     d68:	70656378 	rsbvc	r6, r5, r8, ror r3
     d6c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     d70:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     d74:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     d78:	61485152 	cmpvs	r8, r2, asr r1
     d7c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     d80:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
     d84:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     d88:	6e6e6168 	powvsez	f6, f6, #0.0
     d8c:	5f326c65 	svcpl	0x00326c65
     d90:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d94:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     d98:	54007265 	strpl	r7, [r0], #-613	; 0x265
     d9c:	5f314d49 	svcpl	0x00314d49
     da0:	5f4b5242 	svcpl	0x004b5242
     da4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     da8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     dac:	45007265 	strmi	r7, [r0, #-613]	; 0x265
     db0:	30495458 	subcc	r5, r9, r8, asr r4
     db4:	5152495f 	cmppl	r2, pc, asr r9
     db8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     dbc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     dc0:	5f445650 	svcpl	0x00445650
     dc4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     dc8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     dcc:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     dd0:	46647261 	strbtmi	r7, [r4], -r1, ror #4
     dd4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     dd8:	65637845 	strbvs	r7, [r3, #-2117]!	; 0x845
     ddc:	6f697470 	svcvs	0x00697470
     de0:	4441006e 	strbmi	r0, [r1], #-110	; 0x6e
     de4:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
     de8:	5152495f 	cmppl	r2, pc, asr r9
     dec:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     df0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     df4:	504d4154 	subpl	r4, sp, r4, asr r1
     df8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     dfc:	61485152 	cmpvs	r8, r2, asr r1
     e00:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e04:	43520072 	cmpmi	r2, #114	; 0x72
     e08:	52495f43 	subpl	r5, r9, #268	; 0x10c
     e0c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e10:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e14:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e18:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     e1c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e20:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e24:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     e28:	3158525f 	cmpcc	r8, pc, asr r2
     e2c:	5152495f 	cmppl	r2, pc, asr r9
     e30:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     e34:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e38:	75626544 	strbvc	r6, [r2, #-1348]!	; 0x544
     e3c:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     e40:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     e44:	414d4400 	cmpmi	sp, r0, lsl #8
     e48:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     e4c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     e50:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     e54:	61485152 	cmpvs	r8, r2, asr r1
     e58:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e5c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     e60:	555f314d 	ldrbpl	r3, [pc, #-333]	; d1b <__Stack_Size+0x91b>
     e64:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     e68:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e6c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e70:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e74:	50555f38 	subspl	r5, r5, r8, lsr pc
     e78:	5152495f 	cmppl	r2, pc, asr r9
     e7c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     e80:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e84:	314d4954 	cmpcc	sp, r4, asr r9
     e88:	5f43435f 	svcpl	0x0043435f
     e8c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     e90:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     e94:	54007265 	strpl	r7, [r0], #-613	; 0x265
     e98:	5f384d49 	svcpl	0x00384d49
     e9c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     ea0:	61485152 	cmpvs	r8, r2, asr r1
     ea4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     ea8:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     eac:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     eb0:	61485152 	cmpvs	r8, r2, asr r1
     eb4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     eb8:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     ebc:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0x954
     ec0:	5f30315f 	svcpl	0x0030315f
     ec4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ec8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ecc:	44007265 	strmi	r7, [r0], #-613	; 0x265
     ed0:	5f31414d 	svcpl	0x0031414d
     ed4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     ed8:	316c656e 	cmncc	ip, lr, ror #10
     edc:	5152495f 	cmppl	r2, pc, asr r9
     ee0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     ee4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ee8:	48435653 	stmdami	r3, {r0, r1, r4, r6, r9, sl, ip, lr}^
     eec:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ef0:	55007265 	strpl	r7, [r0, #-613]	; 0x265
     ef4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     ef8:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     efc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f00:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f04:	43545200 	cmpmi	r4, #0, 4
     f08:	5152495f 	cmppl	r2, pc, asr r9
     f0c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     f10:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f14:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
     f18:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     f1c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f20:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f24:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     f28:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     f2c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f30:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f34:	414d4400 	cmpmi	sp, r0, lsl #8
     f38:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     f3c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     f40:	355f346c 	ldrbcc	r3, [pc, #-1132]	; adc <__Stack_Size+0x6dc>
     f44:	5152495f 	cmppl	r2, pc, asr r9
     f48:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     f4c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f50:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
     f54:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     f58:	63784565 	cmnvs	r8, #423624704	; 0x19400000
     f5c:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     f60:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
     f64:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
     f68:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
     f6c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     f70:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     f74:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     f78:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f7c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f80:	414d4400 	cmpmi	sp, r0, lsl #8
     f84:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     f88:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     f8c:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     f90:	61485152 	cmpvs	r8, r2, asr r1
     f94:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     f98:	53550072 	cmppl	r5, #114	; 0x72
     f9c:	6b615742 	blvs	1856cac <__Stack_Size+0x18568ac>
     fa0:	5f705565 	svcpl	0x00705565
     fa4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     fa8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fac:	53007265 	movwpl	r7, #613	; 0x265
     fb0:	5f4f4944 	svcpl	0x004f4944
     fb4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     fb8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fbc:	46007265 	strmi	r7, [r0], -r5, ror #4
     fc0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     fc4:	5152495f 	cmppl	r2, pc, asr r9
     fc8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     fcc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     fd0:	67617355 			; <UNDEFINED> instruction: 0x67617355
     fd4:	75614665 	strbvc	r4, [r1, #-1637]!	; 0x665
     fd8:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     fdc:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
     fe0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     fe4:	31433249 	cmpcc	r3, r9, asr #4
     fe8:	5f56455f 	svcpl	0x0056455f
     fec:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ff0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ff4:	54007265 	strpl	r7, [r0], #-613	; 0x265
     ff8:	5f384d49 	svcpl	0x00384d49
     ffc:	5f475254 	svcpl	0x00475254
    1000:	5f4d4f43 	svcpl	0x004d4f43
    1004:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1008:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    100c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    1010:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
    1014:	5f6d7261 	svcpl	0x006d7261
    1018:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    101c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1020:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1024:	5f31414d 	svcpl	0x0031414d
    1028:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    102c:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
    1030:	5152495f 	cmppl	r2, pc, asr r9
    1034:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1038:	0072656c 	rsbseq	r6, r2, ip, ror #10
    103c:	33495053 	movtcc	r5, #36947	; 0x9053
    1040:	5152495f 	cmppl	r2, pc, asr r9
    1044:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1048:	0072656c 	rsbseq	r6, r2, ip, ror #10
    104c:	334d4954 	movtcc	r4, #55636	; 0xd954
    1050:	5152495f 	cmppl	r2, pc, asr r9
    1054:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1058:	0072656c 	rsbseq	r6, r2, ip, ror #10
    105c:	5f4e4143 	svcpl	0x004e4143
    1060:	5f454353 	svcpl	0x00454353
    1064:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1068:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    106c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1070:	5f31414d 	svcpl	0x0031414d
    1074:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1078:	346c656e 	strbtcc	r6, [ip], #-1390	; 0x56e
    107c:	5152495f 	cmppl	r2, pc, asr r9
    1080:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1084:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1088:	434d5346 	movtmi	r5, #54086	; 0xd346
    108c:	5152495f 	cmppl	r2, pc, asr r9
    1090:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1094:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1098:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    109c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    10a0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    10a4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    10a8:	43444100 	movtmi	r4, #16640	; 0x4100
    10ac:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    10b0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    10b4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    10b8:	43324900 	teqmi	r2, #0, 18
    10bc:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
    10c0:	5152495f 	cmppl	r2, pc, asr r9
    10c4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    10c8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    10cc:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    10d0:	5f52455f 	svcpl	0x0052455f
    10d4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10d8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10dc:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    10e0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    10e4:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    10e8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    10ec:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    10f0:	42535500 	subsmi	r5, r3, #0, 10
    10f4:	5f504c5f 	svcpl	0x00504c5f
    10f8:	5f4e4143 	svcpl	0x004e4143
    10fc:	5f305852 	svcpl	0x00305852
    1100:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1104:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1108:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    110c:	485f4253 	ldmdami	pc, {r0, r1, r4, r6, r9, lr}^	; <UNPREDICTABLE>
    1110:	41435f50 	cmpmi	r3, r0, asr pc
    1114:	58545f4e 	ldmdapl	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1118:	5152495f 	cmppl	r2, pc, asr r9
    111c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1120:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1124:	31433249 	cmpcc	r3, r9, asr #4
    1128:	5f52455f 	svcpl	0x0052455f
    112c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1130:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1134:	53007265 	movwpl	r7, #613	; 0x265
    1138:	5f314950 	svcpl	0x00314950
    113c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1140:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1144:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1148:	5f384d49 	svcpl	0x00384d49
    114c:	5f4b5242 	svcpl	0x004b5242
    1150:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1154:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1158:	44007265 	strmi	r7, [r0], #-613	; 0x265
    115c:	5f31414d 	svcpl	0x0031414d
    1160:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1164:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
    1168:	5152495f 	cmppl	r2, pc, asr r9
    116c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1170:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1174:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1178:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    117c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1180:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1184:	6f682f00 	svcvs	0x00682f00
    1188:	702f656d 	eorvc	r6, pc, sp, ror #10
    118c:	72726569 	rsbsvc	r6, r2, #440401920	; 0x1a400000
    1190:	6c652d65 	stclvs	13, cr2, [r5], #-404	; 0xfffffe6c
    1194:	65657369 	strbvs	r7, [r5, #-873]!	; 0x369
    1198:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
    119c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    11a0:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; fd8 <__Stack_Size+0xbd8>
    11a4:	3330314f 	teqcc	r0, #-1073741805	; 0xc0000013
    11a8:	356d632f 	strbcc	r6, [sp, #-815]!	; 0x32f
    11ac:	652f3033 	strvs	r3, [pc, #-51]!	; 1181 <__Stack_Size+0xd81>
    11b0:	706d6178 	rsbvc	r6, sp, r8, ror r1
    11b4:	2f73656c 	svccs	0x0073656c
    11b8:	6f626f52 	svcvs	0x00626f52
    11bc:	53550074 	cmppl	r5, #116	; 0x74
    11c0:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
    11c4:	5152495f 	cmppl	r2, pc, asr r9
    11c8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11d0:	344d4954 	strbcc	r4, [sp], #-2388	; 0x954
    11d4:	5152495f 	cmppl	r2, pc, asr r9
    11d8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11e0:	314d4954 	cmpcc	sp, r4, asr r9
    11e4:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
    11e8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 1074 <__Stack_Size+0xc74>
    11ec:	5152495f 	cmppl	r2, pc, asr r9
    11f0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11f8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    11fc:	6168435f 	cmnvs	r8, pc, asr r3
    1200:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1204:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    1208:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    120c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1210:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1214:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
    1218:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    121c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1220:	44575700 	ldrbmi	r5, [r7], #-1792	; 0x700
    1224:	52495f47 	subpl	r5, r9, #284	; 0x11c
    1228:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    122c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1230:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1234:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    1238:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    123c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1240:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1244:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    1248:	61485152 	cmpvs	r8, r2, asr r1
    124c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1250:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
    1254:	5f394954 	svcpl	0x00394954
    1258:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    125c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1260:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1264:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    1268:	43565364 	cmpmi	r6, #100, 6	; 0x90000001
    126c:	73795300 	cmnvc	r9, #0, 6
    1270:	6b636954 	blvs	18db7c8 <__Stack_Size+0x18db3c8>
    1274:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1278:	0072656c 	rsbseq	r6, r2, ip, ror #10
    127c:	2f505041 	svccs	0x00505041
    1280:	2f637273 	svccs	0x00637273
    1284:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1288:	30316632 	eorscc	r6, r1, r2, lsr r6
    128c:	74695f78 	strbtvc	r5, [r9], #-3960	; 0xf78
    1290:	4400632e 	strmi	r6, [r0], #-814	; 0x32e
    1294:	5f31414d 	svcpl	0x0031414d
    1298:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    129c:	376c656e 	strbcc	r6, [ip, -lr, ror #10]!
    12a0:	5152495f 	cmppl	r2, pc, asr r9
    12a4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12a8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12ac:	31414d44 	cmpcc	r1, r4, asr #26
    12b0:	6168435f 	cmnvs	r8, pc, asr r3
    12b4:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    12b8:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    12bc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    12c0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    12c4:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    12c8:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    12cc:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    12d0:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    12d4:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    12d8:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
    12dc:	50700078 	rsbspl	r0, r0, r8, ror r0
    12e0:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    12e4:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    12e8:	61685f6c 	cmnvs	r8, ip, ror #30
    12ec:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xf6c
    12f0:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    12f4:	756f656d 	strbvc	r6, [pc, #-1389]!	; d8f <__Stack_Size+0x98f>
    12f8:	50410074 	subpl	r0, r1, r4, ror r0
    12fc:	72732f50 	rsbsvc	r2, r3, #80, 30	; 0x140
    1300:	78642f63 	stmdavc	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1304:	61685f6c 	cmnvs	r8, ip, ror #30
    1308:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    130c:	5f6c7864 	svcpl	0x006c7864
    1310:	5f6c6168 	svcpl	0x006c6168
    1314:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    1318:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    131c:	61685f6c 	cmnvs	r8, ip, ror #30
    1320:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1324:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1328:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    132c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0x35f
    1330:	64007261 	strvs	r7, [r0], #-609	; 0x261
    1334:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1338:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 1340 <__Stack_Size+0xf40>
    133c:	756e0078 	strbvc	r0, [lr, #-120]!	; 0x78
    1340:	6361506d 	cmnvs	r1, #109	; 0x6d
    1344:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1348:	526d754e 	rsbpl	r7, sp, #327155712	; 0x13800000
    134c:	79427663 	stmdbvc	r2, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    1350:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    1354:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1358:	6f5f6c61 	svcvs	0x005f6c61
    135c:	006e6570 	rsbeq	r6, lr, r0, ror r5
    1360:	78526267 	ldmdavc	r2, {r0, r1, r2, r5, r6, r9, sp, lr}^
    1364:	6b636150 	blvs	18d98ac <__Stack_Size+0x18d94ac>
    1368:	654c7465 	strbvs	r7, [ip, #-1125]	; 0x465
    136c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1370:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1374:	5f78745f 	svcpl	0x0078745f
    1378:	6b636170 	blvs	18d9940 <__Stack_Size+0x18d9540>
    137c:	6e007465 	cdpvs	4, 0, cr7, cr0, cr5, {3}
    1380:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    1384:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1388:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
    138c:	62670067 	rsbvs	r0, r7, #103	; 0x67
    1390:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    1394:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1398:	64007375 	strvs	r7, [r0], #-885	; 0x375
    139c:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
    13a0:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    13a4:	63617078 	cmnvs	r1, #120	; 0x78
    13a8:	5f74656b 	svcpl	0x0074656b
    13ac:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    13b0:	64006874 	strvs	r6, [r0], #-2164	; 0x874
    13b4:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
    13b8:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    13bc:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    13c0:	00657479 	rsbeq	r7, r5, r9, ror r4
    13c4:	5f6c7864 	svcpl	0x006c7864
    13c8:	5f746573 	svcpl	0x00746573
    13cc:	61707874 	cmnvs	r0, r4, ror r8
    13d0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    13d4:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    13d8:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xd61
    13dc:	64007265 	strvs	r7, [r0], #-613	; 0x265
    13e0:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
    13e4:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    13e8:	7962776f 	stmdbvc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    13ec:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    13f0:	725f6c78 	subsvc	r6, pc, #120, 24	; 0x7800
    13f4:	61705f78 	cmnvs	r0, r8, ror pc
    13f8:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    13fc:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
    1400:	75736b63 	ldrbvc	r6, [r3, #-2915]!	; 0xb63
    1404:	5041006d 	subpl	r0, r1, sp, rrx
    1408:	72732f50 	rsbsvc	r2, r3, #80, 30	; 0x140
    140c:	79642f63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1410:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    1414:	2e6c6578 	mcrcs	5, 3, r6, cr12, cr8, {3}
    1418:	65520063 	ldrbvs	r0, [r2, #-99]	; 0x63
    141c:	78546c61 	ldmdavc	r4, {r0, r5, r6, sl, fp, sp, lr}^
    1420:	426d754e 	rsbmi	r7, sp, #327155712	; 0x13800000
    1424:	00657479 	rsbeq	r7, r5, r9, ror r4
    1428:	5f6c7864 	svcpl	0x006c7864
    142c:	5f746573 	svcpl	0x00746573
    1430:	61707874 	cmnvs	r0, r4, ror r8
    1434:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    1438:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    143c:	00687467 	rsbeq	r7, r8, r7, ror #8
    1440:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1444:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1448:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    144c:	7078745f 	rsbsvc	r7, r8, pc, asr r4
    1450:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1454:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xf74
    1458:	53626700 	cmnpl	r2, #0, 14
    145c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1460:	63615073 	cmnvs	r1, #115	; 0x73
    1464:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1468:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
    146c:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    1470:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1474:	705f7872 	subsvc	r7, pc, r2, ror r8	; <UNPREDICTABLE>
    1478:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    147c:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    1480:	616d5f6c 	cmnvs	sp, ip, ror #30
    1484:	6f77656b 	svcvs	0x0077656b
    1488:	64006472 	strvs	r6, [r0], #-1138	; 0x472
    148c:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
    1490:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    1494:	63617078 	cmnvs	r1, #120	; 0x78
    1498:	5f74656b 	svcpl	0x0074656b
    149c:	61726170 	cmnvs	r2, r0, ror r1
    14a0:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0x56d
    14a4:	62670072 	rsbvs	r0, r7, #114	; 0x72
    14a8:	65477852 	strbvs	r7, [r7, #-2130]	; 0x852
    14ac:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    14b0:	00687467 	rsbeq	r7, r8, r7, ror #8
    14b4:	5f6c7864 	svcpl	0x006c7864
    14b8:	5f746573 	svcpl	0x00746573
    14bc:	61707874 	cmnvs	r0, r4, ror r8
    14c0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    14c4:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    14c8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    14cc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    14d0:	72726500 	rsbsvc	r6, r2, #0, 10
    14d4:	00746962 	rsbseq	r6, r4, r2, ror #18
    14d8:	75426967 	strbvc	r6, [r2, #-2407]	; 0x967
    14dc:	69735573 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, sl, ip, lr}^
    14e0:	6900676e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    14e4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    14e8:	49626700 	stmdbmi	r2!, {r8, r9, sl, sp, lr}^
    14ec:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
    14f0:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    14f4:	61506e6f 	cmpvs	r0, pc, ror #28
    14f8:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    14fc:	75616200 	strbvc	r6, [r1, #-512]!	; 0x200
    1500:	6d756e64 	ldclvs	14, cr6, [r5, #-400]!	; 0xfffffe70
    1504:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1508:	7265745f 	rsbvc	r7, r5, #1593835520	; 0x5f000000
    150c:	616e696d 	cmnvs	lr, sp, ror #18
    1510:	46006574 			; <UNDEFINED> instruction: 0x46006574
    1514:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1518:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    151c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1520:	52570067 	subspl	r0, r7, #103	; 0x67
    1524:	445f3250 	ldrbmi	r3, [pc], #-592	; 152c <__Stack_Size+0x112c>
    1528:	00617461 	rsbeq	r7, r1, r1, ror #8
    152c:	535f424f 	cmppl	pc, #-268435452	; 0xf0000004
    1530:	00504f54 	subseq	r4, r0, r4, asr pc
    1534:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1538:	72455f48 	subvc	r5, r5, #72, 30	; 0x120
    153c:	4f657361 	svcmi	0x00657361
    1540:	6f697470 	svcvs	0x00697470
    1544:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    1548:	72007365 	andvc	r7, r0, #-1811939327	; 0x94000001
    154c:	6f646165 	svcvs	0x00646165
    1550:	74737475 	ldrbtvc	r7, [r3], #-1141	; 0x475
    1554:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1558:	414c4600 	cmpmi	ip, r0, lsl #12
    155c:	455f4853 	ldrbmi	r4, [pc, #-2131]	; d11 <__Stack_Size+0x911>
    1560:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    1564:	5052575f 	subspl	r5, r2, pc, asr r7
    1568:	414c4600 	cmpmi	ip, r0, lsl #12
    156c:	455f4853 	ldrbmi	r4, [pc, #-2131]	; d21 <__Stack_Size+0x921>
    1570:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    1574:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
    1578:	414c4600 	cmpmi	ip, r0, lsl #12
    157c:	4c5f4853 	mrrcmi	8, 5, r4, pc, cr3	; <UNPREDICTABLE>
    1580:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    1584:	46007963 	strmi	r7, [r0], -r3, ror #18
    1588:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    158c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1590:	66657250 			; <UNDEFINED> instruction: 0x66657250
    1594:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1598:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    159c:	74537265 	ldrbvc	r7, [r3], #-613	; 0x265
    15a0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    15a4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    15a8:	57007961 	strpl	r7, [r0, -r1, ror #18]
    15ac:	00525052 	subseq	r5, r2, r2, asr r0
    15b0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    15b4:	6e555f48 	cdpvs	15, 5, cr5, cr5, cr8, {2}
    15b8:	6b636f6c 	blvs	18dd370 <__Stack_Size+0x18dcf70>
    15bc:	414c4600 	cmpmi	ip, r0, lsl #12
    15c0:	455f4853 	ldrbmi	r4, [pc, #-2131]	; d75 <__Stack_Size+0x975>
    15c4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    15c8:	506c6c41 	rsbpl	r6, ip, r1, asr #24
    15cc:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    15d0:	414c4600 	cmpmi	ip, r0, lsl #12
    15d4:	535f4853 	cmppl	pc, #5439488	; 0x530000
    15d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    15dc:	654e0073 	strbvs	r0, [lr, #-115]	; 0x73
    15e0:	61745377 	cmnvs	r4, r7, ror r3
    15e4:	57006574 	smlsdxpl	r0, r4, r5, r6
    15e8:	00305052 	eorseq	r5, r0, r2, asr r0
    15ec:	31505257 	cmpcc	r0, r7, asr r2
    15f0:	50525700 	subspl	r5, r2, r0, lsl #14
    15f4:	52570032 	subspl	r0, r7, #50	; 0x32
    15f8:	46003350 			; <UNDEFINED> instruction: 0x46003350
    15fc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1600:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1604:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    1608:	6f725065 	svcvs	0x00725065
    160c:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    1610:	4f6e6f69 	svcmi	0x006e6f69
    1614:	6f697470 	svcvs	0x00697470
    1618:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    161c:	504f0065 	subpl	r0, pc, r5, rrx
    1620:	59454b54 	stmdbpl	r5, {r2, r4, r6, r8, r9, fp, lr}^
    1624:	4c460052 	mcrrmi	0, 5, r0, r6, cr2
    1628:	5f485341 	svcpl	0x00485341
    162c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1630:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    1634:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1638:	6f436574 	svcvs	0x00436574
    163c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1640:	5f424f00 	svcpl	0x00424f00
    1644:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    1648:	414c4600 	cmpmi	ip, r0, lsl #12
    164c:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
    1650:	4f646165 	svcmi	0x00646165
    1654:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    1658:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    165c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1660:	616c6600 	cmnvs	ip, r0, lsl #12
    1664:	74736873 	ldrbtvc	r6, [r3], #-2163	; 0x873
    1668:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    166c:	74696200 	strbtvc	r6, [r9], #-512	; 0x200
    1670:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1674:	50007375 	andpl	r7, r0, r5, ror r3
    1678:	5f656761 	svcpl	0x00656761
    167c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1680:	00737365 	rsbseq	r7, r3, r5, ror #6
    1684:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1688:	52455f48 	subpl	r5, r5, #72, 30	; 0x120
    168c:	5f524f52 	svcpl	0x00524f52
    1690:	46004750 			; <UNDEFINED> instruction: 0x46004750
    1694:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1698:	636f4c5f 	cmnvs	pc, #24320	; 0x5f00
    169c:	5257006b 	subspl	r0, r7, #107	; 0x6b
    16a0:	445f3350 	ldrbmi	r3, [pc], #-848	; 16a8 <__Stack_Size+0x12a8>
    16a4:	00617461 	rsbeq	r7, r1, r1, ror #8
    16a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    16ac:	30316632 	eorscc	r6, r1, r2, lsr r6
    16b0:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    16b4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    16b8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    16bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    16c0:	5f783031 	svcpl	0x00783031
    16c4:	73616c66 	cmnvc	r1, #26112	; 0x6600
    16c8:	00632e68 	rsbeq	r2, r3, r8, ror #28
    16cc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    16d0:	65475f48 	strbvs	r5, [r7, #-3912]	; 0xf48
    16d4:	616c4674 	smcvs	50276	; 0xc464
    16d8:	61745367 	cmnvs	r4, r7, ror #6
    16dc:	00737574 	rsbseq	r7, r3, r4, ror r5
    16e0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    16e4:	6c435f48 	mcrrvs	15, 4, r5, r3, cr8
    16e8:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    16ec:	0067616c 	rsbeq	r6, r7, ip, ror #2
    16f0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    16f4:	4f435f48 	svcmi	0x00435f48
    16f8:	454c504d 	strbmi	r5, [ip, #-77]	; 0x4d
    16fc:	46004554 			; <UNDEFINED> instruction: 0x46004554
    1700:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1704:	5355425f 	cmppl	r5, #-268435451	; 0xf0000005
    1708:	52570059 	subspl	r0, r7, #89	; 0x59
    170c:	445f3150 	ldrbmi	r3, [pc], #-336	; 1714 <__Stack_Size+0x1314>
    1710:	00617461 	rsbeq	r7, r1, r1, ror #8
    1714:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1718:	49545f48 	ldmdbmi	r4, {r3, r6, r8, r9, sl, fp, ip, lr}^
    171c:	554f454d 	strbpl	r4, [pc, #-1357]	; 11d7 <__Stack_Size+0xdd7>
    1720:	69540054 	ldmdbvs	r4, {r2, r4, r6}^
    1724:	756f656d 	strbvc	r6, [pc, #-1389]!	; 11bf <__Stack_Size+0xdbf>
    1728:	4c460074 	mcrrmi	0, 7, r0, r6, cr4
    172c:	5f485341 	svcpl	0x00485341
    1730:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    1734:	4f646165 	svcmi	0x00646165
    1738:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    173c:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    1740:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1744:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1748:	4f007375 	svcmi	0x00007375
    174c:	54535f42 	ldrbpl	r5, [r3], #-3906	; 0xf42
    1750:	00594244 	subseq	r4, r9, r4, asr #4
    1754:	30505257 	subscc	r5, r0, r7, asr r2
    1758:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    175c:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    1760:	5f485341 	svcpl	0x00485341
    1764:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    1768:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    176c:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    1770:	00737365 	rsbseq	r7, r3, r5, ror #6
    1774:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1778:	65475f48 	strbvs	r5, [r7, #-3912]	; 0xf48
    177c:	61745374 	cmnvs	r4, r4, ror r3
    1780:	00737574 	rsbseq	r7, r3, r4, ror r5
    1784:	545f424f 	ldrbpl	r4, [pc], #-591	; 178c <__Stack_Size+0x138c>
    1788:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    178c:	46006665 	strmi	r6, [r0], -r5, ror #12
    1790:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1794:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
    1798:	63794366 	cmnvs	r9, #-1744830463	; 0x98000001
    179c:	6341656c 	movtvs	r6, #5484	; 0x156c
    17a0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    17a4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    17a8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    17ac:	72505f48 	subsvc	r5, r0, #72, 30	; 0x120
    17b0:	6172676f 	cmnvs	r2, pc, ror #14
    17b4:	74704f6d 	ldrbtvc	r4, [r0], #-3949	; 0xf6d
    17b8:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    17bc:	44657479 	strbtmi	r7, [r5], #-1145	; 0x479
    17c0:	00617461 	rsbeq	r7, r1, r1, ror #8
    17c4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    17c8:	65475f48 	strbvs	r5, [r7, #-3912]	; 0xf48
    17cc:	65735574 	ldrbvs	r5, [r3, #-1396]!	; 0x574
    17d0:	74704f72 	ldrbtvc	r4, [r0], #-3954	; 0xf72
    17d4:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    17d8:	00657479 	rsbeq	r7, r5, r9, ror r4
    17dc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    17e0:	72505f48 	subsvc	r5, r0, #72, 30	; 0x120
    17e4:	6172676f 	cmnvs	r2, pc, ror #14
    17e8:	6c61486d 	stclvs	8, cr4, [r1], #-436	; 0xfffffe4c
    17ec:	726f5766 	rsbvc	r5, pc, #26738688	; 0x1980000
    17f0:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
    17f4:	5f485341 	svcpl	0x00485341
    17f8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    17fc:	414c4600 	cmpmi	ip, r0, lsl #12
    1800:	455f4853 	ldrbmi	r4, [pc, #-2131]	; fb5 <__Stack_Size+0xbb5>
    1804:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1808:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    180c:	72506574 	subsvc	r6, r0, #116, 10	; 0x1d000000
    1810:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    1814:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1818:	45535500 	ldrbmi	r5, [r3, #-1280]	; 0x500
    181c:	61440052 	qdaddvs	r0, r2, r4
    1820:	00306174 	eorseq	r6, r0, r4, ror r1
    1824:	61746144 	cmnvs	r4, r4, asr #2
    1828:	4c460031 	mcrrmi	0, 3, r0, r6, cr1
    182c:	5f485341 	svcpl	0x00485341
    1830:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
    1834:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    1838:	5f485341 	svcpl	0x00485341
    183c:	46005449 	strmi	r5, [r0], -r9, asr #8
    1840:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1844:	6f72505f 	svcvs	0x0072505f
    1848:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    184c:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    1850:	53455200 	movtpl	r5, #20992	; 0x5200
    1854:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1858:	4c460044 	mcrrmi	0, 4, r0, r6, cr4
    185c:	5f485341 	svcpl	0x00485341
    1860:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1864:	00666544 	rsbeq	r6, r6, r4, asr #10
    1868:	53414c46 	movtpl	r4, #7238	; 0x1c46
    186c:	61575f48 	cmpvs	r7, r8, asr #30
    1870:	6f467469 	svcvs	0x00467469
    1874:	73614c72 	cmnvc	r1, #29184	; 0x7200
    1878:	65704f74 	ldrbvs	r4, [r0, #-3956]!	; 0xf74
    187c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1880:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    1884:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1888:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0x5f
    188c:	63746566 	cmnvs	r4, #427819008	; 0x19800000
    1890:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
    1894:	00726566 	rsbseq	r6, r2, r6, ror #10
    1898:	706e6970 	rsbvc	r6, lr, r0, ror r9
    189c:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    18a0:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    18a4:	47005445 	strmi	r5, [r0, -r5, asr #8]
    18a8:	5f4f4950 	svcpl	0x004f4950
    18ac:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    18b0:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    18b4:	61447475 	hvcvs	18245	; 0x4745
    18b8:	47006174 	smlsdxmi	r0, r4, r1, r6
    18bc:	5f4f4950 	svcpl	0x004f4950
    18c0:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    18c4:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xf74
    18c8:	43747570 	cmnmi	r4, #112, 10	; 0x1c000000
    18cc:	4200646d 	andmi	r6, r0, #1828716544	; 0x6d000000
    18d0:	61567469 	cmpvs	r6, r9, ror #8
    18d4:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    18d8:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xf74
    18dc:	00544553 	subseq	r4, r4, r3, asr r5
    18e0:	4f495047 	svcmi	0x00495047
    18e4:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    18e8:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    18ec:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    18f0:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    18f4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    18f8:	31663233 	cmncc	r6, r3, lsr r2
    18fc:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    1900:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1904:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1908:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    190c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1910:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1914:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1918:	6d6e6970 	stclvs	9, cr6, [lr, #-448]!	; 0xfffffe40
    191c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1920:	4f495047 	svcmi	0x00495047
    1924:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    1928:	756f5374 	strbvc	r5, [pc, #-884]!	; 15bc <__Stack_Size+0x11bc>
    192c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1930:	4f495047 	svcmi	0x00495047
    1934:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1938:	0074696e 	rsbseq	r6, r4, lr, ror #18
    193c:	4f495047 	svcmi	0x00495047
    1940:	6576455f 	ldrbvs	r4, [r6, #-1375]!	; 0x55f
    1944:	754f746e 	strbvc	r7, [pc, #-1134]	; 14de <__Stack_Size+0x10de>
    1948:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    194c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1950:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1954:	5f4f4950 	svcpl	0x004f4950
    1958:	616d6552 	cmnvs	sp, r2, asr r5
    195c:	50470070 	subpl	r0, r7, r0, ror r0
    1960:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1964:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1968:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
    196c:	61746144 	cmnvs	r4, r4, asr #2
    1970:	00746942 	rsbseq	r6, r4, r2, asr #18
    1974:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    1978:	50006765 	andpl	r6, r0, r5, ror #14
    197c:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
    1980:	63006c61 	movwvs	r6, #3169	; 0xc61
    1984:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1988:	6f6d746e 	svcvs	0x006d746e
    198c:	47006564 	strmi	r6, [r0, -r4, ror #10]
    1990:	5f4f4950 	svcpl	0x004f4950
    1994:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    1998:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    199c:	43520065 	cmpmi	r2, #101	; 0x65
    19a0:	50415f43 	subpl	r5, r1, r3, asr #30
    19a4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    19a8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    19ac:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    19b0:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    19b4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19b8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    19bc:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    19c0:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    19c4:	00617461 	rsbeq	r7, r1, r1, ror #8
    19c8:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!	; 0xfffffe30
    19cc:	006b7361 	rsbeq	r7, fp, r1, ror #6
    19d0:	4f495047 	svcmi	0x00495047
    19d4:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    19d8:	6b636f4c 	blvs	18dd710 <__Stack_Size+0x18dd310>
    19dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    19e0:	63006769 	movwvs	r6, #1897	; 0x769
    19e4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    19e8:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    19ec:	5047006e 	subpl	r0, r7, lr, rrx
    19f0:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    19f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    19f8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    19fc:	50470031 	subpl	r0, r7, r1, lsr r0
    1a00:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; abf <__Stack_Size+0x6bf>
    1a04:	4c495458 	cfstrdmi	mvd5, [r9], {88}	; 0x58
    1a08:	43656e69 	cmnmi	r5, #1680	; 0x690
    1a0c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a10:	46410067 	strbmi	r0, [r1], -r7, rrx
    1a14:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1a1c <__Stack_Size+0x161c>
    1a18:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1a1c:	42006665 	andmi	r6, r0, #105906176	; 0x6500000
    1a20:	63417469 	movtvs	r7, #5225	; 0x1469
    1a24:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1a28:	50414d00 	subpl	r4, r1, r0, lsl #26
    1a2c:	50470052 	subpl	r0, r7, r2, asr r0
    1a30:	00784f49 	rsbseq	r4, r8, r9, asr #30
    1a34:	4f495047 	svcmi	0x00495047
    1a38:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1a3c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1a40:	00746375 	rsbseq	r6, r4, r5, ror r3
    1a44:	52435645 	subpl	r5, r3, #72351744	; 0x4500000
    1a48:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1a4c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    1a50:	754f6461 	strbvc	r6, [pc, #-1121]	; 15f7 <__Stack_Size+0x11f7>
    1a54:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    1a58:	61746144 	cmnvs	r4, r4, asr #2
    1a5c:	00746942 	rsbseq	r6, r4, r2, asr #18
    1a60:	4f495047 	svcmi	0x00495047
    1a64:	4946415f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, lr}^
    1a68:	4965444f 	stmdbmi	r5!, {r0, r1, r2, r3, r6, sl, lr}^
    1a6c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1a70:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
    1a74:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1a78:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1a7c:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1a80:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1a84:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1a88:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    1a8c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1a90:	00746942 	rsbseq	r6, r4, r2, asr #18
    1a94:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
    1a98:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1a9c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1aa0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1aa4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1aa8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1aac:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1ab0:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    1ab4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1ab8:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1abc:	49676e69 	stmdbmi	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ac0:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1ac4:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1ac8:	564e006c 	strbpl	r0, [lr], -ip, rrx
    1acc:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1ad0:	61467465 	cmpvs	r6, r5, ror #8
    1ad4:	41746c75 	cmnmi	r4, r5, ror ip
    1ad8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1adc:	53007373 	movwpl	r7, #883	; 0x373
    1ae0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1ae4:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1ae8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1aec:	50627553 	rsbpl	r7, r2, r3, asr r5
    1af0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1af4:	00797469 	rsbseq	r7, r9, r9, ror #8
    1af8:	4349564e 	movtmi	r5, #38478	; 0x964e
    1afc:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    1b00:	4d495250 	sfmmi	f5, 2, [r9, #-320]	; 0xfffffec0
    1b04:	004b5341 	subeq	r5, fp, r1, asr #6
    1b08:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b0c:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    1b10:	74617265 	strbtvc	r7, [r1], #-613	; 0x265
    1b14:	73795365 	cmnvc	r9, #-1811939327	; 0x94000001
    1b18:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
    1b1c:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1b20:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1b24:	00657270 	rsbeq	r7, r5, r0, ror r2
    1b28:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b2c:	5345525f 	movtpl	r5, #21087	; 0x525f
    1b30:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1b34:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1b38:	6166004b 	cmnvs	r6, fp, asr #32
    1b3c:	61746c75 	cmnvs	r4, r5, ror ip
    1b40:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1b44:	4e007373 	mcrmi	3, 0, r7, cr0, cr3, {3}
    1b48:	5f434956 	svcpl	0x00434956
    1b4c:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1b50:	61486d65 	cmpvs	r8, r5, ror #26
    1b54:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1b58:	69725072 	ldmdbvs	r2!, {r1, r4, r5, r6, ip, lr}^
    1b5c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1b60:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1b64:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b68:	65475f5f 	strbvs	r5, [r7, #-3935]	; 0xf5f
    1b6c:	53414274 	movtpl	r4, #4724	; 0x1274
    1b70:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    1b74:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1b78:	31663233 	cmncc	r6, r3, lsr r2
    1b7c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    1b80:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1b84:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1b88:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1b8c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1b90:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1b94:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1b98:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b9c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1ba0:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
    1ba4:	564e0044 	strbpl	r0, [lr], -r4, asr #32
    1ba8:	505f4349 	subspl	r4, pc, r9, asr #6
    1bac:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1bb0:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1bb4:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1bb8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1bbc:	45525f43 	ldrbmi	r5, [r2, #-3907]	; 0xf43
    1bc0:	46544553 			; <UNDEFINED> instruction: 0x46544553
    1bc4:	544c5541 	strbpl	r5, [ip], #-1345	; 0x541
    1bc8:	4b53414d 	blmi	14d2104 <__Stack_Size+0x14d1d04>
    1bcc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1bd0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1bd4:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    1bd8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1bdc:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1be0:	61486576 	hvcvs	34390	; 0x8656
    1be4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1be8:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
    1bec:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1bf0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1bf4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1bf8:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
    1bfc:	45535200 	ldrbmi	r5, [r3, #-512]	; 0x200
    1c00:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1c04:	5f5f0031 	svcpl	0x005f0031
    1c08:	46544553 			; <UNDEFINED> instruction: 0x46544553
    1c0c:	544c5541 	strbpl	r5, [ip], #-1345	; 0x541
    1c10:	4b53414d 	blmi	14d214c <__Stack_Size+0x14d1d4c>
    1c14:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1c18:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1c1c:	6172656e 	cmnvs	r2, lr, ror #10
    1c20:	6f436574 	svcvs	0x00436574
    1c24:	65526572 	ldrbvs	r6, [r2, #-1394]	; 0x572
    1c28:	00746573 	rsbseq	r6, r4, r3, ror r5
    1c2c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1c30:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1c34:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1c38:	61486d65 	cmpvs	r8, r5, ror #26
    1c3c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1c40:	74634172 	strbtvc	r4, [r3], #-370	; 0x172
    1c44:	42657669 	rsbmi	r7, r5, #110100480	; 0x6900000
    1c48:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1c4c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1c50:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1c54:	41425f43 	cmpmi	r2, r3, asr #30
    1c58:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    1c5c:	4e4f4349 	cdpmi	3, 4, cr4, cr15, cr9, {2}
    1c60:	00474946 	subeq	r4, r7, r6, asr #18
    1c64:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
    1c68:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1c6c:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    1c70:	51524974 	cmppl	r2, r4, ror r9
    1c74:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1c78:	506c656e 	rsbpl	r6, ip, lr, ror #10
    1c7c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1c80:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1c84:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    1c88:	736f7070 	cmnvc	pc, #112	; 0x70
    1c8c:	53464300 	movtpl	r4, #25344	; 0x6300
    1c90:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1c94:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1c98:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1c9c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1ca0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1ca4:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1ca8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1cac:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1cb0:	49410074 	stmdbmi	r1, {r2, r4, r5, r6}^
    1cb4:	00524352 	subseq	r4, r2, r2, asr r3
    1cb8:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
    1cbc:	425f5f00 	subsmi	r5, pc, #0, 30
    1cc0:	50455341 	subpl	r5, r5, r1, asr #6
    1cc4:	4f434952 	svcmi	0x00434952
    1cc8:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    1ccc:	50485300 	subpl	r5, r8, r0, lsl #6
    1cd0:	48530052 	ldmdami	r3, {r1, r4, r6}^
    1cd4:	00525343 	subseq	r5, r2, r3, asr #6
    1cd8:	4349564e 	movtmi	r5, #38478	; 0x964e
    1cdc:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1ce0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1ce4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1ce8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1cec:	53414274 	movtpl	r4, #4724	; 0x1274
    1cf0:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    1cf4:	525f5f00 	subspl	r5, pc, #0, 30
    1cf8:	54455345 	strbpl	r5, [r5], #-837	; 0x345
    1cfc:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    1d00:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1d04:	4d4d004b 	stclmi	0, cr0, [sp, #-300]	; 0xfffffed4
    1d08:	00524146 	subseq	r4, r2, r6, asr #2
    1d0c:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1d10:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    1d14:	5f434956 	svcpl	0x00434956
    1d18:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1d1c:	61486d65 	cmpvs	r8, r5, ror #26
    1d20:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1d24:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1d28:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d2c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1d30:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    1d34:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
    1d38:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    1d3c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d40:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    1d44:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    1d48:	5f434956 	svcpl	0x00434956
    1d4c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1d50:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1d54:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1d58:	00524543 	subseq	r4, r2, r3, asr #10
    1d5c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1d60:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1d64:	00797469 	rsbseq	r7, r9, r9, ror #8
    1d68:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
    1d6c:	53464400 	movtpl	r4, #25600	; 0x6400
    1d70:	46480052 			; <UNDEFINED> instruction: 0x46480052
    1d74:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    1d78:	5f434956 	svcpl	0x00434956
    1d7c:	46544553 			; <UNDEFINED> instruction: 0x46544553
    1d80:	544c5541 	strbpl	r5, [ip], #-1345	; 0x541
    1d84:	4b53414d 	blmi	14d22c0 <__Stack_Size+0x14d1ec0>
    1d88:	53464100 	movtpl	r4, #24832	; 0x6100
    1d8c:	53490052 	movtpl	r0, #36946	; 0x9052
    1d90:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    1d94:	5f434956 	svcpl	0x00434956
    1d98:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1d9c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    1da0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1da4:	5372656c 	cmnpl	r2, #108, 10	; 0x1b000000
    1da8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1dac:	53007365 	movwpl	r7, #869	; 0x365
    1db0:	545f4243 	ldrbpl	r4, [pc], #-579	; 1db8 <__Stack_Size+0x19b8>
    1db4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1db8:	74006665 	strvc	r6, [r0], #-1637	; 0x665
    1dbc:	0032706d 	eorseq	r7, r2, sp, rrx
    1dc0:	4349564e 	movtmi	r5, #38478	; 0x964e
    1dc4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1dc8:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1dcc:	61486d65 	cmpvs	r8, r5, ror #26
    1dd0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1dd4:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    1dd8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1ddc:	53746942 	cmnpl	r4, #1081344	; 0x108000
    1de0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1de4:	564e0073 			; <UNDEFINED> instruction: 0x564e0073
    1de8:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
    1dec:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1df0:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1df4:	61486d65 	cmpvs	r8, r5, ror #26
    1df8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1dfc:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    1e00:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1e04:	00746942 	rsbseq	r6, r4, r2, asr #18
    1e08:	33637576 	cmncc	r3, #494927872	; 0x1d800000
    1e0c:	61660032 	cmnvs	r6, r2, lsr r0
    1e10:	73746c75 	cmnvc	r4, #29952	; 0x7500
    1e14:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1e18:	53007365 	movwpl	r7, #869	; 0x365
    1e1c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1e20:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1e24:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1e28:	65657250 	strbvs	r7, [r5, #-592]!	; 0x250
    1e2c:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1e30:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
    1e34:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1e38:	4e007974 	mcrmi	9, 0, r7, cr0, cr4, {3}
    1e3c:	5f434956 	svcpl	0x00434956
    1e40:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1e44:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1e48:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1e4c:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    1e50:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1e54:	53746942 	cmnpl	r4, #1081344	; 0x108000
    1e58:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1e5c:	564e0073 			; <UNDEFINED> instruction: 0x564e0073
    1e60:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1e64:	65444243 	strbvs	r4, [r4, #-579]	; 0x243
    1e68:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1e6c:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    1e70:	6f697250 	svcvs	0x00697250
    1e74:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e78:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1e7c:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
    1e80:	61547463 	cmpvs	r4, r3, ror #8
    1e84:	63610062 	cmnvs	r1, #98	; 0x62
    1e88:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    1e8c:	73717269 	cmnvc	r1, #-1879048186	; 0x90000006
    1e90:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1e94:	5f5f0073 	svcpl	0x005f0073
    1e98:	50544553 	subspl	r4, r4, r3, asr r5
    1e9c:	414d4952 	cmpmi	sp, r2, asr r9
    1ea0:	68004b53 	stmdavs	r0, {r0, r1, r4, r6, r8, r9, fp, lr}
    1ea4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1ea8:	616d7265 	cmnvs	sp, r5, ror #4
    1eac:	5f006b73 	svcpl	0x00006b73
    1eb0:	5345525f 	movtpl	r5, #21087	; 0x525f
    1eb4:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1eb8:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1ebc:	6f4c004b 	svcvs	0x004c004b
    1ec0:	776f5077 			; <UNDEFINED> instruction: 0x776f5077
    1ec4:	6f4d7265 	svcvs	0x004d7265
    1ec8:	4e006564 	cfsh32mi	mvfx6, mvfx0, #52
    1ecc:	5f434956 	svcpl	0x00434956
    1ed0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1ed4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1ed8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1edc:	7463416c 	strbtvc	r4, [r3], #-364	; 0x16c
    1ee0:	42657669 	rsbmi	r7, r5, #110100480	; 0x6900000
    1ee4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1ee8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1eec:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1ef0:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    1ef4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1ef8:	6e657000 	cdpvs	0, 6, cr7, cr5, cr0, {0}
    1efc:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1f00:	73717269 	cmnvc	r1, #-1879048186	; 0x90000006
    1f04:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1f08:	57500073 			; <UNDEFINED> instruction: 0x57500073
    1f0c:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    1f10:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    1f14:	444e4154 	strbmi	r4, [lr], #-340	; 0x154
    1f18:	6f4d5942 	svcvs	0x004d5942
    1f1c:	50006564 	andpl	r6, r0, r4, ror #10
    1f20:	435f5257 	cmpmi	pc, #1879048197	; 0x70000005
    1f24:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1f28:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1f2c:	52575000 	subspl	r5, r7, #0
    1f30:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1f34:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1f38:	5f525750 	svcpl	0x00525750
    1f3c:	75676552 	strbvc	r6, [r7, #-1362]!	; 0x552
    1f40:	6f74616c 	svcvs	0x0074616c
    1f44:	57500072 			; <UNDEFINED> instruction: 0x57500072
    1f48:	56505f52 	usaxpl	r5, r0, r2
    1f4c:	76654c44 	strbtvc	r4, [r5], -r4, asr #24
    1f50:	50006c65 	andpl	r6, r0, r5, ror #24
    1f54:	465f5257 			; <UNDEFINED> instruction: 0x465f5257
    1f58:	0047414c 	subeq	r4, r7, ip, asr #2
    1f5c:	5f525750 	svcpl	0x00525750
    1f60:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1f64:	00666544 	rsbeq	r6, r6, r4, asr #10
    1f68:	5f525750 	svcpl	0x00525750
    1f6c:	43445650 	movtmi	r5, #18000	; 0x4650
    1f70:	7300646d 	movwvc	r6, #1133	; 0x46d
    1f74:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1f78:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1f7c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1f80:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1f84:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1f88:	31663233 	cmncc	r6, r3, lsr r2
    1f8c:	705f7830 	subsvc	r7, pc, r0, lsr r8	; <UNPREDICTABLE>
    1f90:	632e7277 			; <UNDEFINED> instruction: 0x632e7277
    1f94:	52575000 	subspl	r5, r7, #0
    1f98:	4456505f 	ldrbmi	r5, [r6], #-95	; 0x5f
    1f9c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    1fa0:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    1fa4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1fa8:	5f525750 	svcpl	0x00525750
    1fac:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1fb0:	5367616c 	cmnpl	r7, #108, 2
    1fb4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1fb8:	5f5f0073 	svcpl	0x005f0073
    1fbc:	00454657 	subeq	r4, r5, r7, asr r6
    1fc0:	46575f5f 	usaxmi	r5, r7, pc	; <UNPREDICTABLE>
    1fc4:	57500049 	ldrbpl	r0, [r0, -r9, asr #32]
    1fc8:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    1fcc:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    1fd0:	4d504f54 	ldclmi	15, cr4, [r0, #-336]	; 0xfffffeb0
    1fd4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1fd8:	5f434352 	svcpl	0x00434352
    1fdc:	31425041 	cmpcc	r2, r1, asr #32
    1fe0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1fe4:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
    1fe8:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1fec:	5000646d 	andpl	r6, r0, sp, ror #8
    1ff0:	535f5257 	cmppl	pc, #1879048197	; 0x70000005
    1ff4:	45504f54 	ldrbmi	r4, [r0, #-3924]	; 0xf54
    1ff8:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1ffc:	52575000 	subspl	r5, r7, #0
    2000:	6b61575f 	blvs	1857d84 <__Stack_Size+0x1857984>
    2004:	50705565 	rsbspl	r5, r0, r5, ror #10
    2008:	6d436e69 	stclvs	14, cr6, [r3, #-420]	; 0xfffffe5c
    200c:	43520064 	cmpmi	r2, #100	; 0x64
    2010:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2014:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2018:	50410066 	subpl	r0, r1, r6, rrx
    201c:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
    2020:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
    2024:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2028:	004b4c43 	subeq	r4, fp, r3, asr #24
    202c:	5f434352 	svcpl	0x00434352
    2030:	43434441 	movtmi	r4, #13377	; 0x3441
    2034:	6f434b4c 	svcvs	0x00434b4c
    2038:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    203c:	43435200 	movtmi	r5, #12800	; 0x3200
    2040:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2044:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    2048:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    204c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2050:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    2054:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    2058:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    205c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2060:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    2064:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2068:	42007375 	andmi	r7, r0, #-738197503	; 0xd4000001
    206c:	00524344 	subseq	r4, r2, r4, asr #6
    2070:	5f434352 	svcpl	0x00434352
    2074:	32425041 	subcc	r5, r2, #65	; 0x41
    2078:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    207c:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    2080:	505f4343 	subspl	r4, pc, r3, asr #6
    2084:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    2088:	43435200 	movtmi	r5, #12800	; 0x3200
    208c:	6f6c435f 	svcvs	0x006c435f
    2090:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xb63
    2094:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2098:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    209c:	505f4343 	subspl	r4, pc, r3, asr #6
    20a0:	754d4c4c 	strbvc	r4, [sp, #-3148]	; 0xc4c
    20a4:	4352006c 	cmpmi	r2, #108	; 0x6c
    20a8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    20ac:	72655042 	rsbvc	r5, r5, #66	; 0x42
    20b0:	43687069 	cmnmi	r8, #105	; 0x69
    20b4:	6b636f6c 	blvs	18dde6c <__Stack_Size+0x18dda6c>
    20b8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    20bc:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
    20c0:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
    20c4:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    20c8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    20cc:	0079636e 	rsbseq	r6, r9, lr, ror #6
    20d0:	31425041 	cmpcc	r2, r1, asr #32
    20d4:	00524e45 	subseq	r4, r2, r5, asr #28
    20d8:	5f434352 	svcpl	0x00434352
    20dc:	434f434d 	movtmi	r4, #62285	; 0xf34d
    20e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    20e4:	43520067 	cmpmi	r2, #103	; 0x67
    20e8:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
    20ec:	4b4c4343 	blmi	1312e00 <__Stack_Size+0x1312a00>
    20f0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    20f4:	70006563 	andvc	r6, r0, r3, ror #10
    20f8:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xc6c
    20fc:	52006c6c 	andpl	r6, r0, #108, 24	; 0x6c00
    2100:	555f4343 	ldrbpl	r4, [pc, #-835]	; 1dc5 <__Stack_Size+0x19c5>
    2104:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
    2108:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    210c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2110:	5f434352 	svcpl	0x00434352
    2114:	4349534c 	movtmi	r5, #37708	; 0x934c
    2118:	4100646d 	tstmi	r0, sp, ror #8
    211c:	52324250 	eorspl	r4, r2, #80, 4
    2120:	00525453 	subseq	r5, r2, r3, asr r4
    2124:	5f434352 	svcpl	0x00434352
    2128:	31425041 	cmpcc	r2, r1, asr #32
    212c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2130:	70006870 	andvc	r6, r0, r0, ror r8
    2134:	6f736c6c 	svcvs	0x00736c6c
    2138:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    213c:	42484100 	submi	r4, r8, #0, 2
    2140:	00524e45 	subseq	r4, r2, r5, asr #28
    2144:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    2148:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0x375
    214c:	50410067 	subpl	r0, r1, r7, rrx
    2150:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    2154:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
    2158:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
    215c:	756f4370 	strbvc	r4, [pc, #-880]!	; 1df4 <__Stack_Size+0x19f4>
    2160:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2164:	43435200 	movtmi	r5, #12800	; 0x3200
    2168:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    216c:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    2170:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    2174:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2178:	5f434352 	svcpl	0x00434352
    217c:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0x441
    2180:	53487473 	movtpl	r7, #33907	; 0x8473
    2184:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
    2188:	61726269 	cmnvs	r2, r9, ror #4
    218c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2190:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    2194:	44410065 	strbmi	r0, [r1], #-101	; 0x65
    2198:	4b4c4343 	blmi	1312eac <__Stack_Size+0x1312aac>
    219c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    21a0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    21a4:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    21a8:	465f4343 	ldrbmi	r4, [pc], -r3, asr #6
    21ac:	0047414c 	subeq	r4, r7, ip, asr #2
    21b0:	5f434352 	svcpl	0x00434352
    21b4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    21b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    21bc:	43520065 	cmpmi	r2, #101	; 0x65
    21c0:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
    21c4:	4b4c4343 	blmi	1312ed8 <__Stack_Size+0x1312ad8>
    21c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21cc:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    21d0:	555f4343 	ldrbpl	r4, [pc, #-835]	; 1e95 <__Stack_Size+0x1a95>
    21d4:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
    21d8:	756f534b 	strbvc	r5, [pc, #-843]!	; 1e95 <__Stack_Size+0x1a95>
    21dc:	00656372 	rsbeq	r6, r5, r2, ror r3
    21e0:	5f434352 	svcpl	0x00434352
    21e4:	61656c43 	cmnvs	r5, r3, asr #24
    21e8:	616c4672 	smcvs	50274	; 0xc462
    21ec:	43520067 	cmpmi	r2, #103	; 0x67
    21f0:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    21f4:	4b4c4353 	blmi	1312f48 <__Stack_Size+0x1312b48>
    21f8:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0x800
    21fc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2200:	53007375 	movwpl	r7, #885	; 0x375
    2204:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    2208:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    220c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    2210:	0079636e 	rsbseq	r6, r9, lr, ror #6
    2214:	5f434352 	svcpl	0x00434352
    2218:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    221c:	5000736b 	andpl	r7, r0, fp, ror #6
    2220:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    2224:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    2228:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    222c:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    2230:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2234:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    2238:	00676966 	rsbeq	r6, r7, r6, ror #18
    223c:	73657270 	cmnvc	r5, #112, 4
    2240:	43520063 	cmpmi	r2, #99	; 0x63
    2244:	53485f43 	movtpl	r5, #36675	; 0x8f43
    2248:	43520045 	cmpmi	r2, #69	; 0x45
    224c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2250:	4b4c4353 	blmi	1312fa4 <__Stack_Size+0x1312ba4>
    2254:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2258:	50006563 	andpl	r6, r0, r3, ror #10
    225c:	314b4c43 	cmpcc	fp, r3, asr #24
    2260:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    2264:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2268:	41007963 	tstmi	r0, r3, ror #18
    226c:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    2270:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0x42
    2274:	61546373 	cmpvs	r4, r3, ror r3
    2278:	00656c62 	rsbeq	r6, r5, r2, ror #24
    227c:	5f434352 	svcpl	0x00434352
    2280:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2284:	6b636f6c 	blvs	18de03c <__Stack_Size+0x18ddc3c>
    2288:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0x673
    228c:	74730071 	ldrbtvc	r0, [r3], #-113	; 0x71
    2290:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2294:	5f783031 	svcpl	0x00783031
    2298:	2f62696c 	svccs	0x0062696c
    229c:	2f637273 	svccs	0x00637273
    22a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    22a4:	30316632 	eorscc	r6, r1, r2, lsr r6
    22a8:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    22ac:	00632e63 	rsbeq	r2, r3, r3, ror #28
    22b0:	5f434352 	svcpl	0x00434352
    22b4:	4345534c 	movtmi	r5, #21324	; 0x534c
    22b8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    22bc:	43520067 	cmpmi	r2, #103	; 0x67
    22c0:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
    22c4:	4b4c4343 	blmi	1312fd8 <__Stack_Size+0x1312bd8>
    22c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    22cc:	5f434352 	svcpl	0x00434352
    22d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    22d4:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    22d8:	74697275 	strbtvc	r7, [r9], #-629	; 0x275
    22dc:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    22e0:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    22e4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    22e8:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    22ec:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    22f0:	43520064 	cmpmi	r2, #100	; 0x64
    22f4:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    22f8:	4352004f 	cmpmi	r2, #79	; 0x4f
    22fc:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    2300:	43435200 	movtmi	r5, #12800	; 0x3200
    2304:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2308:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    230c:	41006870 	tstmi	r0, r0, ror r8
    2310:	72504344 	subsvc	r4, r0, #68, 6	; 0x10000001
    2314:	54637365 	strbtpl	r7, [r3], #-869	; 0x365
    2318:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    231c:	73795300 	cmnvc	r9, #0, 6
    2320:	6b636954 	blvs	18dc878 <__Stack_Size+0x18dc478>
    2324:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2328:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    232c:	00726574 	rsbseq	r6, r2, r4, ror r5
    2330:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2334:	5f6b6369 	svcpl	0x006b6369
    2338:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    233c:	5367616c 	cmnpl	r7, #108, 2
    2340:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2344:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    2348:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    234c:	4c465f6b 	mcrrmi	15, 6, r5, r6, cr11
    2350:	43004741 	movwmi	r4, #1857	; 0x741
    2354:	42494c41 	submi	r4, r9, #16640	; 0x4100
    2358:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    235c:	31663233 	cmncc	r6, r3, lsr r2
    2360:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    2364:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2368:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    236c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2370:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2374:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2378:	6b636974 	blvs	18dc950 <__Stack_Size+0x18dc550>
    237c:	4300632e 	movwmi	r6, #814	; 0x32e
    2380:	004c5254 	subeq	r5, ip, r4, asr r2
    2384:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2388:	5f6b6369 	svcpl	0x006b6369
    238c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2390:	00726574 	rsbseq	r6, r2, r4, ror r5
    2394:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2398:	5f6b6369 	svcpl	0x006b6369
    239c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    23a0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    23a4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    23a8:	00676966 	rsbeq	r6, r7, r6, ror #18
    23ac:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    23b0:	73795300 	cmnvc	r9, #0, 6
    23b4:	6b636954 	blvs	18dc90c <__Stack_Size+0x18dc50c>
    23b8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    23bc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    23c0:	73795300 	cmnvc	r9, #0, 6
    23c4:	6b636954 	blvs	18dc91c <__Stack_Size+0x18dc51c>
    23c8:	4b4c435f 	blmi	131314c <__Stack_Size+0x1312d4c>
    23cc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    23d0:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    23d4:	4f5f4d49 	svcmi	0x005f4d49
    23d8:	61463443 	cmpvs	r6, r3, asr #8
    23dc:	6f437473 	svcvs	0x00437473
    23e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    23e4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    23e8:	31434f5f 	cmpcc	r3, pc, asr pc
    23ec:	616c6f50 	cmnvs	ip, r0, asr pc
    23f0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    23f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    23f8:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    23fc:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2400:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
    2404:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2408:	0074696e 	rsbseq	r6, r4, lr, ror #18
    240c:	5f4d4954 	svcpl	0x004d4954
    2410:	5034434f 	eorspl	r4, r4, pc, asr #6
    2414:	6f6c6572 	svcvs	0x006c6572
    2418:	6f436461 	svcvs	0x00436461
    241c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2420:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2424:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2428:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    242c:	32657261 	rsbcc	r7, r5, #268435462	; 0x10000006
    2430:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2434:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2438:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    243c:	34657261 	strbtcc	r7, [r5], #-609	; 0x261
    2440:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2444:	50434f5f 	subpl	r4, r3, pc, asr pc
    2448:	6f6c6572 	svcvs	0x006c6572
    244c:	54006461 	strpl	r6, [r0], #-1121	; 0x461
    2450:	4f5f4d49 	svcmi	0x005f4d49
    2454:	72503343 	subsvc	r3, r0, #201326593	; 0xc000001
    2458:	616f6c65 	cmnvs	pc, r5, ror #24
    245c:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2460:	00676966 	rsbeq	r6, r7, r6, ror #18
    2464:	5f4d4954 	svcpl	0x004d4954
    2468:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    246c:	5367616c 	cmnpl	r7, #108, 2
    2470:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2474:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    2478:	6f435f32 	svcvs	0x00435f32
    247c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2480:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2484:	46434f5f 			; <UNDEFINED> instruction: 0x46434f5f
    2488:	00747361 	rsbseq	r7, r4, r1, ror #6
    248c:	5f4d4954 	svcpl	0x004d4954
    2490:	00444b43 	subeq	r4, r4, r3, asr #22
    2494:	5f4d4954 	svcpl	0x004d4954
    2498:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    249c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    24a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    24a4:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    24a8:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
    24ac:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0x570
    24b0:	67676972 			; <UNDEFINED> instruction: 0x67676972
    24b4:	6f537265 	svcvs	0x00537265
    24b8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    24bc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24c0:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0x55f
    24c4:	50475254 	subpl	r5, r7, r4, asr r2
    24c8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    24cc:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    24d0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24d4:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    24d8:	646d434e 	strbtvs	r4, [sp], #-846	; 0x34e
    24dc:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0x900
    24e0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    24e4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    24e8:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    24ec:	65725032 	ldrbvs	r5, [r2, #-50]!	; 0x32
    24f0:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    24f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    24f8:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    24fc:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2500:	6563726f 	strbvs	r7, [r3, #-623]!	; 0x26f
    2504:	32434f64 	subcc	r4, r3, #100, 30	; 0x190
    2508:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    250c:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2510:	555f4d49 	ldrbpl	r4, [pc, #-3401]	; 17cf <__Stack_Size+0x13cf>
    2514:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
    2518:	71655265 	cmnvc	r5, r5, ror #4
    251c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    2520:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2524:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2528:	535f4d49 	cmppl	pc, #4672	; 0x1240
    252c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2530:	44434374 	strbmi	r4, [r3], #-884	; 0x374
    2534:	5400414d 	strpl	r4, [r0], #-333	; 0x14d
    2538:	4f5f4d49 	svcmi	0x005f4d49
    253c:	646f4d50 	strbtvs	r4, [pc], #-3408	; 2544 <__Stack_Size+0x2144>
    2540:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2544:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2548:	6c6f5031 	stclvs	0, cr5, [pc], #-196	; 248c <__Stack_Size+0x208c>
    254c:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2550:	6d740079 	ldclvs	0, cr0, [r4, #-484]!	; 0xfffffe1c
    2554:	636d7370 	cmnvs	sp, #112, 6	; 0xc0000001
    2558:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    255c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2560:	73614633 	cmnvc	r1, #53477376	; 0x3300000
    2564:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2568:	00676966 	rsbeq	r6, r7, r6, ror #18
    256c:	784d4954 	stmdavc	sp, {r2, r4, r6, r8, fp, lr}^
    2570:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2574:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2578:	41646563 	cmnmi	r4, r3, ror #10
    257c:	6f697463 	svcvs	0x00697463
    2580:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2584:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2588:	6c6f5032 	stclvs	0, cr5, [pc], #-200	; 24c8 <__Stack_Size+0x20c8>
    258c:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2590:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2594:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2598:	34434974 	strbcc	r4, [r3], #-2420	; 0x974
    259c:	73657250 	cmnvc	r5, #80, 4
    25a0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    25a4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    25a8:	6c535f4d 	mrrcvs	15, 4, r5, r3, cr13
    25ac:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    25b0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    25b4:	5f4d4954 	svcpl	0x004d4954
    25b8:	4953534f 	ldmdbmi	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    25bc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    25c0:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    25c4:	31726370 	cmncc	r2, r0, ror r3
    25c8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25cc:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    25d0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    25d4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25d8:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    25dc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    25e0:	646f4d6b 	strbtvs	r4, [pc], #-3435	; 25e8 <__Stack_Size+0x21e8>
    25e4:	6f433265 	svcvs	0x00433265
    25e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25ec:	31495400 	cmpcc	r9, r0, lsl #8
    25f0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    25f4:	00676966 	rsbeq	r6, r7, r6, ror #18
    25f8:	5f4d4954 	svcpl	0x004d4954
    25fc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2600:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0x61
    2604:	00326572 	eorseq	r6, r2, r2, ror r5
    2608:	5f4d4954 	svcpl	0x004d4954
    260c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2610:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0x61
    2614:	00336572 	eorseq	r6, r3, r2, ror r5
    2618:	5f4d4954 	svcpl	0x004d4954
    261c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2620:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0x61
    2624:	00346572 	eorseq	r6, r4, r2, ror r5
    2628:	5f4d4954 	svcpl	0x004d4954
    262c:	42414d44 	submi	r4, r1, #68, 26	; 0x1100
    2630:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    2634:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2638:	54006874 	strpl	r6, [r0], #-2164	; 0x874
    263c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2640:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2644:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2648:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    264c:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2650:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2654:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2658:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    265c:	434f7261 	movtmi	r7, #62049	; 0xf261
    2660:	66655234 			; <UNDEFINED> instruction: 0x66655234
    2664:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2668:	5254495f 	subspl	r4, r4, #1556480	; 0x17c000
    266c:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0x578
    2670:	616e7265 	cmnvs	lr, r5, ror #4
    2674:	6f6c436c 	svcvs	0x006c436c
    2678:	6f436b63 	svcvs	0x00436b63
    267c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2680:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2684:	414d445f 	cmpmi	sp, pc, asr r4
    2688:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    268c:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2690:	415f4d49 	cmpmi	pc, r9, asr #26
    2694:	72505252 	subsvc	r5, r0, #536870917	; 0x20000005
    2698:	616f6c65 	cmnvs	pc, r5, ror #24
    269c:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    26a0:	00676966 	rsbeq	r6, r7, r6, ror #18
    26a4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    26a8:	30316632 	eorscc	r6, r1, r2, lsr r6
    26ac:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    26b0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    26b4:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    26b8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    26bc:	5f783031 	svcpl	0x00783031
    26c0:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
    26c4:	49540063 	ldmdbmi	r4, {r0, r1, r5, r6}^
    26c8:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xf4d
    26cc:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    26d0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    26d4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    26d8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    26dc:	72656363 	rsbvc	r6, r5, #-1946157055	; 0x8c000001
    26e0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    26e4:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    26e8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    26ec:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    26f0:	6f697369 	svcvs	0x00697369
    26f4:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    26f8:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    26fc:	73614632 	cmnvc	r1, #52428800	; 0x3200000
    2700:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2704:	00676966 	rsbeq	r6, r7, r6, ror #18
    2708:	5f4d4954 	svcpl	0x004d4954
    270c:	61657242 	cmnvs	r5, r2, asr #4
    2710:	6c6f506b 	stclvs	0, cr5, [pc], #-428	; 256c <__Stack_Size+0x216c>
    2714:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2718:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    271c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2720:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
    2724:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2728:	72547475 	subsvc	r7, r4, #1962934272	; 0x75000000
    272c:	65676769 	strbvs	r6, [r7, #-1897]!	; 0x769
    2730:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2734:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2738:	6142656d 	cmpvs	r2, sp, ror #10
    273c:	6e496573 	mcrvs	5, 2, r6, cr9, cr3, {3}
    2740:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2744:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2748:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    274c:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2750:	4f746365 	svcmi	0x00746365
    2754:	004d7843 	subeq	r7, sp, r3, asr #16
    2758:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    275c:	78726d63 	ldmdavc	r2!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    2760:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2764:	414c465f 	cmpmi	ip, pc, asr r6
    2768:	49540047 	ldmdbmi	r4, {r0, r1, r2, r6}^
    276c:	4f4c5f4d 	svcmi	0x004c5f4d
    2770:	654c4b43 	strbvs	r4, [ip, #-2883]	; 0xb43
    2774:	006c6576 	rsbeq	r6, ip, r6, ror r5
    2778:	5f4d4954 	svcpl	0x004d4954
    277c:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2780:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    2784:	54007265 	strpl	r7, [r0], #-613	; 0x265
    2788:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1a47 <__Stack_Size+0x1647>
    278c:	646f636e 	strbtvs	r6, [pc], #-878	; 2794 <__Stack_Size+0x2394>
    2790:	6f4d7265 	svcvs	0x004d7265
    2794:	54006564 	strpl	r6, [r0], #-1380	; 0x564
    2798:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    279c:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    27a0:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    27a4:	54007265 	strpl	r7, [r0], #-613	; 0x265
    27a8:	4f5f4d49 	svcmi	0x005f4d49
    27ac:	656c4343 	strbvs	r4, [ip, #-835]!	; 0x343
    27b0:	54007261 	strpl	r7, [r0], #-609	; 0x261
    27b4:	505f4d49 	subspl	r4, pc, r9, asr #26
    27b8:	65524353 	ldrbvs	r4, [r2, #-851]	; 0x353
    27bc:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    27c0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    27c4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    27c8:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    27cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    27d0:	5f4d4954 	svcpl	0x004d4954
    27d4:	50746547 	rsbspl	r6, r4, r7, asr #10
    27d8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    27dc:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    27e0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    27e4:	414d445f 	cmpmi	sp, pc, asr r4
    27e8:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    27ec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    27f0:	5444425f 	strbpl	r4, [r4], #-607	; 0x25f
    27f4:	696e4952 	stmdbvs	lr!, {r1, r4, r6, r8, fp, lr}^
    27f8:	70795474 	rsbsvc	r5, r9, r4, ror r4
    27fc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2800:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2804:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2808:	48746365 	ldmdami	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    280c:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    2810:	6f736e65 	svcvs	0x00736e65
    2814:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2818:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    281c:	6172656e 	cmnvs	r2, lr, ror #10
    2820:	76456574 			; <UNDEFINED> instruction: 0x76456574
    2824:	00746e65 	rsbseq	r6, r4, r5, ror #28
    2828:	5f4d4954 	svcpl	0x004d4954
    282c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2830:	72503243 	subsvc	r3, r0, #805306372	; 0x30000004
    2834:	61637365 	cmnvs	r3, r5, ror #6
    2838:	0072656c 	rsbseq	r6, r2, ip, ror #10
    283c:	5f4d4954 	svcpl	0x004d4954
    2840:	6f636e45 	svcvs	0x00636e45
    2844:	49726564 	ldmdbmi	r2!, {r2, r5, r6, r8, sl, sp, lr}^
    2848:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    284c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    2850:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2854:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2858:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    285c:	004e7843 	subeq	r7, lr, r3, asr #16
    2860:	5f4d4954 	svcpl	0x004d4954
    2864:	61657242 	cmnvs	r5, r2, asr #4
    2868:	4954006b 	ldmdbmi	r4, {r0, r1, r3, r5, r6}^
    286c:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2870:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0x578
    2874:	616e7265 	cmnvs	lr, r5, ror #4
    2878:	4b4c436c 	blmi	1313630 <__Stack_Size+0x1313230>
    287c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2880:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2884:	555f4d49 	ldrbpl	r4, [pc, #-3401]	; 1b43 <__Stack_Size+0x1743>
    2888:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
    288c:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
    2890:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    2894:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2898:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    289c:	555f4d49 	ldrbpl	r4, [pc, #-3401]	; 1b5b <__Stack_Size+0x175b>
    28a0:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
    28a4:	756f5365 	strbvc	r5, [pc, #-869]!	; 2547 <__Stack_Size+0x2147>
    28a8:	00656372 	rsbeq	r6, r5, r2, ror r3
    28ac:	5f4d4954 	svcpl	0x004d4954
    28b0:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    28b4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    28b8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    28bc:	33495400 	movtcc	r5, #37888	; 0x9400
    28c0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    28c4:	00676966 	rsbeq	r6, r7, r6, ror #18
    28c8:	5f4d4954 	svcpl	0x004d4954
    28cc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    28d0:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
    28d4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    28d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    28dc:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    28e0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    28e4:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 271c <__Stack_Size+0x231c>
    28e8:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0x170
    28ec:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    28f0:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    28f4:	4f726165 	svcmi	0x00726165
    28f8:	65523343 	ldrbvs	r3, [r2, #-835]	; 0x343
    28fc:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2900:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2904:	696e4934 	stmdbvs	lr!, {r2, r4, r5, r8, fp, lr}^
    2908:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    290c:	6f465f4d 	svcvs	0x00465f4d
    2910:	64656372 	strbtvs	r6, [r5], #-882	; 0x372
    2914:	4334434f 	teqmi	r4, #1006632961	; 0x3c000001
    2918:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    291c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2920:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    2924:	756f4374 	strbvc	r4, [pc, #-884]!	; 25b8 <__Stack_Size+0x21b8>
    2928:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    292c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2930:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    2934:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2938:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    293c:	78450074 	stmdavc	r5, {r2, r4, r5, r6}^
    2940:	47525474 			; <UNDEFINED> instruction: 0x47525474
    2944:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
    2948:	54007265 	strpl	r7, [r0], #-613	; 0x265
    294c:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2950:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2954:	616c5374 	smcvs	50484	; 0xc534
    2958:	6f4d6576 	svcvs	0x004d6576
    295c:	54006564 	strpl	r6, [r0], #-1380	; 0x564
    2960:	4f5f4d49 	svcmi	0x005f4d49
    2964:	61463143 	cmpvs	r6, r3, asr #2
    2968:	6f437473 	svcvs	0x00437473
    296c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2970:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2974:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    2978:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    297c:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2980:	4f5f4d49 	svcmi	0x005f4d49
    2984:	504e3143 	subpl	r3, lr, r3, asr #2
    2988:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    298c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2990:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2994:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2998:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    299c:	00435350 	subeq	r5, r3, r0, asr r3
    29a0:	5f4d4954 	svcpl	0x004d4954
    29a4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    29a8:	756f5374 	strbvc	r5, [pc, #-884]!	; 263c <__Stack_Size+0x223c>
    29ac:	00656372 	rsbeq	r6, r5, r2, ror r3
    29b0:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    29b4:	31726d63 	cmncc	r2, r3, ror #26
    29b8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    29bc:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
    29c0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    29c4:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    29c8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    29cc:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
    29d0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    29d4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
    29d8:	004d4f43 	subeq	r4, sp, r3, asr #30
    29dc:	5f4d4954 	svcpl	0x004d4954
    29e0:	72504343 	subsvc	r4, r0, #201326593	; 0xc000001
    29e4:	616f6c65 	cmnvs	pc, r5, ror #24
    29e8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    29ec:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 2824 <__Stack_Size+0x2424>
    29f0:	6f636900 	svcvs	0x00636900
    29f4:	736f7070 	cmnvc	pc, #112	; 0x70
    29f8:	73657469 	cmnvc	r5, #1761607680	; 0x69000000
    29fc:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2a00:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2a04:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a08:	746e495f 	strbtvc	r4, [lr], #-2399	; 0x95f
    2a0c:	616e7265 	cmnvs	lr, r5, ror #4
    2a10:	6f6c436c 	svcvs	0x006c436c
    2a14:	6f436b63 	svcvs	0x00436b63
    2a18:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a1c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2a24:	50314349 	eorspl	r4, r1, r9, asr #6
    2a28:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2a2c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2a30:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a34:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2a38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a3c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2a40:	50334349 	eorspl	r4, r3, r9, asr #6
    2a44:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2a48:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2a4c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a50:	5343495f 	movtpl	r4, #14687	; 0x395f
    2a54:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2a58:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2a5c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a60:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    2a64:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2a68:	646f4d6b 	strbtvs	r4, [pc], #-3435	; 2a70 <__Stack_Size+0x2670>
    2a6c:	6f433165 	svcvs	0x00433165
    2a70:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a74:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a78:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2a7c:	4f746365 	svcmi	0x00746365
    2a80:	7550656e 	ldrbvc	r6, [r0, #-1390]	; 0x56e
    2a84:	4d65736c 	stclmi	3, cr7, [r5, #-432]!	; 0xfffffe50
    2a88:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2a8c:	5f4d4954 	svcpl	0x004d4954
    2a90:	4f475254 	svcmi	0x00475254
    2a94:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2a98:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2a9c:	4f5f4d49 	svcmi	0x005f4d49
    2aa0:	53525353 	cmppl	r2, #1275068417	; 0x4c000001
    2aa4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    2aa8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2aac:	5043495f 	subpl	r4, r3, pc, asr r9
    2ab0:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2ab4:	00797469 	rsbseq	r7, r9, r9, ror #8
    2ab8:	5f4d4954 	svcpl	0x004d4954
    2abc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2ac0:	4f4d5750 	svcmi	0x004d5750
    2ac4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2ac8:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    2acc:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    2ad0:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    2ad4:	6c6f7065 	stclvs	0, cr7, [pc], #-404	; 2948 <__Stack_Size+0x2548>
    2ad8:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2adc:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2ae0:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xf4d
    2ae4:	6f435254 	svcvs	0x00435254
    2ae8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2aec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2af0:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2af4:	434f7261 	movtmi	r7, #62049	; 0xf261
    2af8:	66655232 			; <UNDEFINED> instruction: 0x66655232
    2afc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b00:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2b04:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0x845
    2b08:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    2b0c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2b10:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2b14:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b18:	5f4d4954 	svcpl	0x004d4954
    2b1c:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0x14d
    2b20:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    2b24:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    2b28:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2b2c:	5f4d4954 	svcpl	0x004d4954
    2b30:	6f747541 	svcvs	0x00747541
    2b34:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2b38:	74754f63 	ldrbtvc	r4, [r5], #-3939	; 0xf63
    2b3c:	00747570 	rsbseq	r7, r4, r0, ror r5
    2b40:	5f4d4954 	svcpl	0x004d4954
    2b44:	41746553 	cmnmi	r4, r3, asr r5
    2b48:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    2b4c:	616f6c65 	cmnvs	pc, r5, ror #24
    2b50:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    2b54:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    2b58:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    2b5c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b60:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2b64:	4f646563 	svcmi	0x00646563
    2b68:	6f433143 	svcvs	0x00433143
    2b6c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b70:	34495400 	strbcc	r5, [r9], #-1024	; 0x400
    2b74:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    2b78:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b7c:	5f4d4954 	svcpl	0x004d4954
    2b80:	64616544 	strbtvs	r6, [r1], #-1348	; 0x544
    2b84:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2b88:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b8c:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2b90:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 2a60 <__Stack_Size+0x2660>
    2b94:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2b98:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2b9c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2ba0:	5f4d4954 	svcpl	0x004d4954
    2ba4:	4e32434f 	cdpmi	3, 3, cr4, cr2, cr15, {2}
    2ba8:	616c6f50 	cmnvs	ip, r0, asr pc
    2bac:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2bb0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2bb4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2bb8:	4f5f4d49 	svcmi	0x005f4d49
    2bbc:	6f503443 	svcvs	0x00503443
    2bc0:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2bc4:	6f437974 	svcvs	0x00437974
    2bc8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2bcc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bd0:	5444425f 	strbpl	r4, [r4], #-607	; 0x25f
    2bd4:	72745352 	rsbsvc	r5, r4, #1207959553	; 0x48000001
    2bd8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2bdc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2be0:	5f4d4954 	svcpl	0x004d4954
    2be4:	61656c43 	cmnvs	r5, r3, asr #24
    2be8:	31434f72 	hvccc	13554	; 0x34f2
    2bec:	00666552 	rsbeq	r6, r6, r2, asr r5
    2bf0:	5f4d4954 	svcpl	0x004d4954
    2bf4:	5033434f 	eorspl	r4, r3, pc, asr #6
    2bf8:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2bfc:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2c00:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c04:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c08:	78455f4d 	stmdavc	r5, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2c0c:	47525474 			; <UNDEFINED> instruction: 0x47525474
    2c10:	616c6f50 	cmnvs	ip, r0, asr pc
    2c14:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2c18:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c1c:	4d57505f 	ldclmi	0, cr5, [r7, #-380]	; 0xfffffe84
    2c20:	6e6f4349 	cdpvs	3, 6, cr4, cr15, cr9, {2}
    2c24:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c28:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    2c2c:	54003272 	strpl	r3, [r0], #-626	; 0x272
    2c30:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2c34:	49540054 	ldmdbmi	r4, {r2, r4, r6}^
    2c38:	6f465f4d 	svcvs	0x00465f4d
    2c3c:	64656372 	strbtvs	r6, [r5], #-882	; 0x372
    2c40:	4333434f 	teqmi	r3, #1006632961	; 0x3c000001
    2c44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c48:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c4c:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2c50:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2c54:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c58:	4643495f 			; <UNDEFINED> instruction: 0x4643495f
    2c5c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    2c60:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2c64:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    2c68:	756f5341 	strbvc	r5, [pc, #-833]!	; 292f <__Stack_Size+0x252f>
    2c6c:	00656372 	rsbeq	r6, r5, r2, ror r3
    2c70:	5f4d4954 	svcpl	0x004d4954
    2c74:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
    2c78:	614d7463 	cmpvs	sp, r3, ror #8
    2c7c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2c80:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2c84:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2c8c <__Stack_Size+0x288c>
    2c88:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2c8c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2c90:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
    2c94:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
    2c98:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2c9c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2ca0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ca4:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2ca8:	616c6f50 	cmnvs	ip, r0, asr pc
    2cac:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2cb0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2cb4:	69006769 	stmdbvs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2cb8:	6765746e 	strbvs	r7, [r5, -lr, ror #8]!
    2cbc:	69647265 	stmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2cc0:	65646976 	strbvs	r6, [r4, #-2422]!	; 0x976
    2cc4:	53550072 	cmppl	r5, #114	; 0x72
    2cc8:	5f545241 	svcpl	0x00545241
    2ccc:	41485043 	cmpmi	r8, r3, asr #32
    2cd0:	41535500 	cmpmi	r3, r0, lsl #10
    2cd4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2cd8:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    2cdc:	61637365 	cmnvs	r3, r5, ror #6
    2ce0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2ce4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ce8:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2cec:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0x24e
    2cf0:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xb61
    2cf4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    2cf8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2cfc:	55006874 	strpl	r6, [r0, #-2164]	; 0x874
    2d00:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2d04:	6f6c435f 	svcvs	0x006c435f
    2d08:	6e496b63 	vmlsvs.f64	d22, d9, d19
    2d0c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2d10:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2d14:	53550066 	cmppl	r5, #102	; 0x66
    2d18:	5f545241 	svcpl	0x00545241
    2d1c:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    2d20:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    2d24:	6d437865 	stclvs	8, cr7, [r3, #-404]	; 0xfffffe6c
    2d28:	53550064 	cmppl	r5, #100	; 0x64
    2d2c:	5f545241 	svcpl	0x00545241
    2d30:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    2d34:	55007055 	strpl	r7, [r0, #-85]	; 0x55
    2d38:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2d3c:	414d445f 	cmpmi	sp, pc, asr r4
    2d40:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2d44:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d48:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    2d4c:	41535500 	cmpmi	r3, r0, lsl #10
    2d50:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2d54:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
    2d58:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2d5c:	63627061 	cmnvs	r2, #97	; 0x61
    2d60:	6b636f6c 	blvs	18deb18 <__Stack_Size+0x18de718>
    2d64:	41535500 	cmpmi	r3, r0, lsl #10
    2d68:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2d6c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2d70:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    2d74:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2d78:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    2d7c:	41535500 	cmpmi	r3, r0, lsl #10
    2d80:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    2d84:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    2d88:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2d8c:	41535500 	cmpmi	r3, r0, lsl #10
    2d90:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    2d94:	72424e49 	subvc	r4, r2, #1168	; 0x490
    2d98:	446b6165 	strbtmi	r6, [fp], #-357	; 0x165
    2d9c:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    2da0:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2da4:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    2da8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2dac:	53550067 	cmppl	r5, #103	; 0x67
    2db0:	5f545241 	svcpl	0x00545241
    2db4:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    2db8:	41535500 	cmpmi	r3, r0, lsl #10
    2dbc:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2dc0:	6b636f6c 	blvs	18deb78 <__Stack_Size+0x18de778>
    2dc4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2dc8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2dcc:	55007463 	strpl	r7, [r0, #-1123]	; 0x463
    2dd0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2dd4:	414d445f 	cmpmi	sp, pc, asr r4
    2dd8:	00716552 	rsbseq	r6, r1, r2, asr r5
    2ddc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2de0:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2de4:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2de8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2dec:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2df0:	73750074 	cmnvc	r5, #116	; 0x74
    2df4:	78747261 	ldmdavc	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2df8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
    2dfc:	43435200 	movtmi	r5, #12800	; 0x3200
    2e00:	6f6c435f 	svcvs	0x006c435f
    2e04:	53736b63 	cmnpl	r3, #101376	; 0x18c00
    2e08:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2e0c:	53550073 	cmppl	r5, #115	; 0x73
    2e10:	5f545241 	svcpl	0x00545241
    2e14:	41746553 	cmnmi	r4, r3, asr r5
    2e18:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    2e1c:	55007373 	strpl	r7, [r0, #-883]	; 0x373
    2e20:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e24:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2e28:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    2e2c:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    2e30:	53550065 	cmppl	r5, #101	; 0x65
    2e34:	5f545241 	svcpl	0x00545241
    2e38:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    2e3c:	61657242 	cmnvs	r5, r2, asr #4
    2e40:	5355006b 	cmppl	r5, #107	; 0x6b
    2e44:	78545241 	ldmdavc	r4, {r0, r6, r9, ip, lr}^
    2e48:	41535500 	cmpmi	r3, r0, lsl #10
    2e4c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2e50:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2e54:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2e58:	53550074 	cmppl	r5, #116	; 0x74
    2e5c:	5f545241 	svcpl	0x00545241
    2e60:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2e64:	00737365 	rsbseq	r7, r3, r5, ror #6
    2e68:	70746962 	rsbsvc	r6, r4, r2, ror #18
    2e6c:	5500736f 	strpl	r7, [r0, #-879]	; 0x36f
    2e70:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e74:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2e78:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    2e7c:	55006761 	strpl	r6, [r0, #-1889]	; 0x761
    2e80:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e84:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    2e88:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    2e8c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2e90:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e94:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2e98:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2e9c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ea0:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xf54
    2ea4:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    2ea8:	61577265 	cmpvs	r7, r5, ror #4
    2eac:	7055656b 	subsvc	r6, r5, fp, ror #10
    2eb0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2eb4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2eb8:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    2ebc:	6d434144 	stfvse	f4, [r3, #-272]	; 0xfffffef0
    2ec0:	53550064 	cmppl	r5, #100	; 0x64
    2ec4:	5f545241 	svcpl	0x00545241
    2ec8:	434e494c 	movtmi	r4, #59724	; 0xe94c
    2ecc:	6600646d 	strvs	r6, [r0], -sp, ror #8
    2ed0:	74636172 	strbtvc	r6, [r3], #-370	; 0x172
    2ed4:	616e6f69 	cmnvs	lr, r9, ror #30
    2ed8:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    2edc:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    2ee0:	41535500 	cmpmi	r3, r0, lsl #10
    2ee4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ee8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0x16d
    2eec:	64726143 	ldrbtvs	r6, [r2], #-323	; 0x143
    2ef0:	4b43414e 	blmi	10d3430 <__Stack_Size+0x10d3030>
    2ef4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2ef8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2efc:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    2f00:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2f04:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    2f08:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2f0c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f10:	6f6c435f 	svcvs	0x006c435f
    2f14:	6e496b63 	vmlsvs.f64	d22, d9, d19
    2f18:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    2f1c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f20:	6b61575f 	blvs	1858ca4 <__Stack_Size+0x18588a4>
    2f24:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2f28:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2f2c:	53550067 	cmppl	r5, #103	; 0x67
    2f30:	5f545241 	svcpl	0x00545241
    2f34:	73657250 	cmnvc	r5, #80, 4
    2f38:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    2f3c:	53550072 	cmppl	r5, #114	; 0x72
    2f40:	5f545241 	svcpl	0x00545241
    2f44:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    2f48:	6d746900 	ldclvs	9, cr6, [r4, #-0]
    2f4c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    2f50:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f54:	614c5f54 	cmpvs	ip, r4, asr pc
    2f58:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2f5c:	74730074 	ldrbtvc	r0, [r3], #-116	; 0x74
    2f60:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2f64:	5f783031 	svcpl	0x00783031
    2f68:	2f62696c 	svccs	0x0062696c
    2f6c:	2f637273 	svccs	0x00637273
    2f70:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2f74:	30316632 	eorscc	r6, r1, r2, lsr r6
    2f78:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    2f7c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    2f80:	73750063 	cmnvc	r5, #99	; 0x63
    2f84:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    2f88:	5f006765 	svcpl	0x00006765
    2f8c:	61747365 	cmnvs	r4, r5, ror #6
    2f90:	5f006b63 	svcpl	0x00006b63
    2f94:	74616473 	strbtvc	r6, [r1], #-1139	; 0x473
    2f98:	65520061 	ldrbvs	r0, [r2, #-97]	; 0x61
    2f9c:	5f746573 	svcpl	0x00746573
    2fa0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    2fa4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2fa8:	446c7570 	strbtmi	r7, [ip], #-1392	; 0x570
    2fac:	00747365 	rsbseq	r7, r4, r5, ror #6
    2fb0:	6469735f 	strbtvs	r7, [r9], #-863	; 0x35f
    2fb4:	00617461 	rsbeq	r7, r1, r1, ror #8
    2fb8:	7362655f 	cmnvc	r2, #398458880	; 0x17c00000
    2fbc:	655f0073 	ldrbvs	r0, [pc, #-115]	; 2f51 <__Stack_Size+0x2b51>
    2fc0:	61746164 	cmnvs	r4, r4, ror #2
    2fc4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2fc8:	31663233 	cmncc	r6, r3, lsr r2
    2fcc:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    2fd0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2fd4:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2fd8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2fdc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2fe0:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
    2fe4:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
    2fe8:	5f670063 	svcpl	0x00670063
    2fec:	566e6670 			; <UNDEFINED> instruction: 0x566e6670
    2ff0:	6f746365 	svcvs	0x00746365
    2ff4:	70007372 	andvc	r7, r0, r2, ror r3
    2ff8:	72536c75 	subsvc	r6, r3, #29952	; 0x7500
    2ffc:	735f0063 	cmpvc	pc, #99	; 0x63
    3000:	00737362 	rsbseq	r7, r3, r2, ror #6

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
       4:	0800313d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, ip, sp}
       8:	3d500001 	ldclcc	0, cr0, [r0, #-4]
       c:	48080031 	stmdami	r8, {r0, r4, r5}
      10:	04080031 	streq	r0, [r8], #-49	; 0x31
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
      20:	00313400 	eorseq	r3, r1, r0, lsl #8
      24:	00313a08 	eorseq	r3, r1, r8, lsl #20
      28:	51000108 	tstpl	r0, r8, lsl #2
      2c:	0800313a 	stmdaeq	r0, {r1, r3, r4, r5, r8, ip, sp}
      30:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
      34:	44540001 	ldrbmi	r0, [r4], #-1
      38:	48080031 	stmdami	r8, {r0, r4, r5}
      3c:	04080031 	streq	r0, [r8], #-49	; 0x31
      40:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      48:	00000000 	andeq	r0, r0, r0
      4c:	00314800 	eorseq	r4, r1, r0, lsl #16
      50:	00315108 	eorseq	r5, r1, r8, lsl #2
      54:	50000108 	andpl	r0, r0, r8, lsl #2
      58:	08003151 	stmdaeq	r0, {r0, r4, r6, r8, ip, sp}
      5c:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
      60:	01f30004 	mvnseq	r0, r4
      64:	00009f50 	andeq	r9, r0, r0, asr pc
      68:	00000000 	andeq	r0, r0, r0
      6c:	31480000 	mrscc	r0, (UNDEF: 72)
      70:	314e0800 	cmpcc	lr, r0, lsl #16
      74:	00010800 	andeq	r0, r1, r0, lsl #16
      78:	00314e51 	eorseq	r4, r1, r1, asr lr
      7c:	00315808 	eorseq	r5, r1, r8, lsl #16
      80:	54000108 	strpl	r0, [r0], #-264	; 0x108
      84:	08003158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp}
      88:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
      8c:	01f30004 	mvnseq	r0, r4
      90:	00009f51 	andeq	r9, r0, r1, asr pc
      94:	00000000 	andeq	r0, r0, r0
      98:	31720000 	cmncc	r2, r0
      9c:	31740800 	cmncc	r4, r0, lsl #16
      a0:	00010800 	andeq	r0, r1, r0, lsl #16
      a4:	00319050 	eorseq	r9, r1, r0, asr r0
      a8:	00319208 	eorseq	r9, r1, r8, lsl #4
      ac:	50000108 	andpl	r0, r0, r8, lsl #2
	...
      b8:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
      bc:	080032ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip, sp}
      c0:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
      c4:	28080032 	stmdacs	r8, {r1, r4, r5}
      c8:	04080033 	streq	r0, [r8], #-51	; 0x33
      cc:	5001f300 	andpl	pc, r1, r0, lsl #6
      d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      d4:	00000000 	andeq	r0, r0, r0
      d8:	00334800 	eorseq	r4, r3, r0, lsl #16
      dc:	00334e08 	eorseq	r4, r3, r8, lsl #28
      e0:	50000108 	andpl	r0, r0, r8, lsl #2
      e4:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
      e8:	08003364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp}
      ec:	01f30004 	mvnseq	r0, r4
      f0:	00009f50 	andeq	r9, r0, r0, asr pc
      f4:	00000000 	andeq	r0, r0, r0
      f8:	33640000 	cmncc	r4, #0
      fc:	33680800 	cmncc	r8, #0, 16
     100:	00010800 	andeq	r0, r1, r0, lsl #16
     104:	00336850 	eorseq	r6, r3, r0, asr r8
     108:	00336c08 	eorseq	r6, r3, r8, lsl #24
     10c:	74000308 	strvc	r0, [r0], #-776	; 0x308
     110:	336c9f01 	cmncc	ip, #1, 30
     114:	336e0800 	cmncc	lr, #0, 16
     118:	00010800 	andeq	r0, r1, r0, lsl #16
     11c:	00336e54 	eorseq	r6, r3, r4, asr lr
     120:	00337408 	eorseq	r7, r3, r8, lsl #8
     124:	74000308 	strvc	r0, [r0], #-776	; 0x308
     128:	33749f01 	cmncc	r4, #1, 30
     12c:	33760800 	cmncc	r6, #0, 16
     130:	00010800 	andeq	r0, r1, r0, lsl #16
     134:	00000054 	andeq	r0, r0, r4, asr r0
     138:	00000000 	andeq	r0, r0, r0
     13c:	00337600 	eorseq	r7, r3, r0, lsl #12
     140:	00338108 	eorseq	r8, r3, r8, lsl #2
     144:	50000108 	andpl	r0, r0, r8, lsl #2
     148:	08003381 	stmdaeq	r0, {r0, r7, r8, r9, ip, sp}
     14c:	080033a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, sp}
     150:	01f30004 	mvnseq	r0, r4
     154:	00009f50 	andeq	r9, r0, r0, asr pc
     158:	00000000 	andeq	r0, r0, r0
     15c:	33a40000 			; <UNDEFINED> instruction: 0x33a40000
     160:	33af0800 			; <UNDEFINED> instruction: 0x33af0800
     164:	00010800 	andeq	r0, r1, r0, lsl #16
     168:	0033af50 	eorseq	sl, r3, r0, asr pc
     16c:	0033d408 	eorseq	sp, r3, r8, lsl #8
     170:	f3000408 	vshl.u8	d0, d8, d0
     174:	009f5001 	addseq	r5, pc, r1
     178:	00000000 	andeq	r0, r0, r0
     17c:	d4000000 	strle	r0, [r0], #-0
     180:	d6080033 			; <UNDEFINED> instruction: 0xd6080033
     184:	01080033 	tsteq	r8, r3, lsr r0
     188:	33d65000 	bicscc	r5, r6, #0
     18c:	33e60800 	mvncc	r0, #0, 16
     190:	00030800 	andeq	r0, r3, r0, lsl #16
     194:	e69f0270 			; <UNDEFINED> instruction: 0xe69f0270
     198:	20080033 	andcs	r0, r8, r3, lsr r0
     19c:	04080034 	streq	r0, [r8], #-52	; 0x34
     1a0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1a8:	00000000 	andeq	r0, r0, r0
     1ac:	0034b400 	eorseq	fp, r4, r0, lsl #8
     1b0:	0034be08 	eorseq	fp, r4, r8, lsl #28
     1b4:	50000108 	andpl	r0, r0, r8, lsl #2
     1b8:	080034be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip, sp}
     1bc:	080034e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip, sp}
     1c0:	01f30004 	mvnseq	r0, r4
     1c4:	00009f50 	andeq	r9, r0, r0, asr pc
     1c8:	00000000 	andeq	r0, r0, r0
     1cc:	34be0000 	ldrtcc	r0, [lr], #0
     1d0:	34cd0800 	strbcc	r0, [sp], #2048	; 0x800
     1d4:	00010800 	andeq	r0, r1, r0, lsl #16
     1d8:	0034d250 	eorseq	sp, r4, r0, asr r2
     1dc:	0034e108 	eorseq	lr, r4, r8, lsl #2
     1e0:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     1ec:	080034e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip, sp}
     1f0:	080034e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, sp}
     1f4:	e8500001 	ldmda	r0, {r0}^
     1f8:	f6080034 			; <UNDEFINED> instruction: 0xf6080034
     1fc:	04080034 	streq	r0, [r8], #-52	; 0x34
     200:	5001f300 	andpl	pc, r1, r0, lsl #6
     204:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     208:	00000000 	andeq	r0, r0, r0
     20c:	0034f600 	eorseq	pc, r4, r0, lsl #12
     210:	00350508 	eorseq	r0, r5, r8, lsl #10
     214:	50000108 	andpl	r0, r0, r8, lsl #2
     218:	08003505 	stmdaeq	r0, {r0, r2, r8, sl, ip, sp}
     21c:	08003530 	stmdaeq	r0, {r4, r5, r8, sl, ip, sp}
     220:	01f30004 	mvnseq	r0, r4
     224:	00009f50 	andeq	r9, r0, r0, asr pc
     228:	00000000 	andeq	r0, r0, r0
     22c:	34f60000 	ldrbtcc	r0, [r6], #0
     230:	35020800 	strcc	r0, [r2, #-2048]	; 0x800
     234:	00010800 	andeq	r0, r1, r0, lsl #16
     238:	00350251 	eorseq	r0, r5, r1, asr r2
     23c:	00353008 	eorseq	r3, r5, r8
     240:	f3000408 	vshl.u8	d0, d8, d0
     244:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     250:	05080035 	streq	r0, [r8, #-53]	; 0x35
     254:	01080035 	tsteq	r8, r5, lsr r0
     258:	35055200 	strcc	r5, [r5, #-512]	; 0x200
     25c:	35300800 	ldrcc	r0, [r0, #-2048]!	; 0x800
     260:	00150800 	andseq	r0, r5, r0, lsl #16
     264:	f304000a 	vhadd.u8	d0, d4, d10
     268:	f31c5101 	vrhadd.u16	d5, d12, d1
     26c:	01f35101 	mvnseq	r5, r1, lsl #2
     270:	282d3051 	stmdacs	sp!, {r0, r4, r6, ip, sp}
     274:	13160001 	tstne	r6, #1
     278:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     27c:	00000000 	andeq	r0, r0, r0
     280:	00350e00 	eorseq	r0, r5, r0, lsl #28
     284:	00351208 	eorseq	r1, r5, r8, lsl #4
     288:	50000108 	andpl	r0, r0, r8, lsl #2
     28c:	08003512 	stmdaeq	r0, {r1, r4, r8, sl, ip, sp}
     290:	08003520 	stmdaeq	r0, {r5, r8, sl, ip, sp}
     294:	26540001 	ldrbcs	r0, [r4], -r1
     298:	30080035 	andcc	r0, r8, r5, lsr r0
     29c:	01080035 	tsteq	r8, r5, lsr r0
     2a0:	00005000 	andeq	r5, r0, r0
     2a4:	00000000 	andeq	r0, r0, r0
     2a8:	35300000 	ldrcc	r0, [r0, #-0]!
     2ac:	353b0800 	ldrcc	r0, [fp, #-2048]!	; 0x800
     2b0:	00010800 	andeq	r0, r1, r0, lsl #16
     2b4:	00353b50 	eorseq	r3, r5, r0, asr fp
     2b8:	00357808 	eorseq	r7, r5, r8, lsl #16
     2bc:	f3000408 	vshl.u8	d0, d8, d0
     2c0:	009f5001 	addseq	r5, pc, r1
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	30000000 	andcc	r0, r0, r0
     2cc:	38080035 	stmdacc	r8, {r0, r2, r4, r5}
     2d0:	01080035 	tsteq	r8, r5, lsr r0
     2d4:	35385100 	ldrcc	r5, [r8, #-256]!	; 0x100
     2d8:	35440800 	strbcc	r0, [r4, #-2048]	; 0x800
     2dc:	00010800 	andeq	r0, r1, r0, lsl #16
     2e0:	00354454 	eorseq	r4, r5, r4, asr r4
     2e4:	00357808 	eorseq	r7, r5, r8, lsl #16
     2e8:	f3000408 	vshl.u8	d0, d8, d0
     2ec:	009f5101 	addseq	r5, pc, r1, lsl #2
     2f0:	00000000 	andeq	r0, r0, r0
     2f4:	30000000 	andcc	r0, r0, r0
     2f8:	3b080035 	blcc	2003d4 <__Stack_Size+0x1fffd4>
     2fc:	01080035 	tsteq	r8, r5, lsr r0
     300:	353b5200 	ldrcc	r5, [fp, #-512]!	; 0x200
     304:	35780800 	ldrbcc	r0, [r8, #-2048]!	; 0x800
     308:	00040800 	andeq	r0, r4, r0, lsl #16
     30c:	9f5201f3 	svcls	0x005201f3
	...
     318:	08003544 	stmdaeq	r0, {r2, r6, r8, sl, ip, sp}
     31c:	08003556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, ip, sp}
     320:	56540001 	ldrbpl	r0, [r4], -r1
     324:	78080035 	stmdavc	r8, {r0, r2, r4, r5}
     328:	14080035 	strne	r0, [r8], #-53	; 0x35
     32c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     330:	f3088023 	vhadd.u8	d8, d8, d19
     334:	01f35101 	mvnseq	r5, r1, lsl #2
     338:	282d3051 	stmdacs	sp!, {r0, r4, r6, ip, sp}
     33c:	13160001 	tstne	r6, #1
     340:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     344:	00000000 	andeq	r0, r0, r0
     348:	00355600 	eorseq	r5, r5, r0, lsl #12
     34c:	00355a08 	eorseq	r5, r5, r8, lsl #20
     350:	50000108 	andpl	r0, r0, r8, lsl #2
     354:	0800355a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip, sp}
     358:	08003568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, sp}
     35c:	6e540001 	cdpvs	0, 5, cr0, cr4, cr1, {0}
     360:	78080035 	stmdavc	r8, {r0, r2, r4, r5}
     364:	01080035 	tsteq	r8, r5, lsr r0
     368:	00005000 	andeq	r5, r0, r0
     36c:	00000000 	andeq	r0, r0, r0
     370:	35780000 	ldrbcc	r0, [r8, #-0]!
     374:	35810800 	strcc	r0, [r1, #2048]	; 0x800
     378:	00010800 	andeq	r0, r1, r0, lsl #16
     37c:	00358150 	eorseq	r8, r5, r0, asr r1
     380:	0035ac08 	eorseq	sl, r5, r8, lsl #24
     384:	f3000408 	vshl.u8	d0, d8, d0
     388:	009f5001 	addseq	r5, pc, r1
     38c:	00000000 	andeq	r0, r0, r0
     390:	8a000000 	bhi	398 <_Minimum_Stack_Size+0x298>
     394:	8e080035 	mcrhi	0, 0, r0, cr8, cr5, {1}
     398:	01080035 	tsteq	r8, r5, lsr r0
     39c:	358e5000 	strcc	r5, [lr]
     3a0:	359c0800 	ldrcc	r0, [ip, #2048]	; 0x800
     3a4:	00010800 	andeq	r0, r1, r0, lsl #16
     3a8:	0035a254 	eorseq	sl, r5, r4, asr r2
     3ac:	0035ac08 	eorseq	sl, r5, r8, lsl #24
     3b0:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     3bc:	080035ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, sp}
     3c0:	080035b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, ip, sp}
     3c4:	b5500001 	ldrblt	r0, [r0, #-1]
     3c8:	e0080035 	and	r0, r8, r5, lsr r0
     3cc:	04080035 	streq	r0, [r8], #-53	; 0x35
     3d0:	5001f300 	andpl	pc, r1, r0, lsl #6
     3d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	0035be00 	eorseq	fp, r5, r0, lsl #28
     3e0:	0035c208 	eorseq	ip, r5, r8, lsl #4
     3e4:	50000108 	andpl	r0, r0, r8, lsl #2
     3e8:	080035c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, sp}
     3ec:	080035d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip, sp}
     3f0:	d6540001 	ldrble	r0, [r4], -r1
     3f4:	e0080035 	and	r0, r8, r5, lsr r0
     3f8:	01080035 	tsteq	r8, r5, lsr r0
     3fc:	00005000 	andeq	r5, r0, r0
     400:	00000000 	andeq	r0, r0, r0
     404:	35e00000 	strbcc	r0, [r0, #0]!
     408:	35e90800 	strbcc	r0, [r9, #2048]!	; 0x800
     40c:	00010800 	andeq	r0, r1, r0, lsl #16
     410:	0035e950 	eorseq	lr, r5, r0, asr r9
     414:	00361808 	eorseq	r1, r6, r8, lsl #16
     418:	f3000408 	vshl.u8	d0, d8, d0
     41c:	009f5001 	addseq	r5, pc, r1
     420:	00000000 	andeq	r0, r0, r0
     424:	e0000000 	and	r0, r0, r0
     428:	e6080035 			; <UNDEFINED> instruction: 0xe6080035
     42c:	01080035 	tsteq	r8, r5, lsr r0
     430:	35e65100 	strbcc	r5, [r6, #256]!	; 0x100
     434:	35f40800 	ldrbcc	r0, [r4, #2048]!	; 0x800
     438:	00010800 	andeq	r0, r1, r0, lsl #16
     43c:	0035f454 	eorseq	pc, r5, r4, asr r4	; <UNPREDICTABLE>
     440:	00361808 	eorseq	r1, r6, r8, lsl #16
     444:	f3000408 	vshl.u8	d0, d8, d0
     448:	009f5101 	addseq	r5, pc, r1, lsl #2
     44c:	00000000 	andeq	r0, r0, r0
     450:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     454:	f8080035 			; <UNDEFINED> instruction: 0xf8080035
     458:	01080035 	tsteq	r8, r5, lsr r0
     45c:	35f85000 	ldrbcc	r5, [r8, #0]!
     460:	36060800 	strcc	r0, [r6], -r0, lsl #16
     464:	00010800 	andeq	r0, r1, r0, lsl #16
     468:	00360c54 	eorseq	r0, r6, r4, asr ip
     46c:	00361808 	eorseq	r1, r6, r8, lsl #16
     470:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     47c:	08003618 	stmdaeq	r0, {r3, r4, r9, sl, ip, sp}
     480:	08003621 	stmdaeq	r0, {r0, r5, r9, sl, ip, sp}
     484:	21500001 	cmpcs	r0, r1
     488:	50080036 	andpl	r0, r8, r6, lsr r0
     48c:	04080036 	streq	r0, [r8], #-54	; 0x36
     490:	5001f300 	andpl	pc, r1, r0, lsl #6
     494:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     498:	00000000 	andeq	r0, r0, r0
     49c:	00361800 	eorseq	r1, r6, r0, lsl #16
     4a0:	00361e08 	eorseq	r1, r6, r8, lsl #28
     4a4:	51000108 	tstpl	r0, r8, lsl #2
     4a8:	0800361e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, ip, sp}
     4ac:	0800362c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, sp}
     4b0:	2c540001 	mrrccs	0, 0, r0, r4, cr1
     4b4:	50080036 	andpl	r0, r8, r6, lsr r0
     4b8:	04080036 	streq	r0, [r8], #-54	; 0x36
     4bc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     4c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	00362c00 	eorseq	r2, r6, r0, lsl #24
     4cc:	00363008 	eorseq	r3, r6, r8
     4d0:	50000108 	andpl	r0, r0, r8, lsl #2
     4d4:	08003630 	stmdaeq	r0, {r4, r5, r9, sl, ip, sp}
     4d8:	0800363e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, ip, sp}
     4dc:	44540001 	ldrbmi	r0, [r4], #-1
     4e0:	50080036 	andpl	r0, r8, r6, lsr r0
     4e4:	01080036 	tsteq	r8, r6, lsr r0
     4e8:	00005000 	andeq	r5, r0, r0
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	36500000 	ldrbcc	r0, [r0], -r0
     4f4:	36590800 	ldrbcc	r0, [r9], -r0, lsl #16
     4f8:	00010800 	andeq	r0, r1, r0, lsl #16
     4fc:	00365950 	eorseq	r5, r6, r0, asr r9
     500:	00368808 	eorseq	r8, r6, r8, lsl #16
     504:	f3000408 	vshl.u8	d0, d8, d0
     508:	009f5001 	addseq	r5, pc, r1
     50c:	00000000 	andeq	r0, r0, r0
     510:	50000000 	andpl	r0, r0, r0
     514:	56080036 			; <UNDEFINED> instruction: 0x56080036
     518:	01080036 	tsteq	r8, r6, lsr r0
     51c:	36565100 	ldrbcc	r5, [r6], -r0, lsl #2
     520:	36640800 	strbtcc	r0, [r4], -r0, lsl #16
     524:	00010800 	andeq	r0, r1, r0, lsl #16
     528:	00366454 	eorseq	r6, r6, r4, asr r4
     52c:	00368808 	eorseq	r8, r6, r8, lsl #16
     530:	f3000408 	vshl.u8	d0, d8, d0
     534:	009f5101 	addseq	r5, pc, r1, lsl #2
     538:	00000000 	andeq	r0, r0, r0
     53c:	64000000 	strvs	r0, [r0], #-0
     540:	68080036 	stmdavs	r8, {r1, r2, r4, r5}
     544:	01080036 	tsteq	r8, r6, lsr r0
     548:	36685000 	strbtcc	r5, [r8], -r0
     54c:	36760800 	ldrbtcc	r0, [r6], -r0, lsl #16
     550:	00010800 	andeq	r0, r1, r0, lsl #16
     554:	00367c54 	eorseq	r7, r6, r4, asr ip
     558:	00368808 	eorseq	r8, r6, r8, lsl #16
     55c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     568:	08003688 	stmdaeq	r0, {r3, r7, r9, sl, ip, sp}
     56c:	08003691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp}
     570:	91500001 	cmpls	r0, r1
     574:	c0080036 	andgt	r0, r8, r6, lsr r0
     578:	04080036 	streq	r0, [r8], #-54	; 0x36
     57c:	5001f300 	andpl	pc, r1, r0, lsl #6
     580:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     584:	00000000 	andeq	r0, r0, r0
     588:	00368800 	eorseq	r8, r6, r0, lsl #16
     58c:	00368e08 	eorseq	r8, r6, r8, lsl #28
     590:	51000108 	tstpl	r0, r8, lsl #2
     594:	0800368e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, ip, sp}
     598:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     59c:	9c540001 	mrrcls	0, 0, r0, r4, cr1
     5a0:	c0080036 	andgt	r0, r8, r6, lsr r0
     5a4:	04080036 	streq	r0, [r8], #-54	; 0x36
     5a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     5ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	00369c00 	eorseq	r9, r6, r0, lsl #24
     5b8:	0036a008 	eorseq	sl, r6, r8
     5bc:	50000108 	andpl	r0, r0, r8, lsl #2
     5c0:	080036a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp}
     5c4:	080036ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip, sp}
     5c8:	b4540001 	ldrblt	r0, [r4], #-1
     5cc:	c0080036 	andgt	r0, r8, r6, lsr r0
     5d0:	01080036 	tsteq	r8, r6, lsr r0
     5d4:	00005000 	andeq	r5, r0, r0
     5d8:	00000000 	andeq	r0, r0, r0
     5dc:	36c00000 	strbcc	r0, [r0], r0
     5e0:	36c90800 	strbcc	r0, [r9], r0, lsl #16
     5e4:	00010800 	andeq	r0, r1, r0, lsl #16
     5e8:	0036c950 	eorseq	ip, r6, r0, asr r9
     5ec:	0036f808 	eorseq	pc, r6, r8, lsl #16
     5f0:	f3000408 	vshl.u8	d0, d8, d0
     5f4:	009f5001 	addseq	r5, pc, r1
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	c0000000 	andgt	r0, r0, r0
     600:	c6080036 			; <UNDEFINED> instruction: 0xc6080036
     604:	01080036 	tsteq	r8, r6, lsr r0
     608:	36c65100 	strbcc	r5, [r6], r0, lsl #2
     60c:	36d40800 	ldrbcc	r0, [r4], r0, lsl #16
     610:	00010800 	andeq	r0, r1, r0, lsl #16
     614:	0036d454 	eorseq	sp, r6, r4, asr r4
     618:	0036f808 	eorseq	pc, r6, r8, lsl #16
     61c:	f3000408 	vshl.u8	d0, d8, d0
     620:	009f5101 	addseq	r5, pc, r1, lsl #2
     624:	00000000 	andeq	r0, r0, r0
     628:	d4000000 	strle	r0, [r0], #-0
     62c:	d8080036 	stmdale	r8, {r1, r2, r4, r5}
     630:	01080036 	tsteq	r8, r6, lsr r0
     634:	36d85000 	ldrbcc	r5, [r8], r0
     638:	36e60800 	strbtcc	r0, [r6], r0, lsl #16
     63c:	00010800 	andeq	r0, r1, r0, lsl #16
     640:	0036ec54 	eorseq	lr, r6, r4, asr ip
     644:	0036f808 	eorseq	pc, r6, r8, lsl #16
     648:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     654:	080036f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip, sp}
     658:	08003701 	stmdaeq	r0, {r0, r8, r9, sl, ip, sp}
     65c:	01500001 	cmpeq	r0, r1
     660:	30080037 	andcc	r0, r8, r7, lsr r0
     664:	04080037 	streq	r0, [r8], #-55	; 0x37
     668:	5001f300 	andpl	pc, r1, r0, lsl #6
     66c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     670:	00000000 	andeq	r0, r0, r0
     674:	0036f800 	eorseq	pc, r6, r0, lsl #16
     678:	0036fe08 	eorseq	pc, r6, r8, lsl #28
     67c:	51000108 	tstpl	r0, r8, lsl #2
     680:	080036fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, sp}
     684:	0800370c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp}
     688:	0c540001 	mrrceq	0, 0, r0, r4, cr1
     68c:	30080037 	andcc	r0, r8, r7, lsr r0
     690:	04080037 	streq	r0, [r8], #-55	; 0x37
     694:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     698:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	00370c00 	eorseq	r0, r7, r0, lsl #24
     6a4:	00371008 	eorseq	r1, r7, r8
     6a8:	50000108 	andpl	r0, r0, r8, lsl #2
     6ac:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     6b0:	0800371e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, ip, sp}
     6b4:	24540001 	ldrbcs	r0, [r4], #-1
     6b8:	30080037 	andcc	r0, r8, r7, lsr r0
     6bc:	01080037 	tsteq	r8, r7, lsr r0
     6c0:	00005000 	andeq	r5, r0, r0
     6c4:	00000000 	andeq	r0, r0, r0
     6c8:	37300000 	ldrcc	r0, [r0, -r0]!
     6cc:	37390800 	ldrcc	r0, [r9, -r0, lsl #16]!
     6d0:	00010800 	andeq	r0, r1, r0, lsl #16
     6d4:	00373950 	eorseq	r3, r7, r0, asr r9
     6d8:	00376808 	eorseq	r6, r7, r8, lsl #16
     6dc:	f3000408 	vshl.u8	d0, d8, d0
     6e0:	009f5001 	addseq	r5, pc, r1
     6e4:	00000000 	andeq	r0, r0, r0
     6e8:	30000000 	andcc	r0, r0, r0
     6ec:	36080037 			; <UNDEFINED> instruction: 0x36080037
     6f0:	01080037 	tsteq	r8, r7, lsr r0
     6f4:	37365100 	ldrcc	r5, [r6, -r0, lsl #2]!
     6f8:	37440800 	strbcc	r0, [r4, -r0, lsl #16]
     6fc:	00010800 	andeq	r0, r1, r0, lsl #16
     700:	00374454 	eorseq	r4, r7, r4, asr r4
     704:	00376808 	eorseq	r6, r7, r8, lsl #16
     708:	f3000408 	vshl.u8	d0, d8, d0
     70c:	009f5101 	addseq	r5, pc, r1, lsl #2
     710:	00000000 	andeq	r0, r0, r0
     714:	44000000 	strmi	r0, [r0], #-0
     718:	48080037 	stmdami	r8, {r0, r1, r2, r4, r5}
     71c:	01080037 	tsteq	r8, r7, lsr r0
     720:	37485000 	strbcc	r5, [r8, -r0]
     724:	37560800 	ldrbcc	r0, [r6, -r0, lsl #16]
     728:	00010800 	andeq	r0, r1, r0, lsl #16
     72c:	00375c54 	eorseq	r5, r7, r4, asr ip
     730:	00376808 	eorseq	r6, r7, r8, lsl #16
     734:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     740:	08003768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, sp}
     744:	08003771 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, ip, sp}
     748:	71500001 	cmpvc	r0, r1
     74c:	a0080037 	andge	r0, r8, r7, lsr r0
     750:	04080037 	streq	r0, [r8], #-55	; 0x37
     754:	5001f300 	andpl	pc, r1, r0, lsl #6
     758:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     75c:	00000000 	andeq	r0, r0, r0
     760:	00376800 	eorseq	r6, r7, r0, lsl #16
     764:	00376e08 	eorseq	r6, r7, r8, lsl #28
     768:	51000108 	tstpl	r0, r8, lsl #2
     76c:	0800376e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp}
     770:	0800377c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
     774:	7c540001 	mrrcvc	0, 0, r0, r4, cr1
     778:	a0080037 	andge	r0, r8, r7, lsr r0
     77c:	04080037 	streq	r0, [r8], #-55	; 0x37
     780:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     784:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     788:	00000000 	andeq	r0, r0, r0
     78c:	00377c00 	eorseq	r7, r7, r0, lsl #24
     790:	00378008 	eorseq	r8, r7, r8
     794:	50000108 	andpl	r0, r0, r8, lsl #2
     798:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
     79c:	0800378e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, ip, sp}
     7a0:	94540001 	ldrbls	r0, [r4], #-1
     7a4:	a0080037 	andge	r0, r8, r7, lsr r0
     7a8:	01080037 	tsteq	r8, r7, lsr r0
     7ac:	00005000 	andeq	r5, r0, r0
     7b0:	00000000 	andeq	r0, r0, r0
     7b4:	37a00000 	strcc	r0, [r0, r0]!
     7b8:	37a90800 	strcc	r0, [r9, r0, lsl #16]!
     7bc:	00010800 	andeq	r0, r1, r0, lsl #16
     7c0:	0037a950 	eorseq	sl, r7, r0, asr r9
     7c4:	0037d808 	eorseq	sp, r7, r8, lsl #16
     7c8:	f3000408 	vshl.u8	d0, d8, d0
     7cc:	009f5001 	addseq	r5, pc, r1
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	a0000000 	andge	r0, r0, r0
     7d8:	a6080037 			; <UNDEFINED> instruction: 0xa6080037
     7dc:	01080037 	tsteq	r8, r7, lsr r0
     7e0:	37a65100 	strcc	r5, [r6, r0, lsl #2]!
     7e4:	37b40800 	ldrcc	r0, [r4, r0, lsl #16]!
     7e8:	00010800 	andeq	r0, r1, r0, lsl #16
     7ec:	0037b454 	eorseq	fp, r7, r4, asr r4
     7f0:	0037d808 	eorseq	sp, r7, r8, lsl #16
     7f4:	f3000408 	vshl.u8	d0, d8, d0
     7f8:	009f5101 	addseq	r5, pc, r1, lsl #2
     7fc:	00000000 	andeq	r0, r0, r0
     800:	b4000000 	strlt	r0, [r0], #-0
     804:	b8080037 	stmdalt	r8, {r0, r1, r2, r4, r5}
     808:	01080037 	tsteq	r8, r7, lsr r0
     80c:	37b85000 	ldrcc	r5, [r8, r0]!
     810:	37c60800 	strbcc	r0, [r6, r0, lsl #16]
     814:	00010800 	andeq	r0, r1, r0, lsl #16
     818:	0037cc54 	eorseq	ip, r7, r4, asr ip
     81c:	0037d808 	eorseq	sp, r7, r8, lsl #16
     820:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     82c:	080037d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, sp}
     830:	080037e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, ip, sp}
     834:	e1500001 	cmp	r0, r1
     838:	0c080037 	stceq	0, cr0, [r8], {55}	; 0x37
     83c:	04080038 	streq	r0, [r8], #-56	; 0x38
     840:	5001f300 	andpl	pc, r1, r0, lsl #6
     844:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     848:	00000000 	andeq	r0, r0, r0
     84c:	0037d800 	eorseq	sp, r7, r0, lsl #16
     850:	0037de08 	eorseq	sp, r7, r8, lsl #28
     854:	51000108 	tstpl	r0, r8, lsl #2
     858:	080037de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, sp}
     85c:	080037e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, ip, sp}
     860:	e1520001 	cmp	r2, r1
     864:	0c080037 	stceq	0, cr0, [r8], {55}	; 0x37
     868:	04080038 	streq	r0, [r8], #-56	; 0x38
     86c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     870:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     874:	00000000 	andeq	r0, r0, r0
     878:	0037ea00 	eorseq	lr, r7, r0, lsl #20
     87c:	0037ee08 	eorseq	lr, r7, r8, lsl #28
     880:	50000108 	andpl	r0, r0, r8, lsl #2
     884:	080037ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp}
     888:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     88c:	02540001 	subseq	r0, r4, #1
     890:	0c080038 	stceq	0, cr0, [r8], {56}	; 0x38
     894:	01080038 	tsteq	r8, r8, lsr r0
     898:	00005000 	andeq	r5, r0, r0
     89c:	00000000 	andeq	r0, r0, r0
     8a0:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
     8a4:	38120800 	ldmdacc	r2, {fp}
     8a8:	00010800 	andeq	r0, r1, r0, lsl #16
     8ac:	00381250 	eorseq	r1, r8, r0, asr r2
     8b0:	00382608 	eorseq	r2, r8, r8, lsl #12
     8b4:	f3000408 	vshl.u8	d0, d8, d0
     8b8:	009f5001 	addseq	r5, pc, r1
     8bc:	00000000 	andeq	r0, r0, r0
     8c0:	0c000000 	stceq	0, cr0, [r0], {-0}
     8c4:	12080038 	andne	r0, r8, #56	; 0x38
     8c8:	01080038 	tsteq	r8, r8, lsr r0
     8cc:	38125100 	ldmdacc	r2, {r8, ip, lr}
     8d0:	38260800 	stmdacc	r6!, {fp}
     8d4:	00010800 	andeq	r0, r1, r0, lsl #16
     8d8:	00000054 	andeq	r0, r0, r4, asr r0
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	00381200 	eorseq	r1, r8, r0, lsl #4
     8e4:	00382008 	eorseq	r2, r8, r8
     8e8:	09000308 	stmdbeq	r0, {r3, r8, r9}
     8ec:	38209fff 	stmdacc	r0!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8f0:	38260800 	stmdacc	r6!, {fp}
     8f4:	00010800 	andeq	r0, r1, r0, lsl #16
     8f8:	00000050 	andeq	r0, r0, r0, asr r0
     8fc:	00000000 	andeq	r0, r0, r0
     900:	00396400 	eorseq	r6, r9, r0, lsl #8
     904:	00396a08 	eorseq	r6, r9, r8, lsl #20
     908:	50000108 	andpl	r0, r0, r8, lsl #2
     90c:	0800396a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, ip, sp}
     910:	08003974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, ip, sp}
     914:	74540001 	ldrbvc	r0, [r4], #-1
     918:	83080039 	movwhi	r0, #32825	; 0x8039
     91c:	05080039 	streq	r0, [r8, #-57]	; 0x39
     920:	01240300 			; <UNDEFINED> instruction: 0x01240300
     924:	39832000 	stmibcc	r3, {sp}
     928:	39940800 	ldmibcc	r4, {fp}
     92c:	00040800 	andeq	r0, r4, r0, lsl #16
     930:	9f5001f3 	svcls	0x005001f3
	...
     93c:	08003994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp}
     940:	080039a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, ip, sp}
     944:	a1500001 	cmpge	r0, r1
     948:	c6080039 			; <UNDEFINED> instruction: 0xc6080039
     94c:	04080039 	streq	r0, [r8], #-57	; 0x39
     950:	5001f300 	andpl	pc, r1, r0, lsl #6
     954:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     958:	00000000 	andeq	r0, r0, r0
     95c:	00399400 	eorseq	r9, r9, r0, lsl #8
     960:	00399c08 	eorseq	r9, r9, r8, lsl #24
     964:	51000108 	tstpl	r0, r8, lsl #2
     968:	0800399c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, ip, sp}
     96c:	080039ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, ip, sp}
     970:	ac540001 	mrrcge	0, 0, r0, r4, cr1
     974:	c6080039 			; <UNDEFINED> instruction: 0xc6080039
     978:	04080039 	streq	r0, [r8], #-57	; 0x39
     97c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     980:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     984:	00000000 	andeq	r0, r0, r0
     988:	00399400 	eorseq	r9, r9, r0, lsl #8
     98c:	0039a108 	eorseq	sl, r9, r8, lsl #2
     990:	52000108 	andpl	r0, r0, #8, 2
     994:	080039a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, ip, sp}
     998:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
     99c:	c0560001 	subsgt	r0, r6, r1
     9a0:	c6080039 			; <UNDEFINED> instruction: 0xc6080039
     9a4:	04080039 	streq	r0, [r8], #-57	; 0x39
     9a8:	5201f300 	andpl	pc, r1, #0, 6
     9ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9b0:	00000000 	andeq	r0, r0, r0
     9b4:	00399400 	eorseq	r9, r9, r0, lsl #8
     9b8:	0039ac08 	eorseq	sl, r9, r8, lsl #24
     9bc:	30000208 	andcc	r0, r0, r8, lsl #4
     9c0:	0039ac9f 	mlaseq	r9, pc, ip, sl	; <UNPREDICTABLE>
     9c4:	0039c008 	eorseq	ip, r9, r8
     9c8:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     9d4:	080039c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip, sp}
     9d8:	080039d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, sp}
     9dc:	d0500001 	subsle	r0, r0, r1
     9e0:	40080039 	andmi	r0, r8, r9, lsr r0
     9e4:	0408003a 	streq	r0, [r8], #-58	; 0x3a
     9e8:	5001f300 	andpl	pc, r1, r0, lsl #6
     9ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	0039c600 	eorseq	ip, r9, r0, lsl #12
     9f8:	0039d308 	eorseq	sp, r9, r8, lsl #6
     9fc:	51000108 	tstpl	r0, r8, lsl #2
     a00:	080039d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r8, fp, ip, sp}
     a04:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
     a08:	38550001 	ldmdacc	r5, {r0}^
     a0c:	4008003a 	andmi	r0, r8, sl, lsr r0
     a10:	0408003a 	streq	r0, [r8], #-58	; 0x3a
     a14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a1c:	00000000 	andeq	r0, r0, r0
     a20:	003a4000 	eorseq	r4, sl, r0
     a24:	003a4408 	eorseq	r4, sl, r8, lsl #8
     a28:	50000108 	andpl	r0, r0, r8, lsl #2
     a2c:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
     a30:	08003a47 	stmdaeq	r0, {r0, r1, r2, r6, r9, fp, ip, sp}
     a34:	47510001 	ldrbmi	r0, [r1, -r1]
     a38:	4808003a 	stmdami	r8, {r1, r3, r4, r5}
     a3c:	0408003a 	streq	r0, [r8], #-58	; 0x3a
     a40:	5001f300 	andpl	pc, r1, r0, lsl #6
     a44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a50:	00000400 	andeq	r0, r0, r0, lsl #8
     a54:	50000100 	andpl	r0, r0, r0, lsl #2
     a58:	00000004 	andeq	r0, r0, r4
     a5c:	0000000c 	andeq	r0, r0, ip
     a60:	01f30004 	mvnseq	r0, r4
     a64:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     a70:	00070000 	andeq	r0, r7, r0
     a74:	00010000 	andeq	r0, r1, r0
     a78:	00000751 	andeq	r0, r0, r1, asr r7
     a7c:	00000c00 	andeq	r0, r0, r0, lsl #24
     a80:	f3000400 	vshl.u8	d0, d0, d0
     a84:	009f5101 	addseq	r5, pc, r1, lsl #2
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	14000000 	strne	r0, [r0], #-0
     a90:	1c000000 	stcne	0, cr0, [r0], {-0}
     a94:	01000000 	mrseq	r0, (UNDEF: 0)
     a98:	001c5000 	andseq	r5, ip, r0
     a9c:	00320000 	eorseq	r0, r2, r0
     aa0:	00010000 	andeq	r0, r1, r0
     aa4:	00000056 	andeq	r0, r0, r6, asr r0
     aa8:	00000000 	andeq	r0, r0, r0
     aac:	00001400 	andeq	r1, r0, r0, lsl #8
     ab0:	00001c00 	andeq	r1, r0, r0, lsl #24
     ab4:	51000100 	mrspl	r0, (UNDEF: 16)
     ab8:	0000001c 	andeq	r0, r0, ip, lsl r0
     abc:	00000032 	andeq	r0, r0, r2, lsr r0
     ac0:	00540001 	subseq	r0, r4, r1
     ac4:	00000000 	andeq	r0, r0, r0
     ac8:	14000000 	strne	r0, [r0], #-0
     acc:	1c000000 	stcne	0, cr0, [r0], {-0}
     ad0:	02000000 	andeq	r0, r0, #0
     ad4:	1c9f3000 	ldcne	0, cr3, [pc], {0}
     ad8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     adc:	01000000 	mrseq	r0, (UNDEF: 0)
     ae0:	002a5300 	eoreq	r5, sl, r0, lsl #6
     ae4:	002e0000 	eoreq	r0, lr, r0
     ae8:	00010000 	andeq	r0, r1, r0
     aec:	00002e55 	andeq	r2, r0, r5, asr lr
     af0:	00003200 	andeq	r3, r0, r0, lsl #4
     af4:	53000100 	movwpl	r0, #256	; 0x100
	...
     b00:	00000032 	andeq	r0, r0, r2, lsr r0
     b04:	0000003a 	andeq	r0, r0, sl, lsr r0
     b08:	3a500001 	bcc	1400b14 <__Stack_Size+0x1400714>
     b0c:	56000000 	strpl	r0, [r0], -r0
     b10:	01000000 	mrseq	r0, (UNDEF: 0)
     b14:	00005700 	andeq	r5, r0, r0, lsl #14
     b18:	00000000 	andeq	r0, r0, r0
     b1c:	00320000 	eorseq	r0, r2, r0
     b20:	003a0000 	eorseq	r0, sl, r0
     b24:	00010000 	andeq	r0, r1, r0
     b28:	00003a51 	andeq	r3, r0, r1, asr sl
     b2c:	00005600 	andeq	r5, r0, r0, lsl #12
     b30:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     b3c:	00000032 	andeq	r0, r0, r2, lsr r0
     b40:	0000003a 	andeq	r0, r0, sl, lsr r0
     b44:	9f300002 	svcls	0x00300002
     b48:	0000003a 	andeq	r0, r0, sl, lsr r0
     b4c:	0000003c 	andeq	r0, r0, ip, lsr r0
     b50:	3c540001 	mrrccc	0, 0, r0, r4, cr1
     b54:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     b58:	01000000 	mrseq	r0, (UNDEF: 0)
     b5c:	004e5500 	subeq	r5, lr, r0, lsl #10
     b60:	00500000 	subseq	r0, r0, r0
     b64:	00010000 	andeq	r0, r1, r0
     b68:	00005054 	andeq	r5, r0, r4, asr r0
     b6c:	00005200 	andeq	r5, r0, r0, lsl #4
     b70:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     b7c:	00000056 	andeq	r0, r0, r6, asr r0
     b80:	0000005a 	andeq	r0, r0, sl, asr r0
     b84:	5a500001 	bpl	1400b90 <__Stack_Size+0x1400790>
     b88:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
     b8c:	04000000 	streq	r0, [r0], #-0
     b90:	5001f300 	andpl	pc, r1, r0, lsl #6
     b94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ba0:	00000d00 	andeq	r0, r0, r0, lsl #26
     ba4:	50000100 	andpl	r0, r0, r0, lsl #2
     ba8:	0000000d 	andeq	r0, r0, sp
     bac:	0000002c 	andeq	r0, r0, ip, lsr #32
     bb0:	01f30004 	mvnseq	r0, r4
     bb4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     bc0:	00060000 	andeq	r0, r6, r0
     bc4:	00010000 	andeq	r0, r1, r0
     bc8:	00000651 	andeq	r0, r0, r1, asr r6
     bcc:	00000a00 	andeq	r0, r0, r0, lsl #20
     bd0:	71000300 	mrsvc	r0, LR_irq
     bd4:	000a9f7f 	andeq	r9, sl, pc, ror pc
     bd8:	002c0000 	eoreq	r0, ip, r0
     bdc:	00040000 	andeq	r0, r4, r0
     be0:	9f5101f3 	svcls	0x005101f3
	...
     bf0:	00000006 	andeq	r0, r0, r6
     bf4:	800c0009 	andhi	r0, ip, r9
     bf8:	71001e84 	smlabbvc	r0, r4, lr, r1
     bfc:	069f1b01 	ldreq	r1, [pc], r1, lsl #22
     c00:	0a000000 	beq	c08 <__Stack_Size+0x808>
     c04:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     c08:	84800c00 	strhi	r0, [r0], #3072	; 0xc00
     c0c:	0071001e 	rsbseq	r0, r1, lr, lsl r0
     c10:	000a9f1b 	andeq	r9, sl, fp, lsl pc
     c14:	000d0000 	andeq	r0, sp, r0
     c18:	00010000 	andeq	r0, r1, r0
     c1c:	00000d51 	andeq	r0, r0, r1, asr sp
     c20:	00002c00 	andeq	r2, r0, r0, lsl #24
     c24:	0c000c00 	stceq	12, cr0, [r0], {-0}
     c28:	001e8480 	andseq	r8, lr, r0, lsl #9
     c2c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     c30:	009f1b01 	addseq	r1, pc, r1, lsl #22
     c34:	00000000 	andeq	r0, r0, r0
     c38:	64000000 	strvs	r0, [r0], #-0
     c3c:	66000000 	strvs	r0, [r0], -r0
     c40:	02000000 	andeq	r0, r0, #0
     c44:	669f3000 	ldrvs	r3, [pc], r0
     c48:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     c4c:	01000000 	mrseq	r0, (UNDEF: 0)
     c50:	00685000 	rsbeq	r5, r8, r0
     c54:	00720000 	rsbseq	r0, r2, r0
     c58:	00010000 	andeq	r0, r1, r0
     c5c:	00007851 	andeq	r7, r0, r1, asr r8
     c60:	00007a00 	andeq	r7, r0, r0, lsl #20
     c64:	50000100 	andpl	r0, r0, r0, lsl #2
     c68:	0000007a 	andeq	r0, r0, sl, ror r0
     c6c:	0000008d 	andeq	r0, r0, sp, lsl #1
     c70:	00510001 	subseq	r0, r1, r1
     c74:	00000000 	andeq	r0, r0, r0
     c78:	30000000 	andcc	r0, r0, r0
     c7c:	66000000 	strvs	r0, [r0], -r0
     c80:	02000000 	andeq	r0, r0, #0
     c84:	669f3000 	ldrvs	r3, [pc], r0
     c88:	76000000 	strvc	r0, [r0], -r0
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	00785300 	rsbseq	r5, r8, r0, lsl #6
     c94:	007c0000 	rsbseq	r0, ip, r0
     c98:	00010000 	andeq	r0, r1, r0
     c9c:	00000053 	andeq	r0, r0, r3, asr r0
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	00009600 	andeq	r9, r0, r0, lsl #12
     ca8:	0000c200 	andeq	ip, r0, r0, lsl #4
     cac:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     cb8:	0000009e 	muleq	r0, lr, r0
     cbc:	000000b6 	strheq	r0, [r0], -r6
     cc0:	00500001 	subseq	r0, r0, r1
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ccc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     cd0:	01000001 	tsteq	r0, r1
     cd4:	00005000 	andeq	r5, r0, r0
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	012e0000 			; <UNDEFINED> instruction: 0x012e0000
     ce0:	013a0000 	teqeq	sl, r0
     ce4:	00010000 	andeq	r0, r1, r0
     ce8:	00016253 	andeq	r6, r1, r3, asr r2
     cec:	00019000 	andeq	r9, r1, r0
     cf0:	53000100 	movwpl	r0, #256	; 0x100
     cf4:	00000190 	muleq	r0, r0, r1
     cf8:	00000192 	muleq	r0, r2, r1
     cfc:	01720003 	cmneq	r2, r3
     d00:	0001929f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
     d04:	00019400 	andeq	r9, r1, r0, lsl #8
     d08:	73000300 	movwvc	r0, #768	; 0x300
     d0c:	01949f01 	orrseq	r9, r4, r1, lsl #30
     d10:	01b00000 	movseq	r0, r0
     d14:	00010000 	andeq	r0, r1, r0
     d18:	0001ea53 	andeq	lr, r1, r3, asr sl
     d1c:	0001ec00 	andeq	lr, r1, r0, lsl #24
     d20:	50000100 	andpl	r0, r0, r0, lsl #2
     d24:	000001ec 	andeq	r0, r0, ip, ror #3
     d28:	000001f6 	strdeq	r0, [r0], -r6
     d2c:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
     d30:	00000001 	andeq	r0, r0, r1
     d34:	01000002 	tsteq	r0, r2
     d38:	02005000 	andeq	r5, r0, #0
     d3c:	02100000 	andseq	r0, r0, #0
     d40:	00010000 	andeq	r0, r1, r0
     d44:	00000051 	andeq	r0, r0, r1, asr r0
     d48:	00000000 	andeq	r0, r0, r0
     d4c:	00012e00 	andeq	r2, r1, r0, lsl #28
     d50:	00013200 	andeq	r3, r1, r0, lsl #4
     d54:	52000100 	andpl	r0, r0, #0, 2
     d58:	00000194 	muleq	r0, r4, r1
     d5c:	00000196 	muleq	r0, r6, r1
     d60:	96500001 	ldrbls	r0, [r0], -r1
     d64:	aa000001 	bge	d70 <__Stack_Size+0x970>
     d68:	01000001 	tsteq	r0, r1
     d6c:	01ae5200 			; <UNDEFINED> instruction: 0x01ae5200
     d70:	01b00000 	movseq	r0, r0
     d74:	00010000 	andeq	r0, r1, r0
     d78:	00000050 	andeq	r0, r0, r0, asr r0
     d7c:	00000000 	andeq	r0, r0, r0
     d80:	0001c800 	andeq	ip, r1, r0, lsl #16
     d84:	0001ce00 	andeq	ip, r1, r0, lsl #28
     d88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d94:	000001ea 	andeq	r0, r0, sl, ror #3
     d98:	000001fc 	strdeq	r0, [r0], -ip
     d9c:	fe530001 	cdp2	0, 5, cr0, cr3, cr1, {0}
     da0:	00000001 	andeq	r0, r0, r1
     da4:	01000002 	tsteq	r0, r2
     da8:	02005300 	andeq	r5, r0, #0, 6
     dac:	02020000 	andeq	r0, r2, #0
     db0:	00040000 	andeq	r0, r4, r0
     db4:	9f200073 	svcls	0x00200073
	...
     dc0:	00000260 	andeq	r0, r0, r0, ror #4
     dc4:	00000264 	andeq	r0, r0, r4, ror #4
     dc8:	64500001 	ldrbvs	r0, [r0], #-1
     dcc:	6c000002 	stcvs	0, cr0, [r0], {2}
     dd0:	09000002 	stmdbeq	r0, {r1}
     dd4:	03007000 	movweq	r7, #0
     dd8:	20000130 	andcs	r0, r0, r0, lsr r1
     ddc:	00009f1c 	andeq	r9, r0, ip, lsl pc
     de0:	00000000 	andeq	r0, r0, r0
     de4:	02780000 	rsbseq	r0, r8, #0
     de8:	02840000 	addeq	r0, r4, #0
     dec:	00010000 	andeq	r0, r1, r0
     df0:	00028450 	andeq	r8, r2, r0, asr r4
     df4:	00028c00 	andeq	r8, r2, r0, lsl #24
     df8:	f3000400 	vshl.u8	d0, d0, d0
     dfc:	009f5001 	addseq	r5, pc, r1
     e00:	00000000 	andeq	r0, r0, r0
     e04:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     e08:	9c000002 	stcls	0, cr0, [r0], {2}
     e0c:	01000002 	tsteq	r0, r2
     e10:	029c5000 	addseq	r5, ip, #0
     e14:	02a00000 	adceq	r0, r0, #0
     e18:	00090000 	andeq	r0, r9, r0
     e1c:	30030070 	andcc	r0, r3, r0, ror r0
     e20:	1c200001 	stcne	0, cr0, [r0], #-4
     e24:	0002a09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
     e28:	0002a800 	andeq	sl, r2, r0, lsl #16
     e2c:	f3000400 	vshl.u8	d0, d0, d0
     e30:	009f5001 	addseq	r5, pc, r1
     e34:	00000000 	andeq	r0, r0, r0
     e38:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     e3c:	ac000002 	stcge	0, cr0, [r0], {2}
     e40:	01000002 	tsteq	r0, r2
     e44:	02ac5000 	adceq	r5, ip, #0
     e48:	02b00000 	adcseq	r0, r0, #0
     e4c:	00040000 	andeq	r0, r4, r0
     e50:	9f5001f3 	svcls	0x005001f3
	...
     e5c:	000002a8 	andeq	r0, r0, r8, lsr #5
     e60:	000002ac 	andeq	r0, r0, ip, lsr #5
     e64:	0071000c 	rsbseq	r0, r1, ip
     e68:	000a2438 	andeq	r2, sl, r8, lsr r4
     e6c:	00701aff 	ldrshteq	r1, [r0], #-175	; 0xffffff51
     e70:	02ac9f22 	adceq	r9, ip, #34, 30	; 0x88
     e74:	02b00000 	adcseq	r0, r0, #0
     e78:	000d0000 	andeq	r0, sp, r0
     e7c:	24380071 	ldrtcs	r0, [r8], #-113	; 0x71
     e80:	1aff000a 	bne	fffc0eb0 <SCS_BASE+0x1ffb2eb0>
     e84:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
     e88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	0002b000 	andeq	fp, r2, r0
     e94:	0002b200 	andeq	fp, r2, r0, lsl #4
     e98:	50000100 	andpl	r0, r0, r0, lsl #2
     e9c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     ea0:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     ea4:	01f30004 	mvnseq	r0, r4
     ea8:	00009f50 	andeq	r9, r0, r0, asr pc
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	02b00000 	adcseq	r0, r0, #0
     eb4:	02b20000 	adcseq	r0, r2, #0
     eb8:	00060000 	andeq	r0, r6, r0
     ebc:	ff080070 			; <UNDEFINED> instruction: 0xff080070
     ec0:	02b29f1a 	adcseq	r9, r2, #26, 30	; 0x68
     ec4:	02b40000 	adcseq	r0, r4, #0
     ec8:	00070000 	andeq	r0, r7, r0
     ecc:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
     ed0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	b4000000 	strlt	r0, [r0], #-0
     edc:	b8000002 	stmdalt	r0, {r1}
     ee0:	01000002 	tsteq	r0, r2
     ee4:	02b85000 	adcseq	r5, r8, #0
     ee8:	02ba0000 	adcseq	r0, sl, #0
     eec:	00040000 	andeq	r0, r4, r0
     ef0:	9f5001f3 	svcls	0x005001f3
	...
     efc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     f00:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     f04:	00700009 	rsbseq	r0, r0, r9
     f08:	1aff000a 	bne	fffc0f38 <SCS_BASE+0x1ffb2f38>
     f0c:	b89f2538 	ldmlt	pc, {r3, r4, r5, r8, sl, sp}	; <UNPREDICTABLE>
     f10:	ba000002 	blt	f20 <__Stack_Size+0xb20>
     f14:	0a000002 	beq	f24 <__Stack_Size+0xb24>
     f18:	5001f300 	andpl	pc, r1, r0, lsl #6
     f1c:	1aff000a 	bne	fffc0f4c <SCS_BASE+0x1ffb2f4c>
     f20:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
     f24:	00000000 	andeq	r0, r0, r0
     f28:	ba000000 	blt	f30 <__Stack_Size+0xb30>
     f2c:	cf000002 	svcgt	0x00000002
     f30:	01000002 	tsteq	r0, r2
     f34:	02cf5000 	sbceq	r5, pc, #0
     f38:	02d40000 	sbcseq	r0, r4, #0
     f3c:	00040000 	andeq	r0, r4, r0
     f40:	9f5001f3 	svcls	0x005001f3
	...
     f4c:	000002d4 	ldrdeq	r0, [r0], -r4
     f50:	000002f1 	strdeq	r0, [r0], -r1
     f54:	f1500001 			; <UNDEFINED> instruction: 0xf1500001
     f58:	fc000002 	stc2	0, cr0, [r0], {2}
     f5c:	04000002 	streq	r0, [r0], #-2
     f60:	5001f300 	andpl	pc, r1, r0, lsl #6
     f64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	0002d400 	andeq	sp, r2, r0, lsl #8
     f70:	0002f100 	andeq	pc, r2, r0, lsl #2
     f74:	51000100 	mrspl	r0, (UNDEF: 16)
     f78:	000002f1 	strdeq	r0, [r0], -r1
     f7c:	000002fc 	strdeq	r0, [r0], -ip
     f80:	01f30004 	mvnseq	r0, r4
     f84:	00009f51 	andeq	r9, r0, r1, asr pc
     f88:	00000000 	andeq	r0, r0, r0
     f8c:	02fc0000 	rscseq	r0, ip, #0
     f90:	030c0000 	movweq	r0, #49152	; 0xc000
     f94:	00010000 	andeq	r0, r1, r0
     f98:	00030c50 	andeq	r0, r3, r0, asr ip
     f9c:	00032000 	andeq	r2, r3, r0
     fa0:	f3000400 	vshl.u8	d0, d0, d0
     fa4:	009f5001 	addseq	r5, pc, r1
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	fc000000 	stc2	0, cr0, [r0], {-0}
     fb0:	1b000002 	blne	fc0 <__Stack_Size+0xbc0>
     fb4:	01000003 	tsteq	r0, r3
     fb8:	031b5100 	tsteq	fp, #0, 2
     fbc:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     fc0:	00040000 	andeq	r0, r4, r0
     fc4:	9f5101f3 	svcls	0x005101f3
	...
     fd0:	000002fc 	strdeq	r0, [r0], -ip
     fd4:	0000030e 	andeq	r0, r0, lr, lsl #6
     fd8:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
     fdc:	20000003 	andcs	r0, r0, r3
     fe0:	04000003 	streq	r0, [r0], #-3
     fe4:	5201f300 	andpl	pc, r1, #0, 6
     fe8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fec:	00000000 	andeq	r0, r0, r0
     ff0:	00032000 	andeq	r2, r3, r0
     ff4:	00033b00 	andeq	r3, r3, r0, lsl #22
     ff8:	50000100 	andpl	r0, r0, r0, lsl #2
     ffc:	0000033b 	andeq	r0, r0, fp, lsr r3
    1000:	00000350 	andeq	r0, r0, r0, asr r3
    1004:	01f30004 	mvnseq	r0, r4
    1008:	00009f50 	andeq	r9, r0, r0, asr pc
    100c:	00000000 	andeq	r0, r0, r0
    1010:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    1014:	033b0000 	teqeq	fp, #0
    1018:	00010000 	andeq	r0, r1, r0
    101c:	00033b51 	andeq	r3, r3, r1, asr fp
    1020:	00035000 	andeq	r5, r3, r0
    1024:	f3000400 	vshl.u8	d0, d0, d0
    1028:	009f5101 	addseq	r5, pc, r1, lsl #2
    102c:	00000000 	andeq	r0, r0, r0
    1030:	3c000000 	stccc	0, cr0, [r0], {-0}
    1034:	40000003 	andmi	r0, r0, r3
    1038:	0b000003 	bleq	104c <__Stack_Size+0xc4c>
    103c:	01dc0300 	bicseq	r0, ip, r0, lsl #6
    1040:	01942000 	orrseq	r2, r4, r0
    1044:	9f1aff08 	svcls	0x001aff08
    1048:	00000340 	andeq	r0, r0, r0, asr #6
    104c:	00000348 	andeq	r0, r0, r8, asr #6
    1050:	48500001 	ldmdami	r0, {r0}^
    1054:	50000003 	andpl	r0, r0, r3
    1058:	0b000003 	bleq	106c <__Stack_Size+0xc6c>
    105c:	01dc0300 	bicseq	r0, ip, r0, lsl #6
    1060:	01942000 	orrseq	r2, r4, r0
    1064:	9f1aff08 	svcls	0x001aff08
	...
    1070:	0000033c 	andeq	r0, r0, ip, lsr r3
    1074:	00000344 	andeq	r0, r0, r4, asr #6
    1078:	db03000b 	blle	c10ac <__Stack_Size+0xc0cac>
    107c:	94200001 	strtls	r0, [r0], #-1
    1080:	1aff0801 	bne	fffc308c <SCS_BASE+0x1ffb508c>
    1084:	0003449f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1088:	00035000 	andeq	r5, r3, r0
    108c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1098:	00000340 	andeq	r0, r0, r0, asr #6
    109c:	00000348 	andeq	r0, r0, r8, asr #6
    10a0:	db030010 	blle	c10e8 <__Stack_Size+0xc0ce8>
    10a4:	94200001 	strtls	r0, [r0], #-1
    10a8:	1aff0801 	bne	fffc30b4 <SCS_BASE+0x1ffb50b4>
    10ac:	24380070 	ldrtcs	r0, [r8], #-112	; 0x70
    10b0:	03489f22 	movteq	r9, #36642	; 0x8f22
    10b4:	03500000 	cmpeq	r0, #0
    10b8:	00180000 	andseq	r0, r8, r0
    10bc:	0001db03 	andeq	sp, r1, r3, lsl #22
    10c0:	08019420 	stmdaeq	r1, {r5, sl, ip, pc}
    10c4:	dc031aff 	stcle	10, cr1, [r3], {255}	; 0xff
    10c8:	94200001 	strtls	r0, [r0], #-1
    10cc:	1aff0801 	bne	fffc30d8 <SCS_BASE+0x1ffb50d8>
    10d0:	9f222438 	svcls	0x00222438
	...
    10dc:	00000350 	andeq	r0, r0, r0, asr r3
    10e0:	00000366 	andeq	r0, r0, r6, ror #6
    10e4:	66500001 	ldrbvs	r0, [r0], -r1
    10e8:	7c000003 	stcvc	0, cr0, [r0], {3}
    10ec:	04000003 	streq	r0, [r0], #-3
    10f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    10f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	00035000 	andeq	r5, r3, r0
    1100:	00037500 	andeq	r7, r3, r0, lsl #10
    1104:	51000100 	mrspl	r0, (UNDEF: 16)
    1108:	00000375 	andeq	r0, r0, r5, ror r3
    110c:	0000037c 	andeq	r0, r0, ip, ror r3
    1110:	01f30004 	mvnseq	r0, r4
    1114:	00009f51 	andeq	r9, r0, r1, asr pc
    1118:	00000000 	andeq	r0, r0, r0
    111c:	03500000 	cmpeq	r0, #0
    1120:	03600000 	cmneq	r0, #0
    1124:	00010000 	andeq	r0, r1, r0
    1128:	00036052 	andeq	r6, r3, r2, asr r0
    112c:	00037c00 	andeq	r7, r3, r0, lsl #24
    1130:	f3000400 	vshl.u8	d0, d0, d0
    1134:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    1140:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1144:	01000000 	mrseq	r0, (UNDEF: 0)
    1148:	000e5000 	andeq	r5, lr, r0
    114c:	00180000 	andseq	r0, r8, r0
    1150:	00040000 	andeq	r0, r4, r0
    1154:	9f5001f3 	svcls	0x005001f3
	...
    1160:	00000018 	andeq	r0, r0, r8, lsl r0
    1164:	00000026 	andeq	r0, r0, r6, lsr #32
    1168:	26500001 	ldrbcs	r0, [r0], -r1
    116c:	30000000 	andcc	r0, r0, r0
    1170:	04000000 	streq	r0, [r0], #-0
    1174:	5001f300 	andpl	pc, r1, r0, lsl #6
    1178:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    117c:	00000000 	andeq	r0, r0, r0
    1180:	00003000 	andeq	r3, r0, r0
    1184:	00003e00 	andeq	r3, r0, r0, lsl #28
    1188:	50000100 	andpl	r0, r0, r0, lsl #2
    118c:	0000003e 	andeq	r0, r0, lr, lsr r0
    1190:	00000048 	andeq	r0, r0, r8, asr #32
    1194:	01f30004 	mvnseq	r0, r4
    1198:	00009f50 	andeq	r9, r0, r0, asr pc
    119c:	00000000 	andeq	r0, r0, r0
    11a0:	00880000 	addeq	r0, r8, r0
    11a4:	008c0000 	addeq	r0, ip, r0
    11a8:	00020000 	andeq	r0, r2, r0
    11ac:	008c9f30 	addeq	r9, ip, r0, lsr pc
    11b0:	00900000 	addseq	r0, r0, r0
    11b4:	00070000 	andeq	r0, r7, r0
    11b8:	1a320070 	bne	c81380 <__Stack_Size+0xc80f80>
    11bc:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    11c0:	00000000 	andeq	r0, r0, r0
    11c4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    11c8:	9c000000 	stcls	0, cr0, [r0], {-0}
    11cc:	02000000 	andeq	r0, r0, #0
    11d0:	9c9f3000 	ldcls	0, cr3, [pc], {0}
    11d4:	a0000000 	andge	r0, r0, r0
    11d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    11dc:	08007000 	stmdaeq	r0, {ip, sp, lr}
    11e0:	2e301a20 	vaddcs.f32	s2, s0, s1
    11e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	0000a800 	andeq	sl, r0, r0, lsl #16
    11f0:	0000b000 	andeq	fp, r0, r0
    11f4:	50000100 	andpl	r0, r0, r0, lsl #2
    11f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    11fc:	000000b2 	strheq	r0, [r0], -r2
    1200:	01f30004 	mvnseq	r0, r4
    1204:	00b29f50 	adcseq	r9, r2, r0, asr pc
    1208:	00b60000 	adcseq	r0, r6, r0
    120c:	00010000 	andeq	r0, r1, r0
    1210:	0000b650 	andeq	fp, r0, r0, asr r6
    1214:	0000c000 	andeq	ip, r0, r0
    1218:	f3000400 	vshl.u8	d0, d0, d0
    121c:	009f5001 	addseq	r5, pc, r1
    1220:	00000000 	andeq	r0, r0, r0
    1224:	c0000000 	andgt	r0, r0, r0
    1228:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    122c:	01000000 	mrseq	r0, (UNDEF: 0)
    1230:	00c85000 	sbceq	r5, r8, r0
    1234:	00ce0000 	sbceq	r0, lr, r0
    1238:	00040000 	andeq	r0, r4, r0
    123c:	9f5001f3 	svcls	0x005001f3
    1240:	000000ce 	andeq	r0, r0, lr, asr #1
    1244:	000000d6 	ldrdeq	r0, [r0], -r6
    1248:	d6500001 	ldrble	r0, [r0], -r1
    124c:	e0000000 	and	r0, r0, r0
    1250:	04000000 	streq	r0, [r0], #-0
    1254:	5001f300 	andpl	pc, r1, r0, lsl #6
    1258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    125c:	00000000 	andeq	r0, r0, r0
    1260:	0000c000 	andeq	ip, r0, r0
    1264:	0000d800 	andeq	sp, r0, r0, lsl #16
    1268:	30000200 	andcc	r0, r0, r0, lsl #4
    126c:	0000d89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1270:	0000e000 	andeq	lr, r0, r0
    1274:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1280:	000000ec 	andeq	r0, r0, ip, ror #1
    1284:	0000010e 	andeq	r0, r0, lr, lsl #2
    1288:	9f340002 	svcls	0x00340002
    128c:	0000010e 	andeq	r0, r0, lr, lsl #2
    1290:	00000114 	andeq	r0, r0, r4, lsl r1
    1294:	00500001 	subseq	r0, r0, r1
    1298:	00000000 	andeq	r0, r0, r0
    129c:	14000000 	strne	r0, [r0], #-0
    12a0:	1b000001 	blne	12ac <__Stack_Size+0xeac>
    12a4:	01000001 	tsteq	r0, r1
    12a8:	011b5000 	tsteq	fp, r0
    12ac:	014a0000 	mrseq	r0, (UNDEF: 74)
    12b0:	00010000 	andeq	r0, r1, r0
    12b4:	00000054 	andeq	r0, r0, r4, asr r0
    12b8:	00000000 	andeq	r0, r0, r0
    12bc:	00011400 	andeq	r1, r1, r0, lsl #8
    12c0:	00011c00 	andeq	r1, r1, r0, lsl #24
    12c4:	34000200 	strcc	r0, [r0], #-512	; 0x200
    12c8:	00011c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    12cc:	00013700 	andeq	r3, r1, r0, lsl #14
    12d0:	50000100 	andpl	r0, r0, r0, lsl #2
    12d4:	00000138 	andeq	r0, r0, r8, lsr r1
    12d8:	0000013e 	andeq	r0, r0, lr, lsr r1
    12dc:	40500001 	subsmi	r0, r0, r1
    12e0:	4a000001 	bmi	12ec <__Stack_Size+0xeec>
    12e4:	01000001 	tsteq	r0, r1
    12e8:	00005000 	andeq	r5, r0, r0
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	014a0000 	mrseq	r0, (UNDEF: 74)
    12f4:	01520000 	cmpeq	r2, r0
    12f8:	00010000 	andeq	r0, r1, r0
    12fc:	00015250 	andeq	r5, r1, r0, asr r2
    1300:	00018600 	andeq	r8, r1, r0, lsl #12
    1304:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1308:	00000186 	andeq	r0, r0, r6, lsl #3
    130c:	0000018c 	andeq	r0, r0, ip, lsl #3
    1310:	01f30004 	mvnseq	r0, r4
    1314:	00009f50 	andeq	r9, r0, r0, asr pc
    1318:	00000000 	andeq	r0, r0, r0
    131c:	014a0000 	mrseq	r0, (UNDEF: 74)
    1320:	01560000 	cmpeq	r6, r0
    1324:	00020000 	andeq	r0, r2, r0
    1328:	01569f34 	cmpeq	r6, r4, lsr pc
    132c:	01600000 	cmneq	r0, r0
    1330:	00010000 	andeq	r0, r1, r0
    1334:	00017650 	andeq	r7, r1, r0, asr r6
    1338:	00018c00 	andeq	r8, r1, r0, lsl #24
    133c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1348:	0000018c 	andeq	r0, r0, ip, lsl #3
    134c:	00000196 	muleq	r0, r6, r1
    1350:	9f340002 	svcls	0x00340002
    1354:	00000196 	muleq	r0, r6, r1
    1358:	000001a0 	andeq	r0, r0, r0, lsr #3
    135c:	b4500001 	ldrblt	r0, [r0], #-1
    1360:	c8000001 	stmdagt	r0, {r0}
    1364:	01000001 	tsteq	r0, r1
    1368:	00005000 	andeq	r5, r0, r0
    136c:	00000000 	andeq	r0, r0, r0
    1370:	01c80000 	biceq	r0, r8, r0
    1374:	01d20000 	bicseq	r0, r2, r0
    1378:	00020000 	andeq	r0, r2, r0
    137c:	01d29f34 	bicseq	r9, r2, r4, lsr pc
    1380:	01de0000 	bicseq	r0, lr, r0
    1384:	00010000 	andeq	r0, r1, r0
    1388:	0001fa50 	andeq	pc, r1, r0, asr sl	; <UNPREDICTABLE>
    138c:	00020600 	andeq	r0, r2, r0, lsl #12
    1390:	50000100 	andpl	r0, r0, r0, lsl #2
    1394:	0000021c 	andeq	r0, r0, ip, lsl r2
    1398:	00000238 	andeq	r0, r0, r8, lsr r2
    139c:	00500001 	subseq	r0, r0, r1
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    13a8:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    13ac:	01000002 	tsteq	r0, r2
    13b0:	023e5000 	eorseq	r5, lr, #0
    13b4:	027a0000 	rsbseq	r0, sl, #0
    13b8:	00010000 	andeq	r0, r1, r0
    13bc:	00027a56 	andeq	r7, r2, r6, asr sl
    13c0:	00028000 	andeq	r8, r2, r0
    13c4:	f3000400 	vshl.u8	d0, d0, d0
    13c8:	009f5001 	addseq	r5, pc, r1
    13cc:	00000000 	andeq	r0, r0, r0
    13d0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    13d4:	43000002 	movwmi	r0, #2
    13d8:	01000002 	tsteq	r0, r2
    13dc:	02435100 	subeq	r5, r3, #0, 2
    13e0:	02620000 	rsbeq	r0, r2, #0
    13e4:	00010000 	andeq	r0, r1, r0
    13e8:	00026255 	andeq	r6, r2, r5, asr r2
    13ec:	00028000 	andeq	r8, r2, r0
    13f0:	f3000400 	vshl.u8	d0, d0, d0
    13f4:	009f5101 	addseq	r5, pc, r1, lsl #2
    13f8:	00000000 	andeq	r0, r0, r0
    13fc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1400:	44000002 	strmi	r0, [r0], #-2
    1404:	02000002 	andeq	r0, r0, #2
    1408:	449f3400 	ldrmi	r3, [pc], #1024	; 1410 <__Stack_Size+0x1010>
    140c:	4c000002 	stcmi	0, cr0, [r0], {2}
    1410:	01000002 	tsteq	r0, r2
    1414:	025c5000 	subseq	r5, ip, #0
    1418:	02660000 	rsbeq	r0, r6, #0
    141c:	00010000 	andeq	r0, r1, r0
    1420:	00026a50 	andeq	r6, r2, r0, asr sl
    1424:	00028000 	andeq	r8, r2, r0
    1428:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1434:	00000280 	andeq	r0, r0, r0, lsl #5
    1438:	00000286 	andeq	r0, r0, r6, lsl #5
    143c:	86500001 	ldrbhi	r0, [r0], -r1
    1440:	b2000002 	andlt	r0, r0, #2
    1444:	01000002 	tsteq	r0, r2
    1448:	02b25500 	adcseq	r5, r2, #0, 10
    144c:	02b80000 	adcseq	r0, r8, #0
    1450:	00040000 	andeq	r0, r4, r0
    1454:	9f5001f3 	svcls	0x005001f3
	...
    1460:	00000280 	andeq	r0, r0, r0, lsl #5
    1464:	0000028b 	andeq	r0, r0, fp, lsl #5
    1468:	8b510001 	blhi	1441474 <__Stack_Size+0x1441074>
    146c:	b8000002 	stmdalt	r0, {r1}
    1470:	04000002 	streq	r0, [r0], #-2
    1474:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1478:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    147c:	00000000 	andeq	r0, r0, r0
    1480:	00028000 	andeq	r8, r2, r0
    1484:	00028c00 	andeq	r8, r2, r0, lsl #24
    1488:	34000200 	strcc	r0, [r0], #-512	; 0x200
    148c:	00028c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    1490:	00029400 	andeq	r9, r2, r0, lsl #8
    1494:	50000100 	andpl	r0, r0, r0, lsl #2
    1498:	000002a2 	andeq	r0, r0, r2, lsr #5
    149c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    14a0:	00500001 	subseq	r0, r0, r1
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    14ac:	be000002 	cdplt	0, 0, cr0, cr0, cr2, {0}
    14b0:	01000002 	tsteq	r0, r2
    14b4:	02be5000 	adcseq	r5, lr, #0
    14b8:	02f60000 	rscseq	r0, r6, #0
    14bc:	00010000 	andeq	r0, r1, r0
    14c0:	0002f656 	andeq	pc, r2, r6, asr r6	; <UNPREDICTABLE>
    14c4:	00030000 	andeq	r0, r3, r0
    14c8:	f3000400 	vshl.u8	d0, d0, d0
    14cc:	009f5001 	addseq	r5, pc, r1
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    14d8:	c3000002 	movwgt	r0, #2
    14dc:	01000002 	tsteq	r0, r2
    14e0:	02c35100 	sbceq	r5, r3, #0, 2
    14e4:	03000000 	movweq	r0, #0
    14e8:	00040000 	andeq	r0, r4, r0
    14ec:	9f5101f3 	svcls	0x005101f3
	...
    14f8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    14fc:	000002c4 	andeq	r0, r0, r4, asr #5
    1500:	9f340002 	svcls	0x00340002
    1504:	000002c4 	andeq	r0, r0, r4, asr #5
    1508:	000002da 	ldrdeq	r0, [r0], -sl
    150c:	e6500001 	ldrb	r0, [r0], -r1
    1510:	00000002 	andeq	r0, r0, r2
    1514:	01000003 	tsteq	r0, r3
    1518:	00005000 	andeq	r5, r0, r0
    151c:	00000000 	andeq	r0, r0, r0
    1520:	03000000 	movweq	r0, #0
    1524:	03040000 	movweq	r0, #16384	; 0x4000
    1528:	00010000 	andeq	r0, r1, r0
    152c:	00030450 	andeq	r0, r3, r0, asr r4
    1530:	00030600 	andeq	r0, r3, r0, lsl #12
    1534:	70000400 	andvc	r0, r0, r0, lsl #8
    1538:	069f2000 	ldreq	r2, [pc], r0
    153c:	10000003 	andne	r0, r0, r3
    1540:	04000003 	streq	r0, [r0], #-3
    1544:	20007400 	andcs	r7, r0, r0, lsl #8
    1548:	0003109f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    154c:	00036e00 	andeq	r6, r3, r0, lsl #28
    1550:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1554:	0000036e 	andeq	r0, r0, lr, ror #6
    1558:	000003a0 	andeq	r0, r0, r0, lsr #7
    155c:	01f30005 	mvnseq	r0, r5
    1560:	009f2050 	addseq	r2, pc, r0, asr r0	; <UNPREDICTABLE>
    1564:	00000000 	andeq	r0, r0, r0
    1568:	04000000 	streq	r0, [r0], #-0
    156c:	06000003 	streq	r0, [r0], -r3
    1570:	07000003 	streq	r0, [r0, -r3]
    1574:	20007000 	andcs	r7, r0, r0
    1578:	9f1aff08 	svcls	0x001aff08
    157c:	00000306 	andeq	r0, r0, r6, lsl #6
    1580:	00000310 	andeq	r0, r0, r0, lsl r3
    1584:	00740007 	rsbseq	r0, r4, r7
    1588:	1aff0820 	bne	fffc3610 <SCS_BASE+0x1ffb5610>
    158c:	0003109f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1590:	00036e00 	andeq	r6, r3, r0, lsl #28
    1594:	74000600 	strvc	r0, [r0], #-1536	; 0x600
    1598:	1aff0800 	bne	fffc35a0 <SCS_BASE+0x1ffb55a0>
    159c:	00036e9f 	muleq	r3, pc, lr	; <UNPREDICTABLE>
    15a0:	0003a000 	andeq	sl, r3, r0
    15a4:	f3000800 	vsub.i8	d0, d0, d0
    15a8:	08205001 	stmdaeq	r0!, {r0, ip, lr}
    15ac:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    15b0:	00000000 	andeq	r0, r0, r0
    15b4:	04000000 	streq	r0, [r0], #-0
    15b8:	06000003 	streq	r0, [r0], -r3
    15bc:	0a000003 	beq	15d0 <__Stack_Size+0x11d0>
    15c0:	20007000 	andcs	r7, r0, r0
    15c4:	1aff000a 	bne	fffc15f4 <SCS_BASE+0x1ffb35f4>
    15c8:	069f2538 			; <UNDEFINED> instruction: 0x069f2538
    15cc:	10000003 	andne	r0, r0, r3
    15d0:	0a000003 	beq	15e4 <__Stack_Size+0x11e4>
    15d4:	20007400 	andcs	r7, r0, r0, lsl #8
    15d8:	1aff000a 	bne	fffc1608 <SCS_BASE+0x1ffb3608>
    15dc:	109f2538 	addsne	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    15e0:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    15e4:	09000003 	stmdbeq	r0, {r0, r1}
    15e8:	0a007400 	beq	1e5f0 <__Stack_Size+0x1e1f0>
    15ec:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    15f0:	036e9f25 	cmneq	lr, #37, 30	; 0x94
    15f4:	03a00000 	moveq	r0, #0
    15f8:	000b0000 	andeq	r0, fp, r0
    15fc:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
    1600:	1aff000a 	bne	fffc1630 <SCS_BASE+0x1ffb3630>
    1604:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    1608:	00000000 	andeq	r0, r0, r0
    160c:	04000000 	streq	r0, [r0], #-0
    1610:	06000003 	streq	r0, [r0], -r3
    1614:	0b000003 	bleq	1628 <__Stack_Size+0x1228>
    1618:	20007000 	andcs	r7, r0, r0
    161c:	2440ff08 	strbcs	pc, [r0], #-3848	; 0xf08	; <UNPREDICTABLE>
    1620:	9f25401a 	svcls	0x0025401a
    1624:	00000306 	andeq	r0, r0, r6, lsl #6
    1628:	00000310 	andeq	r0, r0, r0, lsl r3
    162c:	0074000b 	rsbseq	r0, r4, fp
    1630:	40ff0820 	rscsmi	r0, pc, r0, lsr #16
    1634:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    1638:	0003109f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    163c:	00036e00 	andeq	r6, r3, r0, lsl #28
    1640:	74000a00 	strvc	r0, [r0], #-2560	; 0xa00
    1644:	40ff0800 	rscsmi	r0, pc, r0, lsl #16
    1648:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    164c:	00036e9f 	muleq	r3, pc, lr	; <UNPREDICTABLE>
    1650:	0003a000 	andeq	sl, r3, r0
    1654:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    1658:	08205001 	stmdaeq	r0!, {r0, ip, lr}
    165c:	1a2440ff 	bne	911a60 <__Stack_Size+0x911660>
    1660:	009f2540 	addseq	r2, pc, r0, asr #10
    1664:	00000000 	andeq	r0, r0, r0
    1668:	04000000 	streq	r0, [r0], #-0
    166c:	06000003 	streq	r0, [r0], -r3
    1670:	06000003 	streq	r0, [r0], -r3
    1674:	20007000 	andcs	r7, r0, r0
    1678:	069f2548 	ldreq	r2, [pc], r8, asr #10
    167c:	10000003 	andne	r0, r0, r3
    1680:	06000003 	streq	r0, [r0], -r3
    1684:	20007400 	andcs	r7, r0, r0, lsl #8
    1688:	109f2548 	addsne	r2, pc, r8, asr #10
    168c:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    1690:	05000003 	streq	r0, [r0, #-3]
    1694:	48007400 	stmdami	r0, {sl, ip, sp, lr}
    1698:	036e9f25 	cmneq	lr, #37, 30	; 0x94
    169c:	03a00000 	moveq	r0, #0
    16a0:	00070000 	andeq	r0, r7, r0
    16a4:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
    16a8:	009f2548 	addseq	r2, pc, r8, asr #10
	...
    16b4:	0a000003 	beq	16c8 <__Stack_Size+0x12c8>
    16b8:	02000003 	andeq	r0, r0, #3
    16bc:	0a9f3400 	beq	fe7ce6c4 <SCS_BASE+0x1e7c06c4>
    16c0:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    16c4:	01000003 	tsteq	r0, r3
    16c8:	03345000 	teqeq	r4, #0
    16cc:	03380000 	teqeq	r8, #0
    16d0:	00010000 	andeq	r0, r1, r0
    16d4:	00033e50 	andeq	r3, r3, r0, asr lr
    16d8:	00034400 	andeq	r4, r3, r0, lsl #8
    16dc:	50000100 	andpl	r0, r0, r0, lsl #2
    16e0:	00000350 	andeq	r0, r0, r0, asr r3
    16e4:	00000354 	andeq	r0, r0, r4, asr r3
    16e8:	68500001 	ldmdavs	r0, {r0}^
    16ec:	6c000003 	stcvs	0, cr0, [r0], {3}
    16f0:	01000003 	tsteq	r0, r3
    16f4:	03825000 	orreq	r5, r2, #0
    16f8:	03a00000 	moveq	r0, #0
    16fc:	00010000 	andeq	r0, r1, r0
    1700:	00000050 	andeq	r0, r0, r0, asr r0
    1704:	00000000 	andeq	r0, r0, r0
    1708:	0003a000 	andeq	sl, r3, r0
    170c:	0003a800 	andeq	sl, r3, r0, lsl #16
    1710:	50000100 	andpl	r0, r0, r0, lsl #2
    1714:	000003a8 	andeq	r0, r0, r8, lsr #7
    1718:	0000042c 	andeq	r0, r0, ip, lsr #8
    171c:	01f30004 	mvnseq	r0, r4
    1720:	00009f50 	andeq	r9, r0, r0, asr pc
    1724:	00000000 	andeq	r0, r0, r0
    1728:	03a00000 	moveq	r0, #0
    172c:	03ac0000 			; <UNDEFINED> instruction: 0x03ac0000
    1730:	00020000 	andeq	r0, r2, r0
    1734:	03ac9f34 			; <UNDEFINED> instruction: 0x03ac9f34
    1738:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
    173c:	00010000 	andeq	r0, r1, r0
    1740:	0003d450 	andeq	sp, r3, r0, asr r4
    1744:	0003fa00 	andeq	pc, r3, r0, lsl #20
    1748:	50000100 	andpl	r0, r0, r0, lsl #2
    174c:	000003fe 	strdeq	r0, [r0], -lr
    1750:	0000042c 	andeq	r0, r0, ip, lsr #8
    1754:	00500001 	subseq	r0, r0, r1
    1758:	00000000 	andeq	r0, r0, r0
    175c:	2c000000 	stccs	0, cr0, [r0], {-0}
    1760:	3e000004 	cdpcc	0, 0, cr0, cr0, cr4, {0}
    1764:	01000004 	tsteq	r0, r4
    1768:	043e5000 	ldrteq	r5, [lr], #-0
    176c:	04800000 	streq	r0, [r0], #0
    1770:	00040000 	andeq	r0, r4, r0
    1774:	9f5001f3 	svcls	0x005001f3
	...
    1780:	0000042c 	andeq	r0, r0, ip, lsr #8
    1784:	00000445 	andeq	r0, r0, r5, asr #8
    1788:	45510001 	ldrbmi	r0, [r1, #-1]
    178c:	80000004 	andhi	r0, r0, r4
    1790:	04000004 	streq	r0, [r0], #-4
    1794:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1798:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	00042c00 	andeq	r2, r4, r0, lsl #24
    17a4:	00044500 	andeq	r4, r4, r0, lsl #10
    17a8:	52000100 	andpl	r0, r0, #0, 2
    17ac:	00000445 	andeq	r0, r0, r5, asr #8
    17b0:	00000480 	andeq	r0, r0, r0, lsl #9
    17b4:	01f30004 	mvnseq	r0, r4
    17b8:	00009f52 	andeq	r9, r0, r2, asr pc
    17bc:	00000000 	andeq	r0, r0, r0
    17c0:	042c0000 	strteq	r0, [ip], #-0
    17c4:	04460000 	strbeq	r0, [r6], #-0
    17c8:	00020000 	andeq	r0, r2, r0
    17cc:	04469f34 	strbeq	r9, [r6], #-3892	; 0xf34
    17d0:	04500000 	ldrbeq	r0, [r0], #-0
    17d4:	00010000 	andeq	r0, r1, r0
    17d8:	00046450 	andeq	r6, r4, r0, asr r4
    17dc:	00048000 	andeq	r8, r4, r0
    17e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    17f0:	00000024 	andeq	r0, r0, r4, lsr #32
    17f4:	24500001 	ldrbcs	r0, [r0], #-1
    17f8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    17fc:	04000000 	streq	r0, [r0], #-0
    1800:	5001f300 	andpl	pc, r1, r0, lsl #6
    1804:	00002e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1808:	00004600 	andeq	r4, r0, r0, lsl #12
    180c:	50000100 	andpl	r0, r0, r0, lsl #2
    1810:	00000046 	andeq	r0, r0, r6, asr #32
    1814:	00000050 	andeq	r0, r0, r0, asr r0
    1818:	01f30004 	mvnseq	r0, r4
    181c:	00509f50 	subseq	r9, r0, r0, asr pc
    1820:	00520000 	subseq	r0, r2, r0
    1824:	00010000 	andeq	r0, r1, r0
    1828:	00005250 	andeq	r5, r0, r0, asr r2
    182c:	00005c00 	andeq	r5, r0, r0, lsl #24
    1830:	f3000400 	vshl.u8	d0, d0, d0
    1834:	5c9f5001 	ldcpl	0, cr5, [pc], {1}
    1838:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    183c:	01000000 	mrseq	r0, (UNDEF: 0)
    1840:	005e5000 	subseq	r5, lr, r0
    1844:	00680000 	rsbeq	r0, r8, r0
    1848:	00040000 	andeq	r0, r4, r0
    184c:	9f5001f3 	svcls	0x005001f3
    1850:	00000068 	andeq	r0, r0, r8, rrx
    1854:	0000006a 	andeq	r0, r0, sl, rrx
    1858:	6a500001 	bvs	1401864 <__Stack_Size+0x1401464>
    185c:	74000000 	strvc	r0, [r0], #-0
    1860:	04000000 	streq	r0, [r0], #-0
    1864:	5001f300 	andpl	pc, r1, r0, lsl #6
    1868:	0000749f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    186c:	00007600 	andeq	r7, r0, r0, lsl #12
    1870:	50000100 	andpl	r0, r0, r0, lsl #2
    1874:	00000076 	andeq	r0, r0, r6, ror r0
    1878:	00000080 	andeq	r0, r0, r0, lsl #1
    187c:	01f30004 	mvnseq	r0, r4
    1880:	00809f50 	addeq	r9, r0, r0, asr pc
    1884:	00840000 	addeq	r0, r4, r0
    1888:	00010000 	andeq	r0, r1, r0
    188c:	00008450 	andeq	r8, r0, r0, asr r4
    1890:	00009800 	andeq	r9, r0, r0, lsl #16
    1894:	f3000400 	vshl.u8	d0, d0, d0
    1898:	989f5001 	ldmls	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    189c:	a4000000 	strge	r0, [r0], #-0
    18a0:	01000000 	mrseq	r0, (UNDEF: 0)
    18a4:	00005000 	andeq	r5, r0, r0
    18a8:	00000000 	andeq	r0, r0, r0
    18ac:	00ba0000 	adcseq	r0, sl, r0
    18b0:	00d60000 	sbcseq	r0, r6, r0
    18b4:	00010000 	andeq	r0, r1, r0
    18b8:	0000d651 	andeq	sp, r0, r1, asr r6
    18bc:	00015600 	andeq	r5, r1, r0, lsl #12
    18c0:	f3000400 	vshl.u8	d0, d0, d0
    18c4:	009f5101 	addseq	r5, pc, r1, lsl #2
    18c8:	00000000 	andeq	r0, r0, r0
    18cc:	ba000000 	blt	18d4 <__Stack_Size+0x14d4>
    18d0:	ca000000 	bgt	18d8 <__Stack_Size+0x14d8>
    18d4:	02000000 	andeq	r0, r0, #0
    18d8:	ca9f3000 	bgt	fe7cd8e0 <SCS_BASE+0x1e7bf8e0>
    18dc:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    18e0:	06000000 	streq	r0, [r0], -r0
    18e4:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    18e8:	ce9f1aff 	mrcgt	10, 4, r1, cr15, cr15, {7}
    18ec:	56000000 	strpl	r0, [r0], -r0
    18f0:	01000001 	tsteq	r0, r1
    18f4:	00005300 	andeq	r5, r0, r0, lsl #6
    18f8:	00000000 	andeq	r0, r0, r0
    18fc:	00ba0000 	adcseq	r0, sl, r0
    1900:	00d80000 	sbcseq	r0, r8, r0
    1904:	00020000 	andeq	r0, r2, r0
    1908:	00e09f30 	rsceq	r9, r0, r0, lsr pc
    190c:	01100000 	tsteq	r0, r0
    1910:	00010000 	andeq	r0, r1, r0
    1914:	00012457 	andeq	r2, r1, r7, asr r4
    1918:	00015400 	andeq	r5, r1, r0, lsl #8
    191c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1928:	000000ba 	strheq	r0, [r0], -sl
    192c:	000000d8 	ldrdeq	r0, [r0], -r8
    1930:	9f300002 	svcls	0x00300002
    1934:	000000d8 	ldrdeq	r0, [r0], -r8
    1938:	00000110 	andeq	r0, r0, r0, lsl r1
    193c:	16540001 	ldrbne	r0, [r4], -r1
    1940:	18000001 	stmdane	r0, {r0}
    1944:	02000001 	andeq	r0, r0, #1
    1948:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
    194c:	54000001 	strpl	r0, [r0], #-1
    1950:	01000001 	tsteq	r0, r1
    1954:	00005400 	andeq	r5, r0, r0, lsl #8
    1958:	00000000 	andeq	r0, r0, r0
    195c:	00ba0000 	adcseq	r0, sl, r0
    1960:	00d80000 	sbcseq	r0, r8, r0
    1964:	00020000 	andeq	r0, r2, r0
    1968:	00dc9f30 	sbcseq	r9, ip, r0, lsr pc
    196c:	00e40000 	rsceq	r0, r4, r0
    1970:	00010000 	andeq	r0, r1, r0
    1974:	0000e456 	andeq	lr, r0, r6, asr r4
    1978:	0000e800 	andeq	lr, r0, r0, lsl #16
    197c:	74000500 	strvc	r0, [r0], #-1280	; 0x500
    1980:	9f243200 	svcls	0x00243200
    1984:	000000e8 	andeq	r0, r0, r8, ror #1
    1988:	00000108 	andeq	r0, r0, r8, lsl #2
    198c:	205e0001 	subscs	r0, lr, r1
    1990:	28000001 	stmdacs	r0, {r0}
    1994:	01000001 	tsteq	r0, r1
    1998:	01285600 			; <UNDEFINED> instruction: 0x01285600
    199c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    19a0:	00050000 	andeq	r0, r5, r0
    19a4:	24320074 	ldrtcs	r0, [r2], #-116	; 0x74
    19a8:	00012c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    19ac:	00014c00 	andeq	r4, r1, r0, lsl #24
    19b0:	5e000100 	adfpls	f0, f0, f0
	...
    19bc:	000000ba 	strheq	r0, [r0], -sl
    19c0:	000000d6 	ldrdeq	r0, [r0], -r6
    19c4:	9f300002 	svcls	0x00300002
    19c8:	000000d6 	ldrdeq	r0, [r0], -r6
    19cc:	00000110 	andeq	r0, r0, r0, lsl r1
    19d0:	16510001 	ldrbne	r0, [r1], -r1
    19d4:	54000001 	strpl	r0, [r0], #-1
    19d8:	01000001 	tsteq	r0, r1
    19dc:	00005100 	andeq	r5, r0, r0, lsl #2
    19e0:	00000000 	andeq	r0, r0, r0
    19e4:	00ba0000 	adcseq	r0, sl, r0
    19e8:	00d80000 	sbcseq	r0, r8, r0
    19ec:	00020000 	andeq	r0, r2, r0
    19f0:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    19f4:	00ee0000 	rsceq	r0, lr, r0
    19f8:	00050000 	andeq	r0, r5, r0
    19fc:	24007e3f 	strcs	r7, [r0], #-3647	; 0xe3f
    1a00:	0000ee9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1a04:	0000f800 	andeq	pc, r0, r0, lsl #16
    1a08:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1a0c:	000000f8 	strdeq	r0, [r0], -r8
    1a10:	00000108 	andeq	r0, r0, r8, lsl #2
    1a14:	7e3f0005 	cdpvc	0, 3, cr0, cr15, cr5, {0}
    1a18:	2c9f2400 	cfldrscs	mvf2, [pc], {0}
    1a1c:	32000001 	andcc	r0, r0, #1
    1a20:	05000001 	streq	r0, [r0, #-1]
    1a24:	007e3f00 	rsbseq	r3, lr, r0, lsl #30
    1a28:	01329f24 	teqeq	r2, r4, lsr #30
    1a2c:	013c0000 	teqeq	ip, r0
    1a30:	00010000 	andeq	r0, r1, r0
    1a34:	00013c56 	andeq	r3, r1, r6, asr ip
    1a38:	00014c00 	andeq	r4, r1, r0, lsl #24
    1a3c:	3f000500 	svccc	0x00000500
    1a40:	9f24007e 	svcls	0x0024007e
	...
    1a4c:	00000166 	andeq	r0, r0, r6, ror #2
    1a50:	0000016e 	andeq	r0, r0, lr, ror #2
    1a54:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    1a58:	72000001 	andvc	r0, r0, #1
    1a5c:	04000001 	streq	r0, [r0], #-1
    1a60:	5001f300 	andpl	pc, r1, r0, lsl #6
    1a64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a68:	00000000 	andeq	r0, r0, r0
    1a6c:	00016600 	andeq	r6, r1, r0, lsl #12
    1a70:	00016800 	andeq	r6, r1, r0, lsl #16
    1a74:	30000200 	andcc	r0, r0, r0, lsl #4
    1a78:	0001689f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1a7c:	00017200 	andeq	r7, r1, r0, lsl #4
    1a80:	71000c00 	tstvc	r0, r0, lsl #24
    1a84:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1a88:	1a00731a 	bne	1e6f8 <__Stack_Size+0x1e2f8>
    1a8c:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    1a90:	00000000 	andeq	r0, r0, r0
    1a94:	72000000 	andvc	r0, r0, #0
    1a98:	74000001 	strvc	r0, [r0], #-1
    1a9c:	01000001 	tsteq	r0, r1
    1aa0:	01745000 	cmneq	r4, r0
    1aa4:	01780000 	cmneq	r8, r0
    1aa8:	00040000 	andeq	r0, r4, r0
    1aac:	9f5001f3 	svcls	0x005001f3
	...
    1ab8:	00000178 	andeq	r0, r0, r8, ror r1
    1abc:	00000180 	andeq	r0, r0, r0, lsl #3
    1ac0:	80500001 	subshi	r0, r0, r1
    1ac4:	84000001 	strhi	r0, [r0], #-1
    1ac8:	04000001 	streq	r0, [r0], #-1
    1acc:	5001f300 	andpl	pc, r1, r0, lsl #6
    1ad0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ad4:	00000000 	andeq	r0, r0, r0
    1ad8:	00017800 	andeq	r7, r1, r0, lsl #16
    1adc:	00017a00 	andeq	r7, r1, r0, lsl #20
    1ae0:	30000200 	andcc	r0, r0, r0, lsl #4
    1ae4:	00017a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    1ae8:	00018400 	andeq	r8, r1, r0, lsl #8
    1aec:	71000c00 	tstvc	r0, r0, lsl #24
    1af0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1af4:	1a00731a 	bne	1e764 <__Stack_Size+0x1e364>
    1af8:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    1afc:	00000000 	andeq	r0, r0, r0
    1b00:	84000000 	strhi	r0, [r0], #-0
    1b04:	86000001 	strhi	r0, [r0], -r1
    1b08:	01000001 	tsteq	r0, r1
    1b0c:	01865000 	orreq	r5, r6, r0
    1b10:	018a0000 	orreq	r0, sl, r0
    1b14:	00040000 	andeq	r0, r4, r0
    1b18:	9f5001f3 	svcls	0x005001f3
	...
    1b24:	000001a0 	andeq	r0, r0, r0, lsr #3
    1b28:	000001a4 	andeq	r0, r0, r4, lsr #3
    1b2c:	3c400004 	mcrrcc	0, 0, r0, r0, cr4
    1b30:	01a49f24 			; <UNDEFINED> instruction: 0x01a49f24
    1b34:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    1b38:	00010000 	andeq	r0, r1, r0
    1b3c:	00000053 	andeq	r0, r0, r3, asr r0
    1b40:	00000000 	andeq	r0, r0, r0
    1b44:	0001b000 	andeq	fp, r1, r0
    1b48:	0001c200 	andeq	ip, r1, r0, lsl #4
    1b4c:	50000100 	andpl	r0, r0, r0, lsl #2
    1b50:	000001c2 	andeq	r0, r0, r2, asr #3
    1b54:	000001cc 	andeq	r0, r0, ip, asr #3
    1b58:	01f30004 	mvnseq	r0, r4
    1b5c:	00009f50 	andeq	r9, r0, r0, asr pc
    1b60:	00000000 	andeq	r0, r0, r0
    1b64:	01b00000 	movseq	r0, r0
    1b68:	01be0000 			; <UNDEFINED> instruction: 0x01be0000
    1b6c:	00010000 	andeq	r0, r1, r0
    1b70:	0001be51 	andeq	fp, r1, r1, asr lr
    1b74:	0001cc00 	andeq	ip, r1, r0, lsl #24
    1b78:	f3000400 	vshl.u8	d0, d0, d0
    1b7c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	b0000000 	andlt	r0, r0, r0
    1b88:	b4000001 	strlt	r0, [r0], #-1
    1b8c:	02000001 	andeq	r0, r0, #1
    1b90:	b49f3000 	ldrlt	r3, [pc], #0	; 1b98 <__Stack_Size+0x1798>
    1b94:	b8000001 	stmdalt	r0, {r0}
    1b98:	0f000001 	svceq	0x00000001
    1b9c:	0a007300 	beq	1e7a4 <__Stack_Size+0x1e3a4>
    1ba0:	701aff80 	andsvc	pc, sl, r0, lsl #31
    1ba4:	1aff0800 	bne	fffc3bac <SCS_BASE+0x1ffb5bac>
    1ba8:	9f212434 	svcls	0x00212434
    1bac:	000001c2 	andeq	r0, r0, r2, asr #3
    1bb0:	000001cc 	andeq	r0, r0, ip, asr #3
    1bb4:	00500001 	subseq	r0, r0, r1
    1bb8:	00000000 	andeq	r0, r0, r0
    1bbc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1bc0:	1a000001 	bne	1bcc <__Stack_Size+0x17cc>
    1bc4:	01000002 	tsteq	r0, r2
    1bc8:	021a5000 	andseq	r5, sl, #0
    1bcc:	022c0000 	eoreq	r0, ip, #0
    1bd0:	00040000 	andeq	r0, r4, r0
    1bd4:	9f5001f3 	svcls	0x005001f3
	...
    1be0:	000001d8 	ldrdeq	r0, [r0], -r8
    1be4:	000001e8 	andeq	r0, r0, r8, ror #3
    1be8:	9f300002 	svcls	0x00300002
    1bec:	000001e8 	andeq	r0, r0, r8, ror #3
    1bf0:	0000021e 	andeq	r0, r0, lr, lsl r2
    1bf4:	1e520001 	cdpne	0, 5, cr0, cr2, cr1, {0}
    1bf8:	2c000002 	stccs	0, cr0, [r0], {2}
    1bfc:	08000002 	stmdaeq	r0, {r1}
    1c00:	5001f300 	andpl	pc, r1, r0, lsl #6
    1c04:	1affff0a 	bne	1834 <__Stack_Size+0x1434>
    1c08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c0c:	00000000 	andeq	r0, r0, r0
    1c10:	0001d800 	andeq	sp, r1, r0, lsl #16
    1c14:	0001fa00 	andeq	pc, r1, r0, lsl #20
    1c18:	30000200 	andcc	r0, r0, r0, lsl #4
    1c1c:	0001fa9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    1c20:	00021600 	andeq	r1, r2, r0, lsl #12
    1c24:	33000b00 	movwcc	r0, #2816	; 0xb00
    1c28:	3f4e0070 	svccc	0x004e0070
    1c2c:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    1c30:	00009f24 	andeq	r9, r0, r4, lsr #30
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	01d80000 	bicseq	r0, r8, r0
    1c3c:	01e60000 	mvneq	r0, r0
    1c40:	00020000 	andeq	r0, r2, r0
    1c44:	01e69f30 	mvneq	r9, r0, lsr pc
    1c48:	022c0000 	eoreq	r0, ip, #0
    1c4c:	00010000 	andeq	r0, r1, r0
    1c50:	00000053 	andeq	r0, r0, r3, asr r0
    1c54:	00000000 	andeq	r0, r0, r0
    1c58:	0001d800 	andeq	sp, r1, r0, lsl #16
    1c5c:	0001e600 	andeq	lr, r1, r0, lsl #12
    1c60:	30000200 	andcc	r0, r0, r0, lsl #4
    1c64:	0001e69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    1c68:	00021a00 	andeq	r1, r2, r0, lsl #20
    1c6c:	70000900 	andvc	r0, r0, r0, lsl #18
    1c70:	243f4e00 	ldrtcs	r4, [pc], #-3584	; 1c78 <__Stack_Size+0x1878>
    1c74:	9f25401a 	svcls	0x0025401a
    1c78:	0000021a 	andeq	r0, r0, sl, lsl r2
    1c7c:	0000022c 	andeq	r0, r0, ip, lsr #4
    1c80:	01f3000a 	mvnseq	r0, sl
    1c84:	243f4e50 	ldrtcs	r4, [pc], #-3664	; 1c8c <__Stack_Size+0x188c>
    1c88:	9f25401a 	svcls	0x0025401a
	...
    1c94:	0000022c 	andeq	r0, r0, ip, lsr #4
    1c98:	00000250 	andeq	r0, r0, r0, asr r2
    1c9c:	50500001 	subspl	r0, r0, r1
    1ca0:	56000002 	strpl	r0, [r0], -r2
    1ca4:	04000002 	streq	r0, [r0], #-2
    1ca8:	5001f300 	andpl	pc, r1, r0, lsl #6
    1cac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cb0:	00000000 	andeq	r0, r0, r0
    1cb4:	00022c00 	andeq	r2, r2, r0, lsl #24
    1cb8:	00023400 	andeq	r3, r2, r0, lsl #8
    1cbc:	51000100 	mrspl	r0, (UNDEF: 16)
    1cc0:	00000234 	andeq	r0, r0, r4, lsr r2
    1cc4:	00000256 	andeq	r0, r0, r6, asr r2
    1cc8:	01f30004 	mvnseq	r0, r4
    1ccc:	00009f51 	andeq	r9, r0, r1, asr pc
    1cd0:	00000000 	andeq	r0, r0, r0
    1cd4:	022c0000 	eoreq	r0, ip, #0
    1cd8:	02400000 	subeq	r0, r0, #0
    1cdc:	00020000 	andeq	r0, r2, r0
    1ce0:	02409f30 	subeq	r9, r0, #48, 30	; 0xc0
    1ce4:	02460000 	subeq	r0, r6, #0
    1ce8:	00050000 	andeq	r0, r5, r0
    1cec:	2400733f 	strcs	r7, [r0], #-831	; 0x33f
    1cf0:	0002469f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    1cf4:	00024a00 	andeq	r4, r2, r0, lsl #20
    1cf8:	52000100 	andpl	r0, r0, #0, 2
    1cfc:	0000024a 	andeq	r0, r0, sl, asr #4
    1d00:	00000256 	andeq	r0, r0, r6, asr r2
    1d04:	733f0005 	teqvc	pc, #5
    1d08:	009f2400 	addseq	r2, pc, r0, lsl #8
	...
    1d14:	1c000000 	stcne	0, cr0, [r0], {-0}
    1d18:	02000000 	andeq	r0, r0, #0
    1d1c:	1c9f3000 	ldcne	0, cr3, [pc], {0}
    1d20:	34000000 	strcc	r0, [r0], #-0
    1d24:	01000000 	mrseq	r0, (UNDEF: 0)
    1d28:	00005200 	andeq	r5, r0, r0, lsl #4
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	00340000 	eorseq	r0, r4, r0
    1d34:	004a0000 	subeq	r0, sl, r0
    1d38:	00020000 	andeq	r0, r2, r0
    1d3c:	004a9f30 	subeq	r9, sl, r0, lsr pc
    1d40:	004c0000 	subeq	r0, ip, r0
    1d44:	00020000 	andeq	r0, r2, r0
    1d48:	004c9f31 	subeq	r9, ip, r1, lsr pc
    1d4c:	004e0000 	subeq	r0, lr, r0
    1d50:	00020000 	andeq	r0, r2, r0
    1d54:	004e9f32 	subeq	r9, lr, r2, lsr pc
    1d58:	00640000 	rsbeq	r0, r4, r0
    1d5c:	00020000 	andeq	r0, r2, r0
    1d60:	00009f33 	andeq	r9, r0, r3, lsr pc
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	00640000 	rsbeq	r0, r4, r0
    1d6c:	00680000 	rsbeq	r0, r8, r0
    1d70:	00010000 	andeq	r0, r1, r0
    1d74:	00006850 	andeq	r6, r0, r0, asr r8
    1d78:	00007800 	andeq	r7, r0, r0, lsl #16
    1d7c:	f3000400 	vshl.u8	d0, d0, d0
    1d80:	009f5001 	addseq	r5, pc, r1
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1d8c:	90000000 	andls	r0, r0, r0
    1d90:	02000000 	andeq	r0, r0, #0
    1d94:	909f3000 	addsls	r3, pc, r0
    1d98:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1da0:	00985400 	addseq	r5, r8, r0, lsl #8
    1da4:	00ae0000 	adceq	r0, lr, r0
    1da8:	00010000 	andeq	r0, r1, r0
    1dac:	0000ae51 	andeq	sl, r0, r1, asr lr
    1db0:	0000c000 	andeq	ip, r0, r0
    1db4:	52000100 	andpl	r0, r0, #0, 2
    1db8:	000000c0 	andeq	r0, r0, r0, asr #1
    1dbc:	000000c2 	andeq	r0, r0, r2, asr #1
    1dc0:	00720006 	rsbseq	r0, r2, r6
    1dc4:	9f1a0071 	svcls	0x001a0071
    1dc8:	000000c2 	andeq	r0, r0, r2, asr #1
    1dcc:	000000c4 	andeq	r0, r0, r4, asr #1
    1dd0:	de520001 	cdple	0, 5, cr0, cr2, cr1, {0}
    1dd4:	fc000000 	stc2	0, cr0, [r0], {-0}
    1dd8:	02000000 	andeq	r0, r0, #0
    1ddc:	009f3000 	addseq	r3, pc, r0
    1de0:	00000000 	andeq	r0, r0, r0
    1de4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1de8:	b2000000 	andlt	r0, r0, #0
    1dec:	02000000 	andeq	r0, r0, #0
    1df0:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    1df4:	c4000000 	strgt	r0, [r0], #-0
    1df8:	01000000 	mrseq	r0, (UNDEF: 0)
    1dfc:	00c45400 	sbceq	r5, r4, r0, lsl #8
    1e00:	00cc0000 	sbceq	r0, ip, r0
    1e04:	00010000 	andeq	r0, r1, r0
    1e08:	0000de52 	andeq	sp, r0, r2, asr lr
    1e0c:	0000fc00 	andeq	pc, r0, r0, lsl #24
    1e10:	30000200 	andcc	r0, r0, r0, lsl #4
    1e14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e18:	00000000 	andeq	r0, r0, r0
    1e1c:	00007800 	andeq	r7, r0, r0, lsl #16
    1e20:	0000bc00 	andeq	fp, r0, r0, lsl #24
    1e24:	30000200 	andcc	r0, r0, r0, lsl #4
    1e28:	0000bc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1e2c:	0000ce00 	andeq	ip, r0, r0, lsl #28
    1e30:	51000100 	mrspl	r0, (UNDEF: 16)
    1e34:	000000ce 	andeq	r0, r0, lr, asr #1
    1e38:	000000de 	ldrdeq	r0, [r0], -lr
    1e3c:	ff080006 			; <UNDEFINED> instruction: 0xff080006
    1e40:	9f240075 	svcls	0x00240075
    1e44:	000000de 	ldrdeq	r0, [r0], -lr
    1e48:	000000fc 	strdeq	r0, [r0], -ip
    1e4c:	9f300002 	svcls	0x00300002
	...
    1e58:	00000078 	andeq	r0, r0, r8, ror r0
    1e5c:	00000090 	muleq	r0, r0, r0
    1e60:	9f300002 	svcls	0x00300002
    1e64:	00000090 	muleq	r0, r0, r0
    1e68:	00000094 	muleq	r0, r4, r0
    1e6c:	74340005 	ldrtvc	r0, [r4], #-5
    1e70:	949f1c00 	ldrls	r1, [pc], #3072	; 1e78 <__Stack_Size+0x1a78>
    1e74:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1e78:	01000000 	mrseq	r0, (UNDEF: 0)
    1e7c:	00985100 	addseq	r5, r8, r0, lsl #2
    1e80:	009e0000 	addseq	r0, lr, r0
    1e84:	00050000 	andeq	r0, r5, r0
    1e88:	1c007434 	cfstrsne	mvf7, [r0], {52}	; 0x34
    1e8c:	0000de9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1e90:	0000fc00 	andeq	pc, r0, r0, lsl #24
    1e94:	30000200 	andcc	r0, r0, r0, lsl #4
    1e98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e9c:	00000000 	andeq	r0, r0, r0
    1ea0:	00007800 	andeq	r7, r0, r0, lsl #16
    1ea4:	00009000 	andeq	r9, r0, r0
    1ea8:	3f000200 	svccc	0x00000200
    1eac:	0000909f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1eb0:	00009c00 	andeq	r9, r0, r0, lsl #24
    1eb4:	3f000500 	svccc	0x00000500
    1eb8:	9f250074 	svcls	0x00250074
    1ebc:	0000009c 	muleq	r0, ip, r0
    1ec0:	000000a4 	andeq	r0, r0, r4, lsr #1
    1ec4:	de520001 	cdple	0, 5, cr0, cr2, cr1, {0}
    1ec8:	fc000000 	stc2	0, cr0, [r0], {-0}
    1ecc:	02000000 	andeq	r0, r0, #0
    1ed0:	009f3f00 	addseq	r3, pc, r0, lsl #30
    1ed4:	00000000 	andeq	r0, r0, r0
    1ed8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1edc:	1a000001 	bne	1ee8 <__Stack_Size+0x1ae8>
    1ee0:	01000001 	tsteq	r0, r1
    1ee4:	011a5000 	tsteq	sl, r0
    1ee8:	011e0000 	tsteq	lr, r0
    1eec:	00040000 	andeq	r0, r4, r0
    1ef0:	9f5001f3 	svcls	0x005001f3
	...
    1efc:	00000130 	andeq	r0, r0, r0, lsr r1
    1f00:	00000142 	andeq	r0, r0, r2, asr #2
    1f04:	42500001 	subsmi	r0, r0, #1
    1f08:	50000001 	andpl	r0, r0, r1
    1f0c:	04000001 	streq	r0, [r0], #-1
    1f10:	5001f300 	andpl	pc, r1, r0, lsl #6
    1f14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	00013000 	andeq	r3, r1, r0
    1f20:	00014200 	andeq	r4, r1, r0, lsl #4
    1f24:	30000200 	andcc	r0, r0, r0, lsl #4
    1f28:	0001429f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    1f2c:	00014400 	andeq	r4, r1, r0, lsl #8
    1f30:	70000900 	andvc	r0, r0, r0, lsl #18
    1f34:	1a007200 	bne	1e73c <__Stack_Size+0x1e33c>
    1f38:	9f290072 	svcls	0x00290072
	...
    1f44:	00000130 	andeq	r0, r0, r0, lsr r1
    1f48:	00000138 	andeq	r0, r0, r8, lsr r1
    1f4c:	9f300002 	svcls	0x00300002
    1f50:	00000138 	andeq	r0, r0, r8, lsr r1
    1f54:	00000150 	andeq	r0, r0, r0, asr r1
    1f58:	00520001 	subseq	r0, r2, r1
    1f5c:	00000000 	andeq	r0, r0, r0
    1f60:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1f64:	64000001 	strvs	r0, [r0], #-1
    1f68:	01000001 	tsteq	r0, r1
    1f6c:	01645000 	cmneq	r4, r0
    1f70:	01740000 	cmneq	r4, r0
    1f74:	00040000 	andeq	r0, r4, r0
    1f78:	9f5001f3 	svcls	0x005001f3
	...
    1f84:	00000184 	andeq	r0, r0, r4, lsl #3
    1f88:	00000196 	muleq	r0, r6, r1
    1f8c:	96500001 	ldrbls	r0, [r0], -r1
    1f90:	a4000001 	strge	r0, [r0], #-1
    1f94:	04000001 	streq	r0, [r0], #-1
    1f98:	5001f300 	andpl	pc, r1, r0, lsl #6
    1f9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1fa0:	00000000 	andeq	r0, r0, r0
    1fa4:	00018400 	andeq	r8, r1, r0, lsl #8
    1fa8:	00019600 	andeq	r9, r1, r0, lsl #12
    1fac:	30000200 	andcc	r0, r0, r0, lsl #4
    1fb0:	0001969f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    1fb4:	00019800 	andeq	r9, r1, r0, lsl #16
    1fb8:	70000900 	andvc	r0, r0, r0, lsl #18
    1fbc:	1a007200 	bne	1e7c4 <__Stack_Size+0x1e3c4>
    1fc0:	9f290072 	svcls	0x00290072
	...
    1fcc:	00000184 	andeq	r0, r0, r4, lsl #3
    1fd0:	0000018c 	andeq	r0, r0, ip, lsl #3
    1fd4:	9f300002 	svcls	0x00300002
    1fd8:	0000018c 	andeq	r0, r0, ip, lsl #3
    1fdc:	000001a4 	andeq	r0, r0, r4, lsr #3
    1fe0:	00520001 	subseq	r0, r2, r1
    1fe4:	00000000 	andeq	r0, r0, r0
    1fe8:	b0000000 	andlt	r0, r0, r0
    1fec:	bc000001 	stclt	0, cr0, [r0], {1}
    1ff0:	01000001 	tsteq	r0, r1
    1ff4:	01bc5000 			; <UNDEFINED> instruction: 0x01bc5000
    1ff8:	01c40000 	biceq	r0, r4, r0
    1ffc:	00040000 	andeq	r0, r4, r0
    2000:	9f5001f3 	svcls	0x005001f3
	...
    200c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2010:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    2014:	b4510001 	ldrblt	r0, [r1], #-1
    2018:	c4000001 	strgt	r0, [r0], #-1
    201c:	04000001 	streq	r0, [r0], #-1
    2020:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2024:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2028:	00000000 	andeq	r0, r0, r0
    202c:	0001e400 	andeq	lr, r1, r0, lsl #8
    2030:	0001ec00 	andeq	lr, r1, r0, lsl #24
    2034:	50000100 	andpl	r0, r0, r0, lsl #2
    2038:	000001ec 	andeq	r0, r0, ip, ror #3
    203c:	000001ee 	andeq	r0, r0, lr, ror #3
    2040:	01f30004 	mvnseq	r0, r4
    2044:	01ee9f50 	mvneq	r9, r0, asr pc
    2048:	01f20000 	mvnseq	r0, r0
    204c:	00010000 	andeq	r0, r1, r0
    2050:	0001f250 	andeq	pc, r1, r0, asr r2	; <UNPREDICTABLE>
    2054:	0001fc00 	andeq	pc, r1, r0, lsl #24
    2058:	f3000400 	vshl.u8	d0, d0, d0
    205c:	009f5001 	addseq	r5, pc, r1
    2060:	00000000 	andeq	r0, r0, r0
    2064:	fc000000 	stc2	0, cr0, [r0], {-0}
    2068:	00000001 	andeq	r0, r0, r1
    206c:	01000002 	tsteq	r0, r2
    2070:	02005000 	andeq	r5, r0, #0
    2074:	021c0000 	andseq	r0, ip, #0
    2078:	00040000 	andeq	r0, r4, r0
    207c:	9f5001f3 	svcls	0x005001f3
	...
    2088:	000001fc 	strdeq	r0, [r0], -ip
    208c:	0000020a 	andeq	r0, r0, sl, lsl #4
    2090:	0a510001 	beq	144209c <__Stack_Size+0x1441c9c>
    2094:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2098:	04000002 	streq	r0, [r0], #-2
    209c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    20a0:	00020e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    20a4:	00021000 	andeq	r1, r2, r0
    20a8:	51000100 	mrspl	r0, (UNDEF: 16)
    20ac:	00000210 	andeq	r0, r0, r0, lsl r2
    20b0:	0000021c 	andeq	r0, r0, ip, lsl r2
    20b4:	01f30004 	mvnseq	r0, r4
    20b8:	00009f51 	andeq	r9, r0, r1, asr pc
    20bc:	00000000 	andeq	r0, r0, r0
    20c0:	01fc0000 	mvnseq	r0, r0
    20c4:	02040000 	andeq	r0, r4, #0
    20c8:	00020000 	andeq	r0, r2, r0
    20cc:	02049f30 	andeq	r9, r4, #48, 30	; 0xc0
    20d0:	020c0000 	andeq	r0, ip, #0
    20d4:	00010000 	andeq	r0, r1, r0
    20d8:	00020c52 	andeq	r0, r2, r2, asr ip
    20dc:	00020e00 	andeq	r0, r2, r0, lsl #28
    20e0:	31000500 	tstcc	r0, r0, lsl #10
    20e4:	9f240070 	svcls	0x00240070
    20e8:	0000020e 	andeq	r0, r0, lr, lsl #4
    20ec:	00000214 	andeq	r0, r0, r4, lsl r2
    20f0:	14520001 	ldrbne	r0, [r2], #-1
    20f4:	1c000002 	stcne	0, cr0, [r0], {2}
    20f8:	05000002 	streq	r0, [r0, #-2]
    20fc:	00703100 	rsbseq	r3, r0, r0, lsl #2
    2100:	00009f24 	andeq	r9, r0, r4, lsr #30
    2104:	00000000 	andeq	r0, r0, r0
    2108:	021c0000 	andseq	r0, ip, #0
    210c:	023e0000 	eorseq	r0, lr, #0
    2110:	00010000 	andeq	r0, r1, r0
    2114:	00023e50 	andeq	r3, r2, r0, asr lr
    2118:	00026800 	andeq	r6, r2, r0, lsl #16
    211c:	f3000400 	vshl.u8	d0, d0, d0
    2120:	009f5001 	addseq	r5, pc, r1
    2124:	00000000 	andeq	r0, r0, r0
    2128:	1c000000 	stcne	0, cr0, [r0], {-0}
    212c:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
    2130:	01000002 	tsteq	r0, r2
    2134:	022e5100 	eoreq	r5, lr, #0, 2
    2138:	02680000 	rsbeq	r0, r8, #0
    213c:	00040000 	andeq	r0, r4, r0
    2140:	9f5101f3 	svcls	0x005101f3
	...
    214c:	0000021c 	andeq	r0, r0, ip, lsl r2
    2150:	00000236 	andeq	r0, r0, r6, lsr r2
    2154:	36520001 	ldrbcc	r0, [r2], -r1
    2158:	68000002 	stmdavs	r0, {r1}
    215c:	04000002 	streq	r0, [r0], #-2
    2160:	5201f300 	andpl	pc, r1, #0, 6
    2164:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2168:	00000000 	andeq	r0, r0, r0
    216c:	00021c00 	andeq	r1, r2, r0, lsl #24
    2170:	00022800 	andeq	r2, r2, r0, lsl #16
    2174:	30000200 	andcc	r0, r0, r0, lsl #4
    2178:	0002289f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    217c:	00022c00 	andeq	r2, r2, r0, lsl #24
    2180:	34000500 	strcc	r0, [r0], #-1280	; 0x500
    2184:	9f1c0073 	svcls	0x001c0073
    2188:	0000022c 	andeq	r0, r0, ip, lsr #4
    218c:	00000230 	andeq	r0, r0, r0, lsr r2
    2190:	30540001 	subscc	r0, r4, r1
    2194:	34000002 	strcc	r0, [r0], #-2
    2198:	05000002 	streq	r0, [r0, #-2]
    219c:	00733400 	rsbseq	r3, r3, r0, lsl #8
    21a0:	00009f1c 	andeq	r9, r0, ip, lsl pc
    21a4:	00000000 	andeq	r0, r0, r0
    21a8:	021c0000 	andseq	r0, ip, #0
    21ac:	02280000 	eoreq	r0, r8, #0
    21b0:	00030000 	andeq	r0, r3, r0
    21b4:	289fff08 	ldmcs	pc, {r3, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    21b8:	34000002 	strcc	r0, [r0], #-2
    21bc:	06000002 	streq	r0, [r0], -r2
    21c0:	73ff0800 	mvnsvc	r0, #0, 16
    21c4:	349f2500 	ldrcc	r2, [pc], #1280	; 21cc <__Stack_Size+0x1dcc>
    21c8:	3a000002 	bcc	21d8 <__Stack_Size+0x1dd8>
    21cc:	01000002 	tsteq	r0, r2
    21d0:	00005300 	andeq	r5, r0, r0, lsl #6
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	021c0000 	andseq	r0, ip, #0
    21dc:	025a0000 	subseq	r0, sl, #0
    21e0:	00020000 	andeq	r0, r2, r0
    21e4:	025a9f30 	subseq	r9, sl, #48, 30	; 0xc0
    21e8:	02680000 	rsbeq	r0, r8, #0
    21ec:	00060000 	andeq	r0, r6, r0
    21f0:	0073ff08 	rsbseq	pc, r3, r8, lsl #30
    21f4:	00009f24 	andeq	r9, r0, r4, lsr #30
    21f8:	00000000 	andeq	r0, r0, r0
    21fc:	021c0000 	andseq	r0, ip, #0
    2200:	02280000 	eoreq	r0, r8, #0
    2204:	00020000 	andeq	r0, r2, r0
    2208:	02289f30 	eoreq	r9, r8, #48, 30	; 0xc0
    220c:	022e0000 	eoreq	r0, lr, #0
    2210:	00010000 	andeq	r0, r1, r0
    2214:	00022e53 	andeq	r2, r2, r3, asr lr
    2218:	00025a00 	andeq	r5, r2, r0, lsl #20
    221c:	51000100 	mrspl	r0, (UNDEF: 16)
    2220:	0000025a 	andeq	r0, r0, sl, asr r2
    2224:	0000025c 	andeq	r0, r0, ip, asr r2
    2228:	00710006 	rsbseq	r0, r1, r6
    222c:	9f240073 	svcls	0x00240073
    2230:	0000025c 	andeq	r0, r0, ip, asr r2
    2234:	0000025e 	andeq	r0, r0, lr, asr r2
    2238:	00510001 	subseq	r0, r1, r1
    223c:	00000000 	andeq	r0, r0, r0
    2240:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2244:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
    2248:	01000002 	tsteq	r0, r2
    224c:	026e5000 	rsbeq	r5, lr, #0
    2250:	02840000 	addeq	r0, r4, #0
    2254:	00040000 	andeq	r0, r4, r0
    2258:	9f5001f3 	svcls	0x005001f3
	...
    2264:	00000268 	andeq	r0, r0, r8, ror #4
    2268:	00000274 	andeq	r0, r0, r4, ror r2
    226c:	9f300002 	svcls	0x00300002
    2270:	00000274 	andeq	r0, r0, r4, ror r2
    2274:	00000276 	andeq	r0, r0, r6, ror r2
    2278:	00730009 	rsbseq	r0, r3, r9
    227c:	731a0070 	tstvc	sl, #112	; 0x70
    2280:	009f2900 	addseq	r2, pc, r0, lsl #18
    2284:	00000000 	andeq	r0, r0, r0
    2288:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    228c:	74000002 	strvc	r0, [r0], #-2
    2290:	02000002 	andeq	r0, r0, #2
    2294:	749f3000 	ldrvc	r3, [pc], #0	; 229c <__Stack_Size+0x1e9c>
    2298:	76000002 	strvc	r0, [r0], -r2
    229c:	06000002 	streq	r0, [r0], -r2
    22a0:	70007300 	andvc	r7, r0, r0, lsl #6
    22a4:	769f1a00 	ldrvc	r1, [pc], r0, lsl #20
    22a8:	7a000002 	bvc	22b8 <__Stack_Size+0x1eb8>
    22ac:	01000002 	tsteq	r0, r2
    22b0:	00005000 	andeq	r5, r0, r0
    22b4:	00000000 	andeq	r0, r0, r0
    22b8:	02680000 	rsbeq	r0, r8, #0
    22bc:	026e0000 	rsbeq	r0, lr, #0
    22c0:	00070000 	andeq	r0, r7, r0
    22c4:	253a0070 	ldrcs	r0, [sl, #-112]!	; 0x70
    22c8:	6e9f1a3f 	mrcvs	10, 4, r1, cr15, cr15, {1}
    22cc:	72000002 	andvc	r0, r0, #2
    22d0:	08000002 	stmdaeq	r0, {r1}
    22d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    22d8:	1a3f253a 	bne	fcb7c8 <__Stack_Size+0xfcb3c8>
    22dc:	0002729f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    22e0:	00027800 	andeq	r7, r2, r0, lsl #16
    22e4:	53000100 	movwpl	r0, #256	; 0x100
    22e8:	00000278 	andeq	r0, r0, r8, ror r2
    22ec:	00000284 	andeq	r0, r0, r4, lsl #5
    22f0:	f3310009 	vhadd.u<illegal width 64>	d0, d1, d9
    22f4:	f6095001 			; <UNDEFINED> instruction: 0xf6095001
    22f8:	009f2424 	addseq	r2, pc, r4, lsr #8
    22fc:	00000000 	andeq	r0, r0, r0
    2300:	84000000 	strhi	r0, [r0], #-0
    2304:	8a000002 	bhi	2314 <__Stack_Size+0x1f14>
    2308:	01000002 	tsteq	r0, r2
    230c:	028a5000 	addeq	r5, sl, #0
    2310:	029c0000 	addseq	r0, ip, #0
    2314:	00040000 	andeq	r0, r4, r0
    2318:	9f5001f3 	svcls	0x005001f3
	...
    2324:	00000284 	andeq	r0, r0, r4, lsl #5
    2328:	0000028a 	andeq	r0, r0, sl, lsl #5
    232c:	00700005 	rsbseq	r0, r0, r5
    2330:	8a9f1a4f 	bhi	fe7c8c74 <SCS_BASE+0x1e7bac74>
    2334:	9c000002 	stcls	0, cr0, [r0], {2}
    2338:	01000002 	tsteq	r0, r2
    233c:	00005000 	andeq	r5, r0, r0
    2340:	00000000 	andeq	r0, r0, r0
    2344:	029c0000 	addseq	r0, ip, #0
    2348:	02a20000 	adceq	r0, r2, #0
    234c:	00010000 	andeq	r0, r1, r0
    2350:	0002a250 	andeq	sl, r2, r0, asr r2
    2354:	0002b400 	andeq	fp, r2, r0, lsl #8
    2358:	f3000400 	vshl.u8	d0, d0, d0
    235c:	009f5001 	addseq	r5, pc, r1
    2360:	00000000 	andeq	r0, r0, r0
    2364:	9c000000 	stcls	0, cr0, [r0], {-0}
    2368:	a2000002 	andge	r0, r0, #2
    236c:	05000002 	streq	r0, [r0, #-2]
    2370:	4f007000 	svcmi	0x00007000
    2374:	02a29f1a 	adceq	r9, r2, #26, 30	; 0x68
    2378:	02a60000 	adceq	r0, r6, #0
    237c:	00010000 	andeq	r0, r1, r0
    2380:	0002a650 	andeq	sl, r2, r0, asr r6
    2384:	0002b400 	andeq	fp, r2, r0, lsl #8
    2388:	70000300 	andvc	r0, r0, r0, lsl #6
    238c:	00009f01 	andeq	r9, r0, r1, lsl #30
    2390:	00000000 	andeq	r0, r0, r0
    2394:	02b40000 	adcseq	r0, r4, #0
    2398:	02ba0000 	adcseq	r0, sl, #0
    239c:	00010000 	andeq	r0, r1, r0
    23a0:	0002ba50 	andeq	fp, r2, r0, asr sl
    23a4:	0002d000 	andeq	sp, r2, r0
    23a8:	f3000400 	vshl.u8	d0, d0, d0
    23ac:	009f5001 	addseq	r5, pc, r1
    23b0:	00000000 	andeq	r0, r0, r0
    23b4:	b4000000 	strlt	r0, [r0], #-0
    23b8:	c0000002 	andgt	r0, r0, r2
    23bc:	02000002 	andeq	r0, r0, #2
    23c0:	c09f3000 	addsgt	r3, pc, r0
    23c4:	c2000002 	andgt	r0, r0, #2
    23c8:	09000002 	stmdbeq	r0, {r1}
    23cc:	70007300 	andvc	r7, r0, r0, lsl #6
    23d0:	00731a00 	rsbseq	r1, r3, r0, lsl #20
    23d4:	00009f29 	andeq	r9, r0, r9, lsr #30
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	02b40000 	adcseq	r0, r4, #0
    23e0:	02c00000 	sbceq	r0, r0, #0
    23e4:	00020000 	andeq	r0, r2, r0
    23e8:	02c09f30 	sbceq	r9, r0, #48, 30	; 0xc0
    23ec:	02c20000 	sbceq	r0, r2, #0
    23f0:	00060000 	andeq	r0, r6, r0
    23f4:	00700073 	rsbseq	r0, r0, r3, ror r0
    23f8:	02c29f1a 	sbceq	r9, r2, #26, 30	; 0x68
    23fc:	02c60000 	sbceq	r0, r6, #0
    2400:	00010000 	andeq	r0, r1, r0
    2404:	00000050 	andeq	r0, r0, r0, asr r0
    2408:	00000000 	andeq	r0, r0, r0
    240c:	0002b400 	andeq	fp, r2, r0, lsl #8
    2410:	0002ba00 	andeq	fp, r2, r0, lsl #20
    2414:	70000700 	andvc	r0, r0, r0, lsl #14
    2418:	3f253e00 	svccc	0x00253e00
    241c:	02ba9f1a 	adcseq	r9, sl, #26, 30	; 0x68
    2420:	02be0000 	adcseq	r0, lr, #0
    2424:	00080000 	andeq	r0, r8, r0
    2428:	3e5001f3 	mrccc	1, 2, r0, cr0, cr3, {7}
    242c:	9f1a3f25 	svcls	0x001a3f25
    2430:	000002be 			; <UNDEFINED> instruction: 0x000002be
    2434:	000002c4 	andeq	r0, r0, r4, asr #5
    2438:	c4530001 	ldrbgt	r0, [r3], #-1
    243c:	d0000002 	andle	r0, r0, r2
    2440:	09000002 	stmdbeq	r0, {r1}
    2444:	01f33100 	mvnseq	r3, r0, lsl #2
    2448:	24f20950 	ldrbtcs	r0, [r2], #2384	; 0x950
    244c:	00009f24 	andeq	r9, r0, r4, lsr #30
    2450:	00000000 	andeq	r0, r0, r0
    2454:	02d00000 	sbcseq	r0, r0, #0
    2458:	02da0000 	sbcseq	r0, sl, #0
    245c:	00010000 	andeq	r0, r1, r0
    2460:	0002da50 	andeq	sp, r2, r0, asr sl
    2464:	0002dc00 	andeq	sp, r2, r0, lsl #24
    2468:	f3000400 	vshl.u8	d0, d0, d0
    246c:	dc9f5001 	ldcle	0, cr5, [pc], {1}
    2470:	e6000002 	str	r0, [r0], -r2
    2474:	01000002 	tsteq	r0, r2
    2478:	02e65000 	rsceq	r5, r6, #0
    247c:	02f60000 	rscseq	r0, r6, #0
    2480:	00040000 	andeq	r0, r4, r0
    2484:	9f5001f3 	svcls	0x005001f3
    2488:	000002f6 	strdeq	r0, [r0], -r6
    248c:	000002f8 	strdeq	r0, [r0], -r8
    2490:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    2494:	00000002 	andeq	r0, r0, r2
    2498:	04000003 	streq	r0, [r0], #-3
    249c:	5001f300 	andpl	pc, r1, r0, lsl #6
    24a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	0002d000 	andeq	sp, r2, r0
    24ac:	0002da00 	andeq	sp, r2, r0, lsl #20
    24b0:	30000200 	andcc	r0, r0, r0, lsl #4
    24b4:	0002da9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    24b8:	0002dc00 	andeq	sp, r2, r0, lsl #24
    24bc:	50000100 	andpl	r0, r0, r0, lsl #2
    24c0:	000002dc 	ldrdeq	r0, [r0], -ip
    24c4:	000002ea 	andeq	r0, r0, sl, ror #5
    24c8:	9f300002 	svcls	0x00300002
    24cc:	000002ea 	andeq	r0, r0, sl, ror #5
    24d0:	000002f6 	strdeq	r0, [r0], -r6
    24d4:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    24d8:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
    24dc:	02000002 	andeq	r0, r0, #2
    24e0:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
    24e4:	00000002 	andeq	r0, r0, r2
    24e8:	01000003 	tsteq	r0, r3
    24ec:	00005000 	andeq	r5, r0, r0
    24f0:	00000000 	andeq	r0, r0, r0
    24f4:	02d00000 	sbcseq	r0, r0, #0
    24f8:	02d40000 	sbcseq	r0, r4, #0
    24fc:	00020000 	andeq	r0, r2, r0
    2500:	02d49f30 	sbcseq	r9, r4, #48, 30	; 0xc0
    2504:	02e40000 	rsceq	r0, r4, #0
    2508:	00010000 	andeq	r0, r1, r0
    250c:	0002e453 	andeq	lr, r2, r3, asr r4
    2510:	0002e600 	andeq	lr, r2, r0, lsl #12
    2514:	70000800 	andvc	r0, r0, r0, lsl #16
    2518:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    251c:	e69f2532 			; <UNDEFINED> instruction: 0xe69f2532
    2520:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    2524:	09000002 	stmdbeq	r0, {r1}
    2528:	5001f300 	andpl	pc, r1, r0, lsl #6
    252c:	3224f009 	eorcc	pc, r4, #9
    2530:	02f69f25 	rscseq	r9, r6, #37, 30	; 0x94
    2534:	03000000 	movweq	r0, #0
    2538:	00010000 	andeq	r0, r1, r0
    253c:	00000053 	andeq	r0, r0, r3, asr r0
    2540:	00000000 	andeq	r0, r0, r0
    2544:	0002d000 	andeq	sp, r2, r0
    2548:	0002d400 	andeq	sp, r2, r0, lsl #8
    254c:	30000200 	andcc	r0, r0, r0, lsl #4
    2550:	0002d49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    2554:	0002da00 	andeq	sp, r2, r0, lsl #20
    2558:	70000700 	andvc	r0, r0, r0, lsl #14
    255c:	33254400 			; <UNDEFINED> instruction: 0x33254400
    2560:	02da9f1a 	sbcseq	r9, sl, #26, 30	; 0x68
    2564:	02dc0000 	sbcseq	r0, ip, #0
    2568:	00080000 	andeq	r0, r8, r0
    256c:	445001f3 	ldrbmi	r0, [r0], #-499	; 0x1f3
    2570:	9f1a3325 	svcls	0x001a3325
    2574:	000002dc 	ldrdeq	r0, [r0], -ip
    2578:	000002e6 	andeq	r0, r0, r6, ror #5
    257c:	00700007 	rsbseq	r0, r0, r7
    2580:	1a332544 	bne	ccba98 <__Stack_Size+0xccb698>
    2584:	0002e69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    2588:	0002f600 	andeq	pc, r2, r0, lsl #12
    258c:	f3000800 	vsub.i8	d0, d0, d0
    2590:	25445001 	strbcs	r5, [r4, #-1]
    2594:	f69f1a33 			; <UNDEFINED> instruction: 0xf69f1a33
    2598:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
    259c:	07000002 	streq	r0, [r0, -r2]
    25a0:	44007000 	strmi	r7, [r0], #-0
    25a4:	9f1a3325 	svcls	0x001a3325
    25a8:	000002f8 	strdeq	r0, [r0], -r8
    25ac:	00000300 	andeq	r0, r0, r0, lsl #6
    25b0:	01f30008 	mvnseq	r0, r8
    25b4:	33254450 			; <UNDEFINED> instruction: 0x33254450
    25b8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    25bc:	00000000 	andeq	r0, r0, r0
    25c0:	03000000 	movweq	r0, #0
    25c4:	030a0000 	movweq	r0, #40960	; 0xa000
    25c8:	00010000 	andeq	r0, r1, r0
    25cc:	00030a50 	andeq	r0, r3, r0, asr sl
    25d0:	00031400 	andeq	r1, r3, r0, lsl #8
    25d4:	f3000400 	vshl.u8	d0, d0, d0
    25d8:	009f5001 	addseq	r5, pc, r1
	...
    25e4:	0a000003 	beq	25f8 <__Stack_Size+0x21f8>
    25e8:	02000003 	andeq	r0, r0, #3
    25ec:	0a9f3000 	beq	fe7ce5f4 <SCS_BASE+0x1e7c05f4>
    25f0:	14000003 	strne	r0, [r0], #-3
    25f4:	01000003 	tsteq	r0, r3
    25f8:	00005000 	andeq	r5, r0, r0
    25fc:	00000000 	andeq	r0, r0, r0
    2600:	03000000 	movweq	r0, #0
    2604:	030a0000 	movweq	r0, #40960	; 0xa000
    2608:	00070000 	andeq	r0, r7, r0
    260c:	25460070 	strbcs	r0, [r6, #-112]	; 0x70
    2610:	0a9f1a31 	beq	fe7c8edc <SCS_BASE+0x1e7baedc>
    2614:	14000003 	strne	r0, [r0], #-3
    2618:	08000003 	stmdaeq	r0, {r0, r1}
    261c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2620:	1a312546 	bne	c4bb40 <__Stack_Size+0xc4b740>
    2624:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2628:	00000000 	andeq	r0, r0, r0
    262c:	00003000 	andeq	r3, r0, r0
    2630:	00003a00 	andeq	r3, r0, r0, lsl #20
    2634:	50000100 	andpl	r0, r0, r0, lsl #2
    2638:	0000003a 	andeq	r0, r0, sl, lsr r0
    263c:	00000044 	andeq	r0, r0, r4, asr #32
    2640:	01f30004 	mvnseq	r0, r4
    2644:	00009f50 	andeq	r9, r0, r0, asr pc
    2648:	00000000 	andeq	r0, r0, r0
    264c:	00300000 	eorseq	r0, r0, r0
    2650:	00340000 	eorseq	r0, r4, r0
    2654:	00020000 	andeq	r0, r2, r0
    2658:	00349f30 	eorseq	r9, r4, r0, lsr pc
    265c:	003a0000 	eorseq	r0, sl, r0
    2660:	00010000 	andeq	r0, r1, r0
    2664:	00003a53 	andeq	r3, r0, r3, asr sl
    2668:	00004400 	andeq	r4, r0, r0, lsl #8
    266c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2678:	00000050 	andeq	r0, r0, r0, asr r0
    267c:	0000005e 	andeq	r0, r0, lr, asr r0
    2680:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    2684:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2688:	04000000 	streq	r0, [r0], #-0
    268c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2690:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2694:	00000000 	andeq	r0, r0, r0
    2698:	00005000 	andeq	r5, r0, r0
    269c:	00006f00 	andeq	r6, r0, r0, lsl #30
    26a0:	51000100 	mrspl	r0, (UNDEF: 16)
    26a4:	0000006f 	andeq	r0, r0, pc, rrx
    26a8:	00000070 	andeq	r0, r0, r0, ror r0
    26ac:	01f30004 	mvnseq	r0, r4
    26b0:	00709f51 	rsbseq	r9, r0, r1, asr pc
    26b4:	00730000 	rsbseq	r0, r3, r0
    26b8:	00010000 	andeq	r0, r1, r0
    26bc:	00007351 	andeq	r7, r0, r1, asr r3
    26c0:	00007c00 	andeq	r7, r0, r0, lsl #24
    26c4:	f3000400 	vshl.u8	d0, d0, d0
    26c8:	009f5101 	addseq	r5, pc, r1, lsl #2
    26cc:	00000000 	andeq	r0, r0, r0
    26d0:	50000000 	andpl	r0, r0, r0
    26d4:	56000000 	strpl	r0, [r0], -r0
    26d8:	02000000 	andeq	r0, r0, #0
    26dc:	569f3000 	ldrpl	r3, [pc], r0
    26e0:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    26e4:	01000000 	mrseq	r0, (UNDEF: 0)
    26e8:	005e5300 	subseq	r5, lr, r0, lsl #6
    26ec:	006f0000 	rsbeq	r0, pc, r0
    26f0:	00010000 	andeq	r0, r1, r0
    26f4:	00007050 	andeq	r7, r0, r0, asr r0
    26f8:	00007300 	andeq	r7, r0, r0, lsl #6
    26fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2708:	000000a4 	andeq	r0, r0, r4, lsr #1
    270c:	000000ae 	andeq	r0, r0, lr, lsr #1
    2710:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    2714:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2718:	04000000 	streq	r0, [r0], #-0
    271c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2720:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2724:	00000000 	andeq	r0, r0, r0
    2728:	0000a400 	andeq	sl, r0, r0, lsl #8
    272c:	0000a800 	andeq	sl, r0, r0, lsl #16
    2730:	30000200 	andcc	r0, r0, r0, lsl #4
    2734:	0000a89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    2738:	0000ae00 	andeq	sl, r0, r0, lsl #28
    273c:	70000800 	andvc	r0, r0, r0, lsl #16
    2740:	1a007300 	bne	1f348 <__Stack_Size+0x1ef48>
    2744:	ae9f2e30 	mrcge	14, 4, r2, cr15, cr0, {1}
    2748:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    274c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2750:	5001f300 	andpl	pc, r1, r0, lsl #6
    2754:	301a0073 	andscc	r0, sl, r3, ror r0
    2758:	00009f2e 	andeq	r9, r0, lr, lsr #30
    275c:	00000000 	andeq	r0, r0, r0
    2760:	00b80000 	adcseq	r0, r8, r0
    2764:	00c00000 	sbceq	r0, r0, r0
    2768:	00010000 	andeq	r0, r1, r0
    276c:	0000c050 	andeq	ip, r0, r0, asr r0
    2770:	0000c800 	andeq	ip, r0, r0, lsl #16
    2774:	f3000400 	vshl.u8	d0, d0, d0
    2778:	009f5001 	addseq	r5, pc, r1
    277c:	00000000 	andeq	r0, r0, r0
    2780:	74000000 	strvc	r0, [r0], #-0
    2784:	80000000 	andhi	r0, r0, r0
    2788:	01000000 	mrseq	r0, (UNDEF: 0)
    278c:	00805000 	addeq	r5, r0, r0
    2790:	00880000 	addeq	r0, r8, r0
    2794:	00040000 	andeq	r0, r4, r0
    2798:	9f5001f3 	svcls	0x005001f3
	...
    27a4:	00000074 	andeq	r0, r0, r4, ror r0
    27a8:	00000078 	andeq	r0, r0, r8, ror r0
    27ac:	9f300002 	svcls	0x00300002
    27b0:	00000078 	andeq	r0, r0, r8, ror r0
    27b4:	00000080 	andeq	r0, r0, r0, lsl #1
    27b8:	80530001 	subshi	r0, r3, r1
    27bc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    27c0:	01000000 	mrseq	r0, (UNDEF: 0)
    27c4:	00005000 	andeq	r5, r0, r0
    27c8:	00000000 	andeq	r0, r0, r0
    27cc:	00940000 	addseq	r0, r4, r0
    27d0:	00a00000 	adceq	r0, r0, r0
    27d4:	00010000 	andeq	r0, r1, r0
    27d8:	0000a050 	andeq	sl, r0, r0, asr r0
    27dc:	0000a800 	andeq	sl, r0, r0, lsl #16
    27e0:	f3000400 	vshl.u8	d0, d0, d0
    27e4:	009f5001 	addseq	r5, pc, r1
    27e8:	00000000 	andeq	r0, r0, r0
    27ec:	94000000 	strls	r0, [r0], #-0
    27f0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    27f4:	01000000 	mrseq	r0, (UNDEF: 0)
    27f8:	009e5100 	addseq	r5, lr, r0, lsl #2
    27fc:	00a80000 	adceq	r0, r8, r0
    2800:	00040000 	andeq	r0, r4, r0
    2804:	9f5101f3 	svcls	0x005101f3
	...
    2810:	00000094 	muleq	r0, r4, r0
    2814:	00000098 	muleq	r0, r8, r0
    2818:	9f300002 	svcls	0x00300002
    281c:	00000098 	muleq	r0, r8, r0
    2820:	0000009c 	muleq	r0, ip, r0
    2824:	00730009 	rsbseq	r0, r3, r9
    2828:	83ffff11 	mvnshi	pc, #17, 30	; 0x44
    282c:	9c9f1a7e 	vldmials	pc, {s2-s127}
    2830:	a0000000 	andge	r0, r0, r0
    2834:	01000000 	mrseq	r0, (UNDEF: 0)
    2838:	00a05300 	adceq	r5, r0, r0, lsl #6
    283c:	00a80000 	adceq	r0, r8, r0
    2840:	00010000 	andeq	r0, r1, r0
    2844:	00000050 	andeq	r0, r0, r0, asr r0
    2848:	00000000 	andeq	r0, r0, r0
    284c:	0000b400 	andeq	fp, r0, r0, lsl #8
    2850:	0000be00 	andeq	fp, r0, r0, lsl #28
    2854:	50000100 	andpl	r0, r0, r0, lsl #2
    2858:	000000be 	strheq	r0, [r0], -lr
    285c:	000000c8 	andeq	r0, r0, r8, asr #1
    2860:	01f30004 	mvnseq	r0, r4
    2864:	00009f50 	andeq	r9, r0, r0, asr pc
    2868:	00000000 	andeq	r0, r0, r0
    286c:	00b40000 	adcseq	r0, r4, r0
    2870:	00b80000 	adcseq	r0, r8, r0
    2874:	00020000 	andeq	r0, r2, r0
    2878:	00b89f30 	adcseq	r9, r8, r0, lsr pc
    287c:	00be0000 	adcseq	r0, lr, r0
    2880:	00010000 	andeq	r0, r1, r0
    2884:	0000be53 	andeq	fp, r0, r3, asr lr
    2888:	0000c800 	andeq	ip, r0, r0, lsl #16
    288c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2898:	000000d8 	ldrdeq	r0, [r0], -r8
    289c:	000000e2 	andeq	r0, r0, r2, ror #1
    28a0:	e2500001 	subs	r0, r0, #1
    28a4:	ec000000 	stc	0, cr0, [r0], {-0}
    28a8:	04000000 	streq	r0, [r0], #-0
    28ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    28b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28b4:	00000000 	andeq	r0, r0, r0
    28b8:	0000d800 	andeq	sp, r0, r0, lsl #16
    28bc:	0000dc00 	andeq	sp, r0, r0, lsl #24
    28c0:	30000200 	andcc	r0, r0, r0, lsl #4
    28c4:	0000dc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    28c8:	0000e200 	andeq	lr, r0, r0, lsl #4
    28cc:	53000100 	movwpl	r0, #256	; 0x100
    28d0:	000000e2 	andeq	r0, r0, r2, ror #1
    28d4:	000000ec 	andeq	r0, r0, ip, ror #1
    28d8:	00500001 	subseq	r0, r0, r1
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	ec000000 	stc	0, cr0, [r0], {-0}
    28e4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    28e8:	01000000 	mrseq	r0, (UNDEF: 0)
    28ec:	00f65000 	rscseq	r5, r6, r0
    28f0:	01000000 	mrseq	r0, (UNDEF: 0)
    28f4:	00040000 	andeq	r0, r4, r0
    28f8:	9f5001f3 	svcls	0x005001f3
	...
    2904:	000000ec 	andeq	r0, r0, ip, ror #1
    2908:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    290c:	9f300002 	svcls	0x00300002
    2910:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2914:	000000f6 	strdeq	r0, [r0], -r6
    2918:	f6530001 			; <UNDEFINED> instruction: 0xf6530001
    291c:	00000000 	andeq	r0, r0, r0
    2920:	01000001 	tsteq	r0, r1
    2924:	00005000 	andeq	r5, r0, r0
    2928:	00000000 	andeq	r0, r0, r0
    292c:	01000000 	mrseq	r0, (UNDEF: 0)
    2930:	010c0000 	mrseq	r0, (UNDEF: 12)
    2934:	00010000 	andeq	r0, r1, r0
    2938:	00010c50 	andeq	r0, r1, r0, asr ip
    293c:	00011400 	andeq	r1, r1, r0, lsl #8
    2940:	f3000400 	vshl.u8	d0, d0, d0
    2944:	009f5001 	addseq	r5, pc, r1
	...
    2950:	04000001 	streq	r0, [r0], #-1
    2954:	02000001 	andeq	r0, r0, #1
    2958:	049f3000 	ldreq	r3, [pc], #0	; 2960 <__Stack_Size+0x2560>
    295c:	0c000001 	stceq	0, cr0, [r0], {1}
    2960:	01000001 	tsteq	r0, r1
    2964:	010c5300 	mrseq	r5, LR_mon
    2968:	01140000 	tsteq	r4, r0
    296c:	00010000 	andeq	r0, r1, r0
    2970:	00000050 	andeq	r0, r0, r0, asr r0
    2974:	00000000 	andeq	r0, r0, r0
    2978:	00011400 	andeq	r1, r1, r0, lsl #8
    297c:	00011c00 	andeq	r1, r1, r0, lsl #24
    2980:	50000100 	andpl	r0, r0, r0, lsl #2
    2984:	0000011c 	andeq	r0, r0, ip, lsl r1
    2988:	0000011e 	andeq	r0, r0, lr, lsl r1
    298c:	01f30004 	mvnseq	r0, r4
    2990:	011e9f50 	tsteq	lr, r0, asr pc
    2994:	01220000 			; <UNDEFINED> instruction: 0x01220000
    2998:	00010000 	andeq	r0, r1, r0
    299c:	00012250 	andeq	r2, r1, r0, asr r2
    29a0:	00012c00 	andeq	r2, r1, r0, lsl #24
    29a4:	f3000400 	vshl.u8	d0, d0, d0
    29a8:	009f5001 	addseq	r5, pc, r1
    29ac:	00000000 	andeq	r0, r0, r0
    29b0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    29b4:	42000001 	andmi	r0, r0, #1
    29b8:	01000001 	tsteq	r0, r1
    29bc:	01425000 	mrseq	r5, (UNDEF: 66)
    29c0:	014c0000 	mrseq	r0, (UNDEF: 76)
    29c4:	00040000 	andeq	r0, r4, r0
    29c8:	9f5001f3 	svcls	0x005001f3
	...
    29d4:	00000138 	andeq	r0, r0, r8, lsr r1
    29d8:	0000013c 	andeq	r0, r0, ip, lsr r1
    29dc:	9f300002 	svcls	0x00300002
    29e0:	0000013c 	andeq	r0, r0, ip, lsr r1
    29e4:	00000142 	andeq	r0, r0, r2, asr #2
    29e8:	42530001 	subsmi	r0, r3, #1
    29ec:	4c000001 	stcmi	0, cr0, [r0], {1}
    29f0:	01000001 	tsteq	r0, r1
    29f4:	00005000 	andeq	r5, r0, r0
    29f8:	00000000 	andeq	r0, r0, r0
    29fc:	01780000 	cmneq	r8, r0
    2a00:	017e0000 	cmneq	lr, r0
    2a04:	00010000 	andeq	r0, r1, r0
    2a08:	00017e50 	andeq	r7, r1, r0, asr lr
    2a0c:	00018800 	andeq	r8, r1, r0, lsl #16
    2a10:	f3000400 	vshl.u8	d0, d0, d0
    2a14:	009f5001 	addseq	r5, pc, r1
    2a18:	00000000 	andeq	r0, r0, r0
    2a1c:	94000000 	strls	r0, [r0], #-0
    2a20:	9a000001 	bls	2a2c <__Stack_Size+0x262c>
    2a24:	02000001 	andeq	r0, r0, #1
    2a28:	9a9f3000 	bls	fe7cea30 <SCS_BASE+0x1e7c0a30>
    2a2c:	9e000001 	cdpls	0, 0, cr0, cr0, cr1, {0}
    2a30:	05000001 	streq	r0, [r0, #-1]
    2a34:	3c007300 	stccc	3, cr7, [r0], {-0}
    2a38:	019e9f1a 	orrseq	r9, lr, sl, lsl pc
    2a3c:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    2a40:	00010000 	andeq	r0, r1, r0
    2a44:	0001aa53 	andeq	sl, r1, r3, asr sl
    2a48:	0001ac00 	andeq	sl, r1, r0, lsl #24
    2a4c:	53000100 	movwpl	r0, #256	; 0x100
    2a50:	000001cc 	andeq	r0, r0, ip, asr #3
    2a54:	000001d2 	ldrdeq	r0, [r0], -r2
    2a58:	00730008 	rsbseq	r0, r3, r8
    2a5c:	341af008 	ldrcc	pc, [sl], #-8
    2a60:	01dc9f25 	bicseq	r9, ip, r5, lsr #30
    2a64:	01e00000 	mvneq	r0, r0
    2a68:	00090000 	andeq	r0, r9, r0
    2a6c:	000a0074 	andeq	r0, sl, r4, ror r0
    2a70:	25381a07 	ldrcs	r1, [r8, #-2567]!	; 0xa07
    2a74:	0001ea9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    2a78:	0001ee00 	andeq	lr, r1, r0, lsl #28
    2a7c:	74000900 	strvc	r0, [r0], #-2304	; 0x900
    2a80:	38000a00 	stmdacc	r0, {r9, fp}
    2a84:	9f253b1a 	svcls	0x00253b1a
    2a88:	000001f6 	strdeq	r0, [r0], -r6
    2a8c:	000001fa 	strdeq	r0, [r0], -sl
    2a90:	00720009 	rsbseq	r0, r2, r9
    2a94:	1ac0000a 	bne	ff002ac4 <SCS_BASE+0x1eff4ac4>
    2a98:	009f253e 	addseq	r2, pc, lr, lsr r5	; <UNPREDICTABLE>
    2a9c:	00000000 	andeq	r0, r0, r0
    2aa0:	94000000 	strls	r0, [r0], #-0
    2aa4:	ac000001 	stcge	0, cr0, [r0], {1}
    2aa8:	02000001 	andeq	r0, r0, #1
    2aac:	ac9f3000 	ldcge	0, cr3, [pc], {0}
    2ab0:	b2000001 	andlt	r0, r0, #1
    2ab4:	07000001 	streq	r0, [r0, -r1]
    2ab8:	4e007300 	cdpmi	3, 0, cr7, cr0, cr0, {0}
    2abc:	9f1a2441 	svcls	0x001a2441
    2ac0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2ac4:	000001c8 	andeq	r0, r0, r8, asr #3
    2ac8:	00530001 	subseq	r0, r3, r1
    2acc:	00000000 	andeq	r0, r0, r0
    2ad0:	94000000 	strls	r0, [r0], #-0
    2ad4:	b8000001 	stmdalt	r0, {r0}
    2ad8:	02000001 	andeq	r0, r0, #1
    2adc:	b89f3000 	ldmlt	pc, {ip, sp}	; <UNPREDICTABLE>
    2ae0:	bc000001 	stclt	0, cr0, [r0], {1}
    2ae4:	07000001 	streq	r0, [r0, -r1]
    2ae8:	40007100 	andmi	r7, r0, r0, lsl #2
    2aec:	9f1a243c 	svcls	0x001a243c
	...
    2af8:	00000194 	muleq	r0, r4, r1
    2afc:	000001cc 	andeq	r0, r0, ip, asr #3
    2b00:	9f300002 	svcls	0x00300002
    2b04:	000001cc 	andeq	r0, r0, ip, asr #3
    2b08:	000001d2 	ldrdeq	r0, [r0], -r2
    2b0c:	00730013 	rsbseq	r0, r3, r3, lsl r0
    2b10:	341af008 	ldrcc	pc, [sl], #-8
    2b14:	5c300325 	ldcpl	3, cr0, [r0], #-148	; 0xffffff6c
    2b18:	94220800 	strtls	r0, [r2], #-2048	; 0x800
    2b1c:	1aff0801 	bne	fffc4b28 <SCS_BASE+0x1ffb6b28>
    2b20:	0001dc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    2b24:	0001e000 	andeq	lr, r1, r0
    2b28:	74001400 	strvc	r1, [r0], #-1024	; 0x400
    2b2c:	07000a00 	streq	r0, [r0, -r0, lsl #20]
    2b30:	0325381a 			; <UNDEFINED> instruction: 0x0325381a
    2b34:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
    2b38:	08019422 	stmdaeq	r1, {r1, r5, sl, ip, pc}
    2b3c:	ea9f1aff 	b	fe7c9740 <SCS_BASE+0x1e7bb740>
    2b40:	ee000001 	cdp	0, 0, cr0, cr0, cr1, {0}
    2b44:	14000001 	strne	r0, [r0], #-1
    2b48:	0a007400 	beq	1fb50 <__Stack_Size+0x1f750>
    2b4c:	3b1a3800 	blcc	690b54 <__Stack_Size+0x690754>
    2b50:	5c300325 	ldcpl	3, cr0, [r0], #-148	; 0xffffff6c
    2b54:	94220800 	strtls	r0, [r2], #-2048	; 0x800
    2b58:	1aff0801 	bne	fffc4b64 <SCS_BASE+0x1ffb6b64>
    2b5c:	0001f69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    2b60:	0001fa00 	andeq	pc, r1, r0, lsl #20
    2b64:	72001400 	andvc	r1, r0, #0, 8
    2b68:	c0000a00 	andgt	r0, r0, r0, lsl #20
    2b6c:	03253e1a 			; <UNDEFINED> instruction: 0x03253e1a
    2b70:	08005c40 	stmdaeq	r0, {r6, sl, fp, ip, lr}
    2b74:	08019422 	stmdaeq	r1, {r1, r5, sl, ip, pc}
    2b78:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    2b7c:	00000000 	andeq	r0, r0, r0
    2b80:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2b84:	20000002 	andcs	r0, r0, r2
    2b88:	01000002 	tsteq	r0, r2
    2b8c:	02205000 	eoreq	r5, r0, #0
    2b90:	02220000 	eoreq	r0, r2, #0
    2b94:	00040000 	andeq	r0, r4, r0
    2b98:	9f5001f3 	svcls	0x005001f3
    2b9c:	00000222 	andeq	r0, r0, r2, lsr #4
    2ba0:	00000226 	andeq	r0, r0, r6, lsr #4
    2ba4:	26500001 	ldrbcs	r0, [r0], -r1
    2ba8:	30000002 	andcc	r0, r0, r2
    2bac:	04000002 	streq	r0, [r0], #-2
    2bb0:	5001f300 	andpl	pc, r1, r0, lsl #6
    2bb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2bb8:	00000000 	andeq	r0, r0, r0
    2bbc:	00023000 	andeq	r3, r2, r0
    2bc0:	00023800 	andeq	r3, r2, r0, lsl #16
    2bc4:	50000100 	andpl	r0, r0, r0, lsl #2
    2bc8:	00000238 	andeq	r0, r0, r8, lsr r2
    2bcc:	0000023a 	andeq	r0, r0, sl, lsr r2
    2bd0:	01f30004 	mvnseq	r0, r4
    2bd4:	023a9f50 	eorseq	r9, sl, #80, 30	; 0x140
    2bd8:	023e0000 	eorseq	r0, lr, #0
    2bdc:	00010000 	andeq	r0, r1, r0
    2be0:	00023e50 	andeq	r3, r2, r0, asr lr
    2be4:	00024800 	andeq	r4, r2, r0, lsl #16
    2be8:	f3000400 	vshl.u8	d0, d0, d0
    2bec:	009f5001 	addseq	r5, pc, r1
    2bf0:	00000000 	andeq	r0, r0, r0
    2bf4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2bf8:	50000002 	andpl	r0, r0, r2
    2bfc:	01000002 	tsteq	r0, r2
    2c00:	02505000 	subseq	r5, r0, #0
    2c04:	02520000 	subseq	r0, r2, #0
    2c08:	00040000 	andeq	r0, r4, r0
    2c0c:	9f5001f3 	svcls	0x005001f3
    2c10:	00000252 	andeq	r0, r0, r2, asr r2
    2c14:	00000256 	andeq	r0, r0, r6, asr r2
    2c18:	56500001 	ldrbpl	r0, [r0], -r1
    2c1c:	60000002 	andvs	r0, r0, r2
    2c20:	04000002 	streq	r0, [r0], #-2
    2c24:	5001f300 	andpl	pc, r1, r0, lsl #6
    2c28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2c2c:	00000000 	andeq	r0, r0, r0
    2c30:	00026000 	andeq	r6, r2, r0
    2c34:	00026800 	andeq	r6, r2, r0, lsl #16
    2c38:	50000100 	andpl	r0, r0, r0, lsl #2
    2c3c:	00000268 	andeq	r0, r0, r8, ror #4
    2c40:	0000026a 	andeq	r0, r0, sl, ror #4
    2c44:	01f30004 	mvnseq	r0, r4
    2c48:	026a9f50 	rsbeq	r9, sl, #80, 30	; 0x140
    2c4c:	026e0000 	rsbeq	r0, lr, #0
    2c50:	00010000 	andeq	r0, r1, r0
    2c54:	00026e50 	andeq	r6, r2, r0, asr lr
    2c58:	00027800 	andeq	r7, r2, r0, lsl #16
    2c5c:	f3000400 	vshl.u8	d0, d0, d0
    2c60:	009f5001 	addseq	r5, pc, r1
    2c64:	00000000 	andeq	r0, r0, r0
    2c68:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    2c6c:	80000002 	andhi	r0, r0, r2
    2c70:	01000002 	tsteq	r0, r2
    2c74:	02805000 	addeq	r5, r0, #0
    2c78:	02820000 	addeq	r0, r2, #0
    2c7c:	00040000 	andeq	r0, r4, r0
    2c80:	9f5001f3 	svcls	0x005001f3
    2c84:	00000282 	andeq	r0, r0, r2, lsl #5
    2c88:	00000286 	andeq	r0, r0, r6, lsl #5
    2c8c:	86500001 	ldrbhi	r0, [r0], -r1
    2c90:	90000002 	andls	r0, r0, r2
    2c94:	04000002 	streq	r0, [r0], #-2
    2c98:	5001f300 	andpl	pc, r1, r0, lsl #6
    2c9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2ca0:	00000000 	andeq	r0, r0, r0
    2ca4:	0002b400 	andeq	fp, r2, r0, lsl #8
    2ca8:	0002cc00 	andeq	ip, r2, r0, lsl #24
    2cac:	50000100 	andpl	r0, r0, r0, lsl #2
    2cb0:	000002cc 	andeq	r0, r0, ip, asr #5
    2cb4:	000002dc 	ldrdeq	r0, [r0], -ip
    2cb8:	01f30004 	mvnseq	r0, r4
    2cbc:	00009f50 	andeq	r9, r0, r0, asr pc
    2cc0:	00000000 	andeq	r0, r0, r0
    2cc4:	02b40000 	adcseq	r0, r4, #0
    2cc8:	02b60000 	adcseq	r0, r6, #0
    2ccc:	00020000 	andeq	r0, r2, r0
    2cd0:	02b69f30 	adcseq	r9, r6, #48, 30	; 0xc0
    2cd4:	02c80000 	sbceq	r0, r8, #0
    2cd8:	00060000 	andeq	r0, r6, r0
    2cdc:	ff080072 			; <UNDEFINED> instruction: 0xff080072
    2ce0:	02c89f1a 	sbceq	r9, r8, #26, 30	; 0x68
    2ce4:	02cc0000 	sbceq	r0, ip, #0
    2ce8:	00080000 	andeq	r0, r8, r0
    2cec:	1a4f0070 	bne	13c2eb4 <__Stack_Size+0x13c2ab4>
    2cf0:	9f1aff08 	svcls	0x001aff08
    2cf4:	000002cc 	andeq	r0, r0, ip, asr #5
    2cf8:	000002dc 	ldrdeq	r0, [r0], -ip
    2cfc:	01f30009 	mvnseq	r0, r9
    2d00:	081a4f50 	ldmdaeq	sl, {r4, r6, r8, r9, sl, fp, lr}
    2d04:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    2d08:	00000000 	andeq	r0, r0, r0
    2d0c:	b4000000 	strlt	r0, [r0], #-0
    2d10:	be000002 	cdplt	0, 0, cr0, cr0, cr2, {0}
    2d14:	02000002 	andeq	r0, r0, #2
    2d18:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
    2d1c:	c0000002 	andgt	r0, r0, r2
    2d20:	01000002 	tsteq	r0, r2
    2d24:	02c05300 	sbceq	r5, r0, #0, 6
    2d28:	02c60000 	sbceq	r0, r6, #0
    2d2c:	00020000 	andeq	r0, r2, r0
    2d30:	02c69f30 	sbceq	r9, r6, #48, 30	; 0xc0
    2d34:	02dc0000 	sbcseq	r0, ip, #0
    2d38:	00010000 	andeq	r0, r1, r0
    2d3c:	00000053 	andeq	r0, r0, r3, asr r0
    2d40:	00000000 	andeq	r0, r0, r0
    2d44:	0002b400 	andeq	fp, r2, r0, lsl #8
    2d48:	0002c800 	andeq	ip, r2, r0, lsl #16
    2d4c:	30000200 	andcc	r0, r0, r0, lsl #4
    2d50:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    2d54:	0002cc00 	andeq	ip, r2, r0, lsl #24
    2d58:	73000d00 	movwvc	r0, #3328	; 0xd00
    2d5c:	4f007000 	svcmi	0x00007000
    2d60:	1aff081a 	bne	fffc4dd0 <SCS_BASE+0x1ffb6dd0>
    2d64:	9f1a3125 	svcls	0x001a3125
    2d68:	000002cc 	andeq	r0, r0, ip, asr #5
    2d6c:	000002dc 	ldrdeq	r0, [r0], -ip
    2d70:	0073000e 	rsbseq	r0, r3, lr
    2d74:	4f5001f3 	svcmi	0x005001f3
    2d78:	1aff081a 	bne	fffc4de8 <SCS_BASE+0x1ffb6de8>
    2d7c:	9f1a3125 	svcls	0x001a3125
	...
    2d88:	000002e2 	andeq	r0, r0, r2, ror #5
    2d8c:	000002fe 	strdeq	r0, [r0], -lr
    2d90:	9f300002 	svcls	0x00300002
    2d94:	000002fe 	strdeq	r0, [r0], -lr
    2d98:	00000300 	andeq	r0, r0, r0, lsl #6
    2d9c:	00700007 	rsbseq	r0, r0, r7
    2da0:	2e302448 	cdpcs	4, 3, cr2, cr0, cr8, {2}
    2da4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2da8:	00000000 	andeq	r0, r0, r0
    2dac:	0002e800 	andeq	lr, r2, r0, lsl #16
    2db0:	0002fa00 	andeq	pc, r2, r0, lsl #20
    2db4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2dc0:	0000031c 	andeq	r0, r0, ip, lsl r3
    2dc4:	00000326 	andeq	r0, r0, r6, lsr #6
    2dc8:	26500001 	ldrbcs	r0, [r0], -r1
    2dcc:	30000003 	andcc	r0, r0, r3
    2dd0:	04000003 	streq	r0, [r0], #-3
    2dd4:	5001f300 	andpl	pc, r1, r0, lsl #6
    2dd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2ddc:	00000000 	andeq	r0, r0, r0
    2de0:	00031c00 	andeq	r1, r3, r0, lsl #24
    2de4:	00032000 	andeq	r2, r3, r0
    2de8:	30000200 	andcc	r0, r0, r0, lsl #4
    2dec:	0003209f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    2df0:	00032600 	andeq	r2, r3, r0, lsl #12
    2df4:	70000b00 	andvc	r0, r0, r0, lsl #22
    2df8:	1aff0800 	bne	fffc4e00 <SCS_BASE+0x1ffb6e00>
    2dfc:	301a0073 	andscc	r0, sl, r3, ror r0
    2e00:	03269f2e 			; <UNDEFINED> instruction: 0x03269f2e
    2e04:	03300000 	teqeq	r0, #0
    2e08:	000c0000 	andeq	r0, ip, r0
    2e0c:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    2e10:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    2e14:	9f2e301a 	svcls	0x002e301a
	...
    2e20:	00000024 	andeq	r0, r0, r4, lsr #32
    2e24:	00000034 	andeq	r0, r0, r4, lsr r0
    2e28:	34500001 	ldrbcc	r0, [r0], #-1
    2e2c:	3c000000 	stccc	0, cr0, [r0], {-0}
    2e30:	03000000 	movweq	r0, #0
    2e34:	9f7e7000 	svcls	0x007e7000
    2e38:	0000003c 	andeq	r0, r0, ip, lsr r0
    2e3c:	00000040 	andeq	r0, r0, r0, asr #32
    2e40:	01f30004 	mvnseq	r0, r4
    2e44:	00409f50 	subeq	r9, r0, r0, asr pc
    2e48:	004c0000 	subeq	r0, ip, r0
    2e4c:	00030000 	andeq	r0, r3, r0
    2e50:	009f7e70 	addseq	r7, pc, r0, ror lr	; <UNPREDICTABLE>
    2e54:	00000000 	andeq	r0, r0, r0
    2e58:	70000000 	andvc	r0, r0, r0
    2e5c:	80000000 	andhi	r0, r0, r0
    2e60:	01000000 	mrseq	r0, (UNDEF: 0)
    2e64:	00805000 	addeq	r5, r0, r0
    2e68:	008c0000 	addeq	r0, ip, r0
    2e6c:	00040000 	andeq	r0, r4, r0
    2e70:	9f5001f3 	svcls	0x005001f3
	...
    2e7c:	00000070 	andeq	r0, r0, r0, ror r0
    2e80:	0000007a 	andeq	r0, r0, sl, ror r0
    2e84:	9f300002 	svcls	0x00300002
    2e88:	0000007a 	andeq	r0, r0, sl, ror r0
    2e8c:	0000008c 	andeq	r0, r0, ip, lsl #1
    2e90:	00530001 	subseq	r0, r3, r1
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	70000000 	andvc	r0, r0, r0
    2e9c:	80000000 	andhi	r0, r0, r0
    2ea0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ea4:	33007000 	movwcc	r7, #0
    2ea8:	1aff0825 	bne	fffc4f44 <SCS_BASE+0x1ffb6f44>
    2eac:	0000809f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2eb0:	00008c00 	andeq	r8, r0, r0, lsl #24
    2eb4:	f3000900 	vmls.i8	d0, d0, d0
    2eb8:	25335001 	ldrcs	r5, [r3, #-1]!
    2ebc:	9f1aff08 	svcls	0x001aff08
	...
    2ec8:	00000070 	andeq	r0, r0, r0, ror r0
    2ecc:	0000007c 	andeq	r0, r0, ip, ror r0
    2ed0:	9f300002 	svcls	0x00300002
    2ed4:	0000007c 	andeq	r0, r0, ip, ror r0
    2ed8:	00000080 	andeq	r0, r0, r0, lsl #1
    2edc:	0073000b 	rsbseq	r0, r3, fp
    2ee0:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    2ee4:	1a31251a 	bne	c4c354 <__Stack_Size+0xc4bf54>
    2ee8:	0000809f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2eec:	00008c00 	andeq	r8, r0, r0, lsl #24
    2ef0:	73000c00 	movwvc	r0, #3072	; 0xc00
    2ef4:	5001f300 	andpl	pc, r1, r0, lsl #6
    2ef8:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xf08
    2efc:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
	...
    2f08:	2c000000 	stccs	0, cr0, [r0], {-0}
    2f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    2f10:	002c5100 	eoreq	r5, ip, r0, lsl #2
    2f14:	00320000 	eorseq	r0, r2, r0
    2f18:	00040000 	andeq	r0, r4, r0
    2f1c:	9f5101f3 	svcls	0x005101f3
	...
    2f2c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2f30:	1c520001 	mrrcne	0, 0, r0, r2, cr1
    2f34:	32000000 	andcc	r0, r0, #0
    2f38:	04000000 	streq	r0, [r0], #-0
    2f3c:	5201f300 	andpl	pc, r1, #0, 6
    2f40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2f4c:	00002400 	andeq	r2, r0, r0, lsl #8
    2f50:	53000100 	movwpl	r0, #256	; 0x100
    2f54:	00000024 	andeq	r0, r0, r4, lsr #32
    2f58:	00000032 	andeq	r0, r0, r2, lsr r0
    2f5c:	01f30004 	mvnseq	r0, r4
    2f60:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    2f6c:	00140000 	andseq	r0, r4, r0
    2f70:	00020000 	andeq	r0, r2, r0
    2f74:	00149f30 	andseq	r9, r4, r0, lsr pc
    2f78:	00160000 	andseq	r0, r6, r0
    2f7c:	00010000 	andeq	r0, r1, r0
    2f80:	00001654 	andeq	r1, r0, r4, asr r6
    2f84:	00001a00 	andeq	r1, r0, r0, lsl #20
    2f88:	74000700 	strvc	r0, [r0], #-1792	; 0x700
    2f8c:	ff0c0b00 			; <UNDEFINED> instruction: 0xff0c0b00
    2f90:	002a9f1a 	eoreq	r9, sl, sl, lsl pc
    2f94:	00320000 	eorseq	r0, r2, r0
    2f98:	00010000 	andeq	r0, r1, r0
    2f9c:	00000052 	andeq	r0, r0, r2, asr r0
	...
    2fa8:	00001600 	andeq	r1, r0, r0, lsl #12
    2fac:	30000200 	andcc	r0, r0, r0, lsl #4
    2fb0:	0000169f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    2fb4:	00002000 	andeq	r2, r0, r0
    2fb8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    2fbc:	0000002c 	andeq	r0, r0, ip, lsr #32
    2fc0:	00000032 	andeq	r0, r0, r2, lsr r0
    2fc4:	00510001 	subseq	r0, r1, r1
    2fc8:	00000000 	andeq	r0, r0, r0
    2fcc:	32000000 	andcc	r0, r0, #0
    2fd0:	62000000 	andvs	r0, r0, #0
    2fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    2fd8:	00625100 	rsbeq	r5, r2, r0, lsl #2
    2fdc:	006c0000 	rsbeq	r0, ip, r0
    2fe0:	00040000 	andeq	r0, r4, r0
    2fe4:	9f5101f3 	svcls	0x005101f3
	...
    2ff0:	00000032 	andeq	r0, r0, r2, lsr r0
    2ff4:	0000005a 	andeq	r0, r0, sl, asr r0
    2ff8:	5a520001 	bpl	1483004 <__Stack_Size+0x1482c04>
    2ffc:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3000:	04000000 	streq	r0, [r0], #-0
    3004:	5201f300 	andpl	pc, r1, #0, 6
    3008:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    300c:	00000000 	andeq	r0, r0, r0
    3010:	00003200 	andeq	r3, r0, r0, lsl #4
    3014:	00005e00 	andeq	r5, r0, r0, lsl #28
    3018:	53000100 	movwpl	r0, #256	; 0x100
    301c:	0000005e 	andeq	r0, r0, lr, asr r0
    3020:	0000006c 	andeq	r0, r0, ip, rrx
    3024:	01f30004 	mvnseq	r0, r4
    3028:	00009f53 	andeq	r9, r0, r3, asr pc
    302c:	00000000 	andeq	r0, r0, r0
    3030:	00320000 	eorseq	r0, r2, r0
    3034:	00420000 	subeq	r0, r2, r0
    3038:	00020000 	andeq	r0, r2, r0
    303c:	00429f30 	subeq	r9, r2, r0, lsr pc
    3040:	00480000 	subeq	r0, r8, r0
    3044:	00010000 	andeq	r0, r1, r0
    3048:	00006455 	andeq	r6, r0, r5, asr r4
    304c:	00006c00 	andeq	r6, r0, r0, lsl #24
    3050:	53000100 	movwpl	r0, #256	; 0x100
	...
    305c:	00000032 	andeq	r0, r0, r2, lsr r0
    3060:	0000004a 	andeq	r0, r0, sl, asr #32
    3064:	9f300002 	svcls	0x00300002
    3068:	0000004a 	andeq	r0, r0, sl, asr #32
    306c:	00000052 	andeq	r0, r0, r2, asr r0
    3070:	66540001 	ldrbvs	r0, [r4], -r1
    3074:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3078:	01000000 	mrseq	r0, (UNDEF: 0)
    307c:	00005400 	andeq	r5, r0, r0, lsl #8
    3080:	00000000 	andeq	r0, r0, r0
    3084:	00320000 	eorseq	r0, r2, r0
    3088:	004a0000 	subeq	r0, sl, r0
    308c:	00020000 	andeq	r0, r2, r0
    3090:	004a9f30 	subeq	r9, sl, r0, lsr pc
    3094:	00620000 	rsbeq	r0, r2, r0
    3098:	00050000 	andeq	r0, r5, r0
    309c:	24340071 	ldrtcs	r0, [r4], #-113	; 0x71
    30a0:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    30a4:	00006c00 	andeq	r6, r0, r0, lsl #24
    30a8:	f3000600 	vmax.u8	d0, d0, d0
    30ac:	24345101 	ldrtcs	r5, [r4], #-257	; 0x101
    30b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    30b4:	00000000 	andeq	r0, r0, r0
    30b8:	00006c00 	andeq	r6, r0, r0, lsl #24
    30bc:	00008e00 	andeq	r8, r0, r0, lsl #28
    30c0:	50000100 	andpl	r0, r0, r0, lsl #2
    30c4:	0000008e 	andeq	r0, r0, lr, lsl #1
    30c8:	00000098 	muleq	r0, r8, r0
    30cc:	01f30004 	mvnseq	r0, r4
    30d0:	00989f50 	addseq	r9, r8, r0, asr pc
    30d4:	00be0000 	adcseq	r0, lr, r0
    30d8:	00010000 	andeq	r0, r1, r0
    30dc:	0000be50 	andeq	fp, r0, r0, asr lr
    30e0:	0000ca00 	andeq	ip, r0, r0, lsl #20
    30e4:	f3000400 	vshl.u8	d0, d0, d0
    30e8:	ca9f5001 	bgt	fe7d70f4 <SCS_BASE+0x1e7c90f4>
    30ec:	cc000000 	stcgt	0, cr0, [r0], {-0}
    30f0:	01000000 	mrseq	r0, (UNDEF: 0)
    30f4:	00cc5000 	sbceq	r5, ip, r0
    30f8:	00de0000 	sbcseq	r0, lr, r0
    30fc:	00040000 	andeq	r0, r4, r0
    3100:	9f5001f3 	svcls	0x005001f3
    3104:	000000de 	ldrdeq	r0, [r0], -lr
    3108:	000000e0 	andeq	r0, r0, r0, ror #1
    310c:	e0500001 	subs	r0, r0, r1
    3110:	ea000000 	b	3118 <__Stack_Size+0x2d18>
    3114:	04000000 	streq	r0, [r0], #-0
    3118:	5001f300 	andpl	pc, r1, r0, lsl #6
    311c:	0000ea9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    3120:	0000ec00 	andeq	lr, r0, r0, lsl #24
    3124:	50000100 	andpl	r0, r0, r0, lsl #2
    3128:	000000ec 	andeq	r0, r0, ip, ror #1
    312c:	000000f6 	strdeq	r0, [r0], -r6
    3130:	01f30004 	mvnseq	r0, r4
    3134:	00f69f50 	rscseq	r9, r6, r0, asr pc
    3138:	00f80000 	rscseq	r0, r8, r0
    313c:	00010000 	andeq	r0, r1, r0
    3140:	0000f850 	andeq	pc, r0, r0, asr r8	; <UNPREDICTABLE>
    3144:	00010200 	andeq	r0, r1, r0, lsl #4
    3148:	f3000400 	vshl.u8	d0, d0, d0
    314c:	029f5001 	addseq	r5, pc, #1
    3150:	04000001 	streq	r0, [r0], #-1
    3154:	01000001 	tsteq	r0, r1
    3158:	01045000 	mrseq	r5, (UNDEF: 4)
    315c:	010e0000 	mrseq	r0, (UNDEF: 14)
    3160:	00040000 	andeq	r0, r4, r0
    3164:	9f5001f3 	svcls	0x005001f3
    3168:	0000010e 	andeq	r0, r0, lr, lsl #2
    316c:	00000112 	andeq	r0, r0, r2, lsl r1
    3170:	12500001 	subsne	r0, r0, #1
    3174:	26000001 	strcs	r0, [r0], -r1
    3178:	04000001 	streq	r0, [r0], #-1
    317c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3180:	0001269f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    3184:	00013400 	andeq	r3, r1, r0, lsl #8
    3188:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3194:	00000170 	andeq	r0, r0, r0, ror r1
    3198:	000001aa 	andeq	r0, r0, sl, lsr #3
    319c:	9f300002 	svcls	0x00300002
    31a0:	000001aa 	andeq	r0, r0, sl, lsr #3
    31a4:	000001de 	ldrdeq	r0, [r0], -lr
    31a8:	00560001 	subseq	r0, r6, r1
    31ac:	00000000 	andeq	r0, r0, r0
    31b0:	70000000 	andvc	r0, r0, r0
    31b4:	80000001 	andhi	r0, r0, r1
    31b8:	02000001 	andeq	r0, r0, #1
    31bc:	809f3000 	addshi	r3, pc, r0
    31c0:	96000001 	strls	r0, [r0], -r1
    31c4:	01000001 	tsteq	r0, r1
    31c8:	01ac5300 			; <UNDEFINED> instruction: 0x01ac5300
    31cc:	01e40000 	mvneq	r0, r0
    31d0:	00010000 	andeq	r0, r1, r0
    31d4:	00000053 	andeq	r0, r0, r3, asr r0
    31d8:	00000000 	andeq	r0, r0, r0
    31dc:	00017000 	andeq	r7, r1, r0
    31e0:	0001aa00 	andeq	sl, r1, r0, lsl #20
    31e4:	30000200 	andcc	r0, r0, r0, lsl #4
    31e8:	0001aa9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    31ec:	0001cc00 	andeq	ip, r1, r0, lsl #24
    31f0:	54000100 	strpl	r0, [r0], #-256	; 0x100
    31f4:	000001cc 	andeq	r0, r0, ip, asr #3
    31f8:	000001d6 	ldrdeq	r0, [r0], -r6
    31fc:	0c710008 	ldcleq	0, cr0, [r1], #-32	; 0xffffffe0
    3200:	00750294 			; <UNDEFINED> instruction: 0x00750294
    3204:	01d69f21 	bicseq	r9, r6, r1, lsr #30
    3208:	01de0000 	bicseq	r0, lr, r0
    320c:	00010000 	andeq	r0, r1, r0
    3210:	00000054 	andeq	r0, r0, r4, asr r0
    3214:	00000000 	andeq	r0, r0, r0
    3218:	0001e400 	andeq	lr, r1, r0, lsl #8
    321c:	00021a00 	andeq	r1, r2, r0, lsl #20
    3220:	30000200 	andcc	r0, r0, r0, lsl #4
    3224:	00021a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    3228:	00026800 	andeq	r6, r2, r0, lsl #16
    322c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    3238:	000001e4 	andeq	r0, r0, r4, ror #3
    323c:	000001f4 	strdeq	r0, [r0], -r4
    3240:	9f300002 	svcls	0x00300002
    3244:	000001f4 	strdeq	r0, [r0], -r4
    3248:	0000020a 	andeq	r0, r0, sl, lsl #4
    324c:	1a530001 	bne	14c3258 <__Stack_Size+0x14c2e58>
    3250:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    3254:	01000002 	tsteq	r0, r2
    3258:	02225300 	eoreq	r5, r2, #0, 6
    325c:	02360000 	eorseq	r0, r6, #0
    3260:	00010000 	andeq	r0, r1, r0
    3264:	00023a53 	andeq	r3, r2, r3, asr sl
    3268:	00023e00 	andeq	r3, r2, r0, lsl #28
    326c:	53000100 	movwpl	r0, #256	; 0x100
    3270:	0000023e 	andeq	r0, r0, lr, lsr r2
    3274:	00000244 	andeq	r0, r0, r4, asr #4
    3278:	44520001 	ldrbmi	r0, [r2], #-1
    327c:	4a000002 	bmi	328c <__Stack_Size+0x2e8c>
    3280:	01000002 	tsteq	r0, r2
    3284:	02545300 	subseq	r5, r4, #0, 6
    3288:	026c0000 	rsbeq	r0, ip, #0
    328c:	00010000 	andeq	r0, r1, r0
    3290:	00000053 	andeq	r0, r0, r3, asr r0
    3294:	00000000 	andeq	r0, r0, r0
    3298:	0001e400 	andeq	lr, r1, r0, lsl #8
    329c:	00021a00 	andeq	r1, r2, r0, lsl #20
    32a0:	30000200 	andcc	r0, r0, r0, lsl #4
    32a4:	00021a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    32a8:	00025200 	andeq	r5, r2, r0, lsl #4
    32ac:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    32b0:	00000254 	andeq	r0, r0, r4, asr r2
    32b4:	00000260 	andeq	r0, r0, r0, ror #4
    32b8:	60520001 	subsvs	r0, r2, r1
    32bc:	68000002 	stmdavs	r0, {r1}
    32c0:	01000002 	tsteq	r0, r2
    32c4:	00005500 	andeq	r5, r0, r0, lsl #10
    32c8:	00000000 	andeq	r0, r0, r0
    32cc:	026c0000 	rsbeq	r0, ip, #0
    32d0:	029e0000 	addseq	r0, lr, #0
    32d4:	00020000 	andeq	r0, r2, r0
    32d8:	029e9f30 	addseq	r9, lr, #48, 30	; 0xc0
    32dc:	02ec0000 	rsceq	r0, ip, #0
    32e0:	00010000 	andeq	r0, r1, r0
    32e4:	00000056 	andeq	r0, r0, r6, asr r0
    32e8:	00000000 	andeq	r0, r0, r0
    32ec:	00026c00 	andeq	r6, r2, r0, lsl #24
    32f0:	00027c00 	andeq	r7, r2, r0, lsl #24
    32f4:	30000200 	andcc	r0, r0, r0, lsl #4
    32f8:	00027c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    32fc:	00028e00 	andeq	r8, r2, r0, lsl #28
    3300:	53000100 	movwpl	r0, #256	; 0x100
    3304:	0000029e 	muleq	r0, lr, r2
    3308:	000002a2 	andeq	r0, r0, r2, lsr #5
    330c:	a6530001 	ldrbge	r0, [r3], -r1
    3310:	ba000002 	blt	3320 <__Stack_Size+0x2f20>
    3314:	01000002 	tsteq	r0, r2
    3318:	02c25300 	sbceq	r5, r2, #0, 6
    331c:	02c60000 	sbceq	r0, r6, #0
    3320:	00010000 	andeq	r0, r1, r0
    3324:	0002c653 	andeq	ip, r2, r3, asr r6
    3328:	0002d000 	andeq	sp, r2, r0
    332c:	52000100 	andpl	r0, r0, #0, 2
    3330:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3334:	000002dc 	ldrdeq	r0, [r0], -ip
    3338:	e2530001 	subs	r0, r3, #1
    333c:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
    3340:	01000002 	tsteq	r0, r2
    3344:	00005300 	andeq	r5, r0, r0, lsl #6
    3348:	00000000 	andeq	r0, r0, r0
    334c:	026c0000 	rsbeq	r0, ip, #0
    3350:	029e0000 	addseq	r0, lr, #0
    3354:	00020000 	andeq	r0, r2, r0
    3358:	029e9f30 	addseq	r9, lr, #48, 30	; 0xc0
    335c:	02ce0000 	sbceq	r0, lr, #0
    3360:	00010000 	andeq	r0, r1, r0
    3364:	0002e254 	andeq	lr, r2, r4, asr r2
    3368:	0002e400 	andeq	lr, r2, r0, lsl #8
    336c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    3370:	000002e4 	andeq	r0, r0, r4, ror #5
    3374:	000002ec 	andeq	r0, r0, ip, ror #5
    3378:	00540001 	subseq	r0, r4, r1
    337c:	00000000 	andeq	r0, r0, r0
    3380:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    3384:	42000002 	andmi	r0, r0, #2
    3388:	01000003 	tsteq	r0, r3
    338c:	03425100 	movteq	r5, #8448	; 0x2100
    3390:	03580000 	cmpeq	r8, #0
    3394:	00040000 	andeq	r0, r4, r0
    3398:	9f5101f3 	svcls	0x005101f3
	...
    33a4:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    33a8:	00000324 	andeq	r0, r0, r4, lsr #6
    33ac:	9f300002 	svcls	0x00300002
    33b0:	0000032c 	andeq	r0, r0, ip, lsr #6
    33b4:	00000358 	andeq	r0, r0, r8, asr r3
    33b8:	00520001 	subseq	r0, r2, r1
    33bc:	00000000 	andeq	r0, r0, r0
    33c0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    33c4:	00000002 	andeq	r0, r0, r2
    33c8:	02000003 	andeq	r0, r0, #3
    33cc:	009f3000 	addseq	r3, pc, r0
    33d0:	12000003 	andne	r0, r0, #3
    33d4:	01000003 	tsteq	r0, r3
    33d8:	03345300 	teqeq	r4, #0, 6
    33dc:	03580000 	cmpeq	r8, #0
    33e0:	00010000 	andeq	r0, r1, r0
    33e4:	00000053 	andeq	r0, r0, r3, asr r0
    33e8:	00000000 	andeq	r0, r0, r0
    33ec:	0002f000 	andeq	pc, r2, r0
    33f0:	00032400 	andeq	r2, r3, r0, lsl #8
    33f4:	30000200 	andcc	r0, r0, r0, lsl #4
    33f8:	0003249f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    33fc:	00034a00 	andeq	r4, r3, r0, lsl #20
    3400:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3404:	0000034c 	andeq	r0, r0, ip, asr #6
    3408:	00000354 	andeq	r0, r0, r4, asr r3
    340c:	00540001 	subseq	r0, r4, r1
    3410:	00000000 	andeq	r0, r0, r0
    3414:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    3418:	fe000003 	cdp2	0, 0, cr0, cr0, cr3, {0}
    341c:	01000003 	tsteq	r0, r3
    3420:	03fe5100 	mvnseq	r5, #0, 2
    3424:	04000000 	streq	r0, [r0], #-0
    3428:	00040000 	andeq	r0, r4, r0
    342c:	9f5101f3 	svcls	0x005101f3
    3430:	00000400 	andeq	r0, r0, r0, lsl #8
    3434:	00000404 	andeq	r0, r0, r4, lsl #8
    3438:	04510001 	ldrbeq	r0, [r1], #-1
    343c:	08000004 	stmdaeq	r0, {r2}
    3440:	04000004 	streq	r0, [r0], #-4
    3444:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3448:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    344c:	00000000 	andeq	r0, r0, r0
    3450:	00040c00 	andeq	r0, r4, r0, lsl #24
    3454:	00040e00 	andeq	r0, r4, r0, lsl #28
    3458:	52000100 	andpl	r0, r0, #0, 2
    345c:	0000040e 	andeq	r0, r0, lr, lsl #8
    3460:	00000414 	andeq	r0, r0, r4, lsl r4
    3464:	01f30004 	mvnseq	r0, r4
    3468:	00009f52 	andeq	r9, r0, r2, asr pc
    346c:	00000000 	andeq	r0, r0, r0
    3470:	04140000 	ldreq	r0, [r4], #-0
    3474:	041c0000 	ldreq	r0, [ip], #-0
    3478:	00010000 	andeq	r0, r1, r0
    347c:	00041c51 	andeq	r1, r4, r1, asr ip
    3480:	00041e00 	andeq	r1, r4, r0, lsl #28
    3484:	f3000400 	vshl.u8	d0, d0, d0
    3488:	1e9f5101 	fmlnee	f5, f7, f1
    348c:	22000004 	andcs	r0, r0, #4
    3490:	01000004 	tsteq	r0, r4
    3494:	04225100 	strteq	r5, [r2], #-256	; 0x100
    3498:	04260000 	strteq	r0, [r6], #-0
    349c:	00040000 	andeq	r0, r4, r0
    34a0:	9f5101f3 	svcls	0x005101f3
	...
    34ac:	00000434 	andeq	r0, r0, r4, lsr r4
    34b0:	00000440 	andeq	r0, r0, r0, asr #8
    34b4:	40510001 	subsmi	r0, r1, r1
    34b8:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    34bc:	04000004 	streq	r0, [r0], #-4
    34c0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    34c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34c8:	00000000 	andeq	r0, r0, r0
    34cc:	00043400 	andeq	r3, r4, r0, lsl #8
    34d0:	00043600 	andeq	r3, r4, r0, lsl #12
    34d4:	30000200 	andcc	r0, r0, r0, lsl #4
    34d8:	0004369f 	muleq	r4, pc, r6	; <UNPREDICTABLE>
    34dc:	00043a00 	andeq	r3, r4, r0, lsl #20
    34e0:	53000100 	movwpl	r0, #256	; 0x100
    34e4:	0000043e 	andeq	r0, r0, lr, lsr r4
    34e8:	00000440 	andeq	r0, r0, r0, asr #8
    34ec:	40530001 	subsmi	r0, r3, r1
    34f0:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    34f4:	01000004 	tsteq	r0, r4
    34f8:	00005100 	andeq	r5, r0, r0, lsl #2
    34fc:	00000000 	andeq	r0, r0, r0
    3500:	044e0000 	strbeq	r0, [lr], #-0
    3504:	04610000 	strbteq	r0, [r1], #-0
    3508:	00010000 	andeq	r0, r1, r0
    350c:	00046150 	andeq	r6, r4, r0, asr r1
    3510:	00046400 	andeq	r6, r4, r0, lsl #8
    3514:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3518:	00000464 	andeq	r0, r0, r4, ror #8
    351c:	00000467 	andeq	r0, r0, r7, ror #8
    3520:	67500001 	ldrbvs	r0, [r0, -r1]
    3524:	82000004 	andhi	r0, r0, #4
    3528:	01000004 	tsteq	r0, r4
    352c:	00005400 	andeq	r5, r0, r0, lsl #8
    3530:	00000000 	andeq	r0, r0, r0
    3534:	044e0000 	strbeq	r0, [lr], #-0
    3538:	04560000 	ldrbeq	r0, [r6], #-0
    353c:	00010000 	andeq	r0, r1, r0
    3540:	00045651 	andeq	r5, r4, r1, asr r6
    3544:	00048200 	andeq	r8, r4, r0, lsl #4
    3548:	f3000400 	vshl.u8	d0, d0, d0
    354c:	009f5101 	addseq	r5, pc, r1, lsl #2
    3550:	00000000 	andeq	r0, r0, r0
    3554:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    3558:	5c000004 	stcpl	0, cr0, [r0], {4}
    355c:	01000004 	tsteq	r0, r4
    3560:	045c5200 	ldrbeq	r5, [ip], #-512	; 0x200
    3564:	04820000 	streq	r0, [r2], #0
    3568:	00040000 	andeq	r0, r4, r0
    356c:	9f5201f3 	svcls	0x005201f3
	...
    3578:	0000044e 	andeq	r0, r0, lr, asr #8
    357c:	00000461 	andeq	r0, r0, r1, ror #8
    3580:	61530001 	cmpvs	r3, r1
    3584:	64000004 	strvs	r0, [r0], #-4
    3588:	04000004 	streq	r0, [r0], #-4
    358c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3590:	0004649f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
    3594:	00046700 	andeq	r6, r4, r0, lsl #14
    3598:	53000100 	movwpl	r0, #256	; 0x100
    359c:	00000467 	andeq	r0, r0, r7, ror #8
    35a0:	00000482 	andeq	r0, r0, r2, lsl #9
    35a4:	01f30004 	mvnseq	r0, r4
    35a8:	00009f53 	andeq	r9, r0, r3, asr pc
    35ac:	00000000 	andeq	r0, r0, r0
    35b0:	04680000 	strbteq	r0, [r8], #-0
    35b4:	046a0000 	strbteq	r0, [sl], #-0
    35b8:	00020000 	andeq	r0, r2, r0
    35bc:	046a9f30 	strbteq	r9, [sl], #-3888	; 0xf30
    35c0:	046e0000 	strbteq	r0, [lr], #-0
    35c4:	00010000 	andeq	r0, r1, r0
    35c8:	00047251 	andeq	r7, r4, r1, asr r2
    35cc:	00048200 	andeq	r8, r4, r0, lsl #4
    35d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    35dc:	00000482 	andeq	r0, r0, r2, lsl #9
    35e0:	00000492 	muleq	r0, r2, r4
    35e4:	92510001 	subsls	r0, r1, #1
    35e8:	96000004 	strls	r0, [r0], -r4
    35ec:	04000004 	streq	r0, [r0], #-4
    35f0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    35f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35f8:	00000000 	andeq	r0, r0, r0
    35fc:	00048200 	andeq	r8, r4, r0, lsl #4
    3600:	00048a00 	andeq	r8, r4, r0, lsl #20
    3604:	53000100 	movwpl	r0, #256	; 0x100
    3608:	0000048a 	andeq	r0, r0, sl, lsl #9
    360c:	00000496 	muleq	r0, r6, r4
    3610:	01f30004 	mvnseq	r0, r4
    3614:	00009f53 	andeq	r9, r0, r3, asr pc
    3618:	00000000 	andeq	r0, r0, r0
    361c:	04820000 	streq	r0, [r2], #0
    3620:	04860000 	streq	r0, [r6], #0
    3624:	00020000 	andeq	r0, r2, r0
    3628:	04869f30 	streq	r9, [r6], #3888	; 0xf30
    362c:	048c0000 	streq	r0, [ip], #0
    3630:	00060000 	andeq	r0, r6, r0
    3634:	ff080074 			; <UNDEFINED> instruction: 0xff080074
    3638:	04929f1a 	ldreq	r9, [r2], #3866	; 0xf1a
    363c:	04960000 	ldreq	r0, [r6], #0
    3640:	00010000 	andeq	r0, r1, r0
    3644:	00000051 	andeq	r0, r0, r1, asr r0
    3648:	00000000 	andeq	r0, r0, r0
    364c:	00049600 	andeq	r9, r4, r0, lsl #12
    3650:	00049d00 	andeq	r9, r4, r0, lsl #26
    3654:	50000100 	andpl	r0, r0, r0, lsl #2
    3658:	0000049d 	muleq	r0, sp, r4
    365c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3660:	00540001 	subseq	r0, r4, r1
    3664:	00000000 	andeq	r0, r0, r0
    3668:	96000000 	strls	r0, [r0], -r0
    366c:	9d000004 	stcls	0, cr0, [r0, #-16]
    3670:	01000004 	tsteq	r0, r4
    3674:	049d5100 	ldreq	r5, [sp], #256	; 0x100
    3678:	04b00000 	ldrteq	r0, [r0], #0
    367c:	00040000 	andeq	r0, r4, r0
    3680:	9f5101f3 	svcls	0x005101f3
	...
    368c:	00000496 	muleq	r0, r6, r4
    3690:	0000049d 	muleq	r0, sp, r4
    3694:	9d520001 	ldclls	0, cr0, [r2, #-4]
    3698:	b0000004 	andlt	r0, r0, r4
    369c:	04000004 	streq	r0, [r0], #-4
    36a0:	5201f300 	andpl	pc, r1, #0, 6
    36a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36a8:	00000000 	andeq	r0, r0, r0
    36ac:	00049600 	andeq	r9, r4, r0, lsl #12
    36b0:	00049d00 	andeq	r9, r4, r0, lsl #26
    36b4:	53000100 	movwpl	r0, #256	; 0x100
    36b8:	0000049d 	muleq	r0, sp, r4
    36bc:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    36c0:	01f30004 	mvnseq	r0, r4
    36c4:	00009f53 	andeq	r9, r0, r3, asr pc
    36c8:	00000000 	andeq	r0, r0, r0
    36cc:	04960000 	ldreq	r0, [r6], #0
    36d0:	04a00000 	strteq	r0, [r0], #0
    36d4:	00020000 	andeq	r0, r2, r0
    36d8:	04a09f30 	strteq	r9, [r0], #3888	; 0xf30
    36dc:	04a40000 	strteq	r0, [r4], #0
    36e0:	00050000 	andeq	r0, r5, r0
    36e4:	21370073 	teqcs	r7, r3, ror r0
    36e8:	0004a89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
    36ec:	0004ac00 	andeq	sl, r4, r0, lsl #24
    36f0:	73000500 	movwvc	r0, #1280	; 0x500
    36f4:	9f213700 	svcls	0x00213700
    36f8:	000004ac 	andeq	r0, r0, ip, lsr #9
    36fc:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3700:	00530001 	subseq	r0, r3, r1
    3704:	00000000 	andeq	r0, r0, r0
    3708:	b0000000 	andlt	r0, r0, r0
    370c:	b7000004 	strlt	r0, [r0, -r4]
    3710:	01000004 	tsteq	r0, r4
    3714:	04b75000 	ldrteq	r5, [r7], #0
    3718:	04c40000 	strbeq	r0, [r4], #0
    371c:	00010000 	andeq	r0, r1, r0
    3720:	00000054 	andeq	r0, r0, r4, asr r0
    3724:	00000000 	andeq	r0, r0, r0
    3728:	0004b000 	andeq	fp, r4, r0
    372c:	0004b700 	andeq	fp, r4, r0, lsl #14
    3730:	51000100 	mrspl	r0, (UNDEF: 16)
    3734:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3738:	000004c4 	andeq	r0, r0, r4, asr #9
    373c:	01f30004 	mvnseq	r0, r4
    3740:	00009f51 	andeq	r9, r0, r1, asr pc
    3744:	00000000 	andeq	r0, r0, r0
    3748:	04b00000 	ldrteq	r0, [r0], #0
    374c:	04b70000 	ldrteq	r0, [r7], #0
    3750:	00010000 	andeq	r0, r1, r0
    3754:	0004b752 	andeq	fp, r4, r2, asr r7
    3758:	0004c400 	andeq	ip, r4, r0, lsl #8
    375c:	f3000400 	vshl.u8	d0, d0, d0
    3760:	009f5201 	addseq	r5, pc, r1, lsl #4
    3764:	00000000 	andeq	r0, r0, r0
    3768:	b0000000 	andlt	r0, r0, r0
    376c:	b7000004 	strlt	r0, [r0, -r4]
    3770:	01000004 	tsteq	r0, r4
    3774:	04b75300 	ldrteq	r5, [r7], #768	; 0x300
    3778:	04c40000 	strbeq	r0, [r4], #0
    377c:	00040000 	andeq	r0, r4, r0
    3780:	9f5301f3 	svcls	0x005301f3
	...
    378c:	000004ca 	andeq	r0, r0, sl, asr #9
    3790:	000004d6 	ldrdeq	r0, [r0], -r6
    3794:	d6510001 	ldrble	r0, [r1], -r1
    3798:	da000004 	ble	37b0 <__Stack_Size+0x33b0>
    379c:	04000004 	streq	r0, [r0], #-4
    37a0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    37a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37a8:	00000000 	andeq	r0, r0, r0
    37ac:	0004ca00 	andeq	ip, r4, r0, lsl #20
    37b0:	0004cc00 	andeq	ip, r4, r0, lsl #24
    37b4:	30000200 	andcc	r0, r0, r0, lsl #4
    37b8:	0004cc9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    37bc:	0004d000 	andeq	sp, r4, r0
    37c0:	53000100 	movwpl	r0, #256	; 0x100
    37c4:	000004d4 	ldrdeq	r0, [r0], -r4
    37c8:	000004d6 	ldrdeq	r0, [r0], -r6
    37cc:	d6530001 	ldrble	r0, [r3], -r1
    37d0:	da000004 	ble	37e8 <__Stack_Size+0x33e8>
    37d4:	01000004 	tsteq	r0, r4
    37d8:	00005100 	andeq	r5, r0, r0, lsl #2
    37dc:	00000000 	andeq	r0, r0, r0
    37e0:	04da0000 	ldrbeq	r0, [sl], #0
    37e4:	04e60000 	strbteq	r0, [r6], #0
    37e8:	00010000 	andeq	r0, r1, r0
    37ec:	0004e651 	andeq	lr, r4, r1, asr r6
    37f0:	0004ea00 	andeq	lr, r4, r0, lsl #20
    37f4:	f3000400 	vshl.u8	d0, d0, d0
    37f8:	009f5101 	addseq	r5, pc, r1, lsl #2
    37fc:	00000000 	andeq	r0, r0, r0
    3800:	da000000 	ble	3808 <__Stack_Size+0x3408>
    3804:	dc000004 	stcle	0, cr0, [r0], {4}
    3808:	02000004 	andeq	r0, r0, #4
    380c:	dc9f3000 	ldcle	0, cr3, [pc], {0}
    3810:	e0000004 	and	r0, r0, r4
    3814:	01000004 	tsteq	r0, r4
    3818:	04e45300 	strbteq	r5, [r4], #768	; 0x300
    381c:	04e60000 	strbteq	r0, [r6], #0
    3820:	00010000 	andeq	r0, r1, r0
    3824:	0004e653 	andeq	lr, r4, r3, asr r6
    3828:	0004ea00 	andeq	lr, r4, r0, lsl #20
    382c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3838:	000004ea 	andeq	r0, r0, sl, ror #9
    383c:	00000518 	andeq	r0, r0, r8, lsl r5
    3840:	18510001 	ldmdane	r1, {r0}^
    3844:	26000005 	strcs	r0, [r0], -r5
    3848:	04000005 	streq	r0, [r0], #-5
    384c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3850:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3854:	00000000 	andeq	r0, r0, r0
    3858:	0004ea00 	andeq	lr, r4, r0, lsl #20
    385c:	00050800 	andeq	r0, r5, r0, lsl #16
    3860:	52000100 	andpl	r0, r0, #0, 2
    3864:	00000508 	andeq	r0, r0, r8, lsl #10
    3868:	00000526 	andeq	r0, r0, r6, lsr #10
    386c:	01f30004 	mvnseq	r0, r4
    3870:	00009f52 	andeq	r9, r0, r2, asr pc
    3874:	00000000 	andeq	r0, r0, r0
    3878:	04ea0000 	strbteq	r0, [sl], #0
    387c:	05160000 	ldreq	r0, [r6, #-0]
    3880:	00010000 	andeq	r0, r1, r0
    3884:	00051653 	andeq	r1, r5, r3, asr r6
    3888:	00052600 	andeq	r2, r5, r0, lsl #12
    388c:	f3000400 	vshl.u8	d0, d0, d0
    3890:	009f5301 	addseq	r5, pc, r1, lsl #6
    3894:	00000000 	andeq	r0, r0, r0
    3898:	ea000000 	b	38a0 <__Stack_Size+0x34a0>
    389c:	ee000004 	cdp	0, 0, cr0, cr0, cr4, {0}
    38a0:	02000004 	andeq	r0, r0, #4
    38a4:	ee9f3000 	cdp	0, 9, cr3, cr15, cr0, {0}
    38a8:	04000004 	streq	r0, [r0], #-4
    38ac:	01000005 	tsteq	r0, r5
    38b0:	050e5600 	streq	r5, [lr, #-1536]	; 0x600
    38b4:	05180000 	ldreq	r0, [r8, #-0]
    38b8:	00010000 	andeq	r0, r1, r0
    38bc:	00051856 	andeq	r1, r5, r6, asr r8
    38c0:	00052600 	andeq	r2, r5, r0, lsl #12
    38c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    38d0:	000004ea 	andeq	r0, r0, sl, ror #9
    38d4:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    38d8:	9f300002 	svcls	0x00300002
    38dc:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    38e0:	000004f6 	strdeq	r0, [r0], -r6
    38e4:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    38e8:	26000005 	strcs	r0, [r0], -r5
    38ec:	01000005 	tsteq	r0, r5
    38f0:	00005400 	andeq	r5, r0, r0, lsl #8
    38f4:	00000000 	andeq	r0, r0, r0
    38f8:	04ea0000 	strbteq	r0, [sl], #0
    38fc:	04f80000 	ldrbteq	r0, [r8], #0
    3900:	00020000 	andeq	r0, r2, r0
    3904:	04f89f30 	ldrbteq	r9, [r8], #3888	; 0xf30
    3908:	05000000 	streq	r0, [r0, #-0]
    390c:	00010000 	andeq	r0, r1, r0
    3910:	00051e55 	andeq	r1, r5, r5, asr lr
    3914:	00052600 	andeq	r2, r5, r0, lsl #12
    3918:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    3924:	00000526 	andeq	r0, r0, r6, lsr #10
    3928:	00000532 	andeq	r0, r0, r2, lsr r5
    392c:	32510001 	subscc	r0, r1, #1
    3930:	36000005 	strcc	r0, [r0], -r5
    3934:	04000005 	streq	r0, [r0], #-5
    3938:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    393c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3940:	00000000 	andeq	r0, r0, r0
    3944:	00052600 	andeq	r2, r5, r0, lsl #12
    3948:	00052800 	andeq	r2, r5, r0, lsl #16
    394c:	30000200 	andcc	r0, r0, r0, lsl #4
    3950:	0005289f 	muleq	r5, pc, r8	; <UNPREDICTABLE>
    3954:	00052c00 	andeq	r2, r5, r0, lsl #24
    3958:	53000100 	movwpl	r0, #256	; 0x100
    395c:	00000530 	andeq	r0, r0, r0, lsr r5
    3960:	00000532 	andeq	r0, r0, r2, lsr r5
    3964:	32530001 	subscc	r0, r3, #1
    3968:	36000005 	strcc	r0, [r0], -r5
    396c:	01000005 	tsteq	r0, r5
    3970:	00005100 	andeq	r5, r0, r0, lsl #2
    3974:	00000000 	andeq	r0, r0, r0
    3978:	05360000 	ldreq	r0, [r6, #-0]!
    397c:	05440000 	strbeq	r0, [r4, #-0]
    3980:	00010000 	andeq	r0, r1, r0
    3984:	00054451 	andeq	r4, r5, r1, asr r4
    3988:	00054a00 	andeq	r4, r5, r0, lsl #20
    398c:	f3000400 	vshl.u8	d0, d0, d0
    3990:	009f5101 	addseq	r5, pc, r1, lsl #2
    3994:	00000000 	andeq	r0, r0, r0
    3998:	36000000 	strcc	r0, [r0], -r0
    399c:	38000005 	stmdacc	r0, {r0, r2}
    39a0:	02000005 	andeq	r0, r0, #5
    39a4:	389f3000 	ldmcc	pc, {ip, sp}	; <UNPREDICTABLE>
    39a8:	3c000005 	stccc	0, cr0, [r0], {5}
    39ac:	01000005 	tsteq	r0, r5
    39b0:	05405300 	strbeq	r5, [r0, #-768]	; 0x300
    39b4:	05460000 	strbeq	r0, [r6, #-0]
    39b8:	00010000 	andeq	r0, r1, r0
    39bc:	00054653 	andeq	r4, r5, r3, asr r6
    39c0:	00054a00 	andeq	r4, r5, r0, lsl #20
    39c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    39d0:	0000054a 	andeq	r0, r0, sl, asr #10
    39d4:	00000556 	andeq	r0, r0, r6, asr r5
    39d8:	56510001 	ldrbpl	r0, [r1], -r1
    39dc:	5a000005 	bpl	39f8 <__Stack_Size+0x35f8>
    39e0:	04000005 	streq	r0, [r0], #-5
    39e4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    39e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39ec:	00000000 	andeq	r0, r0, r0
    39f0:	00054a00 	andeq	r4, r5, r0, lsl #20
    39f4:	00054c00 	andeq	r4, r5, r0, lsl #24
    39f8:	30000200 	andcc	r0, r0, r0, lsl #4
    39fc:	00054c9f 	muleq	r5, pc, ip	; <UNPREDICTABLE>
    3a00:	00055000 	andeq	r5, r5, r0
    3a04:	53000100 	movwpl	r0, #256	; 0x100
    3a08:	00000554 	andeq	r0, r0, r4, asr r5
    3a0c:	00000556 	andeq	r0, r0, r6, asr r5
    3a10:	56530001 	ldrbpl	r0, [r3], -r1
    3a14:	5a000005 	bpl	3a30 <__Stack_Size+0x3630>
    3a18:	01000005 	tsteq	r0, r5
    3a1c:	00005100 	andeq	r5, r0, r0, lsl #2
    3a20:	00000000 	andeq	r0, r0, r0
    3a24:	055a0000 	ldrbeq	r0, [sl, #-0]
    3a28:	05680000 	strbeq	r0, [r8, #-0]!
    3a2c:	00010000 	andeq	r0, r1, r0
    3a30:	00056851 	andeq	r6, r5, r1, asr r8
    3a34:	00056e00 	andeq	r6, r5, r0, lsl #28
    3a38:	f3000400 	vshl.u8	d0, d0, d0
    3a3c:	009f5101 	addseq	r5, pc, r1, lsl #2
    3a40:	00000000 	andeq	r0, r0, r0
    3a44:	5a000000 	bpl	3a4c <__Stack_Size+0x364c>
    3a48:	5c000005 	stcpl	0, cr0, [r0], {5}
    3a4c:	02000005 	andeq	r0, r0, #5
    3a50:	5c9f3000 	ldcpl	0, cr3, [pc], {0}
    3a54:	60000005 	andvs	r0, r0, r5
    3a58:	01000005 	tsteq	r0, r5
    3a5c:	05645300 	strbeq	r5, [r4, #-768]!	; 0x300
    3a60:	056a0000 	strbeq	r0, [sl, #-0]!
    3a64:	00010000 	andeq	r0, r1, r0
    3a68:	00056a53 	andeq	r6, r5, r3, asr sl
    3a6c:	00056e00 	andeq	r6, r5, r0, lsl #28
    3a70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3a7c:	000005ce 	andeq	r0, r0, lr, asr #11
    3a80:	000005da 	ldrdeq	r0, [r0], -sl
    3a84:	da510001 	ble	1443a90 <__Stack_Size+0x1443690>
    3a88:	de000005 	cdple	0, 0, cr0, cr0, cr5, {0}
    3a8c:	04000005 	streq	r0, [r0], #-5
    3a90:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3a94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a98:	00000000 	andeq	r0, r0, r0
    3a9c:	0005ce00 	andeq	ip, r5, r0, lsl #28
    3aa0:	0005d000 	andeq	sp, r5, r0
    3aa4:	30000200 	andcc	r0, r0, r0, lsl #4
    3aa8:	0005d09f 	muleq	r5, pc, r0	; <UNPREDICTABLE>
    3aac:	0005d400 	andeq	sp, r5, r0, lsl #8
    3ab0:	53000100 	movwpl	r0, #256	; 0x100
    3ab4:	000005d8 	ldrdeq	r0, [r0], -r8
    3ab8:	000005da 	ldrdeq	r0, [r0], -sl
    3abc:	da530001 	ble	14c3ac8 <__Stack_Size+0x14c36c8>
    3ac0:	de000005 	cdple	0, 0, cr0, cr0, cr5, {0}
    3ac4:	01000005 	tsteq	r0, r5
    3ac8:	00005100 	andeq	r5, r0, r0, lsl #2
    3acc:	00000000 	andeq	r0, r0, r0
    3ad0:	05de0000 	ldrbeq	r0, [lr]
    3ad4:	05ec0000 	strbeq	r0, [ip, #0]!
    3ad8:	00010000 	andeq	r0, r1, r0
    3adc:	0005ec51 	andeq	lr, r5, r1, asr ip
    3ae0:	0005f200 	andeq	pc, r5, r0, lsl #4
    3ae4:	f3000400 	vshl.u8	d0, d0, d0
    3ae8:	009f5101 	addseq	r5, pc, r1, lsl #2
    3aec:	00000000 	andeq	r0, r0, r0
    3af0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    3af4:	e0000005 	and	r0, r0, r5
    3af8:	02000005 	andeq	r0, r0, #5
    3afc:	e09f3000 	adds	r3, pc, r0
    3b00:	e4000005 	str	r0, [r0], #-5
    3b04:	01000005 	tsteq	r0, r5
    3b08:	05e85300 	strbeq	r5, [r8, #768]!	; 0x300
    3b0c:	05ee0000 	strbeq	r0, [lr, #0]!
    3b10:	00010000 	andeq	r0, r1, r0
    3b14:	0005ee53 	andeq	lr, r5, r3, asr lr
    3b18:	0005f200 	andeq	pc, r5, r0, lsl #4
    3b1c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3b28:	000005f2 	strdeq	r0, [r0], -r2
    3b2c:	000005fe 	strdeq	r0, [r0], -lr
    3b30:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
    3b34:	02000005 	andeq	r0, r0, #5
    3b38:	04000006 	streq	r0, [r0], #-6
    3b3c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3b40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b44:	00000000 	andeq	r0, r0, r0
    3b48:	0005f200 	andeq	pc, r5, r0, lsl #4
    3b4c:	0005f400 	andeq	pc, r5, r0, lsl #8
    3b50:	30000200 	andcc	r0, r0, r0, lsl #4
    3b54:	0005f49f 	muleq	r5, pc, r4	; <UNPREDICTABLE>
    3b58:	0005f800 	andeq	pc, r5, r0, lsl #16
    3b5c:	53000100 	movwpl	r0, #256	; 0x100
    3b60:	000005fc 	strdeq	r0, [r0], -ip
    3b64:	000005fe 	strdeq	r0, [r0], -lr
    3b68:	fe530001 	cdp2	0, 5, cr0, cr3, cr1, {0}
    3b6c:	02000005 	andeq	r0, r0, #5
    3b70:	01000006 	tsteq	r0, r6
    3b74:	00005100 	andeq	r5, r0, r0, lsl #2
    3b78:	00000000 	andeq	r0, r0, r0
    3b7c:	06020000 	streq	r0, [r2], -r0
    3b80:	06100000 	ldreq	r0, [r0], -r0
    3b84:	00010000 	andeq	r0, r1, r0
    3b88:	00061051 	andeq	r1, r6, r1, asr r0
    3b8c:	00061600 	andeq	r1, r6, r0, lsl #12
    3b90:	f3000400 	vshl.u8	d0, d0, d0
    3b94:	009f5101 	addseq	r5, pc, r1, lsl #2
    3b98:	00000000 	andeq	r0, r0, r0
    3b9c:	02000000 	andeq	r0, r0, #0
    3ba0:	04000006 	streq	r0, [r0], #-6
    3ba4:	02000006 	andeq	r0, r0, #6
    3ba8:	049f3000 	ldreq	r3, [pc], #0	; 3bb0 <__Stack_Size+0x37b0>
    3bac:	08000006 	stmdaeq	r0, {r1, r2}
    3bb0:	01000006 	tsteq	r0, r6
    3bb4:	060c5300 	streq	r5, [ip], -r0, lsl #6
    3bb8:	06120000 	ldreq	r0, [r2], -r0
    3bbc:	00010000 	andeq	r0, r1, r0
    3bc0:	00061253 	andeq	r1, r6, r3, asr r2
    3bc4:	00061600 	andeq	r1, r6, r0, lsl #12
    3bc8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3bd4:	00000616 	andeq	r0, r0, r6, lsl r6
    3bd8:	00000622 	andeq	r0, r0, r2, lsr #12
    3bdc:	22510001 	subscs	r0, r1, #1
    3be0:	26000006 	strcs	r0, [r0], -r6
    3be4:	04000006 	streq	r0, [r0], #-6
    3be8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3bec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	00061600 	andeq	r1, r6, r0, lsl #12
    3bf8:	00061800 	andeq	r1, r6, r0, lsl #16
    3bfc:	30000200 	andcc	r0, r0, r0, lsl #4
    3c00:	0006189f 	muleq	r6, pc, r8	; <UNPREDICTABLE>
    3c04:	00061c00 	andeq	r1, r6, r0, lsl #24
    3c08:	53000100 	movwpl	r0, #256	; 0x100
    3c0c:	00000620 	andeq	r0, r0, r0, lsr #12
    3c10:	00000622 	andeq	r0, r0, r2, lsr #12
    3c14:	22530001 	subscs	r0, r3, #1
    3c18:	26000006 	strcs	r0, [r0], -r6
    3c1c:	01000006 	tsteq	r0, r6
    3c20:	00005100 	andeq	r5, r0, r0, lsl #2
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	06260000 	strteq	r0, [r6], -r0
    3c2c:	06340000 	ldrteq	r0, [r4], -r0
    3c30:	00010000 	andeq	r0, r1, r0
    3c34:	00063451 	andeq	r3, r6, r1, asr r4
    3c38:	00063a00 	andeq	r3, r6, r0, lsl #20
    3c3c:	f3000400 	vshl.u8	d0, d0, d0
    3c40:	009f5101 	addseq	r5, pc, r1, lsl #2
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	26000000 	strcs	r0, [r0], -r0
    3c4c:	28000006 	stmdacs	r0, {r1, r2}
    3c50:	02000006 	andeq	r0, r0, #6
    3c54:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    3c58:	2c000006 	stccs	0, cr0, [r0], {6}
    3c5c:	01000006 	tsteq	r0, r6
    3c60:	06305300 	ldrteq	r5, [r0], -r0, lsl #6
    3c64:	06360000 	ldrteq	r0, [r6], -r0
    3c68:	00010000 	andeq	r0, r1, r0
    3c6c:	00063653 	andeq	r3, r6, r3, asr r6
    3c70:	00063a00 	andeq	r3, r6, r0, lsl #20
    3c74:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3c80:	0000063a 	andeq	r0, r0, sl, lsr r6
    3c84:	00000646 	andeq	r0, r0, r6, asr #12
    3c88:	46510001 	ldrbmi	r0, [r1], -r1
    3c8c:	4a000006 	bmi	3cac <__Stack_Size+0x38ac>
    3c90:	04000006 	streq	r0, [r0], #-6
    3c94:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3c98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c9c:	00000000 	andeq	r0, r0, r0
    3ca0:	00063a00 	andeq	r3, r6, r0, lsl #20
    3ca4:	00063c00 	andeq	r3, r6, r0, lsl #24
    3ca8:	30000200 	andcc	r0, r0, r0, lsl #4
    3cac:	00063c9f 	muleq	r6, pc, ip	; <UNPREDICTABLE>
    3cb0:	00064000 	andeq	r4, r6, r0
    3cb4:	53000100 	movwpl	r0, #256	; 0x100
    3cb8:	00000644 	andeq	r0, r0, r4, asr #12
    3cbc:	00000646 	andeq	r0, r0, r6, asr #12
    3cc0:	46530001 	ldrbmi	r0, [r3], -r1
    3cc4:	4a000006 	bmi	3ce4 <__Stack_Size+0x38e4>
    3cc8:	01000006 	tsteq	r0, r6
    3ccc:	00005100 	andeq	r5, r0, r0, lsl #2
    3cd0:	00000000 	andeq	r0, r0, r0
    3cd4:	064a0000 	strbeq	r0, [sl], -r0
    3cd8:	06580000 	ldrbeq	r0, [r8], -r0
    3cdc:	00010000 	andeq	r0, r1, r0
    3ce0:	00065851 	andeq	r5, r6, r1, asr r8
    3ce4:	00065e00 	andeq	r5, r6, r0, lsl #28
    3ce8:	f3000400 	vshl.u8	d0, d0, d0
    3cec:	009f5101 	addseq	r5, pc, r1, lsl #2
    3cf0:	00000000 	andeq	r0, r0, r0
    3cf4:	4a000000 	bmi	3cfc <__Stack_Size+0x38fc>
    3cf8:	4c000006 	stcmi	0, cr0, [r0], {6}
    3cfc:	02000006 	andeq	r0, r0, #6
    3d00:	4c9f3000 	ldcmi	0, cr3, [pc], {0}
    3d04:	50000006 	andpl	r0, r0, r6
    3d08:	01000006 	tsteq	r0, r6
    3d0c:	06545300 	ldrbeq	r5, [r4], -r0, lsl #6
    3d10:	065a0000 	ldrbeq	r0, [sl], -r0
    3d14:	00010000 	andeq	r0, r1, r0
    3d18:	00065a53 	andeq	r5, r6, r3, asr sl
    3d1c:	00065e00 	andeq	r5, r6, r0, lsl #28
    3d20:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3d2c:	0000065e 	andeq	r0, r0, lr, asr r6
    3d30:	0000066a 	andeq	r0, r0, sl, ror #12
    3d34:	6a510001 	bvs	1443d40 <__Stack_Size+0x1443940>
    3d38:	6e000006 	cdpvs	0, 0, cr0, cr0, cr6, {0}
    3d3c:	04000006 	streq	r0, [r0], #-6
    3d40:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3d44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3d48:	00000000 	andeq	r0, r0, r0
    3d4c:	00065e00 	andeq	r5, r6, r0, lsl #28
    3d50:	00066000 	andeq	r6, r6, r0
    3d54:	30000200 	andcc	r0, r0, r0, lsl #4
    3d58:	0006609f 	muleq	r6, pc, r0	; <UNPREDICTABLE>
    3d5c:	00066400 	andeq	r6, r6, r0, lsl #8
    3d60:	53000100 	movwpl	r0, #256	; 0x100
    3d64:	00000668 	andeq	r0, r0, r8, ror #12
    3d68:	0000066a 	andeq	r0, r0, sl, ror #12
    3d6c:	6a530001 	bvs	14c3d78 <__Stack_Size+0x14c3978>
    3d70:	6e000006 	cdpvs	0, 0, cr0, cr0, cr6, {0}
    3d74:	01000006 	tsteq	r0, r6
    3d78:	00005100 	andeq	r5, r0, r0, lsl #2
    3d7c:	00000000 	andeq	r0, r0, r0
    3d80:	066e0000 	strbteq	r0, [lr], -r0
    3d84:	06780000 	ldrbteq	r0, [r8], -r0
    3d88:	00010000 	andeq	r0, r1, r0
    3d8c:	00067851 	andeq	r7, r6, r1, asr r8
    3d90:	00067e00 	andeq	r7, r6, r0, lsl #28
    3d94:	f3000400 	vshl.u8	d0, d0, d0
    3d98:	009f5101 	addseq	r5, pc, r1, lsl #2
    3d9c:	00000000 	andeq	r0, r0, r0
    3da0:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    3da4:	70000006 	andvc	r0, r0, r6
    3da8:	02000006 	andeq	r0, r0, #6
    3dac:	709f3000 	addsvc	r3, pc, r0
    3db0:	7a000006 	bvc	3dd0 <__Stack_Size+0x39d0>
    3db4:	01000006 	tsteq	r0, r6
    3db8:	067a5300 	ldrbteq	r5, [sl], -r0, lsl #6
    3dbc:	067e0000 	ldrbteq	r0, [lr], -r0
    3dc0:	00010000 	andeq	r0, r1, r0
    3dc4:	00000051 	andeq	r0, r0, r1, asr r0
    3dc8:	00000000 	andeq	r0, r0, r0
    3dcc:	00067e00 	andeq	r7, r6, r0, lsl #28
    3dd0:	00068a00 	andeq	r8, r6, r0, lsl #20
    3dd4:	51000100 	mrspl	r0, (UNDEF: 16)
    3dd8:	0000068a 	andeq	r0, r0, sl, lsl #13
    3ddc:	0000068e 	andeq	r0, r0, lr, lsl #13
    3de0:	01f30004 	mvnseq	r0, r4
    3de4:	00009f51 	andeq	r9, r0, r1, asr pc
    3de8:	00000000 	andeq	r0, r0, r0
    3dec:	067e0000 	ldrbteq	r0, [lr], -r0
    3df0:	06800000 	streq	r0, [r0], r0
    3df4:	00020000 	andeq	r0, r2, r0
    3df8:	06809f30 			; <UNDEFINED> instruction: 0x06809f30
    3dfc:	06840000 	streq	r0, [r4], r0
    3e00:	00010000 	andeq	r0, r1, r0
    3e04:	00068853 	andeq	r8, r6, r3, asr r8
    3e08:	00068a00 	andeq	r8, r6, r0, lsl #20
    3e0c:	53000100 	movwpl	r0, #256	; 0x100
    3e10:	0000068a 	andeq	r0, r0, sl, lsl #13
    3e14:	0000068e 	andeq	r0, r0, lr, lsl #13
    3e18:	00510001 	subseq	r0, r1, r1
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    3e24:	98000006 	stmdals	r0, {r1, r2}
    3e28:	01000006 	tsteq	r0, r6
    3e2c:	06985100 	ldreq	r5, [r8], r0, lsl #2
    3e30:	069e0000 	ldreq	r0, [lr], r0
    3e34:	00040000 	andeq	r0, r4, r0
    3e38:	9f5101f3 	svcls	0x005101f3
	...
    3e44:	0000068e 	andeq	r0, r0, lr, lsl #13
    3e48:	00000690 	muleq	r0, r0, r6
    3e4c:	9f300002 	svcls	0x00300002
    3e50:	00000690 	muleq	r0, r0, r6
    3e54:	0000069a 	muleq	r0, sl, r6
    3e58:	9a530001 	bls	14c3e64 <__Stack_Size+0x14c3a64>
    3e5c:	9e000006 	cdpls	0, 0, cr0, cr0, cr6, {0}
    3e60:	01000006 	tsteq	r0, r6
    3e64:	00005100 	andeq	r5, r0, r0, lsl #2
    3e68:	00000000 	andeq	r0, r0, r0
    3e6c:	069e0000 	ldreq	r0, [lr], r0
    3e70:	06aa0000 	strteq	r0, [sl], r0
    3e74:	00010000 	andeq	r0, r1, r0
    3e78:	0006aa51 	andeq	sl, r6, r1, asr sl
    3e7c:	0006ae00 	andeq	sl, r6, r0, lsl #28
    3e80:	f3000400 	vshl.u8	d0, d0, d0
    3e84:	009f5101 	addseq	r5, pc, r1, lsl #2
    3e88:	00000000 	andeq	r0, r0, r0
    3e8c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    3e90:	a0000006 	andge	r0, r0, r6
    3e94:	02000006 	andeq	r0, r0, #6
    3e98:	a09f3000 	addsge	r3, pc, r0
    3e9c:	a4000006 	strge	r0, [r0], #-6
    3ea0:	01000006 	tsteq	r0, r6
    3ea4:	06a85300 	strteq	r5, [r8], r0, lsl #6
    3ea8:	06aa0000 	strteq	r0, [sl], r0
    3eac:	00010000 	andeq	r0, r1, r0
    3eb0:	0006aa53 	andeq	sl, r6, r3, asr sl
    3eb4:	0006ae00 	andeq	sl, r6, r0, lsl #28
    3eb8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ec4:	000006ae 	andeq	r0, r0, lr, lsr #13
    3ec8:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    3ecc:	ba510001 	blt	1443ed8 <__Stack_Size+0x1443ad8>
    3ed0:	be000006 	cdplt	0, 0, cr0, cr0, cr6, {0}
    3ed4:	04000006 	streq	r0, [r0], #-6
    3ed8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3edc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ee0:	00000000 	andeq	r0, r0, r0
    3ee4:	0006ae00 	andeq	sl, r6, r0, lsl #28
    3ee8:	0006b000 	andeq	fp, r6, r0
    3eec:	30000200 	andcc	r0, r0, r0, lsl #4
    3ef0:	0006b09f 	muleq	r6, pc, r0	; <UNPREDICTABLE>
    3ef4:	0006b400 	andeq	fp, r6, r0, lsl #8
    3ef8:	53000100 	movwpl	r0, #256	; 0x100
    3efc:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
    3f00:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    3f04:	ba530001 	blt	14c3f10 <__Stack_Size+0x14c3b10>
    3f08:	be000006 	cdplt	0, 0, cr0, cr0, cr6, {0}
    3f0c:	01000006 	tsteq	r0, r6
    3f10:	00005100 	andeq	r5, r0, r0, lsl #2
    3f14:	00000000 	andeq	r0, r0, r0
    3f18:	06be0000 	ldrteq	r0, [lr], r0
    3f1c:	06cc0000 	strbeq	r0, [ip], r0
    3f20:	00010000 	andeq	r0, r1, r0
    3f24:	0006cc51 	andeq	ip, r6, r1, asr ip
    3f28:	0006d200 	andeq	sp, r6, r0, lsl #4
    3f2c:	f3000400 	vshl.u8	d0, d0, d0
    3f30:	009f5101 	addseq	r5, pc, r1, lsl #2
    3f34:	00000000 	andeq	r0, r0, r0
    3f38:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    3f3c:	c0000006 	andgt	r0, r0, r6
    3f40:	02000006 	andeq	r0, r0, #6
    3f44:	c09f3000 	addsgt	r3, pc, r0
    3f48:	c4000006 	strgt	r0, [r0], #-6
    3f4c:	01000006 	tsteq	r0, r6
    3f50:	06c85300 	strbeq	r5, [r8], r0, lsl #6
    3f54:	06ce0000 	strbeq	r0, [lr], r0
    3f58:	00010000 	andeq	r0, r1, r0
    3f5c:	0006ce53 	andeq	ip, r6, r3, asr lr
    3f60:	0006d200 	andeq	sp, r6, r0, lsl #4
    3f64:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3f70:	000006d2 	ldrdeq	r0, [r0], -r2
    3f74:	000006e0 	andeq	r0, r0, r0, ror #13
    3f78:	e0510001 	subs	r0, r1, r1
    3f7c:	e6000006 	str	r0, [r0], -r6
    3f80:	04000006 	streq	r0, [r0], #-6
    3f84:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3f88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f8c:	00000000 	andeq	r0, r0, r0
    3f90:	0006d200 	andeq	sp, r6, r0, lsl #4
    3f94:	0006d400 	andeq	sp, r6, r0, lsl #8
    3f98:	30000200 	andcc	r0, r0, r0, lsl #4
    3f9c:	0006d49f 	muleq	r6, pc, r4	; <UNPREDICTABLE>
    3fa0:	0006d800 	andeq	sp, r6, r0, lsl #16
    3fa4:	53000100 	movwpl	r0, #256	; 0x100
    3fa8:	000006dc 	ldrdeq	r0, [r0], -ip
    3fac:	000006e2 	andeq	r0, r0, r2, ror #13
    3fb0:	e2530001 	subs	r0, r3, #1
    3fb4:	e6000006 	str	r0, [r0], -r6
    3fb8:	01000006 	tsteq	r0, r6
    3fbc:	00005100 	andeq	r5, r0, r0, lsl #2
    3fc0:	00000000 	andeq	r0, r0, r0
    3fc4:	06e60000 	strbteq	r0, [r6], r0
    3fc8:	06f40000 	ldrbteq	r0, [r4], r0
    3fcc:	00010000 	andeq	r0, r1, r0
    3fd0:	0006f451 	andeq	pc, r6, r1, asr r4	; <UNPREDICTABLE>
    3fd4:	0006fa00 	andeq	pc, r6, r0, lsl #20
    3fd8:	f3000400 	vshl.u8	d0, d0, d0
    3fdc:	009f5101 	addseq	r5, pc, r1, lsl #2
    3fe0:	00000000 	andeq	r0, r0, r0
    3fe4:	e6000000 	str	r0, [r0], -r0
    3fe8:	e8000006 	stmda	r0, {r1, r2}
    3fec:	02000006 	andeq	r0, r0, #6
    3ff0:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    3ff4:	ec000006 	stc	0, cr0, [r0], {6}
    3ff8:	01000006 	tsteq	r0, r6
    3ffc:	06f05300 	ldrbteq	r5, [r0], r0, lsl #6
    4000:	06f60000 	ldrbteq	r0, [r6], r0
    4004:	00010000 	andeq	r0, r1, r0
    4008:	0006f653 	andeq	pc, r6, r3, asr r6	; <UNPREDICTABLE>
    400c:	0006fa00 	andeq	pc, r6, r0, lsl #20
    4010:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    401c:	000006fa 	strdeq	r0, [r0], -sl
    4020:	00000708 	andeq	r0, r0, r8, lsl #14
    4024:	08510001 	ldmdaeq	r1, {r0}^
    4028:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    402c:	04000007 	streq	r0, [r0], #-7
    4030:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4034:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4038:	00000000 	andeq	r0, r0, r0
    403c:	0006fa00 	andeq	pc, r6, r0, lsl #20
    4040:	0006fc00 	andeq	pc, r6, r0, lsl #24
    4044:	30000200 	andcc	r0, r0, r0, lsl #4
    4048:	0006fc9f 	muleq	r6, pc, ip	; <UNPREDICTABLE>
    404c:	00070000 	andeq	r0, r7, r0
    4050:	53000100 	movwpl	r0, #256	; 0x100
    4054:	00000704 	andeq	r0, r0, r4, lsl #14
    4058:	0000070a 	andeq	r0, r0, sl, lsl #14
    405c:	0a530001 	beq	14c4068 <__Stack_Size+0x14c3c68>
    4060:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    4064:	01000007 	tsteq	r0, r7
    4068:	00005100 	andeq	r5, r0, r0, lsl #2
    406c:	00000000 	andeq	r0, r0, r0
    4070:	070e0000 	streq	r0, [lr, -r0]
    4074:	071c0000 	ldreq	r0, [ip, -r0]
    4078:	00010000 	andeq	r0, r1, r0
    407c:	00071c51 	andeq	r1, r7, r1, asr ip
    4080:	00072200 	andeq	r2, r7, r0, lsl #4
    4084:	f3000400 	vshl.u8	d0, d0, d0
    4088:	009f5101 	addseq	r5, pc, r1, lsl #2
    408c:	00000000 	andeq	r0, r0, r0
    4090:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4094:	10000007 	andne	r0, r0, r7
    4098:	02000007 	andeq	r0, r0, #7
    409c:	109f3000 	addsne	r3, pc, r0
    40a0:	14000007 	strne	r0, [r0], #-7
    40a4:	01000007 	tsteq	r0, r7
    40a8:	07185300 	ldreq	r5, [r8, -r0, lsl #6]
    40ac:	071e0000 	ldreq	r0, [lr, -r0]
    40b0:	00010000 	andeq	r0, r1, r0
    40b4:	00071e53 	andeq	r1, r7, r3, asr lr
    40b8:	00072200 	andeq	r2, r7, r0, lsl #4
    40bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    40c8:	00000722 	andeq	r0, r0, r2, lsr #14
    40cc:	00000736 	andeq	r0, r0, r6, lsr r7
    40d0:	36520001 	ldrbcc	r0, [r2], -r1
    40d4:	3e000007 	cdpcc	0, 0, cr0, cr0, cr7, {0}
    40d8:	04000007 	streq	r0, [r0], #-7
    40dc:	5201f300 	andpl	pc, r1, #0, 6
    40e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    40e4:	00000000 	andeq	r0, r0, r0
    40e8:	00073e00 	andeq	r3, r7, r0, lsl #28
    40ec:	00075200 	andeq	r5, r7, r0, lsl #4
    40f0:	52000100 	andpl	r0, r0, #0, 2
    40f4:	00000752 	andeq	r0, r0, r2, asr r7
    40f8:	0000075a 	andeq	r0, r0, sl, asr r7
    40fc:	01f30004 	mvnseq	r0, r4
    4100:	00009f52 	andeq	r9, r0, r2, asr pc
    4104:	00000000 	andeq	r0, r0, r0
    4108:	075a0000 	ldrbeq	r0, [sl, -r0]
    410c:	07700000 	ldrbeq	r0, [r0, -r0]!
    4110:	00010000 	andeq	r0, r1, r0
    4114:	00077050 	andeq	r7, r7, r0, asr r0
    4118:	00079e00 	andeq	r9, r7, r0, lsl #28
    411c:	70000300 	andvc	r0, r0, r0, lsl #6
    4120:	00009f68 	andeq	r9, r0, r8, ror #30
    4124:	00000000 	andeq	r0, r0, r0
    4128:	075a0000 	ldrbeq	r0, [sl, -r0]
    412c:	07780000 	ldrbeq	r0, [r8, -r0]!
    4130:	00010000 	andeq	r0, r1, r0
    4134:	00077851 	andeq	r7, r7, r1, asr r8
    4138:	00078200 	andeq	r8, r7, r0, lsl #4
    413c:	f3000400 	vshl.u8	d0, d0, d0
    4140:	829f5101 	addshi	r5, pc, #1073741824	; 0x40000000
    4144:	88000007 	stmdahi	r0, {r0, r1, r2}
    4148:	01000007 	tsteq	r0, r7
    414c:	07885100 	streq	r5, [r8, r0, lsl #2]
    4150:	079e0000 	ldreq	r0, [lr, r0]
    4154:	00040000 	andeq	r0, r4, r0
    4158:	9f5101f3 	svcls	0x005101f3
	...
    4164:	0000075a 	andeq	r0, r0, sl, asr r7
    4168:	00000790 	muleq	r0, r0, r7
    416c:	90520001 	subsls	r0, r2, r1
    4170:	9e000007 	cdpls	0, 0, cr0, cr0, cr7, {0}
    4174:	04000007 	streq	r0, [r0], #-7
    4178:	5201f300 	andpl	pc, r1, #0, 6
    417c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4180:	00000000 	andeq	r0, r0, r0
    4184:	0007e600 	andeq	lr, r7, r0, lsl #12
    4188:	0007f800 	andeq	pc, r7, r0, lsl #16
    418c:	51000100 	mrspl	r0, (UNDEF: 16)
    4190:	000007f8 	strdeq	r0, [r0], -r8
    4194:	000007fc 	strdeq	r0, [r0], -ip
    4198:	01f30004 	mvnseq	r0, r4
    419c:	00009f51 	andeq	r9, r0, r1, asr pc
    41a0:	00000000 	andeq	r0, r0, r0
    41a4:	07fc0000 	ldrbeq	r0, [ip, r0]!
    41a8:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    41ac:	00010000 	andeq	r0, r1, r0
    41b0:	00080e51 	andeq	r0, r8, r1, asr lr
    41b4:	00081200 	andeq	r1, r8, r0, lsl #4
    41b8:	f3000400 	vshl.u8	d0, d0, d0
    41bc:	009f5101 	addseq	r5, pc, r1, lsl #2
    41c0:	00000000 	andeq	r0, r0, r0
    41c4:	12000000 	andne	r0, r0, #0
    41c8:	24000008 	strcs	r0, [r0], #-8
    41cc:	01000008 	tsteq	r0, r8
    41d0:	08245100 	stmdaeq	r4!, {r8, ip, lr}
    41d4:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    41d8:	00040000 	andeq	r0, r4, r0
    41dc:	9f5101f3 	svcls	0x005101f3
	...
    41e8:	00000828 	andeq	r0, r0, r8, lsr #16
    41ec:	0000083a 	andeq	r0, r0, sl, lsr r8
    41f0:	3a510001 	bcc	14441fc <__Stack_Size+0x1443dfc>
    41f4:	3e000008 	cdpcc	0, 0, cr0, cr0, cr8, {0}
    41f8:	04000008 	streq	r0, [r0], #-8
    41fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4200:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4204:	00000000 	andeq	r0, r0, r0
    4208:	00085800 	andeq	r5, r8, r0, lsl #16
    420c:	00086a00 	andeq	r6, r8, r0, lsl #20
    4210:	51000100 	mrspl	r0, (UNDEF: 16)
    4214:	0000086a 	andeq	r0, r0, sl, ror #16
    4218:	0000086e 	andeq	r0, r0, lr, ror #16
    421c:	01f30004 	mvnseq	r0, r4
    4220:	00009f51 	andeq	r9, r0, r1, asr pc
    4224:	00000000 	andeq	r0, r0, r0
    4228:	086e0000 	stmdaeq	lr!, {}^	; <UNPREDICTABLE>
    422c:	08820000 	stmeq	r2, {}	; <UNPREDICTABLE>
    4230:	00010000 	andeq	r0, r1, r0
    4234:	00088251 	andeq	r8, r8, r1, asr r2
    4238:	00088800 	andeq	r8, r8, r0, lsl #16
    423c:	f3000400 	vshl.u8	d0, d0, d0
    4240:	009f5101 	addseq	r5, pc, r1, lsl #2
    4244:	00000000 	andeq	r0, r0, r0
    4248:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    424c:	b1000008 	tstlt	r0, r8
    4250:	01000008 	tsteq	r0, r8
    4254:	08b15000 	ldmeq	r1!, {ip, lr}
    4258:	08ce0000 	stmiaeq	lr, {}^	; <UNPREDICTABLE>
    425c:	00010000 	andeq	r0, r1, r0
    4260:	0008ce55 	andeq	ip, r8, r5, asr lr
    4264:	0008d100 	andeq	sp, r8, r0, lsl #2
    4268:	50000100 	andpl	r0, r0, r0, lsl #2
    426c:	000008d1 	ldrdeq	r0, [r0], -r1
    4270:	000008d2 	ldrdeq	r0, [r0], -r2
    4274:	01f30004 	mvnseq	r0, r4
    4278:	08d29f50 	ldmeq	r2, {r4, r6, r8, r9, sl, fp, ip, pc}^
    427c:	08d50000 	ldmeq	r5, {}^	; <UNPREDICTABLE>
    4280:	00010000 	andeq	r0, r1, r0
    4284:	0008d550 	andeq	sp, r8, r0, asr r5
    4288:	0008f200 	andeq	pc, r8, r0, lsl #4
    428c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    4290:	000008f2 	strdeq	r0, [r0], -r2
    4294:	000008f5 	strdeq	r0, [r0], -r5
    4298:	f5500001 			; <UNDEFINED> instruction: 0xf5500001
    429c:	f6000008 			; <UNDEFINED> instruction: 0xf6000008
    42a0:	04000008 	streq	r0, [r0], #-8
    42a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    42a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42ac:	00000000 	andeq	r0, r0, r0
    42b0:	00088800 	andeq	r8, r8, r0, lsl #16
    42b4:	00088e00 	andeq	r8, r8, r0, lsl #28
    42b8:	51000100 	mrspl	r0, (UNDEF: 16)
    42bc:	0000088e 	andeq	r0, r0, lr, lsl #17
    42c0:	000008ce 	andeq	r0, r0, lr, asr #17
    42c4:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    42c8:	d2000008 	andle	r0, r0, #8
    42cc:	04000008 	streq	r0, [r0], #-8
    42d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    42d4:	0008d29f 	muleq	r8, pc, r2	; <UNPREDICTABLE>
    42d8:	0008f200 	andeq	pc, r8, r0, lsl #4
    42dc:	54000100 	strpl	r0, [r0], #-256	; 0x100
    42e0:	000008f2 	strdeq	r0, [r0], -r2
    42e4:	000008f6 	strdeq	r0, [r0], -r6
    42e8:	01f30004 	mvnseq	r0, r4
    42ec:	00009f51 	andeq	r9, r0, r1, asr pc
    42f0:	00000000 	andeq	r0, r0, r0
    42f4:	08880000 	stmeq	r8, {}	; <UNPREDICTABLE>
    42f8:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
    42fc:	00020000 	andeq	r0, r2, r0
    4300:	089c9f30 	ldmeq	ip, {r4, r5, r8, r9, sl, fp, ip, pc}
    4304:	08ce0000 	stmiaeq	lr, {}^	; <UNPREDICTABLE>
    4308:	00010000 	andeq	r0, r1, r0
    430c:	0008d257 	andeq	sp, r8, r7, asr r2
    4310:	0008f200 	andeq	pc, r8, r0, lsl #4
    4314:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    4320:	00000888 	andeq	r0, r0, r8, lsl #17
    4324:	000008a6 	andeq	r0, r0, r6, lsr #17
    4328:	9f310002 	svcls	0x00310002
    432c:	000008a6 	andeq	r0, r0, r6, lsr #17
    4330:	000008ce 	andeq	r0, r0, lr, asr #17
    4334:	d2560001 	subsle	r0, r6, #1
    4338:	f2000008 	vhadd.s8	d0, d0, d8
    433c:	01000008 	tsteq	r0, r8
    4340:	00005600 	andeq	r5, r0, r0, lsl #12
    4344:	00000000 	andeq	r0, r0, r0
    4348:	08f60000 	ldmeq	r6!, {}^	; <UNPREDICTABLE>
    434c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    4350:	00010000 	andeq	r0, r1, r0
    4354:	00090851 	andeq	r0, r9, r1, asr r8
    4358:	00090c00 	andeq	r0, r9, r0, lsl #24
    435c:	f3000400 	vshl.u8	d0, d0, d0
    4360:	009f5101 	addseq	r5, pc, r1, lsl #2
    4364:	00000000 	andeq	r0, r0, r0
    4368:	0c000000 	stceq	0, cr0, [r0], {-0}
    436c:	20000009 	andcs	r0, r0, r9
    4370:	01000009 	tsteq	r0, r9
    4374:	09205100 	stmdbeq	r0!, {r8, ip, lr}
    4378:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    437c:	00040000 	andeq	r0, r4, r0
    4380:	9f5101f3 	svcls	0x005101f3
	...
    438c:	00000926 	andeq	r0, r0, r6, lsr #18
    4390:	00000939 	andeq	r0, r0, r9, lsr r9
    4394:	39500001 	ldmdbcc	r0, {r0}^
    4398:	42000009 	andmi	r0, r0, #9
    439c:	01000009 	tsteq	r0, r9
    43a0:	09425400 	stmdbeq	r2, {sl, ip, lr}^
    43a4:	09450000 	stmdbeq	r5, {}^	; <UNPREDICTABLE>
    43a8:	00010000 	andeq	r0, r1, r0
    43ac:	00094550 	andeq	r4, r9, r0, asr r5
    43b0:	00094600 	andeq	r4, r9, r0, lsl #12
    43b4:	f3000400 	vshl.u8	d0, d0, d0
    43b8:	469f5001 	ldrmi	r5, [pc], r1
    43bc:	4d000009 	stcmi	0, cr0, [r0, #-36]	; 0xffffffdc
    43c0:	01000009 	tsteq	r0, r9
    43c4:	094d5000 	stmdbeq	sp, {ip, lr}^
    43c8:	09560000 	ldmdbeq	r6, {}^	; <UNPREDICTABLE>
    43cc:	00010000 	andeq	r0, r1, r0
    43d0:	00095654 	andeq	r5, r9, r4, asr r6
    43d4:	00095900 	andeq	r5, r9, r0, lsl #18
    43d8:	50000100 	andpl	r0, r0, r0, lsl #2
    43dc:	00000959 	andeq	r0, r0, r9, asr r9
    43e0:	0000095a 	andeq	r0, r0, sl, asr r9
    43e4:	01f30004 	mvnseq	r0, r4
    43e8:	095a9f50 	ldmdbeq	sl, {r4, r6, r8, r9, sl, fp, ip, pc}^
    43ec:	099d0000 	ldmibeq	sp, {}	; <UNPREDICTABLE>
    43f0:	00010000 	andeq	r0, r1, r0
    43f4:	00099d50 	andeq	r9, r9, r0, asr sp
    43f8:	00099e00 	andeq	r9, r9, r0, lsl #28
    43fc:	f3000400 	vshl.u8	d0, d0, d0
    4400:	9e9f5001 	cdpls	0, 9, cr5, cr15, cr1, {0}
    4404:	db000009 	blle	4430 <__Stack_Size+0x4030>
    4408:	01000009 	tsteq	r0, r9
    440c:	09db5000 	ldmibeq	fp, {ip, lr}^
    4410:	09dc0000 	ldmibeq	ip, {}^	; <UNPREDICTABLE>
    4414:	00040000 	andeq	r0, r4, r0
    4418:	9f5001f3 	svcls	0x005001f3
	...
    4424:	00000926 	andeq	r0, r0, r6, lsr #18
    4428:	00000930 	andeq	r0, r0, r0, lsr r9
    442c:	30510001 	subscc	r0, r1, r1
    4430:	42000009 	andmi	r0, r0, #9
    4434:	01000009 	tsteq	r0, r9
    4438:	09425500 	stmdbeq	r2, {r8, sl, ip, lr}^
    443c:	09460000 	stmdbeq	r6, {}^	; <UNPREDICTABLE>
    4440:	00040000 	andeq	r0, r4, r0
    4444:	9f5101f3 	svcls	0x005101f3
    4448:	00000946 	andeq	r0, r0, r6, asr #18
    444c:	00000956 	andeq	r0, r0, r6, asr r9
    4450:	56550001 	ldrbpl	r0, [r5], -r1
    4454:	5a000009 	bpl	4480 <__Stack_Size+0x4080>
    4458:	04000009 	streq	r0, [r0], #-9
    445c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4460:	00095a9f 	muleq	r9, pc, sl	; <UNPREDICTABLE>
    4464:	00096200 	andeq	r6, r9, r0, lsl #4
    4468:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    446c:	00000962 	andeq	r0, r0, r2, ror #18
    4470:	000009dc 	ldrdeq	r0, [r0], -ip
    4474:	01f30004 	mvnseq	r0, r4
    4478:	00009f51 	andeq	r9, r0, r1, asr pc
    447c:	00000000 	andeq	r0, r0, r0
    4480:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    4484:	09820000 	stmibeq	r2, {}	; <UNPREDICTABLE>
    4488:	00010000 	andeq	r0, r1, r0
    448c:	00000053 	andeq	r0, r0, r3, asr r0
    4490:	00000000 	andeq	r0, r0, r0
    4494:	00096400 	andeq	r6, r9, r0, lsl #8
    4498:	00098c00 	andeq	r8, r9, r0, lsl #24
    449c:	52000100 	andpl	r0, r0, #0, 2
	...
    44a8:	00000964 	andeq	r0, r0, r4, ror #18
    44ac:	00000994 	muleq	r0, r4, r9
    44b0:	00510001 	subseq	r0, r1, r1
    44b4:	00000000 	andeq	r0, r0, r0
    44b8:	64000000 	strvs	r0, [r0], #-0
    44bc:	9d000009 	stcls	0, cr0, [r0, #-36]	; 0xffffffdc
    44c0:	01000009 	tsteq	r0, r9
    44c4:	099d5000 	ldmibeq	sp, {ip, lr}
    44c8:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    44cc:	00040000 	andeq	r0, r4, r0
    44d0:	9f5001f3 	svcls	0x005001f3
	...
    44dc:	00000964 	andeq	r0, r0, r4, ror #18
    44e0:	00000974 	andeq	r0, r0, r4, ror r9
    44e4:	9f300002 	svcls	0x00300002
    44e8:	00000974 	andeq	r0, r0, r4, ror r9
    44ec:	00000976 	andeq	r0, r0, r6, ror r9
    44f0:	76570001 	ldrbvc	r0, [r7], -r1
    44f4:	7a000009 	bvc	4520 <__Stack_Size+0x4120>
    44f8:	07000009 	streq	r0, [r0, -r9]
    44fc:	0b007700 	bleq	22104 <__Stack_Size+0x21d04>
    4500:	9f1aff0c 	svcls	0x001aff0c
    4504:	0000098c 	andeq	r0, r0, ip, lsl #19
    4508:	0000099d 	muleq	r0, sp, r9
    450c:	00520001 	subseq	r0, r2, r1
    4510:	00000000 	andeq	r0, r0, r0
    4514:	64000000 	strvs	r0, [r0], #-0
    4518:	76000009 	strvc	r0, [r0], -r9
    451c:	02000009 	andeq	r0, r0, #9
    4520:	769f3000 	ldrvc	r3, [pc], r0
    4524:	7e000009 	cdpvc	0, 0, cr0, cr0, cr9, {0}
    4528:	01000009 	tsteq	r0, r9
    452c:	09905600 	ldmibeq	r0, {r9, sl, ip, lr}
    4530:	099a0000 	ldmibeq	sl, {}	; <UNPREDICTABLE>
    4534:	00010000 	andeq	r0, r1, r0
    4538:	00099a56 	andeq	r9, r9, r6, asr sl
    453c:	00099d00 	andeq	r9, r9, r0, lsl #26
    4540:	70000200 	andvc	r0, r0, r0, lsl #4
    4544:	00000020 	andeq	r0, r0, r0, lsr #32
    4548:	00000000 	andeq	r0, r0, r0
    454c:	00096400 	andeq	r6, r9, r0, lsl #8
    4550:	00097600 	andeq	r7, r9, r0, lsl #12
    4554:	30000200 	andcc	r0, r0, r0, lsl #4
    4558:	0009769f 	muleq	r9, pc, r6	; <UNPREDICTABLE>
    455c:	00099400 	andeq	r9, r9, r0, lsl #8
    4560:	71000500 	tstvc	r0, r0, lsl #10
    4564:	9f243800 	svcls	0x00243800
	...
    4570:	0000099e 	muleq	r0, lr, r9
    4574:	000009c6 	andeq	r0, r0, r6, asr #19
    4578:	00530001 	subseq	r0, r3, r1
    457c:	00000000 	andeq	r0, r0, r0
    4580:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    4584:	be000009 	cdplt	0, 0, cr0, cr0, cr9, {0}
    4588:	01000009 	tsteq	r0, r9
    458c:	00005200 	andeq	r5, r0, r0, lsl #4
    4590:	00000000 	andeq	r0, r0, r0
    4594:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    4598:	09d20000 	ldmibeq	r2, {}^	; <UNPREDICTABLE>
    459c:	00010000 	andeq	r0, r1, r0
    45a0:	00000051 	andeq	r0, r0, r1, asr r0
    45a4:	00000000 	andeq	r0, r0, r0
    45a8:	00099e00 	andeq	r9, r9, r0, lsl #28
    45ac:	0009db00 	andeq	sp, r9, r0, lsl #22
    45b0:	50000100 	andpl	r0, r0, r0, lsl #2
    45b4:	000009db 	ldrdeq	r0, [r0], -fp
    45b8:	000009dc 	ldrdeq	r0, [r0], -ip
    45bc:	01f30004 	mvnseq	r0, r4
    45c0:	00009f50 	andeq	r9, r0, r0, asr pc
    45c4:	00000000 	andeq	r0, r0, r0
    45c8:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    45cc:	09aa0000 	stmibeq	sl!, {}	; <UNPREDICTABLE>
    45d0:	00020000 	andeq	r0, r2, r0
    45d4:	09aa9f30 	stmibeq	sl!, {r4, r5, r8, r9, sl, fp, ip, pc}
    45d8:	09b40000 	ldmibeq	r4!, {}	; <UNPREDICTABLE>
    45dc:	00010000 	andeq	r0, r1, r0
    45e0:	0009b456 	andeq	fp, r9, r6, asr r4
    45e4:	0009ca00 	andeq	ip, r9, r0, lsl #20
    45e8:	76000700 	strvc	r0, [r0], -r0, lsl #14
    45ec:	0cff0a00 	vldmiaeq	pc!, {s1-s0}
    45f0:	09ca9f1a 	stmibeq	sl, {r1, r3, r4, r8, r9, sl, fp, ip, pc}^
    45f4:	09d60000 	ldmibeq	r6, {}^	; <UNPREDICTABLE>
    45f8:	00010000 	andeq	r0, r1, r0
    45fc:	0009d653 	andeq	sp, r9, r3, asr r6
    4600:	0009d800 	andeq	sp, r9, r0, lsl #16
    4604:	70000200 	andvc	r0, r0, r0, lsl #4
    4608:	0000001c 	andeq	r0, r0, ip, lsl r0
    460c:	00000000 	andeq	r0, r0, r0
    4610:	00099e00 	andeq	r9, r9, r0, lsl #28
    4614:	0009b400 	andeq	fp, r9, r0, lsl #8
    4618:	30000200 	andcc	r0, r0, r0, lsl #4
    461c:	0009b49f 	muleq	r9, pc, r4	; <UNPREDICTABLE>
    4620:	0009ca00 	andeq	ip, r9, r0, lsl #20
    4624:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    4628:	000009ca 	andeq	r0, r0, sl, asr #19
    462c:	000009ce 	andeq	r0, r0, lr, asr #19
    4630:	00770007 	rsbseq	r0, r7, r7
    4634:	1adfff0b 	bne	ff804268 <SCS_BASE+0x1f7f6268>
    4638:	0009ce9f 	muleq	r9, pc, lr	; <UNPREDICTABLE>
    463c:	0009db00 	andeq	sp, r9, r0, lsl #22
    4640:	52000100 	andpl	r0, r0, #0, 2
	...
    464c:	0000099e 	muleq	r0, lr, r9
    4650:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    4654:	9f300002 	svcls	0x00300002
    4658:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    465c:	000009d2 	ldrdeq	r0, [r0], -r2
    4660:	00710005 	rsbseq	r0, r1, r5
    4664:	009f243c 	addseq	r2, pc, ip, lsr r4	; <UNPREDICTABLE>
    4668:	00000000 	andeq	r0, r0, r0
    466c:	dc000000 	stcle	0, cr0, [r0], {-0}
    4670:	e8000009 	stmda	r0, {r0, r3}
    4674:	01000009 	tsteq	r0, r9
    4678:	09e85100 	stmibeq	r8!, {r8, ip, lr}^
    467c:	09ec0000 	stmibeq	ip!, {}^	; <UNPREDICTABLE>
    4680:	00040000 	andeq	r0, r4, r0
    4684:	9f5101f3 	svcls	0x005101f3
	...
    4690:	000009ec 	andeq	r0, r0, ip, ror #19
    4694:	000009ee 	andeq	r0, r0, lr, ror #19
    4698:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
    469c:	f2000009 	vhadd.s8	d0, d0, d9
    46a0:	04000009 	streq	r0, [r0], #-9
    46a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    46a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46ac:	00000000 	andeq	r0, r0, r0
    46b0:	0009f200 	andeq	pc, r9, r0, lsl #4
    46b4:	0009f400 	andeq	pc, r9, r0, lsl #8
    46b8:	50000100 	andpl	r0, r0, r0, lsl #2
    46bc:	000009f4 	strdeq	r0, [r0], -r4
    46c0:	000009f8 	strdeq	r0, [r0], -r8
    46c4:	01f30004 	mvnseq	r0, r4
    46c8:	00009f50 	andeq	r9, r0, r0, asr pc
    46cc:	00000000 	andeq	r0, r0, r0
    46d0:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
    46d4:	09fa0000 	ldmibeq	sl!, {}^	; <UNPREDICTABLE>
    46d8:	00010000 	andeq	r0, r1, r0
    46dc:	0009fa50 	andeq	pc, r9, r0, asr sl	; <UNPREDICTABLE>
    46e0:	0009fe00 	andeq	pc, r9, r0, lsl #28
    46e4:	f3000400 	vshl.u8	d0, d0, d0
    46e8:	009f5001 	addseq	r5, pc, r1
    46ec:	00000000 	andeq	r0, r0, r0
    46f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    46f4:	02000009 	andeq	r0, r0, #9
    46f8:	0100000a 	tsteq	r0, sl
    46fc:	0a025000 	beq	98704 <__Stack_Size+0x98304>
    4700:	0a060000 	beq	184708 <__Stack_Size+0x184308>
    4704:	00040000 	andeq	r0, r4, r0
    4708:	9f5001f3 	svcls	0x005001f3
	...
    4714:	00000a06 	andeq	r0, r0, r6, lsl #20
    4718:	00000a08 	andeq	r0, r0, r8, lsl #20
    471c:	08500001 	ldmdaeq	r0, {r0}^
    4720:	0c00000a 	stceq	0, cr0, [r0], {10}
    4724:	0400000a 	streq	r0, [r0], #-10
    4728:	5001f300 	andpl	pc, r1, r0, lsl #6
    472c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4730:	00000000 	andeq	r0, r0, r0
    4734:	000a0c00 	andeq	r0, sl, r0, lsl #24
    4738:	000a0e00 	andeq	r0, sl, r0, lsl #28
    473c:	50000100 	andpl	r0, r0, r0, lsl #2
    4740:	00000a0e 	andeq	r0, r0, lr, lsl #20
    4744:	00000a12 	andeq	r0, r0, r2, lsl sl
    4748:	01f30004 	mvnseq	r0, r4
    474c:	00009f50 	andeq	r9, r0, r0, asr pc
    4750:	00000000 	andeq	r0, r0, r0
    4754:	0a120000 	beq	48475c <__Stack_Size+0x48435c>
    4758:	0a1a0000 	beq	684760 <__Stack_Size+0x684360>
    475c:	00010000 	andeq	r0, r1, r0
    4760:	000a1a50 	andeq	r1, sl, r0, asr sl
    4764:	000a1e00 	andeq	r1, sl, r0, lsl #28
    4768:	f3000400 	vshl.u8	d0, d0, d0
    476c:	009f5001 	addseq	r5, pc, r1
    4770:	00000000 	andeq	r0, r0, r0
    4774:	12000000 	andne	r0, r0, #0
    4778:	1400000a 	strne	r0, [r0], #-10
    477c:	0200000a 	andeq	r0, r0, #10
    4780:	149f3000 	ldrne	r3, [pc], #0	; 4788 <__Stack_Size+0x4388>
    4784:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    4788:	0a00000a 	beq	47b8 <__Stack_Size+0x43b8>
    478c:	73007100 	movwvc	r7, #256	; 0x100
    4790:	24401a00 	strbcs	r1, [r0], #-2560	; 0xa00
    4794:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    4798:	00000000 	andeq	r0, r0, r0
    479c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    47a0:	2000000a 	andcs	r0, r0, sl
    47a4:	0100000a 	tsteq	r0, sl
    47a8:	0a205100 	beq	818bb0 <__Stack_Size+0x8187b0>
    47ac:	0a260000 	beq	9847b4 <__Stack_Size+0x9843b4>
    47b0:	00040000 	andeq	r0, r4, r0
    47b4:	9f5101f3 	svcls	0x005101f3
	...
    47c0:	00000a26 	andeq	r0, r0, r6, lsr #20
    47c4:	00000a2e 	andeq	r0, r0, lr, lsr #20
    47c8:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
    47cc:	3c00000a 	stccc	0, cr0, [r0], {10}
    47d0:	0400000a 	streq	r0, [r0], #-10
    47d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    47d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47dc:	00000000 	andeq	r0, r0, r0
    47e0:	000a2600 	andeq	r2, sl, r0, lsl #12
    47e4:	000a3a00 	andeq	r3, sl, r0, lsl #20
    47e8:	30000200 	andcc	r0, r0, r0, lsl #4
    47ec:	000a3a9f 	muleq	sl, pc, sl	; <UNPREDICTABLE>
    47f0:	000a3c00 	andeq	r3, sl, r0, lsl #24
    47f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4800:	00000a26 	andeq	r0, r0, r6, lsr #20
    4804:	00000a28 	andeq	r0, r0, r8, lsr #20
    4808:	9f300002 	svcls	0x00300002
    480c:	00000a28 	andeq	r0, r0, r8, lsr #20
    4810:	00000a3c 	andeq	r0, r0, ip, lsr sl
    4814:	00730006 	rsbseq	r0, r3, r6
    4818:	9f1a0071 	svcls	0x001a0071
	...
    4824:	00000a26 	andeq	r0, r0, r6, lsr #20
    4828:	00000a30 	andeq	r0, r0, r0, lsr sl
    482c:	9f300002 	svcls	0x00300002
    4830:	00000a30 	andeq	r0, r0, r0, lsr sl
    4834:	00000a3c 	andeq	r0, r0, ip, lsr sl
    4838:	00710006 	rsbseq	r0, r1, r6
    483c:	9f1a0072 	svcls	0x001a0072
	...
    4848:	00000a3c 	andeq	r0, r0, ip, lsr sl
    484c:	00000a3e 	andeq	r0, r0, lr, lsr sl
    4850:	3e510001 	cdpcc	0, 5, cr0, cr1, cr1, {0}
    4854:	4400000a 	strmi	r0, [r0], #-10
    4858:	0400000a 	streq	r0, [r0], #-10
    485c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4860:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    486c:	00002e00 	andeq	r2, r0, r0, lsl #28
    4870:	50000100 	andpl	r0, r0, r0, lsl #2
    4874:	0000002e 	andeq	r0, r0, lr, lsr #32
    4878:	00000042 	andeq	r0, r0, r2, asr #32
    487c:	01f30004 	mvnseq	r0, r4
    4880:	00429f50 	subeq	r9, r2, r0, asr pc
    4884:	00460000 	subeq	r0, r6, r0
    4888:	00010000 	andeq	r0, r1, r0
    488c:	00004650 	andeq	r4, r0, r0, asr r6
    4890:	00005200 	andeq	r5, r0, r0, lsl #4
    4894:	f3000400 	vshl.u8	d0, d0, d0
    4898:	529f5001 	addspl	r5, pc, #1
    489c:	56000000 	strpl	r0, [r0], -r0
    48a0:	01000000 	mrseq	r0, (UNDEF: 0)
    48a4:	00565000 	subseq	r5, r6, r0
    48a8:	00620000 	rsbeq	r0, r2, r0
    48ac:	00040000 	andeq	r0, r4, r0
    48b0:	9f5001f3 	svcls	0x005001f3
    48b4:	00000062 	andeq	r0, r0, r2, rrx
    48b8:	00000066 	andeq	r0, r0, r6, rrx
    48bc:	66500001 	ldrbvs	r0, [r0], -r1
    48c0:	72000000 	andvc	r0, r0, #0
    48c4:	04000000 	streq	r0, [r0], #-0
    48c8:	5001f300 	andpl	pc, r1, r0, lsl #6
    48cc:	0000729f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    48d0:	00007600 	andeq	r7, r0, r0, lsl #12
    48d4:	50000100 	andpl	r0, r0, r0, lsl #2
    48d8:	00000076 	andeq	r0, r0, r6, ror r0
    48dc:	0000008a 	andeq	r0, r0, sl, lsl #1
    48e0:	01f30004 	mvnseq	r0, r4
    48e4:	008a9f50 	addeq	r9, sl, r0, asr pc
    48e8:	00940000 	addseq	r0, r4, r0
    48ec:	00010000 	andeq	r0, r1, r0
    48f0:	00000050 	andeq	r0, r0, r0, asr r0
    48f4:	00000000 	andeq	r0, r0, r0
    48f8:	00009400 	andeq	r9, r0, r0, lsl #8
    48fc:	0000d600 	andeq	sp, r0, r0, lsl #12
    4900:	50000100 	andpl	r0, r0, r0, lsl #2
    4904:	000000d6 	ldrdeq	r0, [r0], -r6
    4908:	00000116 	andeq	r0, r0, r6, lsl r1
    490c:	16540001 	ldrbne	r0, [r4], -r1
    4910:	1c000001 	stcne	0, cr0, [r0], {1}
    4914:	04000001 	streq	r0, [r0], #-1
    4918:	5001f300 	andpl	pc, r1, r0, lsl #6
    491c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4920:	00000000 	andeq	r0, r0, r0
    4924:	00009400 	andeq	r9, r0, r0, lsl #8
    4928:	0000ac00 	andeq	sl, r0, r0, lsl #24
    492c:	51000100 	mrspl	r0, (UNDEF: 16)
    4930:	000000ac 	andeq	r0, r0, ip, lsr #1
    4934:	00000116 	andeq	r0, r0, r6, lsl r1
    4938:	16550001 	ldrbne	r0, [r5], -r1
    493c:	1c000001 	stcne	0, cr0, [r0], {1}
    4940:	04000001 	streq	r0, [r0], #-1
    4944:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4948:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    494c:	00000000 	andeq	r0, r0, r0
    4950:	00009400 	andeq	r9, r0, r0, lsl #8
    4954:	0000a000 	andeq	sl, r0, r0
    4958:	30000200 	andcc	r0, r0, r0, lsl #4
    495c:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4960:	0000a400 	andeq	sl, r0, r0, lsl #8
    4964:	73000b00 	movwvc	r0, #2816	; 0xb00
    4968:	cfff0b00 	svcgt	0x00ff0b00
    496c:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    4970:	00a69f1a 	adceq	r9, r6, sl, lsl pc
    4974:	00ae0000 	adceq	r0, lr, r0
    4978:	00070000 	andeq	r0, r7, r0
    497c:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    4980:	ae9f1aff 	mrcge	10, 4, r1, cr15, cr15, {7}
    4984:	b0000000 	andlt	r0, r0, r0
    4988:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    498c:	94107000 	ldrls	r7, [r0], #-0
    4990:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4994:	00b09f1a 	adcseq	r9, r0, sl, lsl pc
    4998:	00b80000 	adcseq	r0, r8, r0
    499c:	000b0000 	andeq	r0, fp, r0
    49a0:	f30b0072 	vqadd.u8	q0, <illegal reg q5.5>, q9
    49a4:	ff0a1ae9 			; <UNDEFINED> instruction: 0xff0a1ae9
    49a8:	c29f1aff 	addsgt	r1, pc, #1044480	; 0xff000
    49ac:	c6000000 	strgt	r0, [r0], -r0
    49b0:	07000000 	streq	r0, [r0, -r0]
    49b4:	0a007300 	beq	215bc <__Stack_Size+0x211bc>
    49b8:	9f1affff 	svcls	0x001affff
    49bc:	000000c6 	andeq	r0, r0, r6, asr #1
    49c0:	000000ca 	andeq	r0, r0, sl, asr #1
    49c4:	0c700009 	ldcleq	0, cr0, [r0], #-36	; 0xffffffdc
    49c8:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    49cc:	ca9f1aff 	bgt	fe7cb5d0 <SCS_BASE+0x1e7bd5d0>
    49d0:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    49d4:	0b000000 	bleq	49dc <__Stack_Size+0x45dc>
    49d8:	0b007300 	bleq	215e0 <__Stack_Size+0x211e0>
    49dc:	0a1afcff 	beq	6c3de0 <__Stack_Size+0x6c39e0>
    49e0:	9f1affff 	svcls	0x001affff
    49e4:	000000d2 	ldrdeq	r0, [r0], -r2
    49e8:	000000d9 	ldrdeq	r0, [r0], -r9
    49ec:	00730007 	rsbseq	r0, r3, r7
    49f0:	1affff0a 	bne	4620 <__Stack_Size+0x4220>
    49f4:	0000fa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    49f8:	00010c00 	andeq	r0, r1, r0, lsl #24
    49fc:	50000100 	andpl	r0, r0, r0, lsl #2
    4a00:	0000010c 	andeq	r0, r0, ip, lsl #2
    4a04:	0000010e 	andeq	r0, r0, lr, lsl #2
    4a08:	00730006 	rsbseq	r0, r3, r6
    4a0c:	9f210070 	svcls	0x00210070
    4a10:	0000010e 	andeq	r0, r0, lr, lsl #2
    4a14:	00000110 	andeq	r0, r0, r0, lsl r1
    4a18:	10530001 	subsne	r0, r3, r1
    4a1c:	1c000001 	stcne	0, cr0, [r0], {1}
    4a20:	11000001 	tstne	r0, r1
    4a24:	f7007200 			; <UNDEFINED> instruction: 0xf7007200
    4a28:	f7640825 			; <UNDEFINED> instruction: 0xf7640825
    4a2c:	00f71b25 	rscseq	r1, r7, r5, lsr #22
    4a30:	00701a3f 	rsbseq	r1, r0, pc, lsr sl
    4a34:	00009f21 	andeq	r9, r0, r1, lsr #30
    4a38:	00000000 	andeq	r0, r0, r0
    4a3c:	00940000 	addseq	r0, r4, r0
    4a40:	00e60000 	rsceq	r0, r6, r0
    4a44:	00020000 	andeq	r0, r2, r0
    4a48:	00e69f30 	rsceq	r9, r6, r0, lsr pc
    4a4c:	00ec0000 	rsceq	r0, ip, r0
    4a50:	00010000 	andeq	r0, r1, r0
    4a54:	0000ec52 	andeq	lr, r0, r2, asr ip
    4a58:	0000fc00 	andeq	pc, r0, r0, lsl #24
    4a5c:	91001100 	mrsls	r1, (UNDEF: 16)
    4a60:	64910668 	ldrvs	r0, [r1], #1640	; 0x668
    4a64:	71007406 	tstvc	r0, r6, lsl #8
    4a68:	01282900 			; <UNDEFINED> instruction: 0x01282900
    4a6c:	9f131600 	svcls	0x00131600
    4a70:	000000fc 	strdeq	r0, [r0], -ip
    4a74:	00000116 	andeq	r0, r0, r6, lsl r1
    4a78:	68910014 	ldmvs	r1, {r2, r4}
    4a7c:	06649106 	strbteq	r9, [r4], -r6, lsl #2
    4a80:	000c0074 	andeq	r0, ip, r4, ror r0
    4a84:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    4a88:	16000128 	strne	r0, [r0], -r8, lsr #2
    4a8c:	01169f13 	tsteq	r6, r3, lsl pc
    4a90:	011c0000 	tsteq	ip, r0
    4a94:	00150000 	andseq	r0, r5, r0
    4a98:	7d06687d 	stcvc	8, cr6, [r6, #-500]	; 0xfffffe0c
    4a9c:	01f30664 	mvnseq	r0, r4, ror #12
    4aa0:	38000c50 	stmdacc	r0, {r4, r6, sl, fp}
    4aa4:	28294001 	stmdacs	r9!, {r0, lr}
    4aa8:	13160001 	tstne	r6, #1
    4aac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ab0:	00000000 	andeq	r0, r0, r0
    4ab4:	00009400 	andeq	r9, r0, r0, lsl #8
    4ab8:	0000f200 	andeq	pc, r0, r0, lsl #4
    4abc:	30000200 	andcc	r0, r0, r0, lsl #4
    4ac0:	0000f29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    4ac4:	00010000 	andeq	r0, r1, r0
    4ac8:	52000100 	andpl	r0, r0, #0, 2
    4acc:	00000100 	andeq	r0, r0, r0, lsl #2
    4ad0:	00000116 	andeq	r0, r0, r6, lsl r1
    4ad4:	68910022 	ldmvs	r1, {r1, r5}
    4ad8:	06649106 	strbteq	r9, [r4], -r6, lsl #2
    4adc:	000c0074 	andeq	r0, ip, r4, ror r0
    4ae0:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    4ae4:	16000128 	strne	r0, [r0], -r8, lsr #2
    4ae8:	f71e4913 			; <UNDEFINED> instruction: 0xf71e4913
    4aec:	06007525 	streq	r7, [r0], -r5, lsr #10
    4af0:	25f72432 	ldrbcs	r2, [r7, #1074]!	; 0x432
    4af4:	9f00f71b 	svcls	0x0000f71b
    4af8:	00000116 	andeq	r0, r0, r6, lsl r1
    4afc:	0000011c 	andeq	r0, r0, ip, lsl r1
    4b00:	687d0024 	ldmdavs	sp!, {r2, r5}^
    4b04:	06647d06 	strbteq	r7, [r4], -r6, lsl #26
    4b08:	0c5001f3 	ldfeqe	f0, [r0], {243}	; 0xf3
    4b0c:	40013800 	andmi	r3, r1, r0, lsl #16
    4b10:	00012829 	andeq	r2, r1, r9, lsr #16
    4b14:	1e491316 	mcrne	3, 2, r1, cr9, cr6, {0}
    4b18:	01f325f7 	ldrsheq	r2, [r3, #87]!	; 0x57
    4b1c:	24320651 	ldrtcs	r0, [r2], #-1617	; 0x651
    4b20:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    4b24:	00009f00 	andeq	r9, r0, r0, lsl #30
    4b28:	00000000 	andeq	r0, r0, r0
    4b2c:	00940000 	addseq	r0, r4, r0
    4b30:	00fa0000 	rscseq	r0, sl, r0
    4b34:	00020000 	andeq	r0, r2, r0
    4b38:	00fa9f30 	rscseq	r9, sl, r0, lsr pc
    4b3c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b40:	000b0000 	andeq	r0, fp, r0
    4b44:	00700072 	rsbseq	r0, r0, r2, ror r0
    4b48:	64082534 	strvs	r2, [r8], #-1332	; 0x534
    4b4c:	009f1c1e 	addseq	r1, pc, lr, lsl ip	; <UNPREDICTABLE>
    4b50:	02000001 	andeq	r0, r0, #1
    4b54:	01000001 	tsteq	r0, r1
    4b58:	01025200 	mrseq	r5, R10_usr
    4b5c:	01160000 	tsteq	r6, r0
    4b60:	002a0000 	eoreq	r0, sl, r0
    4b64:	91066891 			; <UNDEFINED> instruction: 0x91066891
    4b68:	00740664 	rsbseq	r0, r4, r4, ror #12
    4b6c:	0138000c 	teqeq	r8, ip
    4b70:	01282940 			; <UNDEFINED> instruction: 0x01282940
    4b74:	49131600 	ldmdbmi	r3, {r9, sl, ip}
    4b78:	7525f71e 	strvc	pc, [r5, #-1822]!	; 0x71e
    4b7c:	24320600 	ldrtcs	r0, [r2], #-1536	; 0x600
    4b80:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    4b84:	34007000 	strcc	r7, [r0], #-0
    4b88:	1e640825 	cdpne	8, 6, cr0, cr4, cr5, {1}
    4b8c:	01169f1c 	tsteq	r6, ip, lsl pc
    4b90:	011c0000 	tsteq	ip, r0
    4b94:	002c0000 	eoreq	r0, ip, r0
    4b98:	7d06687d 	stcvc	8, cr6, [r6, #-500]	; 0xfffffe0c
    4b9c:	01f30664 	mvnseq	r0, r4, ror #12
    4ba0:	38000c50 	stmdacc	r0, {r4, r6, sl, fp}
    4ba4:	28294001 	stmdacs	r9!, {r0, lr}
    4ba8:	13160001 	tstne	r6, #1
    4bac:	25f71e49 	ldrbcs	r1, [r7, #3657]!	; 0xe49
    4bb0:	065101f3 			; <UNDEFINED> instruction: 0x065101f3
    4bb4:	25f72432 	ldrbcs	r2, [r7, #1074]!	; 0x432
    4bb8:	7000f71b 	andvc	pc, r0, fp, lsl r7	; <UNPREDICTABLE>
    4bbc:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    4bc0:	9f1c1e64 	svcls	0x001c1e64
	...
    4bcc:	00000132 	andeq	r0, r0, r2, lsr r1
    4bd0:	00000140 	andeq	r0, r0, r0, asr #2
    4bd4:	40510001 	subsmi	r0, r1, r1
    4bd8:	52000001 	andpl	r0, r0, #1
    4bdc:	04000001 	streq	r0, [r0], #-1
    4be0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4be4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4be8:	00000000 	andeq	r0, r0, r0
    4bec:	00013200 	andeq	r3, r1, r0, lsl #4
    4bf0:	00014200 	andeq	r4, r1, r0, lsl #4
    4bf4:	30000200 	andcc	r0, r0, r0, lsl #4
    4bf8:	0001429f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    4bfc:	00014a00 	andeq	r4, r1, r0, lsl #20
    4c00:	72000b00 	andvc	r0, r0, #0, 22
    4c04:	f0ff0b00 			; <UNDEFINED> instruction: 0xf0ff0b00
    4c08:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    4c0c:	014e9f1a 	cmpeq	lr, sl, lsl pc
    4c10:	01520000 	cmpeq	r2, r0
    4c14:	00070000 	andeq	r0, r7, r0
    4c18:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    4c1c:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    4c20:	00000000 	andeq	r0, r0, r0
    4c24:	76000000 	strvc	r0, [r0], -r0
    4c28:	8c000001 	stchi	0, cr0, [r0], {1}
    4c2c:	01000001 	tsteq	r0, r1
    4c30:	018c5000 	orreq	r5, ip, r0
    4c34:	018e0000 	orreq	r0, lr, r0
    4c38:	00030000 	andeq	r0, r3, r0
    4c3c:	8e9f7470 	mrchi	4, 4, r7, cr15, cr0, {3}
    4c40:	94000001 	strls	r0, [r0], #-1
    4c44:	01000001 	tsteq	r0, r1
    4c48:	01945000 	orrseq	r5, r4, r0
    4c4c:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    4c50:	00040000 	andeq	r0, r4, r0
    4c54:	9f5001f3 	svcls	0x005001f3
	...
    4c60:	00000176 	andeq	r0, r0, r6, ror r1
    4c64:	00000182 	andeq	r0, r0, r2, lsl #3
    4c68:	82510001 	subshi	r0, r1, #1
    4c6c:	a8000001 	stmdage	r0, {r0}
    4c70:	04000001 	streq	r0, [r0], #-1
    4c74:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4c78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c7c:	00000000 	andeq	r0, r0, r0
    4c80:	00017600 	andeq	r7, r1, r0, lsl #12
    4c84:	00019a00 	andeq	r9, r1, r0, lsl #20
    4c88:	52000100 	andpl	r0, r0, #0, 2
    4c8c:	0000019a 	muleq	r0, sl, r1
    4c90:	0000019e 	muleq	r0, lr, r1
    4c94:	01f30004 	mvnseq	r0, r4
    4c98:	019e9f52 	orrseq	r9, lr, r2, asr pc
    4c9c:	01a00000 	moveq	r0, r0
    4ca0:	00010000 	andeq	r0, r1, r0
    4ca4:	0001a052 	andeq	sl, r1, r2, asr r0
    4ca8:	0001a800 	andeq	sl, r1, r0, lsl #16
    4cac:	f3000400 	vshl.u8	d0, d0, d0
    4cb0:	009f5201 	addseq	r5, pc, r1, lsl #4
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	76000000 	strvc	r0, [r0], -r0
    4cbc:	7c000001 	stcvc	0, cr0, [r0], {1}
    4cc0:	02000001 	andeq	r0, r0, #1
    4cc4:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    4cc8:	a8000001 	stmdage	r0, {r0}
    4ccc:	06000001 	streq	r0, [r0], -r1
    4cd0:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    4cd4:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    4cd8:	00000000 	andeq	r0, r0, r0
    4cdc:	76000000 	strvc	r0, [r0], -r0
    4ce0:	7c000001 	stcvc	0, cr0, [r0], {1}
    4ce4:	02000001 	andeq	r0, r0, #1
    4ce8:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    4cec:	82000001 	andhi	r0, r0, #1
    4cf0:	09000001 	stmdbeq	r0, {r0}
    4cf4:	4f007100 	svcmi	0x00007100
    4cf8:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    4cfc:	01829f1a 	orreq	r9, r2, sl, lsl pc
    4d00:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    4d04:	000a0000 	andeq	r0, sl, r0
    4d08:	4f5101f3 	svcmi	0x005101f3
    4d0c:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    4d10:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4d14:	00000000 	andeq	r0, r0, r0
    4d18:	01760000 	cmneq	r6, r0
    4d1c:	01880000 	orreq	r0, r8, r0
    4d20:	00020000 	andeq	r0, r2, r0
    4d24:	01889f30 	orreq	r9, r8, r0, lsr pc
    4d28:	019c0000 	orrseq	r0, ip, r0
    4d2c:	00010000 	andeq	r0, r1, r0
    4d30:	00019c53 	andeq	r9, r1, r3, asr ip
    4d34:	00019e00 	andeq	r9, r1, r0, lsl #28
    4d38:	31000500 	tstcc	r0, r0, lsl #10
    4d3c:	9f240071 	svcls	0x00240071
    4d40:	0000019e 	muleq	r0, lr, r1
    4d44:	000001a4 	andeq	r0, r0, r4, lsr #3
    4d48:	a4530001 	ldrbge	r0, [r3], #-1
    4d4c:	a8000001 	stmdage	r0, {r0}
    4d50:	05000001 	streq	r0, [r0, #-1]
    4d54:	00713100 	rsbseq	r3, r1, r0, lsl #2
    4d58:	00009f24 	andeq	r9, r0, r4, lsr #30
    4d5c:	00000000 	andeq	r0, r0, r0
    4d60:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    4d64:	01b00000 	movseq	r0, r0
    4d68:	00010000 	andeq	r0, r1, r0
    4d6c:	0001b051 	andeq	fp, r1, r1, asr r0
    4d70:	0001b200 	andeq	fp, r1, r0, lsl #4
    4d74:	f3000400 	vshl.u8	d0, d0, d0
    4d78:	b29f5101 	addslt	r5, pc, #1073741824	; 0x40000000
    4d7c:	b6000001 	strlt	r0, [r0], -r1
    4d80:	01000001 	tsteq	r0, r1
    4d84:	01b65100 			; <UNDEFINED> instruction: 0x01b65100
    4d88:	01ba0000 			; <UNDEFINED> instruction: 0x01ba0000
    4d8c:	00040000 	andeq	r0, r4, r0
    4d90:	9f5101f3 	svcls	0x005101f3
	...
    4d9c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    4da0:	000001cc 	andeq	r0, r0, ip, asr #3
    4da4:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
    4da8:	d0000001 	andle	r0, r0, r1
    4dac:	04000001 	streq	r0, [r0], #-1
    4db0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4db4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4db8:	00000000 	andeq	r0, r0, r0
    4dbc:	0001d000 	andeq	sp, r1, r0
    4dc0:	0001e200 	andeq	lr, r1, r0, lsl #4
    4dc4:	51000100 	mrspl	r0, (UNDEF: 16)
    4dc8:	000001e2 	andeq	r0, r0, r2, ror #3
    4dcc:	000001e6 	andeq	r0, r0, r6, ror #3
    4dd0:	01f30004 	mvnseq	r0, r4
    4dd4:	00009f51 	andeq	r9, r0, r1, asr pc
    4dd8:	00000000 	andeq	r0, r0, r0
    4ddc:	01fe0000 	mvnseq	r0, r0
    4de0:	02100000 	andseq	r0, r0, #0
    4de4:	00010000 	andeq	r0, r1, r0
    4de8:	00021051 	andeq	r1, r2, r1, asr r0
    4dec:	00021400 	andeq	r1, r2, r0, lsl #8
    4df0:	f3000400 	vshl.u8	d0, d0, d0
    4df4:	009f5101 	addseq	r5, pc, r1, lsl #2
    4df8:	00000000 	andeq	r0, r0, r0
    4dfc:	2c000000 	stccs	0, cr0, [r0], {-0}
    4e00:	30000002 	andcc	r0, r0, r2
    4e04:	01000002 	tsteq	r0, r2
    4e08:	02305100 	eorseq	r5, r0, #0, 2
    4e0c:	02340000 	eorseq	r0, r4, #0
    4e10:	00040000 	andeq	r0, r4, r0
    4e14:	9f5101f3 	svcls	0x005101f3
	...
    4e20:	00000234 	andeq	r0, r0, r4, lsr r2
    4e24:	00000236 	andeq	r0, r0, r6, lsr r2
    4e28:	36500001 	ldrbcc	r0, [r0], -r1
    4e2c:	3c000002 	stccc	0, cr0, [r0], {2}
    4e30:	04000002 	streq	r0, [r0], #-2
    4e34:	5001f300 	andpl	pc, r1, r0, lsl #6
    4e38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e3c:	00000000 	andeq	r0, r0, r0
    4e40:	00024800 	andeq	r4, r2, r0, lsl #16
    4e44:	00025600 	andeq	r5, r2, r0, lsl #12
    4e48:	51000100 	mrspl	r0, (UNDEF: 16)
    4e4c:	00000256 	andeq	r0, r0, r6, asr r2
    4e50:	0000025a 	andeq	r0, r0, sl, asr r2
    4e54:	01f30004 	mvnseq	r0, r4
    4e58:	00009f51 	andeq	r9, r0, r1, asr pc
    4e5c:	00000000 	andeq	r0, r0, r0
    4e60:	025a0000 	subseq	r0, sl, #0
    4e64:	02680000 	rsbeq	r0, r8, #0
    4e68:	00010000 	andeq	r0, r1, r0
    4e6c:	00026851 	andeq	r6, r2, r1, asr r8
    4e70:	00026c00 	andeq	r6, r2, r0, lsl #24
    4e74:	f3000400 	vshl.u8	d0, d0, d0
    4e78:	009f5101 	addseq	r5, pc, r1, lsl #2
    4e7c:	00000000 	andeq	r0, r0, r0
    4e80:	b4000000 	strlt	r0, [r0], #-0
    4e84:	c6000002 	strgt	r0, [r0], -r2
    4e88:	01000002 	tsteq	r0, r2
    4e8c:	02c65100 	sbceq	r5, r6, #0, 2
    4e90:	02ca0000 	sbceq	r0, sl, #0
    4e94:	00040000 	andeq	r0, r4, r0
    4e98:	9f5101f3 	svcls	0x005101f3
	...
    4ea4:	000002e2 	andeq	r0, r0, r2, ror #5
    4ea8:	000002ea 	andeq	r0, r0, sl, ror #5
    4eac:	ea500001 	b	1404eb8 <__Stack_Size+0x1404ab8>
    4eb0:	ee000002 	cdp	0, 0, cr0, cr0, cr2, {0}
    4eb4:	04000002 	streq	r0, [r0], #-2
    4eb8:	5001f300 	andpl	pc, r1, r0, lsl #6
    4ebc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ec0:	00000000 	andeq	r0, r0, r0
    4ec4:	0002e200 	andeq	lr, r2, r0, lsl #4
    4ec8:	0002e400 	andeq	lr, r2, r0, lsl #8
    4ecc:	30000200 	andcc	r0, r0, r0, lsl #4
    4ed0:	0002e49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    4ed4:	0002ee00 	andeq	lr, r2, r0, lsl #28
    4ed8:	71000a00 	tstvc	r0, r0, lsl #20
    4edc:	1a007300 	bne	21ae4 <__Stack_Size+0x216e4>
    4ee0:	2e302440 	cfnegscs	mvf2, mvf0
    4ee4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ee8:	00000000 	andeq	r0, r0, r0
    4eec:	0002ee00 	andeq	lr, r2, r0, lsl #28
    4ef0:	0002f000 	andeq	pc, r2, r0
    4ef4:	51000100 	mrspl	r0, (UNDEF: 16)
    4ef8:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4efc:	000002f6 	strdeq	r0, [r0], -r6
    4f00:	01f30004 	mvnseq	r0, r4
    4f04:	00009f51 	andeq	r9, r0, r1, asr pc
    4f08:	00000000 	andeq	r0, r0, r0
    4f0c:	02f60000 	rscseq	r0, r6, #0
    4f10:	032c0000 			; <UNDEFINED> instruction: 0x032c0000
    4f14:	00010000 	andeq	r0, r1, r0
    4f18:	00032c50 	andeq	r2, r3, r0, asr ip
    4f1c:	00033000 	andeq	r3, r3, r0
    4f20:	f3000400 	vshl.u8	d0, d0, d0
    4f24:	309f5001 	addscc	r5, pc, r1
    4f28:	32000003 	andcc	r0, r0, #3
    4f2c:	01000003 	tsteq	r0, r3
    4f30:	03325000 	teqeq	r2, #0
    4f34:	03340000 	teqeq	r4, #0
    4f38:	00040000 	andeq	r0, r4, r0
    4f3c:	9f5001f3 	svcls	0x005001f3
	...
    4f48:	000002f6 	strdeq	r0, [r0], -r6
    4f4c:	00000322 	andeq	r0, r0, r2, lsr #6
    4f50:	22510001 	subscs	r0, r1, #1
    4f54:	30000003 	andcc	r0, r0, r3
    4f58:	04000003 	streq	r0, [r0], #-3
    4f5c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f60:	0003309f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    4f64:	00033400 	andeq	r3, r3, r0, lsl #8
    4f68:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4f74:	000002f6 	strdeq	r0, [r0], -r6
    4f78:	0000031a 	andeq	r0, r0, sl, lsl r3
    4f7c:	9f300002 	svcls	0x00300002
    4f80:	0000031a 	andeq	r0, r0, sl, lsl r3
    4f84:	0000031e 	andeq	r0, r0, lr, lsl r3
    4f88:	7131000b 	teqvc	r1, fp
    4f8c:	0a253800 	beq	952f94 <__Stack_Size+0x952b94>
    4f90:	241affff 	ldrcs	pc, [sl], #-4095	; 0xfff
    4f94:	00031e9f 	muleq	r3, pc, lr	; <UNPREDICTABLE>
    4f98:	00032200 	andeq	r2, r3, r0, lsl #4
    4f9c:	31001200 	mrscc	r1, R8_usr
    4fa0:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    4fa4:	1affff0a 	bne	4bd4 <__Stack_Size+0x47d4>
    4fa8:	0a007224 	beq	21840 <__Stack_Size+0x21440>
    4fac:	1a1affff 	bne	6c4fb0 <__Stack_Size+0x6c4bb0>
    4fb0:	0003229f 	muleq	r3, pc, r2	; <UNPREDICTABLE>
    4fb4:	00033000 	andeq	r3, r3, r0
    4fb8:	31001300 	mrscc	r1, LR_irq
    4fbc:	385101f3 	ldmdacc	r1, {r0, r1, r4, r5, r6, r7, r8}^
    4fc0:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    4fc4:	0072241a 	rsbseq	r2, r2, sl, lsl r4
    4fc8:	1affff0a 	bne	4bf8 <__Stack_Size+0x47f8>
    4fcc:	03309f1a 	teqeq	r0, #26, 30	; 0x68
    4fd0:	03340000 	teqeq	r4, #0
    4fd4:	00120000 	andseq	r0, r2, r0
    4fd8:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    4fdc:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    4fe0:	0072241a 	rsbseq	r2, r2, sl, lsl r4
    4fe4:	1affff0a 	bne	4c14 <__Stack_Size+0x4814>
    4fe8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4fec:	00000000 	andeq	r0, r0, r0
    4ff0:	02f60000 	rscseq	r0, r6, #0
    4ff4:	02fe0000 	rscseq	r0, lr, #0
    4ff8:	00020000 	andeq	r0, r2, r0
    4ffc:	02fe9f30 	rscseq	r9, lr, #48, 30	; 0xc0
    5000:	03080000 	movweq	r0, #32768	; 0x8000
    5004:	00090000 	andeq	r0, r9, r0
    5008:	1a4f0071 	bne	13c51d4 <__Stack_Size+0x13c4dd4>
    500c:	1affff0a 	bne	4c3c <__Stack_Size+0x483c>
    5010:	0003089f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    5014:	00031a00 	andeq	r1, r3, r0, lsl #20
    5018:	52000100 	andpl	r0, r0, #0, 2
    501c:	0000031a 	andeq	r0, r0, sl, lsl r3
    5020:	00000324 	andeq	r0, r0, r4, lsr #6
    5024:	30530001 	subscc	r0, r3, r1
    5028:	34000003 	strcc	r0, [r0], #-3
    502c:	01000003 	tsteq	r0, r3
    5030:	00005300 	andeq	r5, r0, r0, lsl #6
    5034:	00000000 	andeq	r0, r0, r0
    5038:	02f60000 	rscseq	r0, r6, #0
    503c:	02fe0000 	rscseq	r0, lr, #0
    5040:	00020000 	andeq	r0, r2, r0
    5044:	02fe9f30 	rscseq	r9, lr, #48, 30	; 0xc0
    5048:	03340000 	teqeq	r4, #0
    504c:	00060000 	andeq	r0, r6, r0
    5050:	ff080074 			; <UNDEFINED> instruction: 0xff080074
    5054:	00009f1a 	andeq	r9, r0, sl, lsl pc
    5058:	00000000 	andeq	r0, r0, r0
    505c:	02f60000 	rscseq	r0, r6, #0
    5060:	03320000 	teqeq	r2, #0
    5064:	00020000 	andeq	r0, r2, r0
    5068:	03329f30 	teqeq	r2, #48, 30	; 0xc0
    506c:	03340000 	teqeq	r4, #0
    5070:	00010000 	andeq	r0, r1, r0
    5074:	00000050 	andeq	r0, r0, r0, asr r0
    5078:	00000000 	andeq	r0, r0, r0
    507c:	00033400 	andeq	r3, r3, r0, lsl #8
    5080:	00033600 	andeq	r3, r3, r0, lsl #12
    5084:	51000100 	mrspl	r0, (UNDEF: 16)
    5088:	00000336 	andeq	r0, r0, r6, lsr r3
    508c:	00000342 	andeq	r0, r0, r2, asr #6
    5090:	01f30004 	mvnseq	r0, r4
    5094:	00009f51 	andeq	r9, r0, r1, asr pc
    5098:	00000000 	andeq	r0, r0, r0
    509c:	03340000 	teqeq	r4, #0
    50a0:	03360000 	teqeq	r6, #0
    50a4:	00050000 	andeq	r0, r5, r0
    50a8:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    50ac:	0003369f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    50b0:	00034200 	andeq	r4, r3, r0, lsl #4
    50b4:	f3000600 	vmax.u8	d0, d0, d0
    50b8:	25385101 	ldrcs	r5, [r8, #-257]!	; 0x101
    50bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    50c0:	00000000 	andeq	r0, r0, r0
    50c4:	00000e00 	andeq	r0, r0, r0, lsl #28
    50c8:	00001400 	andeq	r1, r0, r0, lsl #8
    50cc:	53000100 	movwpl	r0, #256	; 0x100
    50d0:	00000014 	andeq	r0, r0, r4, lsl r0
    50d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    50d8:	04730003 	ldrbteq	r0, [r3], #-3
    50dc:	00001c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    50e0:	00002c00 	andeq	r2, r0, r0, lsl #24
    50e4:	53000100 	movwpl	r0, #256	; 0x100
    50e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    50ec:	0000002e 	andeq	r0, r0, lr, lsr #32
    50f0:	7c730003 	ldclvc	0, cr0, [r3], #-12
    50f4:	00002e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    50f8:	00003100 	andeq	r3, r0, r0, lsl #2
    50fc:	53000100 	movwpl	r0, #256	; 0x100
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
   4:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
   8:	08005b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, lr}
   c:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
	...
  18:	0000012e 	andeq	r0, r0, lr, lsr #2
  1c:	0000014a 	andeq	r0, r0, sl, asr #2
  20:	00000154 	andeq	r0, r0, r4, asr r1
  24:	0000021c 	andeq	r0, r0, ip, lsl r2
	...
  30:	00000960 	andeq	r0, r0, r0, ror #18
  34:	00000962 	andeq	r0, r0, r2, ror #18
  38:	00000964 	andeq	r0, r0, r4, ror #18
  3c:	00000992 	muleq	r0, r2, r9
  40:	00000994 	muleq	r0, r4, r9
  44:	00000996 	muleq	r0, r6, r9
	...
  50:	0000099e 	muleq	r0, lr, r9
  54:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  58:	000009d6 	ldrdeq	r0, [r0], -r6
  5c:	000009d8 	ldrdeq	r0, [r0], -r8
	...
